(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('d3'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('amexio-chart-d3', ['exports', '@angular/core', '@angular/common/http', 'd3', '@angular/common', '@angular/forms'], factory) :
    (factory((global['amexio-chart-d3'] = {}),global.ng.core,global.ng.common.http,null,global.ng.common,global.ng.forms));
}(this, (function (exports,i0,i1,d3,common,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3BaseChartComponent = (function () {
        function AmexioD3BaseChartComponent(charttype) {
            this.onLegendClick = new i0.EventEmitter();
            this.onChartClick = new i0.EventEmitter();
            this.onLineClick = new i0.EventEmitter();
            this.drillableEvent = new i0.EventEmitter();
            this.legend = true;
            this.height = "300";
            this.width = "300";
            this.title = "";
            this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
            this.colorIndex = 0;
            this.colors = [];
            this.charttype = charttype;
            this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
            this.componentId = this.charttype + "-" + this.generateId();
        }
        /**
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.initializeData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.data.forEach(function (element) {
                    element.color = _this.getColor(element);
                });
            };
        /**
         * @param {?} data
         * @param {?} drillablekeys
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.getMultipleDrillbleKeyData = /**
         * @param {?} data
         * @param {?} drillablekeys
         * @return {?}
         */
            function (data, drillablekeys) {
                /** @type {?} */
                var nodeObject = {};
                if (data) {
                    for (var index = 0; index < drillablekeys.length; index++) {
                        /** @type {?} */
                        var element = drillablekeys[index];
                        try {
                            for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                                if (key == element) {
                                    nodeObject[key] = value;
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_b && !_b.done && (_d = _a.return))
                                    _d.call(_a);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    return nodeObject;
                }
                var e_1, _d;
            };
        /**
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.generateId = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var id = "";
                for (var i = 0; i < 5; i++) {
                    id = id + this.possible
                        .charAt(Math.floor(Math.random() * this.possible.length));
                }
                id = id + "-" + new Date().getTime();
                return id;
            };
        /**
         * @param {?} object
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.getColor = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                if (object.color) {
                    return object.color;
                }
                else if (this.colors.length > this.colorIndex) {
                    /** @type {?} */
                    var color = this.colors[this.colorIndex];
                    this.colorIndex++;
                    return color;
                }
                else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
                    this.colorIndex = 0;
                    /** @type {?} */
                    var color = this.colors[this.colorIndex];
                    return color;
                }
                else {
                    /** @type {?} */
                    var color = this.predefinedcolors[this.colorIndex];
                    this.colorIndex++;
                    return color;
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.legendClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onLegendClick.emit(node);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.chartClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onChartClick.emit(node);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.comboLineClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onLineClick.emit(node);
            };
        /**
         * @param {?} ref
         * @param {?} node
         * @param {?} event
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.fordrillableClick = /**
         * @param {?} ref
         * @param {?} node
         * @param {?} event
         * @return {?}
         */
            function (ref, node, event) {
                this.drillableEvent.emit({ ref: ref, node: node, event: event });
            };
        /**
         * @param {?} d3
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.toolTip = /**
         * @param {?} d3
         * @return {?}
         */
            function (d3$$1) {
                return d3$$1.select("body")
                    .append("div")
                    .attr('id', 'tooltipid')
                    .attr('class', 'amexiod3tooltip')
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");
            };
        /**
         * @param {?} tooltipdata
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.toolTipContent = /**
         * @param {?} tooltipdata
         * @return {?}
         */
            function (tooltipdata) {
                /** @type {?} */
                var tooltiphtml = "<table>";
                for (var key in tooltipdata) {
                    if (tooltipdata.hasOwnProperty(key)) {
                        /** @type {?} */
                        var value = tooltipdata[key];
                        tooltiphtml = tooltiphtml + "<tr>";
                        //------------------
                        //   tooltiphtml = tooltiphtml + "<td>";
                        //   tooltiphtml = tooltiphtml + key+':';
                        //   tooltiphtml = tooltiphtml + "</td>";
                        //------------------
                        tooltiphtml = tooltiphtml + "<td>";
                        tooltiphtml = tooltiphtml + value;
                        tooltiphtml = tooltiphtml + "</td>";
                        tooltiphtml = tooltiphtml + "</tr>";
                    }
                }
                tooltiphtml = tooltiphtml + "</table>";
                return tooltiphtml;
            };
        /**
         * @param {?} legend
         * @param {?} xaxis
         * @param {?} yaxis
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.toolTipWithLegendandAxis = /**
         * @param {?} legend
         * @param {?} xaxis
         * @param {?} yaxis
         * @return {?}
         */
            function (legend, xaxis, yaxis) {
                /** @type {?} */
                var tooltiphtml = "<div>";
                tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
                tooltiphtml = tooltiphtml + legend + "</b> ";
                tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
                tooltiphtml = tooltiphtml + "</div>";
                return tooltiphtml;
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        AmexioD3BaseChartComponent.prototype.toolTipForBar = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var tooltiphtml = "<div>";
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        /** @type {?} */
                        var sideStyle = "float:left";
                        tooltiphtml = tooltiphtml + "<div>";
                        tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
                        tooltiphtml = tooltiphtml + "</div>";
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return tooltiphtml;
                var e_2, _d;
            };
        AmexioD3BaseChartComponent.propDecorators = {
            onLegendClick: [{ type: i0.Output }],
            onChartClick: [{ type: i0.Output }],
            onLineClick: [{ type: i0.Output }],
            drillableEvent: [{ type: i0.Output }],
            data: [{ type: i0.Input, args: ['data',] }],
            httpurl: [{ type: i0.Input, args: ['http-url',] }],
            httpmethod: [{ type: i0.Input, args: ['http-method',] }],
            legend: [{ type: i0.Input, args: ['legend',] }],
            colors: [{ type: i0.Input, args: ['color',] }],
            height: [{ type: i0.Input, args: ['height',] }],
            width: [{ type: i0.Input, args: ['width',] }],
            title: [{ type: i0.Input, args: ['title',] }]
        };
        return AmexioD3BaseChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CommanDataService = (function () {
        function CommanDataService(http) {
            this.http = http;
        }
        /**
         * @param {?} serviceUrl
         * @param {?} methodType
         * @return {?}
         */
        CommanDataService.prototype.fetchUrlData = /**
         * @param {?} serviceUrl
         * @param {?} methodType
         * @return {?}
         */
            function (serviceUrl, methodType) {
                /** @type {?} */
                var requestJson = {};
                /** @type {?} */
                var headers = new i1.HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
                if (methodType === 'post') {
                    return this.http.post(serviceUrl, requestJson, { headers: headers });
                }
                else if (methodType === 'get') {
                    return this.http.get(serviceUrl, { headers: headers });
                }
            };
        /**
         * @param {?} serviceUrl
         * @param {?} methodType
         * @param {?} requestJson
         * @return {?}
         */
        CommanDataService.prototype.postfetchData = /**
         * @param {?} serviceUrl
         * @param {?} methodType
         * @param {?} requestJson
         * @return {?}
         */
            function (serviceUrl, methodType, requestJson) {
                /** @type {?} */
                var headers = new i1.HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
                if (methodType === 'post') {
                    return this.http.post(serviceUrl, requestJson, { headers: headers });
                }
                else if (methodType === 'get') {
                    return this.http.get(serviceUrl, { headers: headers });
                }
            };
        CommanDataService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        CommanDataService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ CommanDataService.ngInjectableDef = i0.defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(i0.inject(i1.HttpClient)); }, token: CommanDataService, providedIn: "root" });
        return CommanDataService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3DounutChartComponent = (function (_super) {
        __extends(AmexioD3DounutChartComponent, _super);
        function AmexioD3DounutChartComponent(myservice, cdf) {
            var _this = _super.call(this, 'DONUTCHART') || this;
            _this.myservice = myservice;
            _this.cdf = cdf;
            _this.pie = false;
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.level = 0;
            _this.drillableFlag = true;
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.legendArray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.drawChart();
                                _this.data = _this.getResponseData(resp_1);
                                //this.transformData(this.data);
                                _this.initializeData();
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(_this.data);
                            _this.transformData(_this.data);
                            _this.initializeData();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
                else {
                    this.fetchData(this.drillData);
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                /** @type {?} */
                var resp;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        resp = response;
                        _this.response = resp;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.drillableFlag = true;
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.formLegendData();
                //this.transformData(this.data);
                //  this.data = this.transformeddata;
                /** @type {?} */
                var outerRadius = 0;
                /** @type {?} */
                var innerRadius = 0;
                outerRadius = this.svgwidth / 2;
                innerRadius = this.svgwidth / 4;
                if (this.pie) {
                    innerRadius = 0;
                }
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var arc = d3.arc()
                    .outerRadius(outerRadius)
                    .innerRadius(innerRadius);
                /** @type {?} */
                var pie = d3.pie()
                    .value(function (d) {
                    return d[Object.keys(d)[1]];
                    //  return d.value
                });
                this.svg = d3.select("#" + this.componentId)
                    .append('g')
                    .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
                    .selectAll('path')
                    .data(pie(this.data))
                    .enter();
                /** @type {?} */
                var path = this.svg.append('path')
                    .attr('d', arc)
                    .attr('fill', function (d, i) {
                    if (d.data.color) {
                        return d.data.color;
                    }
                    else {
                        return "black";
                    }
                    //  return (d && d.data && d.data.color) ? d.data.color : "black"
                })
                    .attr('cursor', 'pointer')
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return tooltip.html(_this.formTooltipData(d.data)
                    //  this.formLegendData(d.data)
                    // this.toolTipContent(d.data)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.DonutChartClick(d.data);
                    _this.fordrillableClick(_this, d.data, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d.data);
                });
                if (this.labelflag) {
                    /** @type {?} */
                    var text = this.svg.append("text")
                        .transition()
                        .duration(200)
                        .attr("transform", function (d) {
                        return "translate(" + arc.centroid(d) + ")";
                    })
                        .attr("text-anchor", "middle")
                        .text(function (d) {
                        return d.data[Object.keys(d.data)[1]];
                        //return d.data.value;
                    })
                        .style('fill', function (d) {
                        if (this.labelcolor.length > 0) {
                            return this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                        // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
                    })
                        .style('font-size', '12px');
                }
            };
        /**
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendArray = [];
                this.data.forEach(function (element) {
                    /** @type {?} */
                    var legendobject = {};
                    legendobject['label'] = element[Object.keys(element)[0]];
                    legendobject['value'] = element[Object.keys(element)[1]];
                    legendobject['color'] = element.color;
                    _this.legendArray.push(legendobject);
                });
            };
        /**
         * @param {?} legendevent
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.onDonutLegendClick = /**
         * @param {?} legendevent
         * @return {?}
         */
            function (legendevent) {
                /** @type {?} */
                var obj = {};
                //  obj['label'] = legendevent.label;
                //  obj['value'] = legendevent.value 
                obj[this.keyArray[0]] = legendevent.label;
                obj[this.keyArray[1]] = legendevent.value;
                //delete event.color;
                this.legendClick(obj);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        }); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                }); //outer for loop ends
                this.data = this.transformeddata;
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color' && key != 'textcolor') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_2, _d;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AmexioD3DounutChartComponent.prototype.DonutChartClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.chartClick(object);
                var e_3, _d;
            };
        AmexioD3DounutChartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-donut',
                        template: "<div *ngIf=\"drillableFlag\" #chartId>\n\n\n    <div colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \">\n        {{title}}\n    </div>\n        <div style=\"display: flex;flex-direction: row\">\n            <svg preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 300 300\" [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n            <div>\n\n           <div style=\"display: block; padding: 1%;\">\n                    <amexio-d3-legend *ngIf=\"legend\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n          </div>\n   </div>\n    "
                    },] },
        ];
        AmexioD3DounutChartComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: i0.ChangeDetectorRef }
            ];
        };
        AmexioD3DounutChartComponent.propDecorators = {
            pie: [{ type: i0.Input, args: ['pie',] }],
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            drillid: [{ type: i0.ViewChild, args: ['drillid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillData: [{ type: i0.Input }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }]
        };
        return AmexioD3DounutChartComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3PieChartComponent = (function () {
        function AmexioD3PieChartComponent() {
            this.onLegendClick = new i0.EventEmitter();
            this.onChartClick = new i0.EventEmitter();
            this.drillableEvent = new i0.EventEmitter();
            this.legend = true;
            this.colors = [];
            this.width = "300";
            this.height = "300";
            this.title = "";
            this.level = 0;
            this.labelcolor = "black";
            this.labelflag = false;
            this.drillableFlag = true;
        }
        /**
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.legendClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onLegendClick.emit(node);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.chartClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onChartClick.emit(node);
            };
        /**
         * @param {?} ref
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.fordrillableClick = /**
         * @param {?} ref
         * @return {?}
         */
            function (ref) {
                this.drillableEvent.emit(ref);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.drillData = data;
            };
        /**
         * @return {?}
         */
        AmexioD3PieChartComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                this.donutref.drillableFlag = true;
                this.donutref.drawChart();
            };
        AmexioD3PieChartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-pie',
                        template: "<div   *ngIf=\"drillableFlag\">\n<amexio-d3-chart-donut #id (onLegendClick)=\"legendClick($event)\" \n                       (onChartClick)=\"chartClick($event)\" \n                       (drillableEvent)=\" fordrillableClick($event)\"\n                        [height]=\"height\"\n                        [width]=\"width\"\n                        [title]=\"title\"\n                        [data] = \"data\"\n                        [pie]  = \"true\"\n                        [color]=\"colors\"\n                        [http-url]=\"httpurl\"\n                        [http-method]=\"httpmethod\"\n                        [data-reader]=\"datareader\"\n                        [label]=\"labelflag\"\n                        [label-color]=\"labelcolor\"\n                        [level]=\"level\"\n                        [target]=\"target\"\n                        [drillable-data]=\"drillabledatakey\"\n                        [drillData]=\"drillData\">\n</amexio-d3-chart-donut>\n</div>\n"
                    },] },
        ];
        AmexioD3PieChartComponent.propDecorators = {
            data: [{ type: i0.Input, args: ['data',] }],
            onLegendClick: [{ type: i0.Output }],
            onChartClick: [{ type: i0.Output }],
            drillableEvent: [{ type: i0.Output }],
            donutref: [{ type: i0.ViewChild, args: ['id',] }],
            legend: [{ type: i0.Input }],
            colors: [{ type: i0.Input, args: ['color',] }],
            width: [{ type: i0.Input, args: ['width',] }],
            height: [{ type: i0.Input, args: ['height',] }],
            title: [{ type: i0.Input }],
            httpurl: [{ type: i0.Input, args: ['http-url',] }],
            httpmethod: [{ type: i0.Input, args: ['http-method',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }]
        };
        return AmexioD3PieChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3Legend = (function () {
        function AmexioD3Legend() {
            this.horizontal = false;
            this.onClick = new i0.EventEmitter();
        }
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3Legend.prototype.onLegendClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.onClick.emit(node);
            };
        AmexioD3Legend.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-legend',
                        template: "<div style =\" width: 100% ; padding-left: 20px; padding-top: 8px; \">\n<table *ngIf=\"!horizontal\" style=\"height: 100%;\">\n    <tr *ngFor = \"let node of data\" style=\"cursor: pointer;\" (click)=\"onLegendClick(node)\">\n        <td style=\"height: 10px; width: 23px; padding-left: 2px;\"\n            [ngStyle]=\"{'background-color': node.color}\"></td>\n        <td>{{node.label}}</td>\n    </tr>\n</table>\n</div>\n\n<table *ngIf=\"horizontal\" style=\"height: 100%;\">\n    <tr>\n        <td *ngFor = \"let node of data\" \n                    (click)=\"onLegendClick(node)\" \n                    style=\"cursor: pointer;\">\n            \n            <div style=\" display: inline-block; display: inline-block; padding: 2px;\">\n                    <div style=\" width: 10px; display: inline-block; padding: 2px; \" \n                    [ngStyle]=\"{'background-color': node.color}\"></div>\n                {{node.label}}\n            </div>\n        </td>\n        \n    </tr>\n</table>"
                    },] },
        ];
        AmexioD3Legend.ctorParameters = function () { return []; };
        AmexioD3Legend.propDecorators = {
            data: [{ type: i0.Input, args: ['data',] }],
            horizontal: [{ type: i0.Input, args: ['horizontal',] }],
            onClick: [{ type: i0.Output }]
        };
        return AmexioD3Legend;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DeviceQueryService = (function () {
        function DeviceQueryService(platformId) {
            this.platformId = platformId;
            this.rules = {
                print: 'print',
                screen: 'screen',
                phone: '(max-width: 767px)',
                tablet: '(min-width: 768px) and (max-width: 1024px)',
                desktop: '(min-width: 1025px)',
                portrait: '(orientation: portrait)',
                landscape: '(orientation: landscape)',
                retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
            };
            this.Check = function (mq) {
                if (common.isPlatformBrowser(this.platformId)) {
                    if (!mq) {
                        return;
                    }
                    return window.matchMedia(mq).matches;
                }
                else {
                    return;
                }
            };
            this.IsTablet = function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.tablet).matches;
                }
                else {
                    return null;
                }
            };
            this.IsDesktop = function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.desktop).matches;
                }
                else {
                    return null;
                }
            };
            this.IsPortrait = function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.portrait).matches;
                }
                else {
                    return null;
                }
            };
            this.IsLandscape = function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.landscape).matches;
                }
                else {
                    return null;
                }
            };
            this.IsRetina = function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.retina).matches;
                }
                else {
                    return null;
                }
            };
            this.browserWindow = function () {
                return window;
            };
        }
        /**********************************************
         METHODS FOR CHECKING TYPE
         **********************************************/
        /**
         * *******************************************
         * METHODS FOR CHECKING TYPE
         * ********************************************
         * @return {?}
         */
        DeviceQueryService.prototype.IsPhone = /**
         * *******************************************
         * METHODS FOR CHECKING TYPE
         * ********************************************
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    return window.matchMedia(this.rules.phone).matches;
                }
                else {
                    return null;
                }
            };
        /**********************************************
         EVENT LISTENERS BY TYPE
         **********************************************/
        /**
         * *******************************************
         * EVENT LISTENERS BY TYPE
         * ********************************************
         * @param {?} callBack
         * @return {?}
         */
        DeviceQueryService.prototype.OnPhone = /**
         * *******************************************
         * EVENT LISTENERS BY TYPE
         * ********************************************
         * @param {?} callBack
         * @return {?}
         */
            function (callBack) {
                if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var mql = window.matchMedia(this.rules.phone);
                    this.mqlMethod(callBack, mql);
                }
            };
        /**
         * @param {?} callBack
         * @return {?}
         */
        DeviceQueryService.prototype.OnTablet = /**
         * @param {?} callBack
         * @return {?}
         */
            function (callBack) {
                if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var mql = window.matchMedia(this.rules.tablet);
                    this.mqlMethod(callBack, mql);
                }
            };
        /**
         * @param {?} callBack
         * @return {?}
         */
        DeviceQueryService.prototype.OnDesktop = /**
         * @param {?} callBack
         * @return {?}
         */
            function (callBack) {
                if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var mql = window.matchMedia(this.rules.desktop);
                    this.mqlMethod(callBack, mql);
                }
            };
        /**
         * @param {?} callBack
         * @return {?}
         */
        DeviceQueryService.prototype.OnPortrait = /**
         * @param {?} callBack
         * @return {?}
         */
            function (callBack) {
                if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var mql = window.matchMedia(this.rules.portrait);
                    this.mqlMethod(callBack, mql);
                }
            };
        /**
         * @param {?} callBack
         * @return {?}
         */
        DeviceQueryService.prototype.OnLandscape = /**
         * @param {?} callBack
         * @return {?}
         */
            function (callBack) {
                if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var mql = window.matchMedia(this.rules.landscape);
                    this.mqlMethod(callBack, mql);
                }
            };
        /**
         * @param {?} callBack
         * @param {?} mql
         * @return {?}
         */
        DeviceQueryService.prototype.mqlMethod = /**
         * @param {?} callBack
         * @param {?} mql
         * @return {?}
         */
            function (callBack, mql) {
                mql.addListener(function (mql1) {
                    if (mql1.matches) {
                        callBack(mql);
                    }
                });
            };
        DeviceQueryService.decorators = [
            { type: i0.Injectable },
        ];
        DeviceQueryService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        return DeviceQueryService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3BarChartComponent = (function (_super) {
        __extends(AmexioD3BarChartComponent, _super);
        function AmexioD3BarChartComponent(myservice, cdf, device) {
            var _this = _super.call(this, 'bar') || this;
            _this.myservice = myservice;
            _this.cdf = cdf;
            _this.device = device;
            _this.svgheight = 300;
            _this.horizontal = false;
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.resizeflag = false;
            _this.drillableFlag = true;
            _this.colorflag = false;
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.legendArray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.drawChart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(_this.data);
                            _this.transformData(_this.data);
                            _this.initializeData();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                /** @type {?} */
                var resp;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        resp = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.formLegendData();
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                this.svg = d3.select("#" + this.componentId);
                /** @type {?} */
                var margin = { top: 20, right: 60, bottom: 30, left: 60 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = this.svgheight - margin.top - margin.bottom;
                //const height = +svg.attr("height") - margin.top - margin.bottom;
                /** @type {?} */
                var x;
                /** @type {?} */
                var y;
                /** @type {?} */
                var g = this.svg.append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                if (this.horizontal == false) {
                    x = d3.scaleBand()
                        .rangeRound([0, width])
                        .padding(0.1);
                    y = d3.scaleLinear()
                        .rangeRound([height, 0]);
                    //setting content for x and y axis
                    x.domain(this.data.map(function (d) {
                        return d[Object.keys(d)[0]];
                        //    return d.label
                    }));
                    y.domain([0, d3.max(this.data, function (d) {
                            return d[Object.keys(d)[1]];
                            //return d.value;
                        })]);
                    // add x axis to svg
                    if (this.device.IsDesktop() == true) {
                        g.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x));
                    }
                    else {
                        g.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x)).
                            selectAll("text")
                            .attr("y", 0)
                            .attr("x", 9)
                            .attr("dy", ".35em")
                            .attr("transform", "rotate(60)")
                            .style("text-anchor", "start");
                    }
                    //add y axis to svg
                    g.append("g")
                        .call(d3.axisLeft(y)
                        .ticks(10));
                    this.plotLine(g, x, y, height, width);
                    //add bar chart
                    g.selectAll(".bar")
                        .data(this.data)
                        .enter()
                        .append("rect")
                        .attr("class", "bar")
                        .attr("x", function (d) {
                        return x(d[Object.keys(d)[0]]);
                        // return x(d.label); 
                    })
                        .attr("y", function (d) {
                        return y(d[Object.keys(d)[1]]);
                        // return y(d.value); 
                    })
                        .attr("cursor", "pointer")
                        .attr("width", x.bandwidth())
                        .attr("height", function (d) { return height - y(d[Object.keys(d)[1]]); })
                        .style("fill", function (d) {
                        // return "blue";
                        return d.color;
                    })
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipData(d)
                        //  this.toolTipForBar(d)
                        // this.toolTipContent(d)
                        )
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.barChartClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                        //this.chartClick(d);
                    });
                    if (this.labelflag) {
                        /** @type {?} */
                        var yTextPadding = 40;
                        this.svg.selectAll(".label")
                            .data(this.data)
                            .enter()
                            .append("text")
                            .style("font-weight", "bold")
                            .style("font-size", "1vw")
                            .attr("text-anchor", "middle")
                            .attr("fill", function (d) {
                            if (_this.labelcolor.length > 0) {
                                return _this.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        })
                            .attr("x", function (d, i) {
                            return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                        })
                            .attr("y", function (d, i) {
                            return y(d[Object.keys(d)[1]]) + yTextPadding;
                        })
                            .text(function (d) {
                            return d[Object.keys(d)[1]];
                        });
                    } //if ends fr 
                }
                else if (this.horizontal == true) {
                    x = d3.scaleLinear()
                        .rangeRound([0, width]);
                    y = d3.scaleBand()
                        .rangeRound([height, 0]).padding(0.1);
                    //setting content for x and y axis
                    x.domain([0, d3.max(this.data, function (d) {
                            return parseInt(d[Object.keys(d)[1]]
                            // d.value
                            );
                        })]);
                    // d[Object.keys(d)[1]]
                    y.domain(this.data.map(function (d) {
                        return d[Object.keys(d)[0]];
                        //return d.label;
                    }));
                    // add x axis to svg
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x).ticks(10));
                    //add y axis to svg
                    g.append("g")
                        .call(d3.axisLeft(y));
                    this.plotLine(g, x, y, height, width);
                    //add bar chart
                    g.selectAll(".bar")
                        .data(this.data)
                        .enter()
                        .append("rect")
                        .attr("class", "bar")
                        .attr("x", 0)
                        .attr("y", function (d) {
                        return y(d[Object.keys(d)[0]]
                        // d.label
                        );
                    })
                        .attr("cursor", "pointer")
                        .attr("width", function (d) {
                        return x(d[Object.keys(d)[1]]
                        // d.value
                        );
                    })
                        .attr("height", y.bandwidth())
                        .style("fill", function (d) { return d.color; })
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipData(d)
                        // this.formLegendData(d)
                        // this.toolTipContent(d)
                        )
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.barChartClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                        //this.chartClick(d);
                    });
                    if (this.labelflag) {
                        /** @type {?} */
                        var yTextPadding_1 = 40;
                        this.svg.selectAll(".label")
                            .data(this.data)
                            .enter()
                            .append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("vertical-align", "middle")
                            .attr("margin-top", margin.top)
                            .attr("fill", function (d) {
                            if (_this.labelcolor.length > 0) {
                                return _this.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        })
                            .attr("x", function (d, i) {
                            return x(d[Object.keys(d)[1]]) + yTextPadding_1;
                        })
                            .attr("y", function (d, i) {
                            return y(d[Object.keys(d)[0]])
                                + margin.top + y.bandwidth() / 2;
                        })
                            .text(function (d) {
                            return d[Object.keys(d)[1]];
                        });
                    }
                } //else ends(horizontal bar logic ends)
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_2, _d;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        }); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                }); //outer for loop ends
                this.data = this.transformeddata;
            };
        /**
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendArray = [];
                this.data.forEach(function (element) {
                    /** @type {?} */
                    var legendobject = {};
                    legendobject['label'] = element[Object.keys(element)[0]];
                    legendobject['value'] = element[Object.keys(element)[1]];
                    legendobject['color'] = element.color;
                    _this.legendArray.push(legendobject);
                });
            };
        /**
         * @param {?} legendevent
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.onBarLegendClick = /**
         * @param {?} legendevent
         * @return {?}
         */
            function (legendevent) {
                /** @type {?} */
                var obj = {};
                //  obj['label'] = legendevent.label;
                //  obj['value'] = legendevent.value;
                obj[this.keyArray[0]] = legendevent.label;
                obj[this.keyArray[1]] = legendevent.value;
                //obj[legendevent.label] = legendevent.value;
                //delete event.color;
                this.legendClick(obj);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.barChartClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.chartClick(object);
                var e_3, _d;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3BarChartComponent.prototype.resize = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.cdf.detectChanges();
                this.plotD3Chart();
            };
        AmexioD3BarChartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-bar',
                        template: "<div *ngIf=\"drillableFlag\"  #divid (window:resize)=\"resize($event)\" >\n<table style=\"width: 100%;\" position=\" relative\" #chartId >\n    <tr>\n        <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\" \n          >\n            </svg>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n            </amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n</div>"
                    },] },
        ];
        AmexioD3BarChartComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: i0.ChangeDetectorRef },
                { type: DeviceQueryService }
            ];
        };
        AmexioD3BarChartComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            horizontal: [{ type: i0.Input }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            drillid: [{ type: i0.ViewChild, args: ['drillid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }]
        };
        return AmexioD3BarChartComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3BaseLineComponent = (function (_super) {
        __extends(AmexioD3BaseLineComponent, _super);
        function AmexioD3BaseLineComponent(deviceQueryService) {
            var _this = _super.call(this, 'line') || this;
            _this.deviceQueryService = deviceQueryService;
            _this.svgheight = 300;
            _this.hScale = true;
            _this.vScale = false;
            return _this;
        }
        Object.defineProperty(AmexioD3BaseLineComponent.prototype, "data", {
            get: /**
             * @return {?}
             */ function () {
                return this._data;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._data = v;
                this.createXYAxisData();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AmexioD3BaseLineComponent.prototype.createXYAxisData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.xaxisdata = [];
                this.yaxisdata = [];
                this.multiseriesdata = [];
                this.legenddata = [];
                this.legends = [];
                this.xaxisname = this.data[0][0].label;
                /** @type {?} */
                var msdarray = [];
                for (var index = 0; index < this._data[0].length; index++) {
                    /** @type {?} */
                    var legend = this._data[0][index];
                    msdarray[index] = [];
                    this.legenddata.push({ 'label': legend.label, 'color': this.predefinedcolors[index + 1] });
                    if (index > 0)
                        this.legends.push({ 'label': legend.label, 'color': this.predefinedcolors[index] });
                }
                /** @type {?} */
                var i = 0;
                this._data.forEach(function (object) {
                    if (i > 0) {
                        /** @type {?} */
                        var j_1 = 0;
                        object.forEach(function (a) {
                            if (j_1 === 0) {
                                _this.xaxisdata.push({ 'label': a, 'value': a });
                            }
                            else {
                                _this.yaxisdata.push({ 'label': a, 'value': a });
                            }
                            msdarray[j_1].push(a);
                            j_1++;
                        });
                    }
                    i++;
                });
                for (var index = 0; index < msdarray.length; index++) {
                    /** @type {?} */
                    var element = msdarray[index];
                    if (index > 0) {
                        /** @type {?} */
                        var md = [];
                        for (var j = 0; j < element.length; j++) {
                            /** @type {?} */
                            var v = element[j];
                            md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].value, 'value': v });
                        }
                        this.multiseriesdata.push(md);
                        this.legends[index - 1].data = md;
                    }
                }
            };
        /**
         * @return {?}
         */
        AmexioD3BaseLineComponent.prototype.initChart = /**
         * @return {?}
         */
            function () {
                this.svg = d3.select("#" + this.componentId);
                /** @type {?} */
                var margin = { top: 40, right: 20, bottom: 30, left: 40 };
                /** @type {?} */
                var width = +this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = +this.svgheight - margin.top - margin.bottom;
                /** @type {?} */
                var g = this.svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                /** @type {?} */
                var x = d3.scaleBand()
                    .rangeRound([0, width])
                    .padding(0.1);
                /** @type {?} */
                var y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                x.domain(this.xaxisdata.map(function (d) { return d.label; }));
                y.domain([0, d3.max(this.yaxisdata, function (d) { return d.value; })]);
                //add axis 
                if (this.deviceQueryService.IsDesktop() == true) {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .attr("color", "grey")
                        .call(d3.axisBottom(x));
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .attr("color", "grey")
                        .call(d3.axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                g.append("g")
                    .attr("color", "grey")
                    .call(d3.axisLeft(y));
                return {
                    g: g, x: x, y: y, height: height, width: width
                };
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        AmexioD3BaseLineComponent.prototype.plotScale = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.vScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .attr('transform', 'translate(0,' + height + ')')
                        .call(d3.axisBottom(x).
                        tickSize(-this.width).tickFormat(''));
                }
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @param {?} node
         * @return {?}
         */
        AmexioD3BaseLineComponent.prototype.legendClick = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                // const legendNode = JSON.parse(JSON.stringify(node));
                // delete legendNode.color;
                // legendNode.data.forEach(element => {
                //     delete element.legend;
                // });
                var _this = this;
                // const legendNode = JSON.parse(JSON.stringify(node));
                // delete legendNode.color;
                // legendNode.data.forEach(element => {
                //     delete element.legend;
                // });
                /** @type {?} */
                var obj = {};
                obj["label"] = node.label;
                /** @type {?} */
                var data = [];
                node.data.forEach(function (element) {
                    /** @type {?} */
                    var object = {};
                    object[element.legend] = element.value;
                    object[_this.xaxisname] = element.label;
                    //   object[element.label] = element.value;
                    data.push(object);
                });
                obj["data"] = data;
                this.onLegendClick.emit(obj);
                // this.onLegendClick.emit(legendNode);
            };
        AmexioD3BaseLineComponent.propDecorators = {
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            vScale: [{ type: i0.Input, args: ['vertical-scale',] }],
            httpurl: [{ type: i0.Input, args: ['data',] }, { type: i0.Input, args: ['http-url',] }],
            httpmethod: [{ type: i0.Input, args: ['http-method',] }]
        };
        return AmexioD3BaseLineComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioD3LineComponent = (function (_super) {
        __extends(AmexioD3LineComponent, _super);
        function AmexioD3LineComponent(deviceQueryService, myservice) {
            var _this = _super.call(this, deviceQueryService) || this;
            _this.deviceQueryService = deviceQueryService;
            _this.myservice = myservice;
            _this.level = 0;
            _this.labelflag = false;
            _this.labelcolor = "black";
            _this.drillabledatakey = [];
            _this.drillableFlag = true;
            _this.resizeflag = false;
            return _this;
        }
        /**
         * @return {?}
         */
        AmexioD3LineComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(_this.data);
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AmexioD3LineComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                /** @type {?} */
                var resp;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        resp = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        AmexioD3LineComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @return {?}
         */
        AmexioD3LineComponent.prototype.resize = /**
         * @return {?}
         */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.plotD3Chart();
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        AmexioD3LineComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        AmexioD3LineComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var linechart = this.initChart();
                this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
                this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
                for (var index = 0; index < this.multiseriesdata.length; index++) {
                    this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
                }
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @param {?} data
         * @param {?} tooltip
         * @param {?} i
         * @return {?}
         */
        AmexioD3LineComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @param {?} data
         * @param {?} tooltip
         * @param {?} i
         * @return {?}
         */
            function (g, x, y, height, width, data, tooltip, i) {
                var _this = this;
                /** @type {?} */
                var line = d3.line()
                    .x(function (d) { return x(d.label); })
                    .y(function (d) { return y(d.value); });
                g.append("path")
                    .datum(data)
                    .attr("fill", "none")
                    .attr("stroke", this.predefinedcolors[i])
                    .attr("stroke-width", 1.5)
                    .attr("d", line);
                g.selectAll('dot')
                    .data(data)
                    .enter()
                    .append('circle')
                    .attr("cx", function (d) { return x(d.label); })
                    .attr("cy", function (d) { return y(d.value); })
                    .attr('r', 2)
                    .attr("cursor", "pointer")
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return tooltip.html(_this.callTooltip(d)
                    //  this.toolTipForLine(d)
                    //  this.toolTipWithLegendandAxis(d.legend,d.label,d.value)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.lineChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                });
                //lets plot labels here
                if (this.labelflag) {
                    g.selectAll('label')
                        .data(data)
                        .enter()
                        .append('text')
                        .style("font-weight", "bold")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .attr("x", function (d, i) {
                        return x(d.label);
                    })
                        .attr("y", function (d, i) {
                        return y(d.value) - 10;
                    })
                        .text(function (d) {
                        return d.value;
                    });
                }
            };
        /**
         * @param {?} d
         * @return {?}
         */
        AmexioD3LineComponent.prototype.lineChartClick = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                /** @type {?} */
                var obj = {};
                obj[d.legend] = d.value;
                obj[this.xaxisname] = d.label;
                this.chartClick(obj);
            };
        /**
         * @param {?} tooltipdata
         * @return {?}
         */
        AmexioD3LineComponent.prototype.callTooltip = /**
         * @param {?} tooltipdata
         * @return {?}
         */
            function (tooltipdata) {
                /** @type {?} */
                var obj = {};
                obj[tooltipdata.legend] = tooltipdata.value;
                obj[this.xaxisname] = tooltipdata.label;
                return this.toolTipForBar(obj);
            };
        AmexioD3LineComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-line',
                        template: "\n<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\"> \n<table style=\"width: 100%;\" #chartId  >\n        <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"height\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>            \n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                        [data]=\"legends\" style=\"height:100%;\">\n                    </amexio-d3-legend>\n            </td>\n        \n        </tr>\n</table>\n</div>\n    "
                    },] },
        ];
        AmexioD3LineComponent.ctorParameters = function () {
            return [
                { type: DeviceQueryService },
                { type: CommanDataService }
            ];
        };
        AmexioD3LineComponent.propDecorators = {
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            drillid: [{ type: i0.ViewChild, args: ['drillid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }]
        };
        return AmexioD3LineComponent;
    }(AmexioD3BaseLineComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var BarstackComponent = (function (_super) {
        __extends(BarstackComponent, _super);
        function BarstackComponent(myservice, device) {
            var _this = _super.call(this, 'barstack') || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.maxYValue = 0;
            _this.barwidth = 0;
            _this.labelflag = false;
            _this.title = "";
            _this.legend = true;
            _this.labelcolor = "black";
            _this.color = [];
            _this.svgwidth = 300;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.svgheight = 300;
            _this.onLegendClick = new i0.EventEmitter();
            return _this;
        }
        /**
         * @return {?}
         */
        BarstackComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            //this.data = response;
                            _this.httpresponse = response;
                            _this.data = _this.getResponseData(response);
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.transformData(_this.data);
                                _this.plotChart();
                            }, 0);
                        });
                    }
                    else if (this.data1) {
                        setTimeout(function () {
                            _this.transformData(_this.data1);
                            _this.plotChart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        BarstackComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        BarstackComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.transformData(_this.data);
                    _this.plotChart();
                }, 0);
            };
        /**
         * @param {?} data1
         * @return {?}
         */
        BarstackComponent.prototype.transformData = /**
         * @param {?} data1
         * @return {?}
         */
            function (data1) {
                var _this = this;
                this.keyArray = [];
                this.legendArray = [];
                data1.forEach(function (element, i) {
                    if (i == 0) {
                        element.forEach(function (innerelement, index) {
                            if (index > 0) {
                                _this.legendArray[innerelement] = { 'data': [] };
                                _this.keyArray.push(innerelement);
                            }
                            else if (index == 0) {
                                _this.xaxis = innerelement;
                            }
                        });
                    }
                });
                /** @type {?} */
                var tempinnerarray;
                tempinnerarray = [];
                data1.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var obj_1 = {};
                        element.forEach(function (innerelement, innerindex) {
                            if (innerindex >= 0) {
                                /** @type {?} */
                                var key = _this.keyArray[innerindex - 1];
                                obj_1[key] = element[innerindex];
                                /** @type {?} */
                                var legenddata = _this.legendArray[key];
                                if (legenddata) {
                                    legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                                }
                            }
                        });
                        tempinnerarray.push(obj_1);
                    }
                });
                this.data = [];
                tempinnerarray.forEach(function (element) {
                    _this.data.push(element);
                });
                /** @type {?} */
                var maxY = 0;
                /** @type {?} */
                var yaxismaxArray = [];
                //find max for yaxis
                this.data.forEach(function (element) {
                    var _loop_1 = function (key, value) {
                        _this.keyArray.forEach(function (key1) {
                            if (key == key1) {
                                maxY = maxY + value;
                            }
                        }); //keyarray loop ends here
                    };
                    try {
                        for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            _loop_1(key, value);
                        } //for ends here
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    yaxismaxArray.push(maxY);
                    maxY = 0;
                    var e_1, _d;
                }); // foreach ends
                // foreach ends
                /** @type {?} */
                var tempLarge = 0;
                /** @type {?} */
                var i;
                for (i = 0; i < yaxismaxArray.length; i++) {
                    if (yaxismaxArray[i] > tempLarge) {
                        this.maxYValue = yaxismaxArray[i];
                    } //if ends
                } // for ends
                this.legends = [];
                this.keyArray.forEach(function (element, index) {
                    /** @type {?} */
                    var legenddata = _this.legendArray[element];
                    if (_this.color.length > 0) {
                        /** @type {?} */
                        var object = { 'label': element, 'color': _this.color[index], 'data': legenddata.data };
                        _this.legends.push(object);
                    }
                    else {
                        /** @type {?} */
                        var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
                        _this.legends.push(object);
                    }
                });
            };
        /**
         * @return {?}
         */
        BarstackComponent.prototype.plotChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var margin = { top: 20, right: 30, bottom: 90, left: 60 };
                /** @type {?} */
                var colors = this.predefinedcolors;
                if (this.device.IsDesktop()) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                //this.svgwidth = this.chartId.nativeElement.offsetWidth;
                /** @type {?} */
                var data;
                data = this.data;
                /** @type {?} */
                var keysetarray = [];
                if (this.httpmethod && this.httpurl) {
                    try {
                        for (var _a = __values(Object.entries(this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            keysetarray.push(key);
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    this.keyArray = keysetarray;
                    this.keyArray.splice(0, 1);
                }
                /** @type {?} */
                var series = d3.stack().keys(this.keyArray)
                    .offset(d3.stackOffsetDiverging)(this.data);
                this.svg = d3.select("#" + this.componentId);
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height;
                // height=this.chartId.nativeElement.offsetHeight-20;
                if (this.device.IsDesktop()) {
                    this.offsetheight = this.chartId.nativeElement.offsetHeight;
                    height = this.offsetheight;
                }
                else {
                    height = this.chartId.nativeElement.offsetHeight - 10;
                }
                /** @type {?} */
                var x = d3.scaleBand()
                    .domain(data.map(function (d) {
                    return d[Object.keys(d)[0]];
                }))
                    .rangeRound([margin.left, width - margin.right])
                    .padding(0.35);
                /** @type {?} */
                var y = d3.scaleLinear()
                    .domain([d3.min(this.stackMin(series)),
                    this.maxYValue
                    // d3.max(this.stackMax(series))
                ])
                    .rangeRound([height - margin.bottom, margin.top]);
                // if (this.barwidth > 0) {
                //   this.barwidth = this.barwidth;
                // }
                // else {
                //   this.barwidth = x.bandwidth();
                // }
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + y(0) + ")")
                        .call(d3.axisBottom(x));
                }
                else {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + y(0) + ")")
                        .call(d3.axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                this.svg.append("g")
                    .attr("transform", "translate(" + margin.left + ",0)")
                    .call(d3.axisLeft(y));
                this.plotLine(this.svg, x, y, height, width, margin.left);
                /** @type {?} */
                var svgRect = this.svg.append("g")
                    .selectAll("g")
                    .data(series)
                    .enter().append("g")
                    .attr("fill", function (d, index) {
                    if (_this.color.length > 0) {
                        if (_this.color[index]) {
                            return _this.color[index];
                        }
                        else {
                            return colors[index];
                        }
                    }
                    else {
                        return colors[index];
                    }
                })
                    .selectAll("rect")
                    .data(function (d) {
                    return d;
                });
                svgRect.enter().append("rect")
                    .attr("width", x.bandwidth()).attr('id', function (d, i) {
                    return d.data[i];
                })
                    .attr("x", function (d) {
                    return x(+d.data[Object.keys(d.data)[0]]);
                })
                    .attr("y", function (d, index) {
                    return y(d[1]);
                })
                    .attr("cursor", "pointer")
                    .attr("height", function (d, index) {
                    return y(d[0]) - y(d[1]);
                })
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return tooltip.html(_this.setKey(d))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.setBarClickText(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    // this.chartClick(d);
                });
                // -------------------------
                if (this.labelflag) {
                    svgRect.enter()
                        .append("text")
                        .style("font-weight", "bold")
                        .style("font-size", "1vw")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .attr("x", function (d) {
                        return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
                        // +  margin.left;
                    })
                        .attr("y", function (d, index) {
                        return y(d[1]) + 20;
                    })
                        .text(function (d) {
                        return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
                    });
                }
                var e_2, _d;
            };
        /**
         * @param {?} serie
         * @return {?}
         */
        BarstackComponent.prototype.stackMin = /**
         * @param {?} serie
         * @return {?}
         */
            function (serie) {
                return d3.min(serie, function (d) { return d[0]; });
            };
        // stackMax(serie) {
        //   return d3.max(serie, function (d) { return d[1]; });
        // }
        // stackMax(serie) {
        //   return d3.max(serie, function (d) { return d[1]; });
        // }
        /**
         * @return {?}
         */
        BarstackComponent.prototype.resize =
            // stackMax(serie) {
            //   return d3.max(serie, function (d) { return d[1]; });
            // }
            /**
             * @return {?}
             */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.plotChart();
            };
        /**
         * @param {?} svg
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @param {?} m
         * @return {?}
         */
        BarstackComponent.prototype.plotLine = /**
         * @param {?} svg
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @param {?} m
         * @return {?}
         */
            function (svg, x, y, height, width, m) {
                if (this.hScale) {
                    svg.append('g')
                        .attr("transform", "translate(" + m + ",0)")
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        BarstackComponent.prototype.legendClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var obj = {};
                obj["label"] = event.label;
                /** @type {?} */
                var data = [];
                event.data.forEach(function (element) {
                    /** @type {?} */
                    var object = {};
                    object[element.label] = element.value;
                    data.push(object);
                });
                obj["data"] = data;
                this.onLegendClick.emit(obj);
            };
        /**
         * @param {?} d
         * @return {?}
         */
        BarstackComponent.prototype.setKey = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                /** @type {?} */
                var diff = d[0] - d[1];
                if (diff < 0) {
                    diff = (diff * (-1));
                }
                try {
                    for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (value == diff) {
                            //  let object = { 'label': key, 'value': value , 'legend': d.data[Object.keys(d.data)[0]]};
                            /** @type {?} */
                            var object = {};
                            object[key] = value;
                            object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                            return (this.toolTipForBar(object));
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                var e_3, _d;
            };
        /**
         * @param {?} d
         * @return {?}
         */
        BarstackComponent.prototype.setBarClickText = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                /** @type {?} */
                var diff = d[0] - d[1];
                if (diff < 0) {
                    diff = (diff * (-1));
                }
                // let object = {};
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (value == diff) {
                            object[key] = value;
                            object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                        }
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                this.chartClick(object);
                var e_4, _d;
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        BarstackComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_5_1) {
                        e_5 = { error: e_5_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_5)
                                throw e_5.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_5, _a;
            };
        BarstackComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-barstack',
                        template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId  (window:resize)=\"resize()\">\n  <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>            \n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n              <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                  [data]=\"legends\" style=\"height:100%;\">\n              </amexio-d3-legend>\n      </td>\n  \n  </tr>\n</table>\n</div>",
                        styles: [""]
                    },] },
        ];
        BarstackComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        BarstackComponent.propDecorators = {
            data1: [{ type: i0.Input, args: ['data',] }],
            barwidth: [{ type: i0.Input }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            title: [{ type: i0.Input }],
            legend: [{ type: i0.Input }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            color: [{ type: i0.Input }],
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            drillid: [{ type: i0.ViewChild, args: ['drillid',] }],
            onLegendClick: [{ type: i0.Output }]
        };
        return BarstackComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var GroupbarComponent = (function (_super) {
        __extends(GroupbarComponent, _super);
        function GroupbarComponent(myservice, device) {
            var _this = _super.call(this, 'multibar') || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.legend = true;
            _this.barwidth = 0;
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.onLegendClick = new i0.EventEmitter();
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.groupbarchartArray = [];
            _this.urllegendArray = [];
            _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
            return _this;
        }
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    /** @type {?} */
                    var res_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            res_1 = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(res_1);
                                _this.initializeData();
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(_this.data);
                            _this.initializeData();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        GroupbarComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                /** @type {?} */
                var resp;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        resp = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        GroupbarComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                this.convertToJSON();
                this.plotGroupBarChart();
                this.transformData(this.data);
            };
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.plotGroupBarChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var colors = this.predefinedcolors;
                // this.svgwidth = this.chartId.nativeElement.offsetWidth;
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var margin = { top: 20, right: 20, bottom: 50, left: 40 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = this.svgheight - margin.top - margin.bottom;
                this.svg = d3.select("#" + this.componentId)
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                /** @type {?} */
                var x0 = d3.scaleBand()
                    .rangeRound([0, width])
                    .padding(0.2);
                /** @type {?} */
                var x1 = d3.scaleBand().padding(0.1);
                /** @type {?} */
                var y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                //setting x and y domains
                this.years = this.groupbarchartArray.map(function (d) { return d.labels; });
                /** @type {?} */
                var label = this.groupbarchartArray[0].values.map(function (d) { return d.label; });
                x0.domain(this.years);
                x1.domain(label).rangeRound([0, x0.bandwidth()]);
                y.domain([0, d3.max(this.groupbarchartArray, function (labels) { return d3.max(labels.values, function (d) { return d.value; }); })]);
                //dynamic barwidth
                if (this.barwidth > 0) {
                    this.barwidth = this.barwidth;
                }
                else {
                    this.barwidth = x0.bandwidth;
                }
                // add x axis to svg
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x0));
                }
                else {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x0)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                //add y axis to svg
                this.svg.append("g")
                    .call(d3.axisLeft(y)
                    .ticks(10));
                this.plotLine(this.svg, y, height, width);
                // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
                //adding bars
                /** @type {?} */
                var slice = this.svg.selectAll(".slice")
                    .data(this.groupbarchartArray)
                    .enter().append("g")
                    .attr("class", "g")
                    .attr("transform", function (d) { return "translate(" + x0(d.labels) + ",0)"; });
                slice.selectAll("rect")
                    .data(function (d) { return d.values; })
                    .enter().append("rect")
                    .attr("width", x1.bandwidth)
                    .attr("x", function (d) {
                    return x1(d.label);
                })
                    .style("fill", function (d, index) { return colors[index]; })
                    .attr("y", function (d) { return y(0); })
                    .attr("height", function (d) { return height - y(0); })
                    .attr("cursor", "pointer")
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return tooltip.html(_this.setKey(d)
                    //  this.toolTipContent(d)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }).on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.groupbarClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    // this.chartClick(d);
                });
                // -------------------------------------------------------
                if (this.labelflag) {
                    slice.selectAll("text")
                        .data(function (d) { return d.values; })
                        .enter().append("text")
                        .attr("width", x1.bandwidth)
                        .attr("x", function (d) {
                        return x1(d.label) + x1.bandwidth() / 2;
                    })
                        .attr("y", function (d) { return y(d.value); })
                        .attr("height", function (d) { return height - y(0); })
                        .style("font-weight", "bold")
                        .style("font-size", "1vw")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .text(function (d) {
                        return d.value;
                    });
                }
                slice.selectAll("rect")
                    .attr("y", function (d) {
                    return y(d.value);
                })
                    .attr("height", function (d) { return height - y(d.value); });
            };
        /**
         * @param {?} d
         * @return {?}
         */
        GroupbarComponent.prototype.groupbarClick = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                /** @type {?} */
                var object = {};
                object[d.label] = d.value;
                object[this.xaxisData] = d.xaxis;
                this.chartClick(object);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        GroupbarComponent.prototype.resize = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.plotGroupBarChart();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        GroupbarComponent.prototype.legendClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // const legendNode = JSON.parse(JSON.stringify(event));
                // delete legendNode.color;
                // const legendNode = JSON.parse(JSON.stringify(event));
                // delete legendNode.color;
                /** @type {?} */
                var obj = {};
                obj["label"] = event.label;
                /** @type {?} */
                var data = [];
                event.data.forEach(function (element) {
                    /** @type {?} */
                    var object = {};
                    object[element.label] = element.value;
                    data.push(object);
                });
                obj["data"] = data;
                this.onLegendClick.emit(obj);
                // this.onLegendClick.emit(legendNode);
            };
        //2d array to json conversion
        //2d array to json conversion
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.convertToJSON =
            //2d array to json conversion
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var groupChartObj = { "labels": "", values: [] };
                /** @type {?} */
                var firstRowOfData = this.data[0];
                this.xaxisData = this.data[0][0];
                for (var i = 1; i < this.data.length; i++) {
                    /** @type {?} */
                    var multiSeriesArray = [];
                    /** @type {?} */
                    var valueOfJ = void 0;
                    for (var j = 1; j < this.data[i].length; j++) {
                        valueOfJ = this.data[i][0];
                        /** @type {?} */
                        var singleBarObj = {};
                        singleBarObj["value"] = this.data[i][j];
                        singleBarObj["label"] = firstRowOfData[j];
                        singleBarObj["xaxis"] = this.data[i][0];
                        multiSeriesArray.push(singleBarObj);
                    }
                    if (multiSeriesArray.length) {
                        groupChartObj["values"] = multiSeriesArray;
                        /** @type {?} */
                        var newLabelsValues = valueOfJ;
                        /** @type {?} */
                        var newGroupDataObj = Object.assign({}, groupChartObj);
                        newGroupDataObj['labels'] = newLabelsValues + '';
                        this.groupbarchartArray.push(newGroupDataObj);
                    }
                }
            };
        /**
         * @return {?}
         */
        GroupbarComponent.prototype.transformto2dArray = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var result = [];
                result.push("years");
                this.data.forEach(function (element, i) {
                    if (i == 0) {
                        element.values.forEach(function (element2) {
                            result.push(element2.label);
                        });
                    }
                });
                this.urllegendArray.push(result);
                /** @type {?} */
                var temparray = [];
                this.data.forEach(function (element) {
                    temparray = [];
                    /** @type {?} */
                    var values;
                    /** @type {?} */
                    var year = element.labels;
                    temparray.push(year);
                    element.values.forEach(function (element2) {
                        values = element2.value;
                        temparray.push(values);
                    });
                    _this.urllegendArray.push(temparray);
                });
            };
        /**
         * @param {?} data
         * @return {?}
         */
        GroupbarComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.keyArray = [];
                this.legendArray = [];
                data.forEach(function (element, i) {
                    if (i == 0) {
                        element.forEach(function (innerelement, index) {
                            if (index > 0) {
                                _this.legendArray[innerelement] = { 'data': [] };
                                _this.keyArray.push(innerelement);
                            }
                        });
                    }
                });
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var obj_1 = {};
                        element.forEach(function (innerelement, innerindex) {
                            if (innerindex >= 0) {
                                /** @type {?} */
                                var key = _this.keyArray[innerindex - 1];
                                obj_1[key] = element[innerindex];
                                /** @type {?} */
                                var legenddata = _this.legendArray[key];
                                if (legenddata) {
                                    legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                                }
                            }
                        });
                    }
                });
                this.legends = [];
                this.keyArray.forEach(function (element, index) {
                    /** @type {?} */
                    var legenddata = _this.legendArray[element];
                    /** @type {?} */
                    var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
                    _this.legends.push(object);
                });
            };
        /**
         * @param {?} d
         * @return {?}
         */
        GroupbarComponent.prototype.setKey = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                /** @type {?} */
                var object = {};
                object[d.label] = d.value;
                object[this.xaxisData] = d.xaxis;
                return (this.toolTipForBar(object));
            };
        /**
         * @param {?} g
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        GroupbarComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, y, height, width) {
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        GroupbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-multiseries',
                        template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize($event)\"> \n<table style=\"width: 100%;\" #chartId>\n    <tr>\n        <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n</div>\n\n\n",
                        styles: [""]
                    },] },
        ];
        GroupbarComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        GroupbarComponent.propDecorators = {
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            drillid: [{ type: i0.ViewChild, args: ['drillid',] }],
            data: [{ type: i0.Input, args: ['data',] }],
            legend: [{ type: i0.Input }],
            barwidth: [{ type: i0.Input }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            onLegendClick: [{ type: i0.Output }],
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }]
        };
        return GroupbarComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CombochartComponent = (function (_super) {
        __extends(CombochartComponent, _super);
        function CombochartComponent(myservice, device) {
            var _this = _super.call(this, 'combochart') || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.lineColor = "black";
            _this.horizontal = false;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.colorflag = false;
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.legendArray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        CombochartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                            _this.httpresponse = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.transformData(_this.data);
                                _this.initializeData();
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data = _this.getResponseData(_this.data);
                            _this.transformData(_this.data);
                            _this.initializeData();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CombochartComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            // this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        CombochartComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        CombochartComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        CombochartComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.formLegendData();
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var lineName = this.lineInput;
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                this.svg = d3.select("#" + this.componentId);
                /** @type {?} */
                var margin = { top: 20, right: 20, bottom: 85, left: 60 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height;
                console.log("offsetheight", this.offsetheight);
                if (this.device.IsDesktop() == true) {
                    this.offsetheight = this.chartId.nativeElement.offsetHeight - 20 - 90;
                    height = this.offsetheight;
                }
                else {
                    height = this.svgheight - margin.top - margin.bottom;
                }
                /** @type {?} */
                var x;
                /** @type {?} */
                var y;
                /** @type {?} */
                var g = this.svg.append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                if (this.horizontal == false) {
                    x = d3.scaleBand()
                        .rangeRound([0, width])
                        .padding(0.1);
                    y = d3.scaleLinear()
                        .rangeRound([height, 0]);
                    //setting content for x and y axis
                    x.domain(this.data.map(function (d) {
                        return d[Object.keys(d)[0]];
                    }));
                    /** @type {?} */
                    var barRange = d3.max(this.data, function (d) {
                        return d[Object.keys(d)[1]];
                    });
                    /** @type {?} */
                    var lineRange = d3.max(this.data, function (d) {
                        return d[_this.lineInput];
                    });
                    /** @type {?} */
                    var range = void 0;
                    if (barRange > lineRange) {
                        range = barRange;
                    }
                    else {
                        range = lineRange;
                    }
                    y.domain([0, range]);
                    if (this.device.IsDesktop() == true) {
                        g.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x));
                    }
                    else {
                        g.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x)).
                            selectAll("text")
                            .attr("y", 0)
                            .attr("x", 9)
                            .attr("dy", ".35em")
                            .attr("transform", "rotate(65)")
                            .style("text-anchor", "start");
                    }
                    //add y axis to svg
                    g.append("g")
                        .call(d3.axisLeft(y)
                        .ticks(10));
                    this.plotLine(g, x, y, height, width);
                    //add bar chart
                    g.selectAll(".bar")
                        .data(this.data)
                        .enter()
                        .append("rect")
                        .attr("class", "bar")
                        .attr("x", function (d) {
                        return x(d[Object.keys(d)[0]]);
                    })
                        .attr("y", function (d) {
                        return y(d[Object.keys(d)[1]]);
                    })
                        .attr("cursor", "pointer")
                        .attr("width", x.bandwidth())
                        .attr("height", function (d) { return height - y(d[Object.keys(d)[1]]); })
                        .style("fill", function (d) {
                        return d.color;
                    })
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipData(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.barChartClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                    });
                    //line code start
                    /** @type {?} */
                    var valueline = d3.line()
                        .x(function (d) {
                        return x(d[Object.keys(d)[0]]);
                    })
                        .y(function (d) {
                        return y(d[lineName]);
                    });
                    /** @type {?} */
                    var shift = margin.left + x.bandwidth() / 2;
                    this.svg.append("path")
                        .data([this.data])
                        .attr("fill", "none")
                        .style("stroke", this.lineColor)
                        .attr("stroke-width", 1.5)
                        .attr("transform", "translate( " + shift + ", 20 )")
                        .attr("d", valueline);
                    /** @type {?} */
                    var points1 = this.svg.selectAll("circle.point1")
                        .data(this.data);
                    points1.enter().append("circle")
                        .merge(points1)
                        .attr("class", "point1")
                        .attr("cursor", "pointer")
                        .style("stroke", this.lineColor)
                        .style("fill", this.lineColor)
                        .attr("cx", function (d) {
                        return x(d[Object.keys(d)[0]]);
                    })
                        .attr("cy", function (d) {
                        return y(d[lineName]);
                    })
                        .attr("r", function (d) { return 5; })
                        .attr("transform", "translate( " + shift + ", 20 )")
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipLineData(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.onComboLineClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                    });
                    //line code ends
                }
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        CombochartComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        CombochartComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_2, _d;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CombochartComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.transformeddata = [];
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        }); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                }); //outer for loop ends
                this.data = this.transformeddata;
            };
        /**
         * @return {?}
         */
        CombochartComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendArray = [];
                this.data.forEach(function (element) {
                    /** @type {?} */
                    var legendobject = {};
                    legendobject['label'] = element[Object.keys(element)[0]];
                    legendobject['value'] = element[Object.keys(element)[1]];
                    legendobject['color'] = element.color;
                    _this.legendArray.push(legendobject);
                });
            };
        /**
         * @param {?} legendevent
         * @return {?}
         */
        CombochartComponent.prototype.onBarLegendClick = /**
         * @param {?} legendevent
         * @return {?}
         */
            function (legendevent) {
                /** @type {?} */
                var obj = {};
                obj[this.keyArray[0]] = legendevent.label;
                obj[this.keyArray[1]] = legendevent.value;
                this.legendClick(obj);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CombochartComponent.prototype.barChartClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.chartClick(object);
                var e_3, _d;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CombochartComponent.prototype.onComboLineClick = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != "color") {
                            object[key] = value;
                        }
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                this.comboLineClick(object);
                var e_4, _d;
                //this.chartClick(object);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CombochartComponent.prototype.formTooltipLineData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key == this.lineInput) {
                            object[key] = value;
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_5, _d;
            };
        /**
         * @return {?}
         */
        CombochartComponent.prototype.resize = /**
         * @return {?}
         */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                //  this.svgheight=this.offsetheight;
                this.plotD3Chart();
            };
        CombochartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-combochart',
                        template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                        styles: [""]
                    },] },
        ];
        CombochartComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        CombochartComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            lineColor: [{ type: i0.Input, args: ['line-color',] }],
            horizontal: [{ type: i0.Input }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            lineInput: [{ type: i0.Input, args: ['line-data-index',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }]
        };
        return CombochartComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var HistogramComponent = (function (_super) {
        __extends(HistogramComponent, _super);
        function HistogramComponent(myservice, device) {
            var _this = _super.call(this, 'histogram') || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 400;
            _this.color = "blue";
            _this.labelflag = false;
            _this.labelcolor = "black";
            _this.hScale = true;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.resizeflag = false;
            _this.drillableFlag = true;
            _this.values = [];
            _this.array = [];
            _this.xaxisArray = [];
            _this.yaxisArray = [];
            _this.yaxisData = [];
            _this.histogramarray = [];
            _this.histogramdata = [];
            _this.lengtharray = [];
            _this.arrayofLength = [];
            _this.chartData = [];
            _this.finaldataarray = [];
            _this.tooltipArray = [];
            _this.index = 0;
            return _this;
        }
        /**
         * @return {?}
         */
        HistogramComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var res;
                if (this.level <= 1) {
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            res = response;
                            _this.httpresponse = response;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.datahisto = [];
                                _this.datahisto = _this.getResponseData(res);
                                _this.transformData();
                                _this.plotXaxis();
                                _this.plotYaxis();
                                _this.tooltipData();
                                _this.dataforChart();
                                _this.transformData1(_this.finaldataarray);
                                _this.plotChart();
                            }, 0);
                        });
                    }
                    else if (this.datahisto) {
                        setTimeout(function () {
                            _this.datahisto = _this.getResponseData(_this.datahisto);
                            _this.transformData();
                            _this.plotXaxis();
                            _this.plotYaxis();
                            _this.tooltipData();
                            _this.dataforChart();
                            _this.transformData1(_this.finaldataarray);
                            _this.plotChart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        HistogramComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.datahisto = _this.getResponseData(_this.httpresponse);
                    _this.transformData();
                    _this.plotXaxis();
                    _this.plotYaxis();
                    _this.tooltipData();
                    _this.dataforChart();
                    _this.transformData1(_this.finaldataarray);
                    _this.plotChart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        HistogramComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @param {?} data1
         * @return {?}
         */
        HistogramComponent.prototype.transformData1 = /**
         * @param {?} data1
         * @return {?}
         */
            function (data1) {
                var _this = this;
                this.keyArray = [];
                this.legendArray = [];
                data1.forEach(function (element, i) {
                    if (i == 0) {
                        element.forEach(function (innerelement, index) {
                            if (index > 0) {
                                _this.legendArray[innerelement] = { 'data': [] };
                                _this.keyArray.push(innerelement);
                            }
                            else if (index == 0) {
                                _this.xaxis = innerelement;
                            }
                        });
                    }
                });
                /** @type {?} */
                var tempinnerarray;
                tempinnerarray = [];
                data1.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var obj_1 = {};
                        element.forEach(function (innerelement, innerindex) {
                            if (innerindex >= 0) {
                                /** @type {?} */
                                var key = _this.keyArray[innerindex - 1];
                                obj_1[key] = element[innerindex];
                                /** @type {?} */
                                var legenddata = _this.legendArray[key];
                                if (legenddata) {
                                    legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                                }
                            }
                        });
                        tempinnerarray.push(obj_1);
                    }
                });
                this.data = [];
                tempinnerarray.forEach(function (element) {
                    _this.data.push(element);
                });
                this.legends = [];
                /** @type {?} */
                var element = this.datahisto[0];
                /** @type {?} */
                var object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
                this.legends.push(object);
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.plotChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var data;
                data = this.data;
                /** @type {?} */
                var series;
                series = [];
                series = d3.stack().keys(this.keyArray)
                    .offset(d3.stackOffsetDiverging)(this.data);
                /** @type {?} */
                var i = 0;
                /** @type {?} */
                var tempdata;
                tempdata = [];
                tempdata = series;
                tempdata.forEach(function (element) {
                    element.forEach(function (innerelement) {
                        /** @type {?} */
                        var singletooltip = [];
                        singletooltip.push(innerelement.data.tooltipdata[i]);
                        innerelement.push(singletooltip);
                    });
                    i++;
                });
                /** @type {?} */
                var chartdata = [];
                for (i = 0; i < tempdata.length - 1; i++) {
                    chartdata.push(tempdata[i]);
                }
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var margin = { top: 20, right: 20, bottom: 50, left: 60 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = this.svgheight - margin.top - margin.bottom;
                //const height = +svg.attr("height") - margin.top - margin.bottom;
                /** @type {?} */
                var x;
                /** @type {?} */
                var y;
                this.svg = d3.select("#" + this.componentId)
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                /** @type {?} */
                var barWidth = (width / this.chartData.length);
                x = d3.scalePoint()
                    .domain(this.xaxisArray, function (d) { return d; })
                    .rangeRound([0, width]);
                y = d3.scaleLinear().rangeRound([height, 0]);
                y.domain([0, d3.max(this.arrayofLength)]);
                /** @type {?} */
                var z = d3.scaleOrdinal(d3.schemeCategory10);
                this.arrayofLength = [];
                // add x axis to svg
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));
                }
                else {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                /** @type {?} */
                var horizontalpadding = 0.05;
                //add y axis to svg
                this.svg.append("g")
                    .call(d3.axisLeft(y));
                this.plotLine(this.svg, x, y, height, width);
                /** @type {?} */
                var histogramBar = this.svg.append("g")
                    .selectAll("g")
                    .data(chartdata)
                    .enter().append("g")
                    .attr("fill", this.color)
                    .selectAll("rect")
                    .data(function (d) {
                    return d;
                });
                /** @type {?} */
                var histogramBar1 = this.svg.append("g")
                    .selectAll("g")
                    .data(chartdata)
                    .enter().append("g")
                    .selectAll("labels")
                    .data(function (d) {
                    return d;
                });
                histogramBar.enter().append("rect")
                    .attr("width", barWidth - 1)
                    .attr("y", function (d, index) {
                    return y(d[1]);
                })
                    .attr("cursor", "pointer")
                    .attr("height", function (d, index) {
                    return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
                })
                    .attr("transform", function (d, i) {
                    /** @type {?} */
                    var translate = [barWidth * i, 0];
                    return "translate(" + translate + ")";
                })
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                }).on("mousemove", function (d) {
                    /** @type {?} */
                    var data = d[2];
                    return tooltip.html(_this.setKey(data[0]))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }).on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    /** @type {?} */
                    var clickdata = d[2];
                    _this.histogramClick(clickdata[0]);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                });
                if (this.labelflag) {
                    histogramBar1.enter()
                        .append("text")
                        .style("font-weight", "bold")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .attr("y", function (d, i) {
                        return y(d[1]);
                    })
                        .text(function (d) {
                        /** @type {?} */
                        var data;
                        /** @type {?} */
                        var data2;
                        data = d[2];
                        data2 = data[0];
                        if (data2) {
                            return data2.value;
                        }
                        else {
                            return null;
                        }
                    })
                        .attr("transform", function (d, i) {
                        /** @type {?} */
                        var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                        return "translate(" + translate + ")";
                    });
                }
                //  .append("label")
                // //  .attr("width", barWidth - 1)
                //  .attr("y", (d, index) => {
                //    return y(d[1]);
                //  })
                // ---------------------------------------------------------
                //   this.svg.append("g")
                //   .selectAll("g")
                //   .data( chartdata)
                //   .enter( ).append("g")
                //   // .attr("fill", this.color)
                //   // .selectAll("rect")
                //   .data((d) => {
                //     return d;
                //   })
                //   histogramBar.enter(  )
                //   .append("text")
                //   // .attr("width", barWidth - 1)
                //   .attr("y", (d, index) => {
                //     return y(d[1]);
                //   })
                //    .attr("height", (d, index) => {
                //     return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
                //   })
                //   .attr("transform", function (d, i) {
                //     var translate = [barWidth * i, 0];
                //     return "translate(" + translate + ")";
                //   })
                //   .text(function(d){
                //     console.log("aksa");
                //       return "aksa";
                //   })
                //   .style("font-weight","bold")
                // .attr("text-anchor", "middle")
                // .attr("fill", (d)=>{
                //     return "black";
                // });
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        HistogramComponent.prototype.histogramClick = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var object = {};
                /** @type {?} */
                var data = this.datahisto[0];
                /** @type {?} */
                var label1 = data[1];
                /** @type {?} */
                var label2 = data[0];
                if (obj.label.length) {
                    object[label2 + ":"] = obj.label;
                    object[label1 + ":"] = obj.value;
                }
                this.chartClick(object);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        HistogramComponent.prototype.legendClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.onLegendClick.emit(this.datahisto);
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.transformData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.array = [];
                this.values = [];
                this.datahisto.forEach(function (element) {
                    _this.values.push(element[1]);
                });
                for (var i = 1; i < this.values.length; i++) {
                    this.array.push(this.values[i]);
                }
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.plotXaxis = /**
         * @return {?}
         */
            function () {
                this.xaxisArray = [];
                this.xaxisArray.push(0);
                /** @type {?} */
                var newvalue = 0;
                /** @type {?} */
                var value = Math.ceil(d3.max(this.array));
                if (value % 10 == 0) {
                    value = value;
                }
                else {
                    value = (10 - value % 10) + value;
                }
                /** @type {?} */
                var quotient = value / 5;
                while (newvalue < value) {
                    newvalue = newvalue + quotient;
                    this.xaxisArray.push(newvalue);
                }
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.plotYaxis = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var tempvalue = 0;
                /** @type {?} */
                var lengthofArray = 0;
                /** @type {?} */
                var lengthcount = 0;
                /** @type {?} */
                var templength = 0;
                /** @type {?} */
                var newvalue = 0;
                this.yaxisArray = [];
                this.histogramarray = [];
                this.lengtharray = [];
                this.histogramdata = [];
                this.arrayofLength = [];
                this.chartData = [];
                this.xaxisArray.forEach(function (element1) {
                    _this.yaxisArray = [];
                    _this.array.forEach(function (element2) {
                        if (tempvalue < element2 && element2 <= element1) {
                            _this.yaxisArray.push(element2);
                        }
                        lengthofArray = _this.yaxisArray.length;
                    });
                    if (templength > lengthofArray) {
                        lengthcount = templength;
                    }
                    else {
                        lengthcount = lengthofArray;
                    }
                    templength = lengthcount;
                    tempvalue = element1;
                    //this.histogramarray.push(this.yaxisArray);
                    _this.lengtharray.push(lengthofArray);
                });
                /** @type {?} */
                var value = Math.ceil(templength);
                /** @type {?} */
                var quotient = value / 5;
                while (newvalue <= value) {
                    newvalue = newvalue + quotient;
                    this.yaxisData.push(newvalue);
                }
                for (var i = 1; i < this.histogramarray.length; i++) {
                    this.histogramdata.push(this.histogramarray[i]);
                }
                for (var i = 1; i < this.lengtharray.length; i++) {
                    this.arrayofLength.push(this.lengtharray[i]);
                }
                for (var i = 0; i < this.arrayofLength.length; i++) {
                    /** @type {?} */
                    var data = {};
                    data["value"] = this.arrayofLength[i];
                    this.chartData.push(data);
                }
                this.array = [];
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.resize = /**
         * @return {?}
         */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.transformData();
                this.plotXaxis();
                this.plotYaxis();
                this.tooltipData();
                this.dataforChart();
                this.transformData1(this.finaldataarray);
                this.plotChart();
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.dataforChart = /**
         * @return {?}
         */
            function () {
                this.finaldataarray = [];
                /** @type {?} */
                var initialArray = [];
                /** @type {?} */
                var temparray = [];
                initialArray.push('level');
                /** @type {?} */
                var maxElement = Math.max.apply(null, this.arrayofLength);
                /** @type {?} */
                var maxlength = maxElement;
                /** @type {?} */
                var n = 1;
                while (n <= maxElement) {
                    initialArray.push('' + n);
                    n++;
                }
                initialArray.push('tooltipdata');
                /** @type {?} */
                var length = this.arrayofLength.length;
                /** @type {?} */
                var number = 1;
                /** @type {?} */
                var j = 0;
                this.finaldataarray.push(initialArray);
                for (var i = 0; i < this.arrayofLength.length; i++) {
                    /** @type {?} */
                    var value = this.arrayofLength[i];
                    /** @type {?} */
                    var tempvalue = value;
                    temparray = [];
                    temparray.push('' + i);
                    maxElement = maxlength;
                    if (value > 0) {
                        while (value != 0) {
                            temparray.push(number);
                            value--;
                        }
                        maxElement = maxElement - tempvalue;
                        while (maxElement != 0) {
                            temparray.push(0);
                            maxElement--;
                        }
                    }
                    else {
                        while (maxElement != 0) {
                            temparray.push(0);
                            maxElement--;
                        }
                    }
                    temparray.push(this.tooltipArray[j]);
                    this.finaldataarray.push(temparray);
                    j++;
                }
            };
        /**
         * @return {?}
         */
        HistogramComponent.prototype.tooltipData = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var arrayofTooltip = [];
                /** @type {?} */
                var obj = { "label": "", "value": "" };
                this.datahisto.forEach(function (element) {
                    obj = { "label": "", "value": "" };
                    obj["label"] = element[0];
                    obj["value"] = element[1];
                    arrayofTooltip.push(obj);
                });
                /** @type {?} */
                var value1 = this.xaxisArray[0];
                /** @type {?} */
                var tooltipdata = [];
                var _loop_1 = function (j) {
                    tooltipdata = [];
                    /** @type {?} */
                    var value2 = this_1.xaxisArray[j];
                    arrayofTooltip.forEach(function (element) {
                        if (value1 <= element.value && element.value <= value2) {
                            /** @type {?} */
                            var tooltipobj = { "label": "", "value": "" };
                            tooltipobj["label"] = element["label"];
                            tooltipobj["value"] = element["value"];
                            tooltipdata.push(tooltipobj);
                        }
                    });
                    this_1.tooltipArray.push(tooltipdata);
                    value1 = value2;
                };
                var this_1 = this;
                for (var j = 1; j < this.xaxisArray.length; j++) {
                    _loop_1(j);
                }
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        HistogramComponent.prototype.setKey = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var object = {};
                /** @type {?} */
                var data = this.datahisto[0];
                /** @type {?} */
                var label1 = data[1];
                /** @type {?} */
                var label2 = data[0];
                object[label2 + ":"] = obj.label;
                object[label1 + ":"] = obj.value;
                return (this.toolTipForBar(object));
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        HistogramComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        HistogramComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-histogram',
                        template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>\n",
                        styles: [".bar{background-color:#3943cf;padding:.02px}"]
                    },] },
        ];
        HistogramComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        HistogramComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            color: [{ type: i0.Input, args: ['color',] }],
            datahisto: [{ type: i0.Input, args: ['data',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }]
        };
        return HistogramComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ScatterchartComponent = (function (_super) {
        __extends(ScatterchartComponent, _super);
        function ScatterchartComponent(myservice, device) {
            var _this = _super.call(this, 'scatter') || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.color = "blue";
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.vScale = true;
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.legendarray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.dataFormatted = [];
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                            _this.httpresponse = resp_1;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.dataFormatted = _this.data;
                                _this.transformData(_this.dataFormatted);
                                _this.colorGeneration();
                                _this.legendCreation();
                                _this.plotScatterChart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.dataFormatted = _this.data;
                            _this.data = _this.getResponseData(_this.data);
                            _this.transformData(_this.data);
                            _this.colorGeneration();
                            _this.legendCreation();
                            _this.plotScatterChart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        ScatterchartComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.dataFormatted = _this.data;
                    _this.transformData(_this.data);
                    _this.colorGeneration();
                    _this.legendCreation();
                    _this.plotScatterChart();
                }, 0);
            };
        // Method to transform data in key value pair 
        // Method to transform data in key value pair 
        /**
         * @param {?} data
         * @return {?}
         */
        ScatterchartComponent.prototype.transformData =
            // Method to transform data in key value pair 
            /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                var _this = this;
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        });
                        _this.transformeddata.push(DummyObject_1);
                    }
                });
                this.data = this.transformeddata;
            };
        // Method get response data using data reader
        // Method get response data using data reader
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        ScatterchartComponent.prototype.getResponseData =
            // Method get response data using data reader
            /**
             * @param {?} httpResponse
             * @return {?}
             */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        // Method to plot d3 chart
        // Method to plot d3 chart
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.plotScatterChart =
            // Method to plot d3 chart
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var margin = { top: 20, right: 20, bottom: 30, left: 60 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = this.svgheight - margin.top - margin.bottom;
                /** @type {?} */
                var x;
                /** @type {?} */
                var y;
                x = d3.scaleLinear()
                    .rangeRound([0, width]);
                y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                /** @type {?} */
                var xAxis = d3.axisBottom(x);
                /** @type {?} */
                var yAxis = d3.axisLeft(y);
                this.svg = d3.select("#" + this.componentId)
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[0]]; })]);
                y.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]]; })]);
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis)
                        .append("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .style("text-anchor", "start");
                }
                else {
                    this.svg.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                // this.svg.append("g")
                //   .attr("class", "x axis")
                //   .attr("transform", "translate(0," + height + ")")
                //   .call(xAxis)
                //   .append("text")
                //   .attr("class", "label")
                //   .attr("x", width)
                //   .attr("y", -6)
                //   .style("text-anchor", "end");
                this.svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("class", "label")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end");
                if (this.dataFormatted[0].length == 2) {
                    this.plotLine(this.svg, x, y, height, width);
                    this.svg.selectAll(".dot")
                        .data(this.data)
                        .enter().append("circle")
                        .attr("class", "dot")
                        .attr("fill", this.color)
                        .attr("r", 4.5)
                        .attr("cursor", "pointer")
                        .attr("cx", function (d) {
                        debugger;
                        return x(d[Object.keys(d)[0]]);
                    })
                        .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipData(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.scatterChartClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                    });
                    // ------------------------------------------------------------------------------
                    if (this.labelflag) {
                        this.svg.selectAll("labels")
                            .data(this.data)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("vertical-align", "middle")
                            .attr("margin-top", margin.top)
                            .attr("fill", function (d) {
                            if (_this.labelcolor.length > 0) {
                                return _this.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        })
                            .attr("x", function (d, i) {
                            return x(d[Object.keys(d)[0]]) + 11;
                        })
                            .attr("y", function (d, i) {
                            return y(d[Object.keys(d)[1]]);
                        })
                            .text(function (d) {
                            return d[Object.keys(d)[1]];
                        });
                    }
                }
                else {
                    this.plotLine(this.svg, x, y, height, width);
                    this.svg.selectAll(".dot")
                        .data(this.transformeddata)
                        .enter().append("circle")
                        .attr("class", "dot")
                        .attr("r", 4.5)
                        .attr("cursor", "pointer")
                        .attr("cx", function (d) {
                        return x(d[Object.keys(d)[0]]);
                    })
                        .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                        .attr("fill", function (d) { return d[Object.keys(d)[4]]; })
                        .on("mouseover", function (d) {
                        return tooltip.style("visibility", "visible");
                    })
                        .on("mousemove", function (d) {
                        return tooltip.html(_this.formTooltipData(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    })
                        .on("mouseout", function (d) {
                        return tooltip.style("visibility", "hidden");
                    })
                        .on("click", function (d) {
                        _this.scatterChartClick(d);
                        _this.fordrillableClick(_this, d, event);
                        return tooltip.style("visibility", "hidden");
                    });
                    if (this.labelflag) {
                        this.svg.selectAll("labels")
                            .data(this.data)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("vertical-align", "middle")
                            .attr("margin-top", margin.top)
                            .attr("fill", function (d) {
                            if (_this.labelcolor.length > 0) {
                                return _this.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        })
                            .attr("x", function (d, i) {
                            return x(d[Object.keys(d)[0]]) + 11;
                        })
                            .attr("y", function (d, i) {
                            return y(d[Object.keys(d)[1]]);
                        })
                            .text(function (d) {
                            return d[Object.keys(d)[1]];
                        });
                    }
                }
            };
        // Method to form tooltip data
        // Method to form tooltip data
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        ScatterchartComponent.prototype.formTooltipData =
            // Method to form tooltip data
            /**
             * @param {?} tooltipData
             * @return {?}
             */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_2, _d;
            };
        // Method on chart click
        // Method on chart click
        /**
         * @param {?} event
         * @return {?}
         */
        ScatterchartComponent.prototype.scatterChartClick =
            // Method on chart click
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        object[key] = value;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.chartClick(object);
                var e_3, _d;
            };
        // method to create Legend
        // method to create Legend
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.legendCreation =
            // method to create Legend
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this.dataFormatted[0].length == 2) {
                    this.legends = [];
                    /** @type {?} */
                    var element = this.dataFormatted[0];
                    /** @type {?} */
                    var object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
                    this.legends.push(object);
                }
                else {
                    this.legends = [];
                    this.legendarray.forEach(function (element) {
                        /** @type {?} */
                        var legendobject = {};
                        legendobject['label'] = element.label;
                        legendobject['color'] = element.color;
                        _this.legends.push(legendobject);
                    });
                }
            };
        // Method on Legend Click
        // Method on Legend Click
        /**
         * @param {?} legendevent
         * @return {?}
         */
        ScatterchartComponent.prototype.onScatterLegendClick =
            // Method on Legend Click
            /**
             * @param {?} legendevent
             * @return {?}
             */
            function (legendevent) {
                var _this = this;
                if (this.dataFormatted[0].length == 2) {
                    this.onLegendClick.emit(this.data);
                }
                else {
                    this.legendarray.forEach(function (element) {
                        if (legendevent.label == element.label) {
                            _this.legendClick(element.value);
                        }
                    });
                }
            };
        // Method for responsiveness
        // Method for responsiveness
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.resize =
            // Method for responsiveness
            /**
             * @return {?}
             */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.plotScatterChart();
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        ScatterchartComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.vScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .attr('transform', 'translate(0,' + height + ')')
                        .call(d3.axisBottom(x).
                        tickSize(-this.width).tickFormat(''));
                }
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.colorGeneration = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendarray = [];
                /** @type {?} */
                var i = 0;
                /** @type {?} */
                var names = this.dataFormatted
                    .map(function (e) { return e[2]; })
                    .filter(function (e, i, a) { return a.indexOf(e) === i; });
                var _loop_1 = function (j) {
                    /** @type {?} */
                    var value = [];
                    /** @type {?} */
                    var obj = { "label": "", "color": "", "value": [] };
                    this_1.transformeddata.forEach(function (element) {
                        if (element[Object.keys(element)[2]] == names[j]) {
                            element['color'] = _this.predefinedcolors[i];
                            value.push(element);
                        }
                    });
                    obj["value"] = value;
                    obj["label"] = names[j];
                    obj["color"] = this_1.predefinedcolors[i];
                    this_1.legendarray.push(obj);
                    i++;
                };
                var this_1 = this;
                for (var j = 1; j < names.length; j++) {
                    _loop_1(j);
                }
            };
        /**
         * @return {?}
         */
        ScatterchartComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendData = [];
                this.legendarray.forEach(function (element) {
                    /** @type {?} */
                    var legendobject = {};
                    legendobject['label'] = element.label;
                    legendobject['color'] = element.color;
                    _this.legendData.push(legendobject);
                });
            };
        ScatterchartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-scatter',
                        template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n    <table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onScatterLegendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>",
                        styles: [""]
                    },] },
        ];
        ScatterchartComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        ScatterchartComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            color: [{ type: i0.Input, args: ['color',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            vScale: [{ type: i0.Input, args: ['vertical-scale',] }]
        };
        return ScatterchartComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var MultiareaComponent = (function (_super) {
        __extends(MultiareaComponent, _super);
        function MultiareaComponent(myservice, device) {
            var _this = _super.call(this, "areachart") || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 350;
            _this.level = 0;
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.drillabledatakey = [];
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.togglelabel = false;
            _this.onLegendClick = new i0.EventEmitter();
            _this.onTooltipClick = new i0.EventEmitter();
            _this.hScale = true;
            _this.margin = {};
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.data1 = [];
            _this.legendArray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.togglelabel = false;
                if (this.level <= 1) {
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            _this.httpresponse = response;
                            _this.data = _this.getResponseData(response);
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.transformData(_this.data);
                                _this.initAreaChart();
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data1) {
                        setTimeout(function () {
                            _this.transformData(_this.data);
                            _this.initAreaChart();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        MultiareaComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.transformData(_this.data);
                    _this.initAreaChart();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.initAreaChart = /**
         * @return {?}
         */
            function () {
                this.tooltip = this.toolTip(d3);
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
                    this.width = this.svgwidth - this.margin.left - this.margin.right,
                    this.height = this.svgheight - this.margin.top - this.margin.bottom;
                //find max and initialize max
                this.maximumValue = this.findMaxData(this.data);
                this.x = d3.scalePoint()
                    .range([0, this.width]);
                // .padding(0.1);
                this.y = d3.scaleLinear()
                    .rangeRound([this.height, 0]);
                this.areaArray = [];
                //set x y domain
                this.areaArray = this.data.map(function (d) { return d[Object.keys(d)[0]]; });
                this.x.domain(this.areaArray);
                this.y.domain([0, this.maximumValue]);
                //initialize svg
                this.svg =
                    d3.select("#" + this.componentId)
                        .attr("width", this.width + this.margin.left + this.margin.right)
                        .attr("height", this.height + this.margin.top + this.margin.bottom);
                this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
            };
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                this.formLegendData();
                /** @type {?} */
                var counter;
                /** @type {?} */
                var g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
                // add the X 
                if (this.device.IsDesktop() == true) {
                    g.append("g")
                        .attr("transform", "translate(0," + this.height + ")")
                        .call(d3.axisBottom(this.x));
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + this.height + ")")
                        .call(d3.axisBottom(this.x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                // add the Y Axis
                g.append("g")
                    .call(d3.axisLeft(this.y));
                this.plotLine(g, this.x, this.y, this.height, this.width);
                for (counter = 1; counter < this.keyArray.length; counter++) {
                    /** @type {?} */
                    var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
                    this.plotAreaChart(innerGroup, counter, this);
                }
                //call method to plot points
                /** @type {?} */
                var increment;
                for (increment = 1; increment < this.keyArray.length; increment++) {
                    //plot line
                    /** @type {?} */
                    var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
                    this.PlotLineDot(innerGroup, increment, this);
                } //increment for ends
            };
        /**
         * @param {?} g
         * @param {?} i
         * @param {?} thisa
         * @return {?}
         */
        MultiareaComponent.prototype.PlotLineDot = /**
         * @param {?} g
         * @param {?} i
         * @param {?} thisa
         * @return {?}
         */
            function (g, i, thisa) {
                var _this = this;
                /** @type {?} */
                var flag = this.togglelabel;
                /** @type {?} */
                var line = d3.line()
                    .x(function (d) { return thisa.x(d[Object.keys(d)[0]]); })
                    .y(function (d) { return thisa.y(d[Object.keys(d)[i]]); });
                g.append("path")
                    .data([thisa.data])
                    .attr("fill", "none")
                    .attr("stroke", thisa.predefinedcolors[i])
                    .attr("stroke-width", 1.5)
                    .attr("d", line)
                    .attr("opacity", 0.2)
                    .attr("transform", 
                // "translate(" + this.margin.left + "," + 0 + ")");
                "translate(" + 0 + "," + 0 + ")");
                //----------
                g.selectAll('dot')
                    .data(thisa.data)
                    .enter()
                    .append('circle')
                    .attr('opacity', 0)
                    .attr("fill", thisa.predefinedcolors[i])
                    .attr("cx", function (d) { return thisa.x(d[Object.keys(d)[0]]); })
                    .attr("cy", function (d) { return thisa.y(d[Object.keys(d)[i]]); })
                    .attr('r', 4)
                    .attr("cursor", "pointer")
                    .on("mouseover", function (d) {
                    _this.formTooltipData(d, i);
                    return _this.tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return _this.tooltip.html(_this.formTooltipData(d, i))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return _this.tooltip.style("visibility", "hidden");
                })
                    .style("opacity", 1)
                    .on("click", function (d) {
                    _this.onAreaTooltipClick(d, i);
                    _this.fordrillableClick(_this, d, event);
                    return _this.tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                })
                    .attr("transform", 
                // "translate(" + this.margin.left + "," + 0 + ")");
                "translate(" + 0 + "," + 0 + ")");
                // -----------------------------------------------------------------
                if (this.labelflag) {
                    g.selectAll('labels')
                        .data(thisa.data)
                        .enter()
                        .append('text')
                        .style("font-weight", "bold")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .attr("x", function (d) {
                        // let length = String(d[Object.keys(d)[i]]).length
                        return thisa.x(d[Object.keys(d)[0]]) + 20;
                    })
                        .attr("y", function (d) {
                        /** @type {?} */
                        var key = [Object.keys(d)[i]];
                        if (flag) {
                            return thisa.y(d[key]) - 5; // fr up
                        }
                        else {
                            return thisa.y(d[key]) + 15;
                        }
                        // return thisa.y(d[Object.keys(d)[i]]);
                        //  return y(d[Object.keys(d)[1]])+yTextPadding;
                    })
                        .text(function (d) {
                        return d[Object.keys(d)[i]];
                    })
                        .attr("transform", "translate(" + 0 + "," + 0 + ")");
                }
                if (this.togglelabel) {
                    this.togglelabel = false;
                }
                else {
                    this.togglelabel = true;
                }
            };
        /**
         * @param {?} g
         * @param {?} i
         * @param {?} thisa
         * @return {?}
         */
        MultiareaComponent.prototype.plotAreaChart = /**
         * @param {?} g
         * @param {?} i
         * @param {?} thisa
         * @return {?}
         */
            function (g, i, thisa) {
                // calculate area and valueline
                // define the line
                /** @type {?} */
                var valueline = d3.line()
                    .x(function (d) {
                    /** @type {?} */
                    var key = [Object.keys(d)[0]];
                    return thisa.x(d[key]);
                })
                    .y(function (d) {
                    /** @type {?} */
                    var key = [Object.keys(d)[i]];
                    return thisa.y(d[key]);
                });
                // add the valueline path.
                g.append("path")
                    .data([this.data])
                    .style("stroke", this.predefinedColors[i])
                    .attr("fill", "none")
                    .style("stroke-width", "2px")
                    .attr("d", valueline)
                    .attr("transform", 
                // "translate(" + this.margin.left + "," + 0 + ")");
                "translate(" + 0 + "," + 0 + ")");
                // define the area
                /** @type {?} */
                var area = d3.area()
                    .x(function (d) {
                    /** @type {?} */
                    var key = [Object.keys(d)[0]];
                    return thisa.x(d[key]);
                })
                    .y0(this.height)
                    .y1(function (d) {
                    /** @type {?} */
                    var key = [Object.keys(d)[i]];
                    return thisa.y(d[key]);
                });
                g.append("path")
                    .data([this.data])
                    .attr("d", area)
                    .attr("transform", 
                // "translate(" + this.margin.left + "," + 0 + ")")
                "translate(" + 0 + "," + 0 + ")")
                    .style("stroke", "none")
                    .attr("fill", this.predefinedColors[i])
                    .style("opacity", 0.5);
            };
        /**
         * @param {?} tooltipData
         * @param {?} count
         * @return {?}
         */
        MultiareaComponent.prototype.onAreaTooltipClick = /**
         * @param {?} tooltipData
         * @param {?} count
         * @return {?}
         */
            function (tooltipData, count) {
                /** @type {?} */
                var obj = {};
                obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
                obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
                this.chartClick(obj);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        MultiareaComponent.prototype.findMaxData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var tempArray = [];
                /** @type {?} */
                var largeValues = [];
                /** @type {?} */
                var maxValue;
                //logic to search 3 largest values 
                data.forEach(function (element) {
                    /** @type {?} */
                    var value;
                    try {
                        for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value_1 = _c[1];
                            //exempts first column of data as it is treated as x-axis
                            if (key != _this.keyArray[0]) {
                                tempArray.push(value_1);
                            }
                        } //for loop end
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    value = _this.findLargestValue(tempArray);
                    largeValues.push(value);
                    var e_1, _d;
                });
                maxValue = this.findLargestValue(largeValues);
                return maxValue;
            };
        /**
         * @param {?} array
         * @return {?}
         */
        MultiareaComponent.prototype.findLargestValue = /**
         * @param {?} array
         * @return {?}
         */
            function (array) {
                /** @type {?} */
                var i;
                /** @type {?} */
                var max = 0;
                for (i = 0; i < array.length; i++) {
                    if (array[i] > max) {
                        max = array[i];
                    } //if ends 
                } //max ends
                return max;
            };
        //covert data
        //covert data
        /**
         * @param {?} data
         * @return {?}
         */
        MultiareaComponent.prototype.transformData =
            //covert data
            /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                var _this = this;
                this.transformeddata = [];
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        }); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                }); //outer for loop ends
                //outer for loop ends
                /** @type {?} */
                var parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
                this.data = parsedtransformeddata;
            };
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendArray = [];
                this.keyArray.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var legendobject = {};
                        legendobject['label'] = element;
                        legendobject['color'] = _this.predefinedColors[index + 1];
                        _this.legendArray.push(legendobject);
                    }
                });
            };
        /**
         * @param {?} legendData
         * @return {?}
         */
        MultiareaComponent.prototype.onAreaLegendClick = /**
         * @param {?} legendData
         * @return {?}
         */
            function (legendData) {
                var _this = this;
                /** @type {?} */
                var obj = {};
                obj["label"] = legendData.label;
                /** @type {?} */
                var data = [];
                this.data.forEach(function (element) {
                    try {
                        for (var _a = __values(Object.entries(_this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            if (key == legendData.label) {
                                /** @type {?} */
                                var object = {};
                                object[key] = value;
                                data.push(object);
                            } //inner if ends
                        } //inner forloop ends
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    var e_2, _d;
                }); //outer foreach ends
                obj["data"] = data;
                this.onLegendClick.emit(obj);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        MultiareaComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_3, _a;
            };
        /**
         * @return {?}
         */
        MultiareaComponent.prototype.resize = /**
         * @return {?}
         */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.initAreaChart();
                this.plotD3Chart();
            };
        /**
         * @param {?} tooltipData
         * @param {?} count
         * @return {?}
         */
        MultiareaComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @param {?} count
         * @return {?}
         */
            function (tooltipData, count) {
                /** @type {?} */
                var obj = {};
                obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
                obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
                return this.toolTipForBar(obj);
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        MultiareaComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        MultiareaComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-multiarea',
                        template: "\n<div  *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId>\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onAreaLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                        styles: [""]
                    },] },
        ];
        MultiareaComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        MultiareaComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            onLegendClick: [{ type: i0.Output }],
            onTooltipClick: [{ type: i0.Output }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }]
        };
        return MultiareaComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CandlestickComponent = (function (_super) {
        __extends(CandlestickComponent, _super);
        function CandlestickComponent(myservice, device) {
            var _this = _super.call(this, "candlestickwaterfallchart") || this;
            _this.myservice = myservice;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.labelcolor = "black";
            _this.labelflag = false;
            _this.hScale = true;
            _this.onLegendClick = new i0.EventEmitter();
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.predefinedColor = [];
            _this.keyArray = [];
            _this.margin = {};
            _this.legendArray = [];
            return _this;
        }
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
                if (this.level <= 1) {
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            //this.data = response;
                            _this.httpresponse = response;
                            _this.data = _this.getResponseData(response);
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.transformData(_this.data);
                                _this.initializeData();
                                _this.plotXYAxis();
                                _this.plotD3Chart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.transformData(_this.data);
                            _this.initializeData();
                            _this.plotXYAxis();
                            _this.plotD3Chart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CandlestickComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotXYAxis();
                    _this.plotD3Chart();
                }, 0);
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.initializeData = /**
         * @return {?}
         */
            function () {
                this.tooltip = this.toolTip(d3);
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
                    this.width = this.svgwidth - this.margin.left - this.margin.right,
                    this.height = this.svgheight - this.margin.top - this.margin.bottom;
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.plotXYAxis = /**
         * @return {?}
         */
            function () {
                // set the ranges
                this.x = d3.scaleBand().range([0, this.width]);
                this.y = d3.scaleLinear()
                    .rangeRound([this.height, 0]);
                // scale the range of the data
                /** @type {?} */
                var candlestickArray = this.data.map(function (d) {
                    return d[Object.keys(d)[0]];
                });
                this.x.domain(candlestickArray);
                /** @type {?} */
                var max = d3.max(this.data, function (d) { return d.end; });
                this.y.domain([0, max]);
                this.svg = d3.select("#" + this.componentId)
                    .attr("width", this.width + this.margin.left + this.margin.right)
                    .attr("height", this.height + this.margin.top + this.margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
                // add the X Axis
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + this.height + ")")
                        .call(d3.axisBottom(this.x));
                }
                else {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + this.height + ")")
                        .call(d3.axisBottom(this.x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                // this.svg.append("g")
                //   .attr("transform", "translate(0," + this.height + ")")
                //   .call(d3.axisBottom(this.x));
                // add the Y Axis
                this.svg.append("g")
                    .call(d3.axisLeft(this.y));
                this.plotLine(this.svg, this.x, this.y, this.height, this.width);
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.plotD3Chart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var bar = this.svg.selectAll(".bar")
                    .data(this.data)
                    .enter().append("g")
                    .attr("class", function (d) { return "bar " + d.class; })
                    .attr("transform", function (d) {
                    return "translate(" + _this.x(d[Object.keys(d)[0]]) + ",0)";
                });
                bar.append("rect")
                    .attr("y", function (d) { return _this.y(Math.max(d.start, d.end)); })
                    .attr("height", function (d) { return Math.abs(_this.y(d.start) - _this.y(d.end)); })
                    .attr("width", this.x.bandwidth())
                    .attr("fill", function (d, i) {
                    return _this.predefinedColor[i];
                })
                    .attr("cursor", "pointer")
                    .on("mouseover", function (d) {
                    _this.formTooltipData(d);
                    return _this.tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return _this.tooltip.html(_this.formTooltipData(d))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return _this.tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.onCandlestickClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return _this.tooltip.style("visibility", "hidden");
                });
                if (this.labelflag) {
                    bar.append("text")
                        .style("font-weight", "bold")
                        .style("font-size", "1vw")
                        .attr("text-anchor", "middle")
                        .attr("fill", function (d) {
                        if (_this.labelcolor.length > 0) {
                            return _this.labelcolor;
                        }
                        else {
                            return "black";
                        }
                    })
                        .attr("x", function (d) {
                        return (_this.x.bandwidth()) / 2;
                    })
                        .attr("y", function (d, index) {
                        return _this.y(Math.max(d.start, d.end)) + 20;
                    })
                        .text(function (d) {
                        return d[Object.keys(d)[1]];
                    });
                }
            };
        /**
         * @param {?} svg
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        CandlestickComponent.prototype.plotLine = /**
         * @param {?} svg
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (svg, x, y, height, width) {
                if (this.hScale) {
                    svg.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        CandlestickComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.transformeddata = [];
                this.keyArray = [];
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        }); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                }); //outer for loop ends 
                this.data = this.transformeddata;
                this.addDataKeys();
                this.formLegendData();
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.addDataKeys = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var cumulative = 0;
                for (var i = 0; i < this.data.length; i++) {
                    this.data[i]["start"] = cumulative;
                    cumulative += this.data[i][this.keyArray[1]];
                    this.data[i]["end"] = cumulative;
                    this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
                }
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        CandlestickComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        CandlestickComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
                object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
                return this.toolTipForBar(object);
            };
        /**
         * @param {?} chartData
         * @return {?}
         */
        CandlestickComponent.prototype.onCandlestickClick = /**
         * @param {?} chartData
         * @return {?}
         */
            function (chartData) {
                /** @type {?} */
                var object = {};
                object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
                object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
                this.chartClick(object);
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendArray = [];
                this.data.forEach(function (element, index) {
                    try {
                        for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            if (key == _this.keyArray[0]) {
                                /** @type {?} */
                                var object = {};
                                object["label"] = value;
                                object["color"] = _this.predefinedColor[index];
                                _this.legendArray.push(object);
                            }
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    var e_2, _d;
                });
            };
        /**
         * @param {?} chartData
         * @return {?}
         */
        CandlestickComponent.prototype.onCandlestickLegendClick = /**
         * @param {?} chartData
         * @return {?}
         */
            function (chartData) {
                /** @type {?} */
                var object = {};
                this.data.forEach(function (element) {
                    try {
                        for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            if (value == chartData.label) {
                                object[chartData.label] = element.value;
                            }
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return))
                                _d.call(_a);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                    var e_3, _d;
                });
                this.onLegendClick.emit(object);
            };
        /**
         * @return {?}
         */
        CandlestickComponent.prototype.resize = /**
         * @return {?}
         */
            function () {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.initializeData();
                this.plotXYAxis();
                this.plotD3Chart();
            };
        CandlestickComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-waterfall',
                        template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId (window:resize)=\"resize()\">\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onCandlestickLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                        styles: [""]
                    },] },
        ];
        CandlestickComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: DeviceQueryService }
            ];
        };
        CandlestickComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            data: [{ type: i0.Input }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            labelcolor: [{ type: i0.Input, args: ['label-color',] }],
            labelflag: [{ type: i0.Input, args: ['label',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            onLegendClick: [{ type: i0.Output }]
        };
        return CandlestickComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var BubbleComponent = (function (_super) {
        __extends(BubbleComponent, _super);
        function BubbleComponent(myservice, cdf, device) {
            var _this = _super.call(this, 'bubble') || this;
            _this.myservice = myservice;
            _this.cdf = cdf;
            _this.device = device;
            _this.svgwidth = 300;
            _this.svgheight = 300;
            _this.color = "blue";
            _this.level = 0;
            _this.drillabledatakey = [];
            _this.hScale = true;
            _this.vScale = true;
            _this.drillableFlag = true;
            _this.resizeflag = false;
            _this.keyArray = [];
            _this.transformeddata = [];
            _this.colors = [];
            _this.xaxisArray = [];
            _this.xarray = [];
            _this.legends = [];
            _this.legendarray = [];
            _this.legendData = [];
            _this.minxvalue = 0;
            _this.maxxvalue = 0;
            _this.bubblechartdata = [];
            _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
            return _this;
        }
        /**
         * @return {?}
         */
        BubbleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.data1 = [];
                if (this.level <= 1) {
                    /** @type {?} */
                    var resp_1;
                    if (this.httpmethod && this.httpurl) {
                        this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                            resp_1 = response;
                            _this.httpresponse = resp_1;
                        }, function (error) {
                        }, function () {
                            setTimeout(function () {
                                _this.data = _this.getResponseData(resp_1);
                                _this.data1 = _this.data;
                                _this.xaxisData();
                                _this.transformData(_this.data1);
                                _this.transformdata();
                                _this.colorGeneration();
                                _this.formLegendData();
                                _this.plotBubbleChart();
                            }, 0);
                        });
                    }
                    else if (this.data) {
                        setTimeout(function () {
                            _this.data1 = _this.data;
                            _this.data = _this.getResponseData(_this.data);
                            _this.xaxisData();
                            _this.transformData(_this.data);
                            _this.transformdata();
                            _this.colorGeneration();
                            _this.formLegendData();
                            _this.plotBubbleChart();
                        }, 0);
                    }
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        BubbleComponent.prototype.fetchData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var requestJson;
                /** @type {?} */
                var key = this.drillabledatakey;
                if (this.drillabledatakey.length) {
                    /** @type {?} */
                    var drillabledata = this.getMultipleDrillbleKeyData(data, key);
                    requestJson = drillabledata;
                }
                else {
                    requestJson = data;
                }
                if (this.httpmethod && this.httpurl) {
                    this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                        _this.httpresponse = response;
                    }, function (error) {
                    }, function () {
                        setTimeout(function () {
                            //this.data = this.getResponseData(resp);
                            _this.drawChart();
                        }, 0);
                    });
                }
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.drawChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.httpresponse);
                    _this.data1 = _this.data;
                    _this.xaxisData();
                    _this.transformData(_this.data1);
                    _this.transformdata();
                    _this.colorGeneration();
                    _this.formLegendData();
                    _this.plotBubbleChart();
                }, 0);
            };
        /**
         * @param {?} httpResponse
         * @return {?}
         */
        BubbleComponent.prototype.getResponseData = /**
         * @param {?} httpResponse
         * @return {?}
         */
            function (httpResponse) {
                /** @type {?} */
                var responsedata = httpResponse;
                if (this.datareader != null) {
                    /** @type {?} */
                    var dr = this.datareader.split('.');
                    try {
                        for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                            var ir = dr_1_1.value;
                            responsedata = responsedata[ir];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return))
                                _a.call(dr_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                else {
                    responsedata = httpResponse;
                }
                return responsedata;
                var e_1, _a;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        BubbleComponent.prototype.transformData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.colordata = [];
                this.keyArray = data[0];
                data.forEach(function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach(function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        });
                        _this.transformeddata.push(DummyObject_1);
                    }
                });
                this.data = this.transformeddata;
                this.colordata = this.transformeddata;
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.plotBubbleChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var colors = this.predefinedcolors;
                if (this.resizeflag == false) {
                    if (this.chartId) {
                        this.svgwidth = this.chartId.nativeElement.offsetWidth;
                    }
                    else {
                        this.svgwidth = this.svgwidth;
                    }
                }
                /** @type {?} */
                var tooltip = this.toolTip(d3);
                /** @type {?} */
                var margin = { top: 20, right: 60, bottom: 50, left: 60 };
                /** @type {?} */
                var width = this.svgwidth - margin.left - margin.right;
                /** @type {?} */
                var height = this.svgheight - margin.top - margin.bottom;
                /** @type {?} */
                var x;
                /** @type {?} */
                var y;
                x = d3.scaleLinear()
                    .rangeRound([0, width]);
                y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                /** @type {?} */
                var xAxis = d3.axisBottom(x);
                /** @type {?} */
                var yAxis = d3.axisLeft(y);
                this.svg = d3.select("#" + this.componentId)
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                // x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]] })]);
                y.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[2]]; })]);
                x.domain([this.minxvalue, this.maxxvalue]);
                /** @type {?} */
                var rScale = d3.scaleSqrt().rangeRound([6, 30]);
                rScale.domain([d3.min(this.data, function (d) { return d[Object.keys(d)[4]]; }), d3.max(this.data, function (d, i) { return d[Object.keys(d)[4]]; })]);
                if (this.device.IsDesktop() == true) {
                    this.svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis)
                        .append("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .style("text-anchor", "start");
                }
                else {
                    this.svg.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                this.svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("class", "label")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end");
                this.plotLine(this.svg, x, y, height, width);
                /** @type {?} */
                var node = this.svg.selectAll(".dot")
                    .data(this.bubblechartdata)
                    .enter().append("circle")
                    .attr("class", "dot")
                    .attr("r", function (d) { return rScale(d[Object.keys(d)[4]]); })
                    .attr("cursor", "pointer")
                    .attr("cx", function (d) {
                    return x(d[Object.keys(d)[1]]);
                })
                    .attr("cy", function (d) { return y(d[Object.keys(d)[2]]); })
                    .attr("fill", function (d) { return d[Object.keys(d)[5]]; })
                    .attr('opacity', 0.7)
                    .on("mouseover", function (d) {
                    return tooltip.style("visibility", "visible");
                })
                    .on("mousemove", function (d) {
                    return tooltip.html(_this.formTooltipData(d))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                })
                    .on("mouseout", function (d) {
                    return tooltip.style("visibility", "hidden");
                })
                    .on("click", function (d) {
                    _this.bubbleChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                });
            };
        /**
         * @param {?} tooltipData
         * @return {?}
         */
        BubbleComponent.prototype.formTooltipData = /**
         * @param {?} tooltipData
         * @return {?}
         */
            function (tooltipData) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key != 'color') {
                            object[key] = value;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return this.toolTipForBar(object);
                var e_2, _d;
            };
        // Method on chart click
        // Method on chart click
        /**
         * @param {?} event
         * @return {?}
         */
        BubbleComponent.prototype.bubbleChartClick =
            // Method on chart click
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var object = {};
                try {
                    for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        object[key] = value;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return))
                            _d.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.chartClick(object);
                var e_3, _d;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        BubbleComponent.prototype.resize = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.svgwidth = 0;
                this.svg.selectAll("*").remove();
                this.resizeflag = true;
                this.svgwidth = this.divid.nativeElement.offsetWidth;
                this.plotBubbleChart();
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.xaxisData = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var array = [];
                this.minxvalue = 0;
                this.maxxvalue = 0;
                this.xaxisArray = [];
                this.xarray = [];
                this.data1.forEach(function (element) {
                    array.push(element[1]);
                });
                for (var i = 1; i < array.length; i++) {
                    this.xaxisArray.push(array[i]);
                }
                /** @type {?} */
                var minvalue = Math.floor(d3.min(this.xaxisArray));
                /** @type {?} */
                var maxvalue = Math.ceil(d3.max(this.xaxisArray));
                this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
                this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.colorGeneration = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendarray = [];
                /** @type {?} */
                var i = 0;
                /** @type {?} */
                var names = this.data1
                    .map(function (e) { return e[3]; })
                    .filter(function (e, i, a) { return a.indexOf(e) === i; });
                var _loop_1 = function (j) {
                    /** @type {?} */
                    var value = [];
                    /** @type {?} */
                    var obj = { "label": "", "color": "", "value": [] };
                    this_1.colordata.forEach(function (element) {
                        if (element[Object.keys(element)[3]] == names[j]) {
                            element['color'] = _this.predefinedcolors[i];
                            value.push(element);
                        }
                    });
                    obj["value"] = value;
                    obj["label"] = names[j];
                    obj["color"] = this_1.predefinedcolors[i];
                    this_1.legendarray.push(obj);
                    i++;
                };
                var this_1 = this;
                for (var j = 1; j < names.length; j++) {
                    _loop_1(j);
                }
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.formLegendData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.legendData = [];
                this.legendarray.forEach(function (element) {
                    /** @type {?} */
                    var legendobject = {};
                    legendobject['label'] = element.label;
                    legendobject['color'] = element.color;
                    _this.legendData.push(legendobject);
                });
            };
        /**
         * @param {?} legendevent
         * @return {?}
         */
        BubbleComponent.prototype.onBubbleLegendClick = /**
         * @param {?} legendevent
         * @return {?}
         */
            function (legendevent) {
                var _this = this;
                this.legendarray.forEach(function (element) {
                    if (legendevent.label == element.label) {
                        _this.legendClick(element.value);
                    }
                });
            };
        /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
        BubbleComponent.prototype.plotLine = /**
         * @param {?} g
         * @param {?} x
         * @param {?} y
         * @param {?} height
         * @param {?} width
         * @return {?}
         */
            function (g, x, y, height, width) {
                if (this.vScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .attr('transform', 'translate(0,' + height + ')')
                        .call(d3.axisBottom(x).
                        tickSize(-this.width).tickFormat(''));
                }
                if (this.hScale) {
                    g.append('g')
                        .attr("color", "lightgrey")
                        .call(d3.axisLeft(y)
                        .tickSize(-width).tickFormat(''));
                }
            };
        /**
         * @return {?}
         */
        BubbleComponent.prototype.transformdata = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.bubblechartdata = [];
                /** @type {?} */
                var buubledata = [];
                this.colordata.forEach(function (element, i) {
                    buubledata.push(element[Object.keys(element)[4]]);
                });
                /** @type {?} */
                var data = buubledata.sort(function (a, b) { return b - a; });
                var _loop_2 = function (j) {
                    this_2.colordata.forEach(function (element) {
                        if (data[j] == element[Object.keys(element)[4]])
                            _this.bubblechartdata.push(element);
                    });
                };
                var this_2 = this;
                for (var j = 0; j <= data.length; j++) {
                    _loop_2(j);
                }
            };
        BubbleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-d3-chart-bubble',
                        template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize($event)\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBubbleLegendClick($event)\" [data]=\"legendData\" style=\"height:100%;\"></amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                        styles: [""]
                    },] },
        ];
        BubbleComponent.ctorParameters = function () {
            return [
                { type: CommanDataService },
                { type: i0.ChangeDetectorRef },
                { type: DeviceQueryService }
            ];
        };
        BubbleComponent.propDecorators = {
            svgwidth: [{ type: i0.Input, args: ['width',] }],
            svgheight: [{ type: i0.Input, args: ['height',] }],
            color: [{ type: i0.Input, args: ['color',] }],
            chartId: [{ type: i0.ViewChild, args: ['chartId',] }],
            divid: [{ type: i0.ViewChild, args: ['divid',] }],
            datareader: [{ type: i0.Input, args: ['data-reader',] }],
            level: [{ type: i0.Input, args: ['level',] }],
            target: [{ type: i0.Input, args: ['target',] }],
            drillabledatakey: [{ type: i0.Input, args: ['drillable-data',] }],
            hScale: [{ type: i0.Input, args: ['horizontal-scale',] }],
            vScale: [{ type: i0.Input, args: ['vertical-scale',] }]
        };
        return BubbleComponent;
    }(AmexioD3BaseChartComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ViewDrillableComponent = (function () {
        function ViewDrillableComponent() {
        }
        /**
         * @return {?}
         */
        ViewDrillableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ViewDrillableComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                return this.getComponentData();
            };
        /**
         * @return {?}
         */
        ViewDrillableComponent.prototype.getComponentData = /**
         * @return {?}
         */
            function () {
                this.chartInputArray = [];
                this.barchartinput = this.queryBarchartinput.toArray();
                this.groupbarchartinput = this.QueryGroupbarchartinput.toArray();
                this.linechartinput = this.QueryLinechartinput.toArray();
                this.donutchartinput = this.QueryDonutchartinput.toArray();
                this.piechartinput = this.QueryPiechartinput.toArray();
                this.barstackchartinput = this.QueryBarStackchartinput.toArray();
                this.combochartinput = this.QueryCombochartinput.toArray();
                this.histogramchartinput = this.QueryHistogramchartinput.toArray();
                this.scatterchartinput = this.QuerySatterchartinput.toArray();
                this.multiareachartinput = this.QueryMultiareachartinput.toArray();
                this.candlestickchartinput = this.QueryCandlestickchartinput.toArray();
                this.bubblechartinput = this.QueryBubblechartinput.toArray();
                this.chartInputArray = this.chartInputArray.concat(this.barchartinput, this.groupbarchartinput, this.linechartinput, this.donutchartinput, this.piechartinput, this.barstackchartinput, this.combochartinput, this.histogramchartinput, this.scatterchartinput, this.multiareachartinput, this.candlestickchartinput, this.bubblechartinput);
                return this.chartInputArray;
            };
        ViewDrillableComponent.propDecorators = {
            queryBarchartinput: [{ type: i0.ContentChildren, args: [AmexioD3BarChartComponent, { descendants: true },] }],
            QueryGroupbarchartinput: [{ type: i0.ContentChildren, args: [GroupbarComponent, { descendants: true },] }],
            QueryLinechartinput: [{ type: i0.ContentChildren, args: [AmexioD3LineComponent, { descendants: true },] }],
            QueryPiechartinput: [{ type: i0.ContentChildren, args: [AmexioD3PieChartComponent, { descendants: true },] }],
            QueryDonutchartinput: [{ type: i0.ContentChildren, args: [AmexioD3DounutChartComponent, { descendants: true },] }],
            QueryBarStackchartinput: [{ type: i0.ContentChildren, args: [BarstackComponent, { descendants: true },] }],
            QueryCombochartinput: [{ type: i0.ContentChildren, args: [CombochartComponent, { descendants: true },] }],
            QueryHistogramchartinput: [{ type: i0.ContentChildren, args: [HistogramComponent, { descendants: true },] }],
            QuerySatterchartinput: [{ type: i0.ContentChildren, args: [ScatterchartComponent, { descendants: true },] }],
            QueryMultiareachartinput: [{ type: i0.ContentChildren, args: [MultiareaComponent, { descendants: true },] }],
            QueryCandlestickchartinput: [{ type: i0.ContentChildren, args: [CandlestickComponent, { descendants: true },] }],
            QueryBubblechartinput: [{ type: i0.ContentChildren, args: [BubbleComponent, { descendants: true },] }]
        };
        return ViewDrillableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DrillableComponent = (function (_super) {
        __extends(DrillableComponent, _super);
        function DrillableComponent() {
            var _this = _super.call(this) || this;
            _this.mouseLocation = { left: 0, top: 0 };
            _this.componentcounter = 1;
            _this.disableFlag = false;
            return _this;
        }
        /**
         * @return {?}
         */
        DrillableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        DrillableComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.ComponentDataArray = this.getComponentData();
                this.getData(this.ComponentDataArray);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        DrillableComponent.prototype.getData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                data.forEach(function (element) {
                    if (element.level !== 1) {
                        element.drillableFlag = false;
                        element.drillableEvent.subscribe(function (eventdata) {
                            _this.hideUI(eventdata);
                            _this.sameLevelChart(eventdata);
                            _this.ShowUI(eventdata);
                        });
                    }
                    else {
                        _this.disableFlag = false;
                        element.drillableEvent.subscribe(function (eventdata) {
                            _this.hideUI(eventdata);
                            _this.sameLevelChart(eventdata);
                            _this.ShowUI(eventdata);
                        });
                    }
                });
            };
        /**
         * @param {?} eventRef
         * @return {?}
         */
        DrillableComponent.prototype.hideUI = /**
         * @param {?} eventRef
         * @return {?}
         */
            function (eventRef) {
                this.ComponentDataArray.forEach(function (element) {
                    if (element.level == eventRef.ref.level) {
                        eventRef.ref.drillableFlag = false;
                    }
                });
            };
        /**
         * @param {?} eventRef
         * @return {?}
         */
        DrillableComponent.prototype.ShowUI = /**
         * @param {?} eventRef
         * @return {?}
         */
            function (eventRef) {
                var _this = this;
                this.eventData = [];
                this.eventData = eventRef;
                this.ComponentDataArray.forEach(function (element) {
                    if (eventRef.ref.target == element.level) {
                        if (_this.arrayofsameLevel.length == 1) {
                            _this.disableFlag = true;
                            element.drillableFlag = true;
                            element.fetchData(eventRef.node);
                            _this.componentcounter = element.level;
                        }
                        else {
                            _this.contextmenuFlag = true;
                            _this.mouseLocation.left = eventRef.event.clientX;
                            _this.mouseLocation.top = eventRef.event.clientY;
                            _this.contextStyle = _this.getContextMenuStyle();
                        }
                    }
                });
                if (this.componentcounter == eventRef.ref.level) {
                    eventRef.ref.drillableFlag = true;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DrillableComponent.prototype.previouschartClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                /** @type {?} */
                var chartLevel = this.componentcounter - 1;
                this.ComponentDataArray.forEach(function (element) {
                    if (chartLevel == element.level) {
                        element.drillableFlag = true;
                        element.drawChart();
                    }
                    else if (_this.componentcounter == element.level) {
                        element.drillableFlag = false;
                    }
                });
                if (this.componentcounter == 2) {
                    this.disableFlag = false;
                }
                this.componentcounter = chartLevel;
            };
        /**
         * @param {?} eventRef
         * @return {?}
         */
        DrillableComponent.prototype.sameLevelChart = /**
         * @param {?} eventRef
         * @return {?}
         */
            function (eventRef) {
                var _this = this;
                this.arrayofsameLevel = [];
                this.ComponentDataArray.forEach(function (element) {
                    if (eventRef.ref.target == element.level) {
                        _this.arrayofsameLevel = _this.arrayofsameLevel.concat(element);
                    }
                });
            };
        //Method Creates style if two same targets found.
        //Method Creates style if two same targets found.
        /**
         * @return {?}
         */
        DrillableComponent.prototype.getContextMenuStyle =
            //Method Creates style if two same targets found.
            /**
             * @return {?}
             */
            function () {
                return {
                    'cursor': 'default',
                    'position': 'fixed',
                    'display': this.contextmenuFlag ? 'block' : 'none',
                    'left': this.mouseLocation.left + 'px',
                    'top': this.mouseLocation.top + 'px',
                    'box-shadow': '1px 1px 2px #000000',
                    'width': '15%',
                };
            };
        /**
         * @param {?} elementRef
         * @return {?}
         */
        DrillableComponent.prototype.getListPosition = /**
         * @param {?} elementRef
         * @return {?}
         */
            function (elementRef) {
                /** @type {?} */
                var height = 240;
                if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DrillableComponent.prototype.onContextNodeClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.componentcounter = 0;
                this.contextmenuFlag = false;
                this.eventData.ref.drillableFlag = false;
                this.disableFlag = true;
                event.drillableFlag = true;
                event.fetchData(this.eventData.node);
                this.componentcounter = event.level;
                if (this.componentcounter == this.eventData.ref.level) {
                    this.eventData.ref.drillableFlag = true;
                }
            };
        /**
         * @return {?}
         */
        DrillableComponent.prototype.onCloseClick = /**
         * @return {?}
         */
            function () {
                this.contextmenuFlag = false;
            };
        DrillableComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'amexio-drillable',
                        template: "\n<div > \n    <ng-container *ngIf=\"disableFlag\">\n            <button type=\"button\" class=\"button\"\n             (click)=\"previouschartClick($event)\">\n             <i class=\"fa fa-arrow-left\"></i> \n             \n            </button>\n</ng-container>\n\n<ng-content></ng-content>\n\n</div>\n\n<span [ngStyle]=\"contextStyle\" >\n  <ul *ngIf=\"contextmenuFlag\" class=\"close-thik\" class=\"context-menu-list\"  >\n    <span (click)=\"onCloseClick()\" class=\"close\"><i class=\"fa fa-close\"></i></span>\n  <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" \n  *ngFor=\"let itemConfig of arrayofsameLevel\">\n  <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\"></em>\n  <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.title}}\n  </span>\n  </li>\n  </ul>\n  </span>\n  ",
                        styles: [".button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:\"\";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}"]
                    },] },
        ];
        DrillableComponent.ctorParameters = function () { return []; };
        return DrillableComponent;
    }(ViewDrillableComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var D3_COMPONENTS = [
        AmexioD3Legend,
        AmexioD3DounutChartComponent,
        AmexioD3BarChartComponent,
        AmexioD3PieChartComponent,
        AmexioD3LineComponent,
        BarstackComponent,
        GroupbarComponent,
        CombochartComponent,
        DrillableComponent,
        HistogramComponent,
        MultiareaComponent,
        ScatterchartComponent,
        CandlestickComponent,
        BubbleComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var AmexioChartD3Module = (function () {
        function AmexioChartD3Module() {
        }
        AmexioChartD3Module.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            forms.FormsModule,
                            common.CommonModule
                        ],
                        declarations: D3_COMPONENTS,
                        providers: [DeviceQueryService],
                        exports: D3_COMPONENTS
                    },] },
        ];
        return AmexioChartD3Module;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.AmexioChartD3Module = AmexioChartD3Module;
    exports.AmexioD3DounutChartComponent = AmexioD3DounutChartComponent;
    exports.AmexioD3PieChartComponent = AmexioD3PieChartComponent;
    exports.AmexioD3BarChartComponent = AmexioD3BarChartComponent;
    exports.AmexioD3LineComponent = AmexioD3LineComponent;
    exports.BarstackComponent = BarstackComponent;
    exports.GroupbarComponent = GroupbarComponent;
    exports.ɵa = D3_COMPONENTS;
    exports.ɵc = AmexioD3BaseChartComponent;
    exports.ɵi = ViewDrillableComponent;
    exports.ɵn = BubbleComponent;
    exports.ɵm = CandlestickComponent;
    exports.ɵg = CombochartComponent;
    exports.ɵh = DrillableComponent;
    exports.ɵj = HistogramComponent;
    exports.ɵb = AmexioD3Legend;
    exports.ɵf = AmexioD3BaseLineComponent;
    exports.ɵl = MultiareaComponent;
    exports.ɵk = ScatterchartComponent;
    exports.ɵd = CommanDataService;
    exports.ɵe = DeviceQueryService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1leGlvLWNoYXJ0LWQzLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbbnVsbCwibmc6Ly9hbWV4aW8tY2hhcnQtZDMvbGliL2Jhc2UvYmFzZS5jb21wb25lbnQudHMiLCJuZzovL2FtZXhpby1jaGFydC1kMy9saWIvc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZS50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9kb3VudXQvZG91bnV0LmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9waWUvcGllLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9sZWdlbmQvbGVnZW5kLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZS50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9iYXIvYmFyLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9saW5lL2Jhc2VsaW5lLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9saW5lL2xpbmUuY29tcG9uZW50LnRzIiwibmc6Ly9hbWV4aW8tY2hhcnQtZDMvbGliL2JhcnN0YWNrL2JhcnN0YWNrLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9ncm91cGJhci9ncm91cGJhci5jb21wb25lbnQudHMiLCJuZzovL2FtZXhpby1jaGFydC1kMy9saWIvY29tYm9jaGFydC9jb21ib2NoYXJ0LmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9oaXN0b2dyYW0vaGlzdG9ncmFtLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9zY2F0dGVyY2hhcnQvc2NhdHRlcmNoYXJ0LmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9tdWx0aWFyZWEvbXVsdGlhcmVhLmNvbXBvbmVudC50cyIsIm5nOi8vYW1leGlvLWNoYXJ0LWQzL2xpYi9jYW5kbGVzdGljay9jYW5kbGVzdGljay5jb21wb25lbnQudHMiLCJuZzovL2FtZXhpby1jaGFydC1kMy9saWIvYnViYmxlL2J1YmJsZS9idWJibGUuY29tcG9uZW50LnRzIiwibmc6Ly9hbWV4aW8tY2hhcnQtZDMvbGliL2Jhc2Uvdmlldy5jb21wb25lbnQudHMiLCJuZzovL2FtZXhpby1jaGFydC1kMy9saWIvZHJpbGxhYmxlL2RyaWxsYWJsZS9kcmlsbGFibGUuY29tcG9uZW50LnRzIiwibmc6Ly9hbWV4aW8tY2hhcnQtZDMvbGliL2FtZXhpby1jaGFydC1kMy1jb21wb25lbnRzLnRzIiwibmc6Ly9hbWV4aW8tY2hhcnQtZDMvbGliL2FtZXhpby1jaGFydC1kMy5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnR7XG5cbiAgIFxuXG4gICAgQE91dHB1dCgpIG9uTGVnZW5kQ2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgQE91dHB1dCgpIG9uQ2hhcnRDbGljazogYW55ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KCkgb25MaW5lQ2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgXG4gICAgQE91dHB1dCgpIGRyaWxsYWJsZUV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIFxuICAgIEBJbnB1dCgnZGF0YScpIGRhdGE6IGFueTtcblxuICAgIEBJbnB1dCgnaHR0cC11cmwnKSBodHRwdXJsOiBhbnk7XG4gICAgXG4gICAgQElucHV0KCdodHRwLW1ldGhvZCcpIGh0dHBtZXRob2Q6IGFueTtcblxuICAgIEBJbnB1dCgnbGVnZW5kJykgbGVnZW5kOiBib29sZWFuID0gdHJ1ZSA7XG5cbiAgICBASW5wdXQoJ2NvbG9yJykgY29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoJ2hlaWdodCcpIGhlaWdodDogYW55ID0gXCIzMDBcIjtcblxuICAgIEBJbnB1dCgnd2lkdGgnKSB3aWR0aCA6IGFueSA9IFwiMzAwXCI7XG5cbiAgICBASW5wdXQoJ3RpdGxlJykgdGl0bGU6IGFueSA9IFwiXCI7XG5cbiAgICBwcmVkZWZpbmVkY29sb3JzOiBzdHJpbmdbXTtcbiAgICBcbiAgICBjb21wb25lbnRJZCA6IHN0cmluZztcblxuICAgIHByaXZhdGUgIHBvc3NpYmxlIDogc3RyaW5nID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RkZWZnaGlqa2xtb25wcXJzdHV2d3h5elwiO1xuXG4gICAgY29sb3JJbmRleDogbnVtYmVyID0gMDtcblxuICAgIGNoYXJ0dHlwZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGNoYXJ0dHlwZTpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jb2xvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5jaGFydHR5cGUgPSBjaGFydHR5cGU7XG4gICAgICAgIHRoaXMucHJlZGVmaW5lZGNvbG9ycyA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuICAgICAgICB0aGlzLmNvbXBvbmVudElkID0gdGhpcy5jaGFydHR5cGUgICsgXCItXCIgKyB0aGlzLmdlbmVyYXRlSWQoKTtcbiAgICB9XG4gIFxuICAgIHByb3RlY3RlZCBpbml0aWFsaXplRGF0YSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgZWxlbWVudC5jb2xvciA9IHRoaXMuZ2V0Q29sb3IoZWxlbWVudCk7XG4gICAgICAgICAgIH0pO1xuICAgICB9XG5cbiAgICAgIHByb3RlY3RlZCBnZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhOmFueSxkcmlsbGFibGVrZXlzOmFueSlcbiAgICAgIHtcbiAgICAgICBcbiAgICAgICAgICBsZXQgbm9kZU9iamVjdD17fTtcbiAgICAgICAgICBpZihkYXRhKVxuICAgICAgICAgIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkcmlsbGFibGVrZXlzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICBsZXQgZWxlbWVudCA9IGRyaWxsYWJsZWtleXNbaW5kZXhdO1xuICAgICAgICAgICBmb3IgKGxldCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gZWxlbWVudCkgXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVPYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbm9kZU9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICBcbiB9XG4gICAgIFxuIHByaXZhdGUgZ2VuZXJhdGVJZCgpe1xuICAgICAgIGxldCBpZCA9IFwiXCI7XG4gICAgICAgZm9yKGxldCBpID0gMDsgaTw1OyBpKyspe1xuICAgICAgICBpZCA9IGlkICsgdGhpcy5wb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdGhpcy5wb3NzaWJsZS5sZW5ndGgpKTtcbiAgICAgICB9XG4gICAgICAgaWQgPSBpZCArIFwiLVwiK25ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICBwcml2YXRlICBnZXRDb2xvcihvYmplY3QgOiBhbnkpe1xuICAgICAgICBpZiAob2JqZWN0LmNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29sb3JzLmxlbmd0aCA+IHRoaXMuY29sb3JJbmRleCkge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmNvbG9yc1t0aGlzLmNvbG9ySW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5jb2xvckluZGV4Kys7XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHRoaXMuY29sb3JzLmxlbmd0aCA+IDApICYmICh0aGlzLmNvbG9ycy5sZW5ndGggPD0gdGhpcy5jb2xvckluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5jb2xvckluZGV4ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcnNbdGhpcy5jb2xvckluZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5wcmVkZWZpbmVkY29sb3JzW3RoaXMuY29sb3JJbmRleF07XG4gICAgICAgICAgICB0aGlzLmNvbG9ySW5kZXgrKztcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbGVnZW5kQ2xpY2sobm9kZTphbnkpe1xuICAgICAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChub2RlKTtcbiAgICB9XG5cbiAgICBjaGFydENsaWNrKG5vZGU6YW55KXtcbiAgICAgICAgdGhpcy5vbkNoYXJ0Q2xpY2suZW1pdChub2RlKTtcbiAgICB9XG4gICAgXG4gICAgY29tYm9MaW5lQ2xpY2sobm9kZTogYW55KXtcbiAgICAgICAgdGhpcy5vbkxpbmVDbGljay5lbWl0KG5vZGUpO1xuICAgIH1cbiAgICBmb3JkcmlsbGFibGVDbGljayhyZWY6IGFueSxub2RlOiBhbnksZXZlbnQ6IGFueSlcbiAgICAge1xuICAgICAgICB0aGlzLmRyaWxsYWJsZUV2ZW50LmVtaXQoe3JlZjogcmVmLG5vZGU6IG5vZGUsZXZlbnQ6IGV2ZW50fSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB0b29sVGlwIChkMzphbnkpIDphbnl7XG4gICAgICAgcmV0dXJuICBkMy5zZWxlY3QoXCJib2R5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsJ3Rvb2x0aXBpZCcpXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywnYW1leGlvZDN0b29sdGlwJylcbiAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwiei1pbmRleFwiLCBcIjEwXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcENvbnRlbnQodG9vbHRpcGRhdGE6YW55KSA6YW55e1xuICAgICAgIGxldCB0b29sdGlwaHRtbCA9IFwiPHRhYmxlPlwiO1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9vbHRpcGRhdGEpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRvb2x0aXBkYXRhW2tleV07XG4gICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHRyPlwiO1xuLy8tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8dGQ+XCI7XG4gICAgICAgIC8vICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIGtleSsnOic7XG4gICAgICAgIC8vICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC90ZD5cIjtcbi8vLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHRkPlwiO1xuICAgICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyB2YWx1ZTtcbiAgICAgICAgICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8L3RkPlwiO1xuICAgICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjwvdHI+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjwvdGFibGU+XCI7XG5cbiAgICAgIHJldHVybiB0b29sdGlwaHRtbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcFdpdGhMZWdlbmRhbmRBeGlzKGxlZ2VuZDogc3RyaW5nLCB4YXhpczpzdHJpbmcsIHlheGlzOiBzdHJpbmcpIDphbnl7XG4gICAgICAgIGxldCB0b29sdGlwaHRtbCA9IFwiPGRpdj5cIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPGI+XCIreGF4aXMrXCI8L2I+LCBcIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIGxlZ2VuZCtcIjwvYj4gXCI7XG4gICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjxiPlwiK3lheGlzK1wiPC9iPiBcIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC9kaXY+XCI7XG4gICAgICAgIHJldHVybiB0b29sdGlwaHRtbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcEZvckJhcih0b29sdGlwRGF0YTogYW55KTogYW55e1xuICAgICAgICAgbGV0IHRvb2x0aXBodG1sPSBcIjxkaXY+XCI7XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0b29sdGlwRGF0YSkpIHtcbiAgICAgICAgICAgIGxldCBzaWRlU3R5bGU9XCJmbG9hdDpsZWZ0XCI7XG4gICAgICAgICAgICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8ZGl2PlwiO1xuICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHNwYW4gc3R5bGUgPVwiK3NpZGVTdHlsZStcIiA+PGI+XCIgKyBrZXkgK1wiIFwiKyBcIjwvYj5cIiArdmFsdWUgKyBcIjwvYnI+PC9zcGFuPlwiO1xuICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC9kaXY+XCI7XG4gICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHRvb2x0aXBodG1sO1xuICAgIH1cblxufSIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsSHR0cENsaWVudE1vZHVsZSxIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL2luZGV4JztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbW1hbkRhdGFTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6SHR0cENsaWVudCkgeyB9XG4gIHNlcnZpY2VVcmw6IHN0cmluZztcblxuICBmZXRjaFVybERhdGEoc2VydmljZVVybDogc3RyaW5nLCBtZXRob2RUeXBlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJlcXVlc3RKc29uID0ge307XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcpO1xuICAgIGlmIChtZXRob2RUeXBlID09PSAncG9zdCcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Qoc2VydmljZVVybCwgcmVxdWVzdEpzb24sIHtoZWFkZXJzfSk7XG4gICAgfWVsc2UgaWYgKG1ldGhvZFR5cGUgPT09ICdnZXQnKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoc2VydmljZVVybCwge2hlYWRlcnN9KTtcbiAgICB9XG59XG5cblxucG9zdGZldGNoRGF0YShzZXJ2aWNlVXJsOiBzdHJpbmcsIG1ldGhvZFR5cGU6IHN0cmluZyxyZXF1ZXN0SnNvbjphbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuIFxuICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG4gIGlmIChtZXRob2RUeXBlID09PSAncG9zdCcpIHtcbiAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHNlcnZpY2VVcmwsIHJlcXVlc3RKc29uLCB7aGVhZGVyc30pO1xuICB9ZWxzZSBpZiAobWV0aG9kVHlwZSA9PT0gJ2dldCcpIHtcbiAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoc2VydmljZVVybCwge2hlYWRlcnN9KTtcbiAgfVxufVxuXG5cblxuXG5cblxufSIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS9iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQbG90Q2FydCB9IGZyb20gJy4uL2Jhc2UvY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDb21tYW5EYXRhU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbW1hbi5kYXRhLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtZG9udXQnLFxuICB0ZW1wbGF0ZTogYDxkaXYgKm5nSWY9XCJkcmlsbGFibGVGbGFnXCIgI2NoYXJ0SWQ+XG5cblxuICAgIDxkaXYgY29sc3Bhbj1cIjJcIiBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IFwiPlxuICAgICAgICB7e3RpdGxlfX1cbiAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7ZmxleC1kaXJlY3Rpb246IHJvd1wiPlxuICAgICAgICAgICAgPHN2ZyBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pbllNaW4gbWVldFwiIHZpZXdCb3g9XCIwIDAgMzAwIDMwMFwiIFthdHRyLmhlaWdodF09XCJoZWlnaHRcIiBbYXR0ci53aWR0aF09XCJ3aWR0aFwiIFthdHRyLmlkXT1cImNvbXBvbmVudElkXCI+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDxkaXY+XG5cbiAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyBwYWRkaW5nOiAxJTtcIj5cbiAgICAgICAgICAgICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiAob25DbGljayk9XCJvbkRvbnV0TGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZEFycmF5XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj48L2FtZXhpby1kMy1sZWdlbmQ+XG4gICAgICAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICBgXG59KVxuZXhwb3J0IGNsYXNzIEFtZXhpb0QzRG91bnV0Q2hhcnRDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0IHtcblxuICBASW5wdXQoJ3BpZScpIHBpZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDMwMDtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQFZpZXdDaGlsZCgnZGl2aWQnKSBkaXZpZDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnZHJpbGxpZCcpIGRyaWxsaWQ6IGFueTtcbiAgQElucHV0KCdkYXRhLXJlYWRlcicpIGRhdGFyZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCdsZXZlbCcpIGxldmVsOiBudW1iZXIgPSAwO1xuICBASW5wdXQoJ3RhcmdldCcpIHRhcmdldDogbnVtYmVyO1xuICBASW5wdXQoKSBkcmlsbERhdGE6IGFueTtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVxuICBkcmlsbGFibGVGbGFnOiBib29sZWFuID0gdHJ1ZTtcbiAga2V5QXJyYXk6IGFueVtdID0gW107XG4gIHRyYW5zZm9ybWVkZGF0YTogYW55W10gPSBbXTtcbiAgbGVnZW5kQXJyYXk6IGFueVtdID0gW107XG4gIHJlc3BvbnNlOiBhbnk7XG4gIHN2ZzogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UsIHByaXZhdGUgY2RmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKCdET05VVENIQVJUJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGxldCByZXNwOiBhbnk7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICB9LCAoKSA9PiB7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICAgIC8vdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2VcbiAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xuXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIHRoaXMuZmV0Y2hEYXRhKHRoaXMuZHJpbGxEYXRhKTtcbiAgICB9XG4gIH1cblxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG5cbiAgICBpZiAodGhpcy5kcmlsbGFibGVkYXRha2V5Lmxlbmd0aCkge1xuICAgICAgbGV0IGRyaWxsYWJsZWRhdGEgPSB0aGlzLmdldE11bHRpcGxlRHJpbGxibGVLZXlEYXRhKGRhdGEsIGtleSk7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRyaWxsYWJsZWRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVxdWVzdEpzb24gPSBkYXRhO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICB0aGlzLm15c2VydmljZS5wb3N0ZmV0Y2hEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuXG4gICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcblxuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgfSwgMCk7XG5cbiAgfVxuXG4gIGdldFJlc3BvbnNlRGF0YShodHRwUmVzcG9uc2U6IGFueSkge1xuICAgIGxldCByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgaWYgKHRoaXMuZGF0YXJlYWRlciAhPSBudWxsKSB7XG4gICAgICBjb25zdCBkciA9IHRoaXMuZGF0YXJlYWRlci5zcGxpdCgnLicpO1xuICAgICAgZm9yIChjb25zdCBpciBvZiBkcikge1xuICAgICAgICByZXNwb25zZWRhdGEgPSByZXNwb25zZWRhdGFbaXJdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZWRhdGE7XG4gIH1cbiAgcGxvdEQzQ2hhcnQoKSB7XG4gICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICAgIC8vdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgLy8gIHRoaXMuZGF0YSA9IHRoaXMudHJhbnNmb3JtZWRkYXRhO1xuICAgIGxldCBvdXRlclJhZGl1cyA9IDA7XG4gICAgbGV0IGlubmVyUmFkaXVzID0gMDtcblxuICAgIG91dGVyUmFkaXVzID0gdGhpcy5zdmd3aWR0aCAvIDI7XG4gICAgaW5uZXJSYWRpdXMgPSB0aGlzLnN2Z3dpZHRoIC8gNDtcblxuICAgIGlmICh0aGlzLnBpZSkge1xuICAgICAgaW5uZXJSYWRpdXMgPSAwO1xuICAgIH1cblxuICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuXG4gICAgY29uc3QgYXJjID0gZDMuYXJjKClcbiAgICAgIC5vdXRlclJhZGl1cyhvdXRlclJhZGl1cylcbiAgICAgIC5pbm5lclJhZGl1cyhpbm5lclJhZGl1cyk7XG5cbiAgICBjb25zdCBwaWUgPSBkMy5waWUoKVxuICAgICAgLnZhbHVlKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzFdXTtcbiAgICAgICAgLy8gIHJldHVybiBkLnZhbHVlXG4gICAgICB9KTtcblxuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZClcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHRoaXMuc3Znd2lkdGggLyAyICsgJywnICsgdGhpcy5zdmdoZWlnaHQgLyAyICsgJyknKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShwaWUodGhpcy5kYXRhKSlcbiAgICAgIC5lbnRlcigpO1xuXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuc3ZnLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignZCcsIGFyYylcbiAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgaWYgKGQuZGF0YS5jb2xvcikge1xuICAgICAgICAgIHJldHVybiBkLmRhdGEuY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyAgcmV0dXJuIChkICYmIGQuZGF0YSAmJiBkLmRhdGEuY29sb3IpID8gZC5kYXRhLmNvbG9yIDogXCJibGFja1wiXG4gICAgICB9KVxuICAgICAgLmF0dHIoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5odG1sKFxuICAgICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQuZGF0YSlcblxuICAgICAgICAgIC8vICB0aGlzLmZvcm1MZWdlbmREYXRhKGQuZGF0YSlcbiAgICAgICAgICAvLyB0aGlzLnRvb2xUaXBDb250ZW50KGQuZGF0YSlcbiAgICAgICAgKVxuICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAxMCkgKyBcInB4XCIpXG4gICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLkRvbnV0Q2hhcnRDbGljayhkLmRhdGEpO1xuICAgICAgICB0aGlzLmZvcmRyaWxsYWJsZUNsaWNrKHRoaXMsIGQuZGF0YSwgZXZlbnQpO1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIC8vdGhpcy5jaGFydENsaWNrKGQuZGF0YSk7XG4gICAgICB9KTtcbiAgICBpZiAodGhpcy5sYWJlbGZsYWcpIHtcbiAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBhcmMuY2VudHJvaWQoZCkgKyBcIilcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuXG4gICAgICAgICAgcmV0dXJuIGQuZGF0YVtPYmplY3Qua2V5cyhkLmRhdGEpWzFdXVxuXG4gICAgICAgICAgLy9yZXR1cm4gZC5kYXRhLnZhbHVlO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIGlmKHRoaXMubGFiZWxjb2xvci5sZW5ndGg+MCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbGNvbG9yO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyByZXR1cm4gKGQgJiYgZC5kYXRhICYmIGQuZGF0YS50ZXh0Y29sb3IpID8gZC5kYXRhLnRleHRjb2xvciA6IFwiYmxhY2tcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTJweCcpO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1MZWdlbmREYXRhKCkge1xuICAgIHRoaXMubGVnZW5kQXJyYXkgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBsZWdlbmRvYmplY3QgPSB7fTtcbiAgICAgIGxlZ2VuZG9iamVjdFsnbGFiZWwnXSA9IGVsZW1lbnRbT2JqZWN0LmtleXMoZWxlbWVudClbMF1dO1xuICAgICAgbGVnZW5kb2JqZWN0Wyd2YWx1ZSddID0gZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KVsxXV07XG4gICAgICBsZWdlbmRvYmplY3RbJ2NvbG9yJ10gPSBlbGVtZW50LmNvbG9yO1xuICAgICAgdGhpcy5sZWdlbmRBcnJheS5wdXNoKGxlZ2VuZG9iamVjdCk7XG4gICAgfSk7XG4gIH1cblxuICBvbkRvbnV0TGVnZW5kQ2xpY2sobGVnZW5kZXZlbnQ6IGFueSkge1xuICAgIGxldCBvYmogPSB7fTtcblxuICAgIC8vICBvYmpbJ2xhYmVsJ10gPSBsZWdlbmRldmVudC5sYWJlbDtcbiAgICAvLyAgb2JqWyd2YWx1ZSddID0gbGVnZW5kZXZlbnQudmFsdWUgXG4gICAgb2JqW3RoaXMua2V5QXJyYXlbMF1dID0gbGVnZW5kZXZlbnQubGFiZWw7XG4gICAgb2JqW3RoaXMua2V5QXJyYXlbMV1dID0gbGVnZW5kZXZlbnQudmFsdWU7XG4gICAgLy9kZWxldGUgZXZlbnQuY29sb3I7XG4gICAgdGhpcy5sZWdlbmRDbGljayhvYmopO1xuICB9XG5cblxuICB0cmFuc2Zvcm1EYXRhKGRhdGE6IGFueSkge1xuICAgIHRoaXMua2V5QXJyYXkgPSBkYXRhWzBdO1xuICAgIGRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgbGV0IER1bW15T2JqZWN0ID0ge307XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5kaXZpZHVhbHZhbHVlLCBrZXlpbmRleCkgPT4ge1xuICAgICAgICAgIER1bW15T2JqZWN0W3RoaXMua2V5QXJyYXlba2V5aW5kZXhdXSA9IGluZGl2aWR1YWx2YWx1ZTtcbiAgICAgICAgfSk7Ly9pbm5lciBmb3IgbG9vcCBlbmRzXG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRkYXRhLnB1c2goRHVtbXlPYmplY3QpO1xuICAgICAgfS8vaWYgZW5kc1xuICAgIH0pOy8vb3V0ZXIgZm9yIGxvb3AgZW5kc1xuICAgIHRoaXMuZGF0YSA9IHRoaXMudHJhbnNmb3JtZWRkYXRhO1xuICB9XG5cbiAgZm9ybVRvb2x0aXBEYXRhKHRvb2x0aXBEYXRhOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRvb2x0aXBEYXRhKSkge1xuICAgICAgaWYgKGtleSAhPSAnY29sb3InICYmIGtleSAhPSAndGV4dGNvbG9yJykge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCk7XG4gIH1cblxuICBEb251dENoYXJ0Q2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZXZlbnQpKSB7XG4gICAgICBpZiAoa2V5ICE9ICdjb2xvcicpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jaGFydENsaWNrKG9iamVjdCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLFZpZXdDaGlsZCwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCB9IGZyb20gXCIuLi9iYXNlL2Jhc2UuY29tcG9uZW50XCI7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtcGllJyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICAgKm5nSWY9XCJkcmlsbGFibGVGbGFnXCI+XG48YW1leGlvLWQzLWNoYXJ0LWRvbnV0ICNpZCAob25MZWdlbmRDbGljayk9XCJsZWdlbmRDbGljaygkZXZlbnQpXCIgXG4gICAgICAgICAgICAgICAgICAgICAgIChvbkNoYXJ0Q2xpY2spPVwiY2hhcnRDbGljaygkZXZlbnQpXCIgXG4gICAgICAgICAgICAgICAgICAgICAgIChkcmlsbGFibGVFdmVudCk9XCIgZm9yZHJpbGxhYmxlQ2xpY2soJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbaGVpZ2h0XT1cImhlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbd2lkdGhdPVwid2lkdGhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW3RpdGxlXT1cInRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRhXSA9IFwiZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbcGllXSAgPSBcInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2NvbG9yXT1cImNvbG9yc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBbaHR0cC11cmxdPVwiaHR0cHVybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbaHR0cC1tZXRob2RdPVwiaHR0cG1ldGhvZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbZGF0YS1yZWFkZXJdPVwiZGF0YXJlYWRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFiZWxdPVwibGFiZWxmbGFnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtsYWJlbC1jb2xvcl09XCJsYWJlbGNvbG9yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtsZXZlbF09XCJsZXZlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbdGFyZ2V0XT1cInRhcmdldFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbZHJpbGxhYmxlLWRhdGFdPVwiZHJpbGxhYmxlZGF0YWtleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbZHJpbGxEYXRhXT1cImRyaWxsRGF0YVwiPlxuPC9hbWV4aW8tZDMtY2hhcnQtZG9udXQ+XG48L2Rpdj5cbmBcbn0pXG5leHBvcnQgY2xhc3MgQW1leGlvRDNQaWVDaGFydENvbXBvbmVudCAgaW1wbGVtZW50cyAgT25Jbml0IHtcblxuICBASW5wdXQoJ2RhdGEnKSBkYXRhOiBhbnk7XG5cbiAgQE91dHB1dCgpIG9uTGVnZW5kQ2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoKSBvbkNoYXJ0Q2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoKSBkcmlsbGFibGVFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAVmlld0NoaWxkKCdpZCcpIGRvbnV0cmVmOiBhbnk7XG5cbiAgQElucHV0KCkgbGVnZW5kOiBib29sZWFuID0gdHJ1ZSA7XG5cbiAgQElucHV0KCdjb2xvcicpIGNvbG9yczogYW55ID0gW107XG5cbiAgQElucHV0KCd3aWR0aCcpIHdpZHRoOiBhbnkgPSBcIjMwMFwiO1xuXG4gIEBJbnB1dCgnaGVpZ2h0JykgaGVpZ2h0OiBhbnkgPSBcIjMwMFwiO1xuXG4gIEBJbnB1dCgpIHRpdGxlOiBhbnkgPSBcIlwiO1xuXG4gICBASW5wdXQoJ2h0dHAtdXJsJykgaHR0cHVybDogYW55O1xuICAgIFxuICAgQElucHV0KCdodHRwLW1ldGhvZCcpIGh0dHBtZXRob2Q6IGFueTtcblxuICAgQElucHV0KCdkYXRhLXJlYWRlcicpIGRhdGFyZWFkZXI6IHN0cmluZztcblxuICAgQElucHV0KCdsZXZlbCcpIGxldmVsID0gMCA7XG5cbiAgIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0Om51bWJlcjtcblxuICAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6YW55XG5cbiAgIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG5cbiAgIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgIFxuICAgZHJpbGxhYmxlRmxhZzpib29sZWFuID0gdHJ1ZTtcblxuICAgZHJpbGxEYXRhOiBhbnk7XG4gIFxuICBcbiAgbmdPbkluaXQoKXtcbiAgXG4gIH1cbiAgXG4gIGxlZ2VuZENsaWNrKG5vZGU6YW55KXtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChub2RlKTtcbiAgfVxuXG4gIGNoYXJ0Q2xpY2sobm9kZTphbnkpe1xuICAgICAgIHRoaXMub25DaGFydENsaWNrLmVtaXQobm9kZSk7XG4gIH1cblxuXG4gIGZvcmRyaWxsYWJsZUNsaWNrKHJlZjphbnkpXG4gIHtcbiAgICAgdGhpcy5kcmlsbGFibGVFdmVudC5lbWl0KHJlZiwpO1xuICB9XG5cbiBmZXRjaERhdGEoZGF0YTphbnkpXG4gICB7XG4gICAgICAgICAgdGhpcy5kcmlsbERhdGEgPSBkYXRhOyAgIFxuICAgfVxuXG4gIGRyYXdDaGFydCgpXG4gIHtcbiAgICBcbiAgICAgICAgICB0aGlzLmRvbnV0cmVmLmRyaWxsYWJsZUZsYWc9dHJ1ZTtcbiAgICAgICAgICB0aGlzLmRvbnV0cmVmLmRyYXdDaGFydCgpO1xuXG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3IgOiAnYW1leGlvLWQzLWxlZ2VuZCcsXG4gICAgdGVtcGxhdGU6IGA8ZGl2IHN0eWxlID1cIiB3aWR0aDogMTAwJSA7IHBhZGRpbmctbGVmdDogMjBweDsgcGFkZGluZy10b3A6IDhweDsgXCI+XG48dGFibGUgKm5nSWY9XCIhaG9yaXpvbnRhbFwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlO1wiPlxuICAgIDx0ciAqbmdGb3IgPSBcImxldCBub2RlIG9mIGRhdGFcIiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIiAoY2xpY2spPVwib25MZWdlbmRDbGljayhub2RlKVwiPlxuICAgICAgICA8dGQgc3R5bGU9XCJoZWlnaHQ6IDEwcHg7IHdpZHRoOiAyM3B4OyBwYWRkaW5nLWxlZnQ6IDJweDtcIlxuICAgICAgICAgICAgW25nU3R5bGVdPVwieydiYWNrZ3JvdW5kLWNvbG9yJzogbm9kZS5jb2xvcn1cIj48L3RkPlxuICAgICAgICA8dGQ+e3tub2RlLmxhYmVsfX08L3RkPlxuICAgIDwvdHI+XG48L3RhYmxlPlxuPC9kaXY+XG5cbjx0YWJsZSAqbmdJZj1cImhvcml6b250YWxcIiBzdHlsZT1cImhlaWdodDogMTAwJTtcIj5cbiAgICA8dHI+XG4gICAgICAgIDx0ZCAqbmdGb3IgPSBcImxldCBub2RlIG9mIGRhdGFcIiBcbiAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIm9uTGVnZW5kQ2xpY2sobm9kZSlcIiBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCIgZGlzcGxheTogaW5saW5lLWJsb2NrOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHBhZGRpbmc6IDJweDtcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIiB3aWR0aDogMTBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBwYWRkaW5nOiAycHg7IFwiIFxuICAgICAgICAgICAgICAgICAgICBbbmdTdHlsZV09XCJ7J2JhY2tncm91bmQtY29sb3InOiBub2RlLmNvbG9yfVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIHt7bm9kZS5sYWJlbH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgXG4gICAgPC90cj5cbjwvdGFibGU+YFxufSlcbmV4cG9ydCBjbGFzcyBBbWV4aW9EM0xlZ2VuZFxue1xuXG4gICAgQElucHV0KCdkYXRhJykgZGF0YSA6IGFueTtcblxuICAgIEBJbnB1dCgnaG9yaXpvbnRhbCcpIGhvcml6b250YWwgOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KCkgb25DbGljayA6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgIFxuICAgIH1cblxuICAgIG9uTGVnZW5kQ2xpY2sobm9kZTphbnkpe1xuICAgICAgICB0aGlzLm9uQ2xpY2suZW1pdChub2RlKTtcbiAgICB9XG59IiwiXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LEh0dHBDbGllbnRNb2R1bGUsSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZVF1ZXJ5U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55KSB7XG5cbiAgfVxuXG4gIHJ1bGVzID0ge1xuICAgIHByaW50OiAncHJpbnQnLFxuICAgIHNjcmVlbjogJ3NjcmVlbicsXG4gICAgcGhvbmU6ICcobWF4LXdpZHRoOiA3NjdweCknLFxuICAgIHRhYmxldDogJyhtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogMTAyNHB4KScsXG4gICAgZGVza3RvcDogJyhtaW4td2lkdGg6IDEwMjVweCknLFxuICAgIHBvcnRyYWl0OiAnKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAgIGxhbmRzY2FwZTogJyhvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICAgcmV0aW5hOiAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMikgYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKScsXG4gIH07XG5cbiAgQ2hlY2sgPSBmdW5jdGlvbihtcTogYW55KSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIGlmICghbXEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKG1xKS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICBNRVRIT0RTIEZPUiBDSEVDS0lORyBUWVBFXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBJc1Bob25lKCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEodGhpcy5ydWxlcy5waG9uZSkubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgSXNUYWJsZXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHRoaXMucnVsZXMudGFibGV0KS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgSXNEZXNrdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLnJ1bGVzLmRlc2t0b3ApLm1hdGNoZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICBJc1BvcnRyYWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLnJ1bGVzLnBvcnRyYWl0KS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgSXNMYW5kc2NhcGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHRoaXMucnVsZXMubGFuZHNjYXBlKS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgSXNSZXRpbmEgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHRoaXMucnVsZXMucmV0aW5hKS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgYnJvd3NlcldpbmRvdyA9ICgpID0+IHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgIEVWRU5UIExJU1RFTkVSUyBCWSBUWVBFXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBPblBob25lKGNhbGxCYWNrOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxCYWNrID09PSAnZnVuY3Rpb24nICYmIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgY29uc3QgbXFsOiBNZWRpYVF1ZXJ5TGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKHRoaXMucnVsZXMucGhvbmUpO1xuICAgICAgICB0aGlzLm1xbE1ldGhvZChjYWxsQmFjaywgbXFsKTtcbiAgICB9XG4gIH1cblxuICBPblRhYmxldChjYWxsQmFjazogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsQmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgIGNvbnN0IG1xbDogTWVkaWFRdWVyeUxpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLnJ1bGVzLnRhYmxldCk7XG4gICAgICAgIHRoaXMubXFsTWV0aG9kKGNhbGxCYWNrLCBtcWwpO1xuICAgIH1cbiAgfVxuXG4gIE9uRGVza3RvcChjYWxsQmFjazogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsQmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgIGNvbnN0IG1xbDogTWVkaWFRdWVyeUxpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLnJ1bGVzLmRlc2t0b3ApO1xuICAgICAgICB0aGlzLm1xbE1ldGhvZChjYWxsQmFjaywgbXFsKTtcbiAgICB9XG4gIH1cblxuICBPblBvcnRyYWl0KGNhbGxCYWNrOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxCYWNrID09PSAnZnVuY3Rpb24nICYmIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgY29uc3QgbXFsOiBNZWRpYVF1ZXJ5TGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKHRoaXMucnVsZXMucG9ydHJhaXQpO1xuICAgICAgICB0aGlzLm1xbE1ldGhvZChjYWxsQmFjaywgbXFsKTtcbiAgICB9XG4gIH1cblxuICBPbkxhbmRzY2FwZShjYWxsQmFjazogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsQmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgIGNvbnN0IG1xbDogTWVkaWFRdWVyeUxpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLnJ1bGVzLmxhbmRzY2FwZSk7XG4gICAgICAgIHRoaXMubXFsTWV0aG9kKGNhbGxCYWNrLCBtcWwpO1xuICAgIH1cbiAgfVxuXG4gIG1xbE1ldGhvZChjYWxsQmFjazogYW55LCBtcWw6IGFueSkge1xuICAgIG1xbC5hZGRMaXN0ZW5lcigobXFsMTogTWVkaWFRdWVyeUxpc3QpID0+IHtcbiAgICAgIGlmIChtcWwxLm1hdGNoZXMpIHtcbiAgICAgICAgY2FsbEJhY2sobXFsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxvdENhcnQgfSBmcm9tIFwiLi4vYmFzZS9jaGFydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnR7RGV2aWNlUXVlcnlTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1iYXInLFxuICAgIHRlbXBsYXRlOiBgPGRpdiAqbmdJZj1cImRyaWxsYWJsZUZsYWdcIiAgI2RpdmlkICh3aW5kb3c6cmVzaXplKT1cInJlc2l6ZSgkZXZlbnQpXCIgPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgcG9zaXRpb249XCIgcmVsYXRpdmVcIiAjY2hhcnRJZCA+XG4gICAgPHRyPlxuICAgICAgICA8dGQgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gICAgPC90cj5cbiAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cInN2Z2hlaWdodFwiIFthdHRyLndpZHRoXT1cInN2Z3dpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIiBcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7IHBhZGRpbmc6IDVweDtcIj5cbiAgICAgICAgICAgIDxhbWV4aW8tZDMtbGVnZW5kICpuZ0lmPVwibGVnZW5kXCIgW2hvcml6b250YWxdPVwidHJ1ZVwiIChvbkNsaWNrKT1cIm9uQmFyTGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZEFycmF5XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgICAgIDwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgQW1leGlvRDNCYXJDaGFydENvbXBvbmVudCBleHRlbmRzIEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgUGxvdENhcnQge1xuICAgIEBJbnB1dCgnd2lkdGgnKSBzdmd3aWR0aDogbnVtYmVyO1xuICAgIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gICAgQElucHV0KCkgaG9yaXpvbnRhbDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gICAgQElucHV0KCdsYWJlbCcpIGxhYmVsZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ2RpdmlkJykgIGRpdmlkOkVsZW1lbnRSZWY7XG4gICAgQFZpZXdDaGlsZCgnZHJpbGxpZCcpIGRyaWxsaWQ6IGFueTtcbiAgICBASW5wdXQoJ2RhdGEtcmVhZGVyJykgZGF0YXJlYWRlcjogc3RyaW5nO1xuICAgIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgICBASW5wdXQoJ3RhcmdldCcpIHRhcmdldDogbnVtYmVyO1xuICAgIEBJbnB1dCgnZHJpbGxhYmxlLWRhdGEnKSBkcmlsbGFibGVkYXRha2V5OiBhbnlbXSA9IFtdO1xuICAgIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZTogYm9vbGVhbiA9IHRydWU7XG4gICAgcmVzaXplZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGNoZWNrbW9iOiBib29sZWFuO1xuICAgIHJlc2l6ZWc6YW55O1xuICAgIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGRhdGE6IGFueTtcbiAgICB4YXhpczphbnk7XG4gICAgeWF4aXM6YW55O1xuICAgIHN2Zzphbnk7XG4gICAgY29sb3JmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gICAga2V5QXJyYXk6IGFueVtdID0gW107XG4gICAgdHJhbnNmb3JtZWRkYXRhOiBhbnlbXSA9IFtdO1xuICAgIG9iamVjdDogYW55O1xuICAgIGxlZ2VuZEFycmF5OiBhbnlbXSA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSwgcHJpdmF0ZSBjZGY6IENoYW5nZURldGVjdG9yUmVmLHByaXZhdGUgZGV2aWNlOkRldmljZVF1ZXJ5U2VydmljZSkge1xuXG4gICAgICAgIHN1cGVyKCdiYXInKTtcbiAgICAgICBcblxuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgIFxuXG4gICAgICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgICAgICAgIGxldCByZXNwOiBhbnk7XG4gICAgICAgICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICAgICAgICAgIHRoaXMubXlzZXJ2aWNlLmZldGNoVXJsRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCkuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YSh0aGlzLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuXG4gICAgICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmZXRjaERhdGEoZGF0YTogYW55KSB7XG5cbiAgICAgICAgbGV0IHJlcXVlc3RKc29uO1xuICAgICAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgICAgICBsZXQgcmVzcDogYW55O1xuICAgICAgICBpZiAodGhpcy5kcmlsbGFibGVkYXRha2V5Lmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGRyaWxsYWJsZWRhdGEgPSB0aGlzLmdldE11bHRpcGxlRHJpbGxibGVLZXlEYXRhKGRhdGEsIGtleSk7XG4gICAgICAgICAgICByZXF1ZXN0SnNvbiA9IGRyaWxsYWJsZWRhdGE7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgICAgICAgIHRoaXMubXlzZXJ2aWNlLnBvc3RmZXRjaERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QsIHJlcXVlc3RKc29uKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3Q2hhcnQoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgICAgIH0sIDApO1xuXG4gICAgfVxuICAgIGdldFJlc3BvbnNlRGF0YShodHRwUmVzcG9uc2U6IGFueSkge1xuICAgICAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgICAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICAgIH1cblxuICAgIHBsb3REM0NoYXJ0KCk6IGFueSB7XG5cbiAgICAgICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICAgICAgICAgICBpZih0aGlzLnJlc2l6ZWZsYWc9PWZhbHNlKXtcbiAgICAgICAgICAgaWYodGhpcy5jaGFydElkICl7XG5cbiAgICAgICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgfSBlbHNle1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCB0b29sdGlwID0gdGhpcy50b29sVGlwKGQzKTtcbiAgICAgICAgdGhpcy5zdmcgPSBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmNvbXBvbmVudElkKSA7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6NjAsIGJvdHRvbTogMzAsIGxlZnQ6IDYwIH07XG4gICAgICBcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnN2Z3dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuc3ZnaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICBcbiAgICAgICAgLy9jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoXCJoZWlnaHRcIikgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgIFxuICAgICAgICBsZXQgeCwgeTtcbiAgICAgICAgY29uc3QgZyA9IHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuaG9yaXpvbnRhbCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAucGFkZGluZygwLjEpO1xuICAgICAgICAgICAgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XG5cbiAgICAgICAgICAgIC8vc2V0dGluZyBjb250ZW50IGZvciB4IGFuZCB5IGF4aXNcbiAgICAgICAgICAgIHguZG9tYWluKHRoaXMuZGF0YS5tYXAoKGQpID0+IHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzBdXTtcbiAgICAgICAgICAgICAgICAvLyAgICByZXR1cm4gZC5sYWJlbFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgeS5kb21haW4oWzAsIGQzLm1heCh0aGlzLmRhdGEsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMV1dO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIGQudmFsdWU7XG4gICAgICAgICAgICB9KV0pO1xuICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCB4IGF4aXMgdG8gc3ZnXG4gICAgICAgICAgICBpZih0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKT09dHJ1ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAge1xuICAgICAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKS5cbiAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDkpXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoNjApXCIpXG4gICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKTtcbiAgICAgXG4gICAgICAgICAgfVxuICAgICAgICAgXG4gICAgICAgICAgICAvL2FkZCB5IGF4aXMgdG8gc3ZnXG4gICAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tzKDEwKSlcbiAgICAgICAgXG4gICAgICAgICAgdGhpcy5wbG90TGluZShnLCB4LCB5LCBoZWlnaHQsIHdpZHRoKTtcblxuICAgICAgICAgICAvL2FkZCBiYXIgY2hhcnRcbiAgICAgICAgICAgIGcuc2VsZWN0QWxsKFwiLmJhclwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuZGF0YSlcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhclwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geChkW09iamVjdC5rZXlzKGQpWzBdXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB4KGQubGFiZWwpOyBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkW09iamVjdC5rZXlzKGQpWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB5KGQudmFsdWUpOyBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAoZCkgPT4geyByZXR1cm4gaGVpZ2h0IC0geShkW09iamVjdC5rZXlzKGQpWzFdXSk7IH0pXG5cbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBcImJsdWVcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5odG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtVG9vbHRpcERhdGEoZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB0aGlzLnRvb2xUaXBGb3JCYXIoZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMudG9vbFRpcENvbnRlbnQoZClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFyQ2hhcnRDbGljayhkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLmNoYXJ0Q2xpY2soZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLmxhYmVsZmxhZylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgeVRleHRQYWRkaW5nID0gNDA7XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiLmxhYmVsXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLFwiYm9sZFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLFwiMXZ3XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCk9PntcbiAgICAgICAgICAgICAgICAgIGlmKHRoaXMubGFiZWxjb2xvci5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoZFtPYmplY3Qua2V5cyhkKVswXV0pKyBtYXJnaW4ubGVmdCArIHguYmFuZHdpZHRoKCkvMjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCxpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkW09iamVjdC5rZXlzKGQpWzFdXSkreVRleHRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzFdXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9Ly9pZiBlbmRzIGZyIFxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3Jpem9udGFsID09IHRydWUpIHtcblxuICAgICAgICAgICAgeCA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbMCwgd2lkdGhdKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHkgPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKS5wYWRkaW5nKDAuMSk7XG5cbiAgICAgICAgICAgIC8vc2V0dGluZyBjb250ZW50IGZvciB4IGFuZCB5IGF4aXNcbiAgICAgICAgICAgIHguZG9tYWluKFswLCBkMy5tYXgodGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRbT2JqZWN0LmtleXMoZClbMV1dXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSldKTtcbiAgICAgICAgICAgIC8vIGRbT2JqZWN0LmtleXMoZClbMV1dXG5cbiAgICAgICAgICAgIHkuZG9tYWluKHRoaXMuZGF0YS5tYXAoKGQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVswXV1cbiAgICAgICAgICAgICAgICAvL3JldHVybiBkLmxhYmVsO1xuICAgICAgICAgICAgfSkpXG5cbiAgICAgICAgICAgIC8vIGFkZCB4IGF4aXMgdG8gc3ZnXG4gICAgICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS50aWNrcygxMCkpO1xuXG4gICAgICAgICAgICAvL2FkZCB5IGF4aXMgdG8gc3ZnXG4gICAgICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSlcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBsb3RMaW5lKGcsIHgsIHksIGhlaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgLy9hZGQgYmFyIGNoYXJ0XG4gICAgICAgICAgICBnLnNlbGVjdEFsbChcIi5iYXJcIilcbiAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkoXG4gICAgICAgICAgICAgICAgICAgICAgICBkW09iamVjdC5rZXlzKGQpWzBdXVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZC5sYWJlbFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRbT2JqZWN0LmtleXMoZClbMV1dXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHkuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4geyByZXR1cm4gZC5jb2xvcjsgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5odG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtVG9vbHRpcERhdGEoZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZm9ybUxlZ2VuZERhdGEoZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMudG9vbFRpcENvbnRlbnQoZClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFyQ2hhcnRDbGljayhkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLmNoYXJ0Q2xpY2soZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgaWYodGhpcy5sYWJlbGZsYWcpXG4gICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsZXQgeVRleHRQYWRkaW5nID0gNDA7XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiLmxhYmVsXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLFwiYm9sZFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidmVydGljYWwtYWxpZ25cIixcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwibWFyZ2luLXRvcFwiLG1hcmdpbi50b3ApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKT0+e1xuICAgICAgICAgICAgICAgICAgaWYodGhpcy5sYWJlbGNvbG9yLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxjb2xvcjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoZFtPYmplY3Qua2V5cyhkKVsxXV0pK3lUZXh0UGFkZGluZztcbiAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkoZFtPYmplY3Qua2V5cyhkKVswXV0pXG4gICAgICAgICAgICAgICAgICAgICArIG1hcmdpbi50b3AgKyB5LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGV4dCggKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzFdXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIH0vL2Vsc2UgZW5kcyhob3Jpem9udGFsIGJhciBsb2dpYyBlbmRzKVxuXG4gICAgIFxuXG4gICAgfVxuXG4gICAgcGxvdExpbmUoZywgeCwgeSwgaGVpZ2h0LCB3aWR0aCkge1xuXG4gICAgICAgIGlmICh0aGlzLmhTY2FsZSkge1xuICAgICAgICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgICAgICAgICAgICAudGlja1NpemUoLXdpZHRoKS50aWNrRm9ybWF0KCcnKSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZvcm1Ub29sdGlwRGF0YSh0b29sdGlwRGF0YTogYW55KSB7XG4gICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRvb2x0aXBEYXRhKSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtRGF0YShkYXRhOiBhbnkpIHtcblxuICAgICAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgICAgICAgZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBEdW1teU9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5kaXZpZHVhbHZhbHVlLCBrZXlpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBEdW1teU9iamVjdFt0aGlzLmtleUFycmF5W2tleWluZGV4XV0gPSBpbmRpdmlkdWFsdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7Ly9pbm5lciBmb3IgbG9vcCBlbmRzXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1lZGRhdGEucHVzaChEdW1teU9iamVjdCk7XG4gICAgICAgICAgICB9Ly9pZiBlbmRzXG4gICAgICAgIH0pOy8vb3V0ZXIgZm9yIGxvb3AgZW5kc1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnRyYW5zZm9ybWVkZGF0YTtcbiAgICB9XG5cbiAgICBmb3JtTGVnZW5kRGF0YSgpIHtcbiAgICAgICAgdGhpcy5sZWdlbmRBcnJheSA9IFtdO1xuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGxldCBsZWdlbmRvYmplY3QgPSB7fTtcbiAgICAgICAgICAgIGxlZ2VuZG9iamVjdFsnbGFiZWwnXSA9IGVsZW1lbnRbT2JqZWN0LmtleXMoZWxlbWVudClbMF1dO1xuICAgICAgICAgICAgbGVnZW5kb2JqZWN0Wyd2YWx1ZSddID0gZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KVsxXV07XG4gICAgICAgICAgICBsZWdlbmRvYmplY3RbJ2NvbG9yJ10gPSBlbGVtZW50LmNvbG9yO1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRBcnJheS5wdXNoKGxlZ2VuZG9iamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQmFyTGVnZW5kQ2xpY2sobGVnZW5kZXZlbnQ6IGFueSkge1xuICAgICAgICBsZXQgb2JqID0ge307XG4gICAgICAgIC8vICBvYmpbJ2xhYmVsJ10gPSBsZWdlbmRldmVudC5sYWJlbDtcbiAgICAgICAgLy8gIG9ialsndmFsdWUnXSA9IGxlZ2VuZGV2ZW50LnZhbHVlO1xuICAgICAgICBvYmpbdGhpcy5rZXlBcnJheVswXV0gPSBsZWdlbmRldmVudC5sYWJlbDtcbiAgICAgICAgb2JqW3RoaXMua2V5QXJyYXlbMV1dID0gbGVnZW5kZXZlbnQudmFsdWU7XG4gICAgICAgIC8vb2JqW2xlZ2VuZGV2ZW50LmxhYmVsXSA9IGxlZ2VuZGV2ZW50LnZhbHVlO1xuICAgICAgICAvL2RlbGV0ZSBldmVudC5jb2xvcjtcbiAgICAgICAgdGhpcy5sZWdlbmRDbGljayhvYmopO1xuICAgIH1cblxuXG4gICAgYmFyQ2hhcnRDbGljayhldmVudDogYW55KSB7XG4gICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50KSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgICB9XG5cbiAgICByZXNpemUoZGF0YTogYW55KSB7XG4gICAgICBcbiAgICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgXG4gICAgICAgIHRoaXMucmVzaXplZmxhZz10cnVlO1xuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICBcbiAgICAgICAgdGhpcy5jZGYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICBcbiAgICB9XG5cblxuXG4gICAgXG5cbn0iLCJpbXBvcnQgeyBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCB9IGZyb20gXCIuLi9iYXNlL2Jhc2UuY29tcG9uZW50XCI7XG5pbXBvcnR7RGV2aWNlUXVlcnlTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBBbWV4aW9EM0Jhc2VMaW5lQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnRcbntcbiAgICBzdmd3aWR0aCA6IGFueTtcbiAgICBzdmdoZWlnaHQ9MzAwO1xuICAgIHByaXZhdGUgX2RhdGEgICAgICA6IGFueTtcbiAgICBwcml2YXRlIHhheGlzZGF0YSAgOiBhbnlbXTtcbiAgICBwcml2YXRlIHlheGlzZGF0YSAgOiBhbnlbXTtcbiAgICBwcml2YXRlIGxlZ2VuZGRhdGEgOiBhbnlbXTtcbiAgICBsZWdlbmRzICAgIDogYW55W107XG4gICAgcHJvdGVjdGVkIHhheGlzbmFtZSA6IGFueTtcbiAgICBwcm90ZWN0ZWQgbXVsdGlzZXJpZXNkYXRhIDogYW55W107XG4gICAgc3ZnOmFueTtcblxuICAgIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZSA6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQElucHV0KCd2ZXJ0aWNhbC1zY2FsZScpICAgdlNjYWxlIDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQElucHV0KCdkYXRhJykgXG5cbiAgICBASW5wdXQoJ2h0dHAtdXJsJykgaHR0cHVybDogYW55O1xuICAgIFxuICAgIEBJbnB1dCgnaHR0cC1tZXRob2QnKSBodHRwbWV0aG9kOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZGV2aWNlUXVlcnlTZXJ2aWNlOiBEZXZpY2VRdWVyeVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoJ2xpbmUnKTtcbiAgICB9XG5cblxuICAgIHNldCBkYXRhKHY6YW55KXtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHY7XG4gICAgICAgIHRoaXMuY3JlYXRlWFlBeGlzRGF0YSgpO1xuICAgIH1cblxuICAgIGdldCBkYXRhKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cblxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZVhZQXhpc0RhdGEoKSA6IHZvaWQge1xuXG4gICAgICAgIHRoaXMueGF4aXNkYXRhID0gW107XG4gICAgICAgIHRoaXMueWF4aXNkYXRhID0gW107XG4gICAgICAgIHRoaXMubXVsdGlzZXJpZXNkYXRhID0gW107XG4gICAgICAgIHRoaXMubGVnZW5kZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLmxlZ2VuZHMgPSBbXTtcbiAgICAgICAgdGhpcy54YXhpc25hbWUgPSB0aGlzLmRhdGFbMF1bMF0ubGFiZWw7XG4gICAgICAgICBjb25zdCBtc2RhcnJheSA6IGFueSBbXSA9W107XG4gICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fZGF0YVswXS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2VuZCA9IHRoaXMuX2RhdGFbMF1baW5kZXhdO1xuICAgICAgICAgICAgbXNkYXJyYXlbaW5kZXhdPVtdO1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRkYXRhLnB1c2goeydsYWJlbCc6bGVnZW5kLmxhYmVsLCdjb2xvcic6dGhpcy5wcmVkZWZpbmVkY29sb3JzW2luZGV4KzFdfSk7XG4gICAgICAgICAgICBpZihpbmRleCA+IDApXG4gICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRzLnB1c2goeydsYWJlbCc6bGVnZW5kLmxhYmVsLCdjb2xvcic6dGhpcy5wcmVkZWZpbmVkY29sb3JzW2luZGV4XX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB0aGlzLl9kYXRhLmZvckVhY2gob2JqZWN0ID0+IHtcbiAgICAgICAgICAgIGlmKGk+MCl7XG4gICAgICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgICAgIG9iamVjdC5mb3JFYWNoKGEgPT57XG4gICAgICAgICAgICAgICAgICAgICBpZihqPT09MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhheGlzZGF0YS5wdXNoKHsnbGFiZWwnOmEsICd2YWx1ZSc6YX0pO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWF4aXNkYXRhLnB1c2goeydsYWJlbCc6YSwgJ3ZhbHVlJzphfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbXNkYXJyYXlbal0ucHVzaChhKTtcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbXNkYXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbXNkYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgaWYoaW5kZXggPjApe1xuICAgICAgICAgICAgICAgIGxldCBtZCA6IGFueSBbXSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWxlbWVudC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gZWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgICAgICAgbWQucHVzaCh7J2xlZ2VuZCc6dGhpcy5sZWdlbmRkYXRhW2luZGV4XS5sYWJlbCwnbGFiZWwnOnRoaXMueGF4aXNkYXRhW2pdLnZhbHVlLCAndmFsdWUnOnZ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tdWx0aXNlcmllc2RhdGEucHVzaChtZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRzW2luZGV4LTFdLmRhdGEgPSBtZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0Q2hhcnQoKSA6IGFueSB7XG5cbiAgICAgICAgdGhpcy5zdmcgICAgICAgPSBkMy5zZWxlY3QoXCIjXCIrdGhpcy5jb21wb25lbnRJZCk7XG4gICAgICAgIGNvbnN0IG1hcmdpbiAgICA9IHsgdG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDMwLCBsZWZ0OiA0MCB9O1xuICAgICAgICBjb25zdCB3aWR0aCAgICAgPSArdGhpcy5zdmd3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICBjb25zdCBoZWlnaHQgICAgPSArdGhpcy5zdmdoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgY29uc3QgZyAgICAgICAgID0gdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAgICAgY29uc3QgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgICAgIC5wYWRkaW5nKDAuMSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICBcbiAgICAgICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKTtcblxuICAgICAgICB4LmRvbWFpbih0aGlzLnhheGlzZGF0YS5tYXAoIChkKSA9PiB7IHJldHVybiBkLmxhYmVsO30pKTtcbiAgICAgICAgeS5kb21haW4oWzAsIGQzLm1heCh0aGlzLnlheGlzZGF0YSwgIChkKSA9PiB7IHJldHVybiBkLnZhbHVlOyB9KV0pO1xuXG4gICAgICAgIC8vYWRkIGF4aXMgXG4gICAgICAgIGlmKHRoaXMuZGV2aWNlUXVlcnlTZXJ2aWNlLklzRGVza3RvcCgpPT10cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImdyZXlcIilcbiAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSlcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgIHtcbiAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImdyZXlcIilcbiAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSkuXG4gICAgICAgICAgICAgICBzZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCA5KVxuICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2MClcIilcbiAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgIFxuICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJncmV5XCIpXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSk7XG5cblxuICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgZywgeCwgeSwgaGVpZ2h0LCB3aWR0aFxuICAgICAgICB9XG5cbiAgICB9ICAgIFxuXG5cbiAgICBwcm90ZWN0ZWQgcGxvdFNjYWxlKGc6YW55LHg6YW55LCB5OmFueSxoZWlnaHQ6YW55LHdpZHRoOmFueSkgOiB2b2lkIFxuICAgIHtcbiAgICAgICAgaWYodGhpcy52U2NhbGUpe1xuICAgICAgICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS5cbiAgICAgICAgICAgICAgICAgdGlja1NpemUoLXRoaXMud2lkdGgpLnRpY2tGb3JtYXQoJycpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuaFNjYWxlKXtcbiAgICAgICAgICAgIGcuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgICAgICAgICAuIHRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdCgnJykpOyAgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiBcbiAgICBsZWdlbmRDbGljayhub2RlOmFueSl7XG4gXG4gICAgICAgIC8vIGNvbnN0IGxlZ2VuZE5vZGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5vZGUpKTtcbiAgICAgICAgLy8gZGVsZXRlIGxlZ2VuZE5vZGUuY29sb3I7XG4gICAgICAgIC8vIGxlZ2VuZE5vZGUuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAvLyAgICAgZGVsZXRlIGVsZW1lbnQubGVnZW5kO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBsZXQgb2JqID0ge307XG4gICAgb2JqW1wibGFiZWxcIl0gPSBub2RlLmxhYmVsO1xuICAgIGxldCBkYXRhID0gW107XG4gICAgbm9kZS5kYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgIFxuICAgICAgb2JqZWN0W2VsZW1lbnQubGVnZW5kXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICBvYmplY3RbdGhpcy54YXhpc25hbWVdID0gZWxlbWVudC5sYWJlbDtcbiAgICAvLyAgIG9iamVjdFtlbGVtZW50LmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICBkYXRhLnB1c2gob2JqZWN0KTtcbiAgICB9KTtcbiAgICBvYmpbXCJkYXRhXCJdID0gZGF0YTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmopO1xuICAgIFxuICAgICAgICAvLyB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChsZWdlbmROb2RlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IEFtZXhpb0QzQmFzZUxpbmVDb21wb25lbnQgfSBmcm9tIFwiLi9iYXNlbGluZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSBcIi4uL2Jhc2UvYmFzZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFBsb3RDYXJ0IH0gZnJvbSBcIi4uL2Jhc2UvY2hhcnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQ29tbWFuRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IERldmljZVF1ZXJ5U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1saW5lJyxcbiAgICB0ZW1wbGF0ZTogYFxuPGRpdiAqbmdJZj1cImRyaWxsYWJsZUZsYWdcIiAjZGl2aWQgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIj4gXG48dGFibGUgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAjY2hhcnRJZCAgPlxuICAgICAgICA8dHI+PHRkIHN0eWxlPVwiZm9udC1zaXplOiAxOHB4OyBmb250LXdlaWdodDogYm9sZDsgXCI+IHt7dGl0bGV9fSA8L3RkPjwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8c3ZnIFthdHRyLmhlaWdodF09XCJoZWlnaHRcIiBbYXR0ci53aWR0aF09XCJzdmd3aWR0aFwiIFthdHRyLmlkXT1cImNvbXBvbmVudElkXCI+XG4gICAgICAgICAgICAgICAgPC9zdmc+ICAgICAgICAgICAgXG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgICAgICAgICAgICA8YW1leGlvLWQzLWxlZ2VuZCAqbmdJZj1cImxlZ2VuZFwiIFtob3Jpem9udGFsXT1cInRydWVcIiAob25DbGljayk9XCJsZWdlbmRDbGljaygkZXZlbnQpXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2RhdGFdPVwibGVnZW5kc1wiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+XG4gICAgICAgICAgICAgICAgICAgIDwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgIFxuICAgICAgICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQW1leGlvRDNMaW5lQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlTGluZUNvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0IHtcblxuICAgIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gICAgQFZpZXdDaGlsZCgnZHJpbGxpZCcpIGRyaWxsaWQ6YW55O1xuICAgIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gICAgQElucHV0KCdsZXZlbCcpIGxldmVsOm51bWJlcj0wO1xuICAgIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICAgIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0Om51bWJlcjtcbiAgICBASW5wdXQoJ2RyaWxsYWJsZS1kYXRhJykgZHJpbGxhYmxlZGF0YWtleTphbnlbXT1bXVxuICAgIGRyaWxsYWJsZUZsYWc6Ym9vbGVhbiA9IHRydWU7XG4gICAgcmVzaXplZmxhZzpib29sZWFuPWZhbHNlO1xuIFxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBkZXZpY2VRdWVyeVNlcnZpY2U6IERldmljZVF1ZXJ5U2VydmljZSxwdWJsaWMgbXlzZXJ2aWNlOkNvbW1hbkRhdGFTZXJ2aWNlKSB7XG4gICAgICAgICAgc3VwZXIoZGV2aWNlUXVlcnlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICBpZiAodGhpcy5sZXZlbCA8PSAxKXtcbiAgICAgICAgbGV0IHJlc3A6IGFueVxuICAgICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICAgICAgdGhpcy5teXNlcnZpY2UuZmV0Y2hVcmxEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICAgIFxuICAgIH1cblxuXG4gICAgZmV0Y2hEYXRhKGRhdGE6IGFueSkge1xuICAgXG4gICAgICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICAgICAgbGV0IGtleT10aGlzLmRyaWxsYWJsZWRhdGFrZXk7XG4gICAgICAgIGxldCByZXNwOiBhbnk7XG4gICAgICAgIGlmKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgICBsZXQgZHJpbGxhYmxlZGF0YT0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLGtleSk7XG4gICAgICAgICAgICAgcmVxdWVzdEpzb249ZHJpbGxhYmxlZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICByZXF1ZXN0SnNvbj1kYXRhO1xuICAgICAgICAgICAgIH1cbiAgICAgIFxuICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgdGhpcy5teXNlcnZpY2UucG9zdGZldGNoRGF0YSh0aGlzLmh0dHB1cmwsdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTsgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgIH0pOyAgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBkcmF3Q2hhcnQoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gXG5cbiAgICByZXNpemUoKSB7XG5cbiAgICB0aGlzLnN2Z3dpZHRoID0gMDtcbiAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgdGhpcy5yZXNpemVmbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgXG5cbiAgICB9XG5cbiAgICBnZXRSZXNwb25zZURhdGEoaHR0cFJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXJlYWRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkciA9IHRoaXMuZGF0YXJlYWRlci5zcGxpdCgnLicpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpciBvZiBkcikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgICB9XG5cbiAgcGxvdEQzQ2hhcnQoKTogdm9pZCB7XG5cbiAgICBcbiAgICAgICBpZih0aGlzLnJlc2l6ZWZsYWc9PWZhbHNlKVxuICAgICAgIHtcbiAgaWYodGhpcy5jaGFydElkKXtcbiAgICAgICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5zdmd3aWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbFRpcChkMyk7XG5cbiAgICAgICAgY29uc3QgbGluZWNoYXJ0ID0gdGhpcy5pbml0Q2hhcnQoKTtcblxuICAgICAgICB0aGlzLnBsb3RTY2FsZShsaW5lY2hhcnQuZywgbGluZWNoYXJ0LngsIGxpbmVjaGFydC55LCBsaW5lY2hhcnQuaGVpZ2h0LCBsaW5lY2hhcnQud2lkdGgpO1xuXG4gICAgICAgIHRoaXMucGxvdExpbmUobGluZWNoYXJ0LmcsIGxpbmVjaGFydC54LCBsaW5lY2hhcnQueSwgbGluZWNoYXJ0LmhlaWdodCxcbiAgICAgICAgICAgIGxpbmVjaGFydC53aWR0aCwgW10sIHRvb2x0aXAsICgxKSk7XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubXVsdGlzZXJpZXNkYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy5wbG90TGluZShsaW5lY2hhcnQuZywgbGluZWNoYXJ0LngsIGxpbmVjaGFydC55LCBsaW5lY2hhcnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxpbmVjaGFydC53aWR0aCwgdGhpcy5tdWx0aXNlcmllc2RhdGFbaW5kZXhdLCB0b29sdGlwLCAoaW5kZXggKyAxKSk7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwbG90TGluZShnOiBhbnksIHg6IGFueSwgeTogYW55LCBoZWlnaHQ6IGFueSwgd2lkdGg6IGFueSwgZGF0YTogYW55LCB0b29sdGlwOiBhbnksIGk6IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGxpbmUgPSBkMy5saW5lKClcbiAgICAgICAgICAgIC54KGZ1bmN0aW9uIChkKSB7IHJldHVybiB4KGQubGFiZWwpOyB9KVxuICAgICAgICAgICAgLnkoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHkoZC52YWx1ZSk7IH0pO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmRhdHVtKGRhdGEpXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCB0aGlzLnByZWRlZmluZWRjb2xvcnNbaV0pXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgbGluZSk7XG5cbiAgICAgICAgZy5zZWxlY3RBbGwoJ2RvdCcpXG4gICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiB7IHJldHVybiB4KGQubGFiZWwpOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4geyByZXR1cm4geShkLnZhbHVlKTsgfSlcbiAgICAgICAgICAgIC5hdHRyKCdyJywgMilcbiAgICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5odG1sKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxUb29sdGlwKGQpXG4gICAgICAgICAgICAgICAgICAgIC8vICB0aGlzLnRvb2xUaXBGb3JMaW5lKGQpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gIHRoaXMudG9vbFRpcFdpdGhMZWdlbmRhbmRBeGlzKGQubGVnZW5kLGQubGFiZWwsZC52YWx1ZSlcblxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgIHRoaXMubGluZUNoYXJ0Q2xpY2soZCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuZm9yZHJpbGxhYmxlQ2xpY2sodGhpcyxkLGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgIC8vbGV0cyBwbG90IGxhYmVscyBoZXJlXG4gICAgICBpZiAodGhpcy5sYWJlbGZsYWcpIHtcbiAgICAgICAgZy5zZWxlY3RBbGwoJ2xhYmVsJylcbiAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKFwiZm9udC13ZWlnaHRcIiwgXCJib2xkXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFiZWxjb2xvci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4geChkLmxhYmVsKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHkoZC52YWx1ZSkgLSAxMDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgfVxuXG5saW5lQ2hhcnRDbGljayhkOiBhbnkpe1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBvYmpbZC5sZWdlbmRdID0gZC52YWx1ZTtcbiAgICBvYmpbdGhpcy54YXhpc25hbWVdID0gZC5sYWJlbDtcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqKTtcbn1cblxuICAgIGNhbGxUb29sdGlwKHRvb2x0aXBkYXRhOiBhbnkpIHtcbiAgICAgICAgbGV0IG9iaiA9IHt9O1xuICAgICAgICBvYmpbdG9vbHRpcGRhdGEubGVnZW5kXSA9IHRvb2x0aXBkYXRhLnZhbHVlO1xuICAgICAgICBvYmpbdGhpcy54YXhpc25hbWVdID0gdG9vbHRpcGRhdGEubGFiZWw7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xUaXBGb3JCYXIob2JqKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlL2Jhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnR7RGV2aWNlUXVlcnlTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1iYXJzdGFjaycsXG4gIHRlbXBsYXRlOiBgPGRpdiAgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoKVwiPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQgICh3aW5kb3c6cmVzaXplKT1cInJlc2l6ZSgpXCI+XG4gIDx0cj48dGQgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+PC90cj5cbiAgPHRyPlxuICAgICAgPHRkPlxuICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cInN2Z2hlaWdodFwiIFthdHRyLndpZHRoXT1cInN2Z3dpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICA8L3N2Zz4gICAgICAgICAgICBcbiAgICAgIDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZCBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyBwYWRkaW5nOiA1cHg7XCI+XG4gICAgICAgICAgICAgIDxhbWV4aW8tZDMtbGVnZW5kICpuZ0lmPVwibGVnZW5kXCIgW2hvcml6b250YWxdPVwidHJ1ZVwiIChvbkNsaWNrKT1cImxlZ2VuZENsaWNrKCRldmVudClcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGF0YV09XCJsZWdlbmRzXCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgICAgICAgPC9hbWV4aW8tZDMtbGVnZW5kPlxuICAgICAgPC90ZD5cbiAgXG4gIDwvdHI+XG48L3RhYmxlPlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbYGBdXG59KVxuZXhwb3J0IGNsYXNzIEJhcnN0YWNrQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBsZWdlbmRBcnJheTogYW55W107XG4gIG1heFlWYWx1ZTogbnVtYmVyID0gMDtcbiAga2V5QXJyYXk6IGFueVtdO1xuICBwcmVkZWZpbmVkY29sb3JzOiBhbnlbXTtcbiAgbGVnZW5kczogYW55W107XG4gIGNoYXJ0dHlwZTogc3RyaW5nO1xuICBkYXRhOiBhbnlbXTtcbiAgZGF0YXJlYWRlcmRhdGE6IGFueVtdO1xuICB4YXhpczogYW55O1xuICBASW5wdXQoJ2RhdGEnKSBkYXRhMTogYW55XG4gIEBJbnB1dCgpIGJhcndpZHRoOiBudW1iZXIgPSAwO1xuICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRpdGxlOiBTdHJpbmcgPSBcIlwiO1xuICBASW5wdXQoKSBsZWdlbmQ6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nW10gPSBbXTtcbiAgQElucHV0KCd3aWR0aCcpIHN2Z3dpZHRoOiBudW1iZXI9MzAwO1xuICBASW5wdXQoJ2RhdGEtcmVhZGVyJykgZGF0YXJlYWRlcjogYW55O1xuICBASW5wdXQoJ2xldmVsJykgbGV2ZWw6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0OiBudW1iZXI7XG4gIEBJbnB1dCgnZHJpbGxhYmxlLWRhdGEnKSBkcmlsbGFibGVkYXRha2V5OiBhbnlbXSA9IFtdXG4gIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZTogYm9vbGVhbiA9IHRydWU7XG4gIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICByZXNpemVmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkaXZpZCcpIGRpdmlkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkcmlsbGlkJykgZHJpbGxpZDogYW55O1xuICBAT3V0cHV0KCkgb25MZWdlbmRDbGljazogYW55ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGh0dHByZXNwb25zZTogYW55O1xuICBzdmc6IGFueTtcbiAgb2Zmc2V0aGVpZ2h0OmFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBteXNlcnZpY2U6IENvbW1hbkRhdGFTZXJ2aWNlLHByaXZhdGUgZGV2aWNlOkRldmljZVF1ZXJ5U2VydmljZSkge1xuICAgIHN1cGVyKCdiYXJzdGFjaycpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG5cbiAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICBsZXQgcmVzO1xuICAgICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgICAgdGhpcy5teXNlcnZpY2UuZmV0Y2hVcmxEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgLy90aGlzLmRhdGEgPSByZXNwb25zZTtcbiAgICAgICAgICB0aGlzLmh0dHByZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5wbG90Q2hhcnQoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YTEpIHtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhMSk7XG4gICAgICAgICAgdGhpcy5wbG90Q2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBmZXRjaERhdGEoZGF0YTogYW55KSB7XG5cbiAgICBsZXQgcmVxdWVzdEpzb247XG4gICAgbGV0IGtleSA9IHRoaXMuZHJpbGxhYmxlZGF0YWtleTtcbiAgICBsZXQgcmVzcDogYW55O1xuICAgIGlmICh0aGlzLmRyaWxsYWJsZWRhdGFrZXkubGVuZ3RoKSB7XG4gICAgICBsZXQgZHJpbGxhYmxlZGF0YSA9IHRoaXMuZ2V0TXVsdGlwbGVEcmlsbGJsZUtleURhdGEoZGF0YSwga2V5KTtcbiAgICAgIHJlcXVlc3RKc29uID0gZHJpbGxhYmxlZGF0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRhdGE7XG4gICAgfVxuXG5cbiAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgdGhpcy5teXNlcnZpY2UucG9zdGZldGNoRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCwgcmVxdWVzdEpzb24pLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLmh0dHByZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBkcmF3Q2hhcnQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YSh0aGlzLmh0dHByZXNwb25zZSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgIHRoaXMucGxvdENoYXJ0KCk7XG4gICAgfSwgMCk7XG5cbiAgfVxuXG5cbiAgdHJhbnNmb3JtRGF0YShkYXRhMTogYW55KSB7XG5cbiAgICB0aGlzLmtleUFycmF5ID0gW107XG4gICAgdGhpcy5sZWdlbmRBcnJheSA9IFtdO1xuXG4gICAgZGF0YTEuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGlubmVyZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmxlZ2VuZEFycmF5W2lubmVyZWxlbWVudF0gPSB7ICdkYXRhJzogW10gfTtcbiAgICAgICAgICAgIHRoaXMua2V5QXJyYXkucHVzaChpbm5lcmVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpbmRleCA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnhheGlzID0gaW5uZXJlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgdGVtcGlubmVyYXJyYXk6IGFueVtdO1xuICAgIHRlbXBpbm5lcmFycmF5ID0gW107XG4gICAgZGF0YTEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgbGV0IG9iajogYW55ID0ge307XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5uZXJlbGVtZW50LCBpbm5lcmluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGlubmVyaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXlBcnJheVtpbm5lcmluZGV4IC0gMV07XG4gICAgICAgICAgICBvYmpba2V5XSA9IGVsZW1lbnRbaW5uZXJpbmRleF07XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRkYXRhID0gdGhpcy5sZWdlbmRBcnJheVtrZXldO1xuICAgICAgICAgICAgaWYgKGxlZ2VuZGRhdGEpIHtcbiAgICAgICAgICAgICAgbGVnZW5kZGF0YS5kYXRhLnB1c2goeyAndmFsdWUnOiBlbGVtZW50W2lubmVyaW5kZXhdLCAnbGFiZWwnOiBlbGVtZW50WzBdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRlbXBpbm5lcmFycmF5LnB1c2gob2JqKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRlbXBpbm5lcmFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICB0aGlzLmRhdGEucHVzaChlbGVtZW50KTtcbiAgICB9KTtcbmxldCBtYXhZOiBhbnkgPSAwO1xuXG5sZXQgeWF4aXNtYXhBcnJheSA9ICBbXTsgXG4gICAvL2ZpbmQgbWF4IGZvciB5YXhpc1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhlbGVtZW50KSApe1xuICAgICBcbiAgICAgdGhpcy5rZXlBcnJheS5mb3JFYWNoKGtleTEgPT4ge1xuICAgICAgIGlmKGtleSA9PSBrZXkxKXtcbiAgICAgIG1heFkgPSBtYXhZICsgdmFsdWU7XG4gICAgICAgfVxuICAgICB9KTsvL2tleWFycmF5IGxvb3AgZW5kcyBoZXJlXG5cbiAgICAgfS8vZm9yIGVuZHMgaGVyZVxueWF4aXNtYXhBcnJheS5wdXNoKG1heFkpO1xubWF4WSA9IDA7XG4gICAgfSk7Ly8gZm9yZWFjaCBlbmRzXG5sZXQgdGVtcExhcmdlID0gMCwgaTtcbmZvcihpID0gMDsgaSA8IHlheGlzbWF4QXJyYXkubGVuZ3RoOyBpKyspIHtcbmlmKHlheGlzbWF4QXJyYXlbaV0gPiB0ZW1wTGFyZ2UpIHtcbiAgdGhpcy5tYXhZVmFsdWUgPSB5YXhpc21heEFycmF5W2ldO1xufS8vaWYgZW5kc1xufS8vIGZvciBlbmRzXG5cbiAgICAgdGhpcy5sZWdlbmRzID0gW11cbiAgICB0aGlzLmtleUFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBsZWdlbmRkYXRhID0gdGhpcy5sZWdlbmRBcnJheVtlbGVtZW50XTtcbiAgICAgIGlmICh0aGlzLmNvbG9yLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG9iamVjdCA9IHsgJ2xhYmVsJzogZWxlbWVudCwgJ2NvbG9yJzogdGhpcy5jb2xvcltpbmRleF0sICdkYXRhJzogbGVnZW5kZGF0YS5kYXRhIH07XG4gICAgICAgIHRoaXMubGVnZW5kcy5wdXNoKG9iamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgb2JqZWN0ID0geyAnbGFiZWwnOiBlbGVtZW50LCAnY29sb3InOiB0aGlzLnByZWRlZmluZWRjb2xvcnNbaW5kZXhdLCAnZGF0YSc6IGxlZ2VuZGRhdGEuZGF0YSB9O1xuICAgICAgICB0aGlzLmxlZ2VuZHMucHVzaChvYmplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcGxvdENoYXJ0KCkge1xuICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGxldCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAzMCwgYm90dG9tOjkwLCBsZWZ0OiA2MCB9O1xuICAgIGxldCBjb2xvcnMgPSB0aGlzLnByZWRlZmluZWRjb2xvcnM7XG4gIFxuICAgIGlmICh0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnRJZCkge1xuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5zdmd3aWR0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy90aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgbGV0IGRhdGE7XG4gICAgIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IGtleXNldGFycmF5OiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5kYXRhWzBdKSkge1xuICAgICAgICBrZXlzZXRhcnJheS5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgICB0aGlzLmtleUFycmF5ID0ga2V5c2V0YXJyYXk7XG4gICAgICB0aGlzLmtleUFycmF5LnNwbGljZSgwLCAxKTtcbiAgICB9XG5cblxuICAgIGxldCBzZXJpZXMgPSBkMy5zdGFjaygpLmtleXModGhpcy5rZXlBcnJheSlcbiAgICAgIC5vZmZzZXQoZDMuc3RhY2tPZmZzZXREaXZlcmdpbmcpXG4gICAgICAodGhpcy5kYXRhKTtcbiAgICBzZXJpZXNcbiAgICB0aGlzLnN2ZyA9IGQzLnNlbGVjdChcIiNcIiArIHRoaXMuY29tcG9uZW50SWQpO1xuXG4gICAgbGV0IHdpZHRoID0gdGhpcy5zdmd3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgIGxldCBoZWlnaHQ7XG4gICAvLyBoZWlnaHQ9dGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0LTIwO1xuICAgXG4gICAgaWYodGhpcy5kZXZpY2UuSXNEZXNrdG9wKCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRoZWlnaHQgPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICBoZWlnaHQgPSAgdGhpcy5vZmZzZXRoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgaGVpZ2h0PXRoaXMuY2hhcnRJZC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodC0xMDtcbiAgICAgICAgICB9XG5cbiAgICBsZXQgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAuZG9tYWluKGRhdGEubWFwKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzBdXTtcbiAgICAgIH0pKVxuICAgICAgLnJhbmdlUm91bmQoW21hcmdpbi5sZWZ0LCB3aWR0aCAtIG1hcmdpbi5yaWdodF0pXG4gICAgICAucGFkZGluZygwLjM1KTtcblxuICAgIGxldCB5ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgLmRvbWFpbihbZDMubWluKHRoaXMuc3RhY2tNaW4oc2VyaWVzKSksIFxuICAgICAgICB0aGlzLm1heFlWYWx1ZVxuICAgICAgICAvLyBkMy5tYXgodGhpcy5zdGFja01heChzZXJpZXMpKVxuICAgIF0pXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSwgbWFyZ2luLnRvcF0pO1xuXG4gICBcbiAgICAvLyBpZiAodGhpcy5iYXJ3aWR0aCA+IDApIHtcbiAgICAvLyAgIHRoaXMuYmFyd2lkdGggPSB0aGlzLmJhcndpZHRoO1xuICAgIC8vIH1cbiAgICAvLyBlbHNlIHtcbiAgICAvLyAgIHRoaXMuYmFyd2lkdGggPSB4LmJhbmR3aWR0aCgpO1xuICAgIC8vIH1cblxuXG4gICAgaWYodGhpcy5kZXZpY2UuSXNEZXNrdG9wKCk9PXRydWUpXG4gICAge1xuICAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHkoMCkgKyBcIilcIilcbiAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkpO1xuICAgIH1cbiAgZWxzZVxuICAge1xuICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgeSgwKSArIFwiKVwiKVxuICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkpLlxuICAgICAgICAgICBzZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDYwKVwiKVxuICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuXG4gIH1cbiAgIFxuICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIiwwKVwiKVxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSkpO1xuXG4gICAgdGhpcy5wbG90TGluZSh0aGlzLnN2ZywgeCwgeSwgaGVpZ2h0LCB3aWR0aCwgbWFyZ2luLmxlZnQpXG5cbiAgIGxldCBzdmdSZWN0ID0gICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgLmRhdGEoc2VyaWVzKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIChkLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5jb2xvci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29sb3JbaW5kZXhdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvcltpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yc1tpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjb2xvcnNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgIC5kYXRhKChkKSA9PiB7XG4gICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pXG5cbiAgICAgIHN2Z1JlY3QuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAuYXR0cihcIndpZHRoXCIsIHguYmFuZHdpZHRoKCkpLmF0dHIoJ2lkJywgKGQsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGQuZGF0YVtpXTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInhcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHgoK2QuZGF0YVtPYmplY3Qua2V5cyhkLmRhdGEpWzBdXSk7XG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4geShkWzFdKTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4geShkWzBdKSAtIHkoZFsxXSk7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuaHRtbCh0aGlzLnNldEtleShkKSlcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW91dFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwiY2xpY2tcIiwgKGQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRCYXJDbGlja1RleHQoZCk7XG4gICAgICAgIHRoaXMuZm9yZHJpbGxhYmxlQ2xpY2sodGhpcywgZCwgZXZlbnQpO1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIC8vIHRoaXMuY2hhcnRDbGljayhkKTtcbiAgICAgIH0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuaWYodGhpcy5sYWJlbGZsYWcpIHtcbnN2Z1JlY3QuZW50ZXIoKVxuLmFwcGVuZChcInRleHRcIilcbi5zdHlsZShcImZvbnQtd2VpZ2h0XCIsXCJib2xkXCIpXG4uc3R5bGUoXCJmb250LXNpemVcIixcIjF2d1wiKVxuLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuLmF0dHIoXCJmaWxsXCIsIChkKT0+e1xuICBpZih0aGlzLmxhYmVsY29sb3IubGVuZ3RoPjApe1xuICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgfVxufSlcbiAuYXR0cihcInhcIiwgKGQpID0+IHtcbiAgcmV0dXJuIHgoK2QuZGF0YVtPYmplY3Qua2V5cyhkLmRhdGEpWzBdXSkgKyB4LmJhbmR3aWR0aCgpLzI7XG4gIC8vICsgIG1hcmdpbi5sZWZ0O1xufSlcbi5hdHRyKFwieVwiLCAoZCwgaW5kZXgpID0+IHtcbiAgcmV0dXJuIHkoZFsxXSkgKyAyMDtcbn0pXG4udGV4dChmdW5jdGlvbihkKXtcbiAgICAgcmV0dXJuICBkW09iamVjdC5rZXlzKGQpWzFdXSAtIGRbT2JqZWN0LmtleXMoZClbMF1dO1xufSlcbn1cbiBcbiAgfVxuXG4gIHN0YWNrTWluKHNlcmllKSB7XG4gICAgcmV0dXJuIGQzLm1pbihzZXJpZSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbMF07IH0pO1xuICB9XG5cbiAgLy8gc3RhY2tNYXgoc2VyaWUpIHtcbiAgLy8gICByZXR1cm4gZDMubWF4KHNlcmllLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsxXTsgfSk7XG4gIC8vIH1cblxuICByZXNpemUoKSB7XG5cbiAgICB0aGlzLnN2Z3dpZHRoID0gMDtcbiAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgdGhpcy5yZXNpemVmbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHRoaXMucGxvdENoYXJ0KCk7XG5cbiAgfVxuXG5cbiAgcGxvdExpbmUoc3ZnLCB4LCB5LCBoZWlnaHQsIHdpZHRoLCBtKSB7XG4gICAgaWYgKHRoaXMuaFNjYWxlKSB7XG4gICAgICBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtICsgXCIsMClcIilcbiAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImxpZ2h0Z3JleVwiKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoJycpKTtcbiAgICB9XG4gIH1cblxuXG4gIGxlZ2VuZENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgb2JqID0ge307XG4gICAgb2JqW1wibGFiZWxcIl0gPSBldmVudC5sYWJlbDtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIGV2ZW50LmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgIG9iamVjdFtlbGVtZW50LmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICBkYXRhLnB1c2gob2JqZWN0KTtcbiAgICB9KTtcbiAgICBvYmpbXCJkYXRhXCJdID0gZGF0YTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmopO1xuICB9XG5cbiAgc2V0S2V5KGQ6IGFueSkge1xuICAgIGxldCBkaWZmID0gZFswXSAtIGRbMV07XG4gICAgaWYgKGRpZmYgPCAwKSB7XG4gICAgICBkaWZmID0gKGRpZmYgKiAoLTEpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGQuZGF0YSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBkaWZmKSB7XG4gICAgICAgIC8vICBsZXQgb2JqZWN0ID0geyAnbGFiZWwnOiBrZXksICd2YWx1ZSc6IHZhbHVlICwgJ2xlZ2VuZCc6IGQuZGF0YVtPYmplY3Qua2V5cyhkLmRhdGEpWzBdXX07XG4gICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgb2JqZWN0W3RoaXMueGF4aXNdID0gZC5kYXRhW09iamVjdC5rZXlzKGQuZGF0YSlbMF1dO1xuXG4gICAgICAgIHJldHVybiAodGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEJhckNsaWNrVGV4dChkOiBhbnkpIHtcbiAgICBsZXQgZGlmZiA9IGRbMF0gLSBkWzFdO1xuICAgIGlmIChkaWZmIDwgMCkge1xuICAgICAgZGlmZiA9IChkaWZmICogKC0xKSk7XG4gICAgfVxuICAgIC8vIGxldCBvYmplY3QgPSB7fTtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGQuZGF0YSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBkaWZmKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICAgIG9iamVjdFt0aGlzLnhheGlzXSA9IGQuZGF0YVtPYmplY3Qua2V5cyhkLmRhdGEpWzBdXTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jaGFydENsaWNrKG9iamVjdCk7XG4gIH1cblxuICBnZXRSZXNwb25zZURhdGEoaHR0cFJlc3BvbnNlOiBhbnkpIHtcbiAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIGlmICh0aGlzLmRhdGFyZWFkZXIgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZHIgPSB0aGlzLmRhdGFyZWFkZXIuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAoY29uc3QgaXIgb2YgZHIpIHtcbiAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICB9XG5cblxufVxuIiwiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCxJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHtDb21tYW5EYXRhU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSdcbmltcG9ydHtEZXZpY2VRdWVyeVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2RldmljZS5xdWVyeS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1tdWx0aXNlcmllcycsXG4gIHRlbXBsYXRlOiBgPGRpdiAgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoJGV2ZW50KVwiPiBcbjx0YWJsZSBzdHlsZT1cIndpZHRoOiAxMDAlO1wiICNjaGFydElkPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbHNwYW49XCIyXCIgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gICAgPC90cj5cbiAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cImhlaWdodFwiIFthdHRyLndpZHRoXT1cIndpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwibGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZHNcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPjwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PlxuXG5cbmAsXG4gIHN0eWxlczogW2BgXVxufSlcbmV4cG9ydCBjbGFzcyBHcm91cGJhckNvbXBvbmVudCBleHRlbmRzIEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkaXZpZCcpIGRpdmlkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkcmlsbGlkJykgZHJpbGxpZDogYW55O1xuICAvL0BJbnB1dCgpIGRhdGE6IGFueTtcbiAgQElucHV0KCdkYXRhJykgZGF0YTogYW55XG4gIEBJbnB1dCgpIGxlZ2VuZDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGJhcndpZHRoOiBudW1iZXIgPSAwO1xuICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQElucHV0KCd3aWR0aCcpIHN2Z3dpZHRoOiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW11cbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcblxuICBkcmlsbGFibGVGbGFnOiBib29sZWFuID0gdHJ1ZTtcbiAgcmVzaXplZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBncm91cGJhcmNoYXJ0QXJyYXk6IGFueVtdID0gW107XG4gIGxlZ2VuZEFycmF5OiBhbnk7XG4gIHhheGlzRGF0YTogYW55O1xuICBrZXlBcnJheTogYW55O1xuICBsZWdlbmRzOiBhbnk7XG4gIHllYXJzOiBhbnk7XG4gIHVybGxlZ2VuZEFycmF5ID0gW107XG4gIHN2ZzogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UscHJpdmF0ZSBkZXZpY2U6RGV2aWNlUXVlcnlTZXJ2aWNlKSB7XG4gICAgc3VwZXIoJ211bHRpYmFyJyk7XG4gICAgdGhpcy5wcmVkZWZpbmVkY29sb3JzID0gW1wiIzMzNjZjY1wiLCBcIiNkYzM5MTJcIiwgXCIjZmY5OTAwXCIsIFwiIzEwOTYxOFwiLCBcIiM5OTAwOTlcIiwgXCIjMDA5OWM2XCIsIFwiI2RkNDQ3N1wiLCBcIiM2NmFhMDBcIiwgXCIjYjgyZTJlXCIsIFwiIzMxNjM5NVwiLCBcIiM5OTQ0OTlcIiwgXCIjMjJhYTk5XCIsIFwiI2FhYWExMVwiLCBcIiM2NjMzY2NcIiwgXCIjZTY3MzAwXCIsIFwiIzhiMDcwN1wiLCBcIiM2NTEwNjdcIiwgXCIjMzI5MjYyXCIsIFwiIzU1NzRhNlwiLCBcIiMzYjNlYWNcIl07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICBsZXQgcmVzOiBhbnk7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICByZXMgPSByZXNwb25zZTtcblxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXMpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuXG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICB9LCAwKTtcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcbiAgICBsZXQgcmVxdWVzdEpzb247XG4gICAgbGV0IGtleSA9IHRoaXMuZHJpbGxhYmxlZGF0YWtleTtcbiAgICBsZXQgcmVzcDogYW55O1xuICAgIGlmICh0aGlzLmRyaWxsYWJsZWRhdGFrZXkubGVuZ3RoKSB7XG4gICAgICBsZXQgZHJpbGxhYmxlZGF0YSA9IHRoaXMuZ2V0TXVsdGlwbGVEcmlsbGJsZUtleURhdGEoZGF0YSwga2V5KTtcbiAgICAgIHJlcXVlc3RKc29uID0gZHJpbGxhYmxlZGF0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIHRoaXMubXlzZXJ2aWNlLnBvc3RmZXRjaERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QsIHJlcXVlc3RKc29uKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9XG5cbiAgZHJhd0NoYXJ0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG5cbiAgICB9LCAwKTtcblxuICB9XG5cbiAgZ2V0UmVzcG9uc2VEYXRhKGh0dHBSZXNwb25zZTogYW55KSB7XG4gICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgfVxuXG4gIHBsb3REM0NoYXJ0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udmVydFRvSlNPTigpO1xuICAgIHRoaXMucGxvdEdyb3VwQmFyQ2hhcnQoKTtcbiAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgcGxvdEdyb3VwQmFyQ2hhcnQoKTogdm9pZCB7XG4gICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbFRpcChkMyk7XG4gICAgbGV0IGNvbG9ycyA9IHRoaXMucHJlZGVmaW5lZGNvbG9ycztcbiAgICAvLyB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgaWYgKHRoaXMucmVzaXplZmxhZyA9PSBmYWxzZSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnRJZCkge1xuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA1MCwgbGVmdDogNDAgfTtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuc3Znd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnN2Z2hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gICAgdGhpcy5zdmcgPSBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmNvbXBvbmVudElkKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuXG4gICAgY29uc3QgeDAgPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgIC5wYWRkaW5nKDAuMik7XG5cbiAgICBjb25zdCB4MSA9IGQzLnNjYWxlQmFuZCgpLnBhZGRpbmcoMC4xKTtcblxuICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XG5cbiAgICAvL3NldHRpbmcgeCBhbmQgeSBkb21haW5zXG4gICAgdGhpcy55ZWFycyA9IHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5Lm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5sYWJlbHM7IH0pO1xuICAgIGxldCBsYWJlbCA9IHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5WzBdLnZhbHVlcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubGFiZWw7IH0pO1xuXG4gICAgeDAuZG9tYWluKHRoaXMueWVhcnMpO1xuICAgIHgxLmRvbWFpbihsYWJlbCkucmFuZ2VSb3VuZChbMCwgeDAuYmFuZHdpZHRoKCldKTtcbiAgICB5LmRvbWFpbihbMCwgZDMubWF4KHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5LCBmdW5jdGlvbiAobGFiZWxzKSB7IHJldHVybiBkMy5tYXgobGFiZWxzLnZhbHVlcywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWU7IH0pOyB9KV0pO1xuXG4gICAgLy9keW5hbWljIGJhcndpZHRoXG4gICAgaWYgKHRoaXMuYmFyd2lkdGggPiAwKSB7XG4gICAgICB0aGlzLmJhcndpZHRoID0gdGhpcy5iYXJ3aWR0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmJhcndpZHRoID0geDAuYmFuZHdpZHRoO1xuICAgIH1cblxuICAgIC8vIGFkZCB4IGF4aXMgdG8gc3ZnXG5cblxuXG4gICAgaWYodGhpcy5kZXZpY2UuSXNEZXNrdG9wKCk9PXRydWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeDApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4MCkpLlxuICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2MClcIilcbiAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuICAgICBcbiAgICAgICAgICB9XG5cbiAgXG5cbiAgICAvL2FkZCB5IGF4aXMgdG8gc3ZnXG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgLnRpY2tzKDEwKSlcblxuICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHksIGhlaWdodCwgd2lkdGgpO1xuXG4gICAgLy8gc3ZnLnNlbGVjdCgnLnknKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5kZWxheSgxMzAwKS5zdHlsZSgnb3BhY2l0eScsICcxJyk7XG4gICAgIC8vYWRkaW5nIGJhcnNcbiAgICBsZXQgc2xpY2UgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuc2xpY2VcIilcbiAgICAgIC5kYXRhKHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5KVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgwKGQubGFiZWxzKSArIFwiLDApXCI7IH0pO1xuICAgIFxuICAgICAgc2xpY2Uuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgLmRhdGEoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWVzOyB9KVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4MS5iYW5kd2lkdGgpXG4gICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgxKGQubGFiZWwpXG4gICAgICB9KVxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCwgaW5kZXgpIHsgcmV0dXJuIGNvbG9yc1tpbmRleF0gfSlcbiAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geSgwKTsgfSlcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBoZWlnaHQgLSB5KDApOyB9KVxuICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuaHRtbChcbiAgICAgICAgICB0aGlzLnNldEtleShkKVxuICAgICAgICAgIC8vICB0aGlzLnRvb2xUaXBDb250ZW50KGQpXG4gICAgICAgIClcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgIHRoaXMuZ3JvdXBiYXJDbGljayhkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgLy8gdGhpcy5jaGFydENsaWNrKGQpO1xuICAgICAgfSlcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgaWYodGhpcy5sYWJlbGZsYWcpIHtcbiAgICAgIHNsaWNlLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgIC5kYXRhKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnZhbHVlczsgfSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgeDEuYmFuZHdpZHRoKVxuICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiB4MShkLmxhYmVsKSArIHgxLmJhbmR3aWR0aCgpLzJcbiAgICAgIH0pXG4gICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB5KGQudmFsdWUpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoMCk7IH0pXG4gICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLFwiYm9sZFwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsXCIxdndcIilcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCk9PntcbiAgICAgICAgaWYodGhpcy5sYWJlbGNvbG9yLmxlbmd0aD4wKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbGNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgICAgIH0pO1xufVxuICAgIHNsaWNlLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkgeyBcbiAgICAgICAgIHJldHVybiB5KGQudmFsdWUpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoZC52YWx1ZSk7IH0pO1xuICB9XG5cbiAgZ3JvdXBiYXJDbGljayhkOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W2QubGFiZWxdID0gZC52YWx1ZTtcbiAgICBvYmplY3RbdGhpcy54YXhpc0RhdGFdID0gZC54YXhpcztcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG4gIHJlc2l6ZShldmVudDogYW55KSB7XG4gICAgdGhpcy5zdmd3aWR0aCA9IDA7XG4gICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICB0aGlzLnJlc2l6ZWZsYWcgPSB0cnVlO1xuICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmRpdmlkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgdGhpcy5wbG90R3JvdXBCYXJDaGFydCgpO1xuICB9XG5cbiAgbGVnZW5kQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIC8vIGNvbnN0IGxlZ2VuZE5vZGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gICAgLy8gZGVsZXRlIGxlZ2VuZE5vZGUuY29sb3I7XG5cbiAgICBsZXQgb2JqID0ge307XG4gICAgb2JqW1wibGFiZWxcIl0gPSBldmVudC5sYWJlbDtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIGV2ZW50LmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgIG9iamVjdFtlbGVtZW50LmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICBkYXRhLnB1c2gob2JqZWN0KTtcbiAgICB9KTtcbiAgICBvYmpbXCJkYXRhXCJdID0gZGF0YTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmopO1xuXG4gICAgLy8gdGhpcy5vbkxlZ2VuZENsaWNrLmVtaXQobGVnZW5kTm9kZSk7XG4gIH1cblxuICAvLzJkIGFycmF5IHRvIGpzb24gY29udmVyc2lvblxuICBjb252ZXJ0VG9KU09OKCkge1xuICAgIGxldCBncm91cENoYXJ0T2JqID0geyBcImxhYmVsc1wiOiBcIlwiLCB2YWx1ZXM6IFtdIH07XG4gICAgbGV0IGZpcnN0Um93T2ZEYXRhID0gdGhpcy5kYXRhWzBdO1xuICAgIHRoaXMueGF4aXNEYXRhID0gdGhpcy5kYXRhWzBdWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtdWx0aVNlcmllc0FycmF5ID0gW107XG4gICAgICBsZXQgdmFsdWVPZko6IGFueTtcblxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCB0aGlzLmRhdGFbaV0ubGVuZ3RoOyBqKyspIHtcblxuICAgICAgICB2YWx1ZU9mSiA9IHRoaXMuZGF0YVtpXVswXTtcbiAgICAgICAgbGV0IHNpbmdsZUJhck9iaiA9IHt9O1xuICAgICAgICBzaW5nbGVCYXJPYmpbXCJ2YWx1ZVwiXSA9IHRoaXMuZGF0YVtpXVtqXTtcbiAgICAgICAgc2luZ2xlQmFyT2JqW1wibGFiZWxcIl0gPSBmaXJzdFJvd09mRGF0YVtqXTtcbiAgICAgICAgc2luZ2xlQmFyT2JqW1wieGF4aXNcIl0gPSB0aGlzLmRhdGFbaV1bMF07XG4gICAgICAgIG11bHRpU2VyaWVzQXJyYXkucHVzaChzaW5nbGVCYXJPYmopO1xuICAgICAgfVxuICAgICAgaWYgKG11bHRpU2VyaWVzQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGdyb3VwQ2hhcnRPYmpbXCJ2YWx1ZXNcIl0gPSBtdWx0aVNlcmllc0FycmF5O1xuICAgICAgICBsZXQgbmV3TGFiZWxzVmFsdWVzOiBhbnkgPSB2YWx1ZU9mSjtcbiAgICAgICAgbGV0IG5ld0dyb3VwRGF0YU9iaiA9IE9iamVjdC5hc3NpZ24oe30sIGdyb3VwQ2hhcnRPYmopO1xuICAgICAgICBuZXdHcm91cERhdGFPYmpbJ2xhYmVscyddID0gbmV3TGFiZWxzVmFsdWVzICsgJyc7XG4gICAgICAgIHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5LnB1c2gobmV3R3JvdXBEYXRhT2JqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG5cbiAgdHJhbnNmb3JtdG8yZEFycmF5KCkge1xuICAgIGxldCBpID0gMFxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQucHVzaChcInllYXJzXCIpO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgIGVsZW1lbnQudmFsdWVzLmZvckVhY2goZWxlbWVudDIgPT4ge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQyLmxhYmVsKTtcblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHRoaXMudXJsbGVnZW5kQXJyYXkucHVzaChyZXN1bHQpO1xuXG4gICAgbGV0IHRlbXBhcnJheSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgdGVtcGFycmF5ID0gW107XG4gICAgICBsZXQgdmFsdWVzOiBhbnk7XG4gICAgICBsZXQgeWVhciA9IGVsZW1lbnQubGFiZWxzO1xuICAgICAgdGVtcGFycmF5LnB1c2goeWVhcik7XG4gICAgICBlbGVtZW50LnZhbHVlcy5mb3JFYWNoKGVsZW1lbnQyID0+IHtcbiAgICAgICAgdmFsdWVzID0gZWxlbWVudDIudmFsdWU7XG4gICAgICAgIHRlbXBhcnJheS5wdXNoKHZhbHVlcyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudXJsbGVnZW5kQXJyYXkucHVzaCh0ZW1wYXJyYXkpO1xuICAgIH0pXG4gIH1cblxuICB0cmFuc2Zvcm1EYXRhKGRhdGE6IGFueSkge1xuICAgIHRoaXMua2V5QXJyYXkgPSBbXTtcbiAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG4gICAgZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5uZXJlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQXJyYXlbaW5uZXJlbGVtZW50XSA9IHsgJ2RhdGEnOiBbXSB9O1xuICAgICAgICAgICAgdGhpcy5rZXlBcnJheS5wdXNoKGlubmVyZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBvYmo6IGFueSA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGlubmVyZWxlbWVudCwgaW5uZXJpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbm5lcmluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5QXJyYXlbaW5uZXJpbmRleCAtIDFdO1xuICAgICAgICAgICAgb2JqW2tleV0gPSBlbGVtZW50W2lubmVyaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbGVnZW5kZGF0YSA9IHRoaXMubGVnZW5kQXJyYXlba2V5XTtcbiAgICAgICAgICAgIGlmIChsZWdlbmRkYXRhKSB7XG4gICAgICAgICAgICAgIGxlZ2VuZGRhdGEuZGF0YS5wdXNoKHsgJ3ZhbHVlJzogZWxlbWVudFtpbm5lcmluZGV4XSwgJ2xhYmVsJzogZWxlbWVudFswXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmxlZ2VuZHMgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBsZWdlbmRkYXRhID0gdGhpcy5sZWdlbmRBcnJheVtlbGVtZW50XTtcbiAgICAgIGxldCBvYmplY3QgPSB7ICdsYWJlbCc6IGVsZW1lbnQsICdjb2xvcic6IHRoaXMucHJlZGVmaW5lZGNvbG9yc1tpbmRleF0sICdkYXRhJzogbGVnZW5kZGF0YS5kYXRhIH07XG4gICAgICB0aGlzLmxlZ2VuZHMucHVzaChvYmplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0S2V5KGQ6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbZC5sYWJlbF0gPSBkLnZhbHVlO1xuICAgIG9iamVjdFt0aGlzLnhheGlzRGF0YV0gPSBkLnhheGlzO1xuICAgIHJldHVybiAodGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCkpO1xuICB9XG5cbiAgcGxvdExpbmUoZywgeSwgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGlmICh0aGlzLmhTY2FsZSkge1xuICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpXG4gICAgICAgICAgLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdCgnJykpO1xuICAgIH1cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSBcIi4uL2Jhc2UvYmFzZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFBsb3RDYXJ0IH0gZnJvbSBcIi4uL2Jhc2UvY2hhcnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBDb21tYW5EYXRhU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbW1hbi5kYXRhLnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmUvc3JjL3JlbmRlcjMvdXRpbFwiO1xuaW1wb3J0e0RldmljZVF1ZXJ5U2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvZGV2aWNlLnF1ZXJ5LnNlcnZpY2UnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY29tYm9jaGFydCcsXG4gICAgdGVtcGxhdGU6IGA8ZGl2ICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoKVwiPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQgPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZD5cbiAgICAgICAgICA8c3ZnIFthdHRyLmhlaWdodF09XCJzdmdoZWlnaHRcIiBbYXR0ci53aWR0aF09XCJzdmd3aWR0aFwiIFthdHRyLmlkXT1cImNvbXBvbmVudElkXCI+XG4gICAgICAgICAgPC9zdmc+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgIDxhbWV4aW8tZDMtbGVnZW5kICpuZ0lmPVwibGVnZW5kXCIgW2hvcml6b250YWxdPVwidHJ1ZVwiIChvbkNsaWNrKT1cIm9uQmFyTGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZEFycmF5XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgICA8L2FtZXhpby1kMy1sZWdlbmQ+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PmAsXG4gICAgc3R5bGVzOiBbYGBdXG59KVxuZXhwb3J0IGNsYXNzIENvbWJvY2hhcnRDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0IHtcbiAgICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgICBASW5wdXQoJ2hlaWdodCcpIHN2Z2hlaWdodDogbnVtYmVyID0gMzAwO1xuICAgIEBJbnB1dCgnbGluZS1jb2xvcicpIGxpbmVDb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICAgIEBJbnB1dCgpIGhvcml6b250YWw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBAVmlld0NoaWxkKCdjaGFydElkJykgY2hhcnRJZDogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCdkaXZpZCcpIGRpdmlkOiBFbGVtZW50UmVmO1xuICAgIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gICAgQElucHV0KCdsZXZlbCcpIGxldmVsOiBudW1iZXIgPSAwO1xuICAgIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0OiBudW1iZXI7XG4gICAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW11cbiAgICBASW5wdXQoJ2xpbmUtZGF0YS1pbmRleCcpIGxpbmVJbnB1dDogYW55O1xuICAgIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZSA6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHJlc2l6ZWZsYWc6Ym9vbGVhbj1mYWxzZTtcbiAgICBkYXRhOiBhbnk7XG4gICAgc3ZnOmFueTtcbiAgICBjb2xvcmZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBrZXlBcnJheTogYW55W10gPSBbXTtcbiAgICB0cmFuc2Zvcm1lZGRhdGE6IGFueVtdID0gW107XG4gICAgb2JqZWN0OiBhbnk7XG4gICAgbGVnZW5kQXJyYXk6IGFueVtdID0gW107XG4gICAgaHR0cHJlc3BvbnNlOmFueTtcbiAgICBvZmZzZXRoZWlnaHQ6YW55O1xuICAgXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBteXNlcnZpY2U6IENvbW1hbkRhdGFTZXJ2aWNlLHByaXZhdGUgZGV2aWNlOkRldmljZVF1ZXJ5U2VydmljZSkge1xuICAgICAgICBzdXBlcignY29tYm9jaGFydCcpO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgIFxuICAgICAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICAgICAgICBsZXQgcmVzcDogYW55O1xuICAgICAgICAgICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmh0dHByZXNwb25zZT1yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG5cbiAgICAgICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgICAgICBsZXQgcmVxdWVzdEpzb247XG4gICAgICAgIGxldCBrZXkgPSB0aGlzLmRyaWxsYWJsZWRhdGFrZXk7XG4gICAgICAgIGxldCByZXNwOiBhbnk7XG4gICAgICAgIGlmICh0aGlzLmRyaWxsYWJsZWRhdGFrZXkubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgZHJpbGxhYmxlZGF0YSA9IHRoaXMuZ2V0TXVsdGlwbGVEcmlsbGJsZUtleURhdGEoZGF0YSwga2V5KTtcbiAgICAgICAgICAgIHJlcXVlc3RKc29uID0gZHJpbGxhYmxlZGF0YTtcblxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdEpzb24gPSBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICAgICAgICB0aGlzLm15c2VydmljZS5wb3N0ZmV0Y2hEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB0aGlzLmh0dHByZXNwb25zZT1yZXNwb25zZTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3Q2hhcnQoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuaHR0cHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgICAgIH0sIDApO1xuXG4gICAgfVxuICAgIGdldFJlc3BvbnNlRGF0YShodHRwUmVzcG9uc2U6IGFueSkge1xuICAgICAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgICAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICAgIH1cblxuICAgIHBsb3REM0NoYXJ0KCkge1xuXG4gICAgICAgIHRoaXMuZm9ybUxlZ2VuZERhdGEoKTtcbiAgICAgICAgaWYodGhpcy5yZXNpemVmbGFnPT1mYWxzZSlcbiAgICAgICAge1xuICAgICAgICBpZiAodGhpcy5jaGFydElkKSB7XG4gICAgICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgICB9XG4gICAgfSAgXG4gICAgICAgIGxldCBsaW5lTmFtZTogYW55ID0gdGhpcy5saW5lSW5wdXQ7XG5cbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbFRpcChkMyk7XG4gICAgICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZCk7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDg1LCBsZWZ0OiA2MCB9O1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuc3Znd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgbGV0IGhlaWdodDtcbiAgICAgXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJvZmZzZXRoZWlnaHRcIix0aGlzLm9mZnNldGhlaWdodCk7XG4gICAgICAgIGlmKHRoaXMuZGV2aWNlLklzRGVza3RvcCgpPT10cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0aGVpZ2h0ID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0LTIwLTkwO1xuICAgICAgICAgICAgICAgaGVpZ2h0ID0gIHRoaXMub2Zmc2V0aGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgIGhlaWdodD10aGlzLnN2Z2hlaWdodC1tYXJnaW4udG9wLW1hcmdpbi5ib3R0b207XG4gICAgICAgICAgfVxuICAgICAgICBsZXQgeCwgeTtcbiAgICAgICAgY29uc3QgZyA9IHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWwgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHggPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoMC4xKTtcbiAgICAgICAgICAgIHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pO1xuXG4gICAgICAgICAgICAvL3NldHRpbmcgY29udGVudCBmb3IgeCBhbmQgeSBheGlzXG4gICAgICAgICAgICB4LmRvbWFpbih0aGlzLmRhdGEubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMF1dO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgbGV0IGJhclJhbmdlID0gZDMubWF4KHRoaXMuZGF0YSwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVsxXV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGxpbmVSYW5nZSA9IGQzLm1heCh0aGlzLmRhdGEsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRbdGhpcy5saW5lSW5wdXRdO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGxldCByYW5nZTtcbiAgICAgICAgICAgIGlmIChiYXJSYW5nZSA+IGxpbmVSYW5nZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gYmFyUmFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGxpbmVSYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkuZG9tYWluKFswLCByYW5nZV0pO1xuXG5cbiAgICAgICAgICAgIGlmKHRoaXMuZGV2aWNlLklzRGVza3RvcCgpPT10cnVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICB7XG4gICAgICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkpLlxuICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2NSlcIilcbiAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgICAvL2FkZCB5IGF4aXMgdG8gc3ZnXG4gICAgICAgICAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMTApKVxuXG4gICAgICAgICAgIHRoaXMucGxvdExpbmUoZyx4LHksaGVpZ2h0LHdpZHRoKTsgXG4gICAgICAgICAgIFxuICAgICAgICAgICAgLy9hZGQgYmFyIGNoYXJ0XG4gICAgICAgICAgICBnLnNlbGVjdEFsbChcIi5iYXJcIilcbiAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoZFtPYmplY3Qua2V5cyhkKVswXV0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5KGRbT2JqZWN0LmtleXMoZClbMV1dKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAoZCkgPT4geyByZXR1cm4gaGVpZ2h0IC0geShkW09iamVjdC5rZXlzKGQpWzFdXSk7IH0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5jb2xvcjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAxMCkgKyBcInB4XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFyQ2hhcnRDbGljayhkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy9saW5lIGNvZGUgc3RhcnRcbiAgICAgICAgICAgIGxldCB2YWx1ZWxpbmUgPSBkMy5saW5lKClcbiAgICAgICAgICAgICAgICAueChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRbT2JqZWN0LmtleXMoZClbMF1dXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAueShmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geShcbiAgICAgICAgICAgICAgICAgICAgICAgIGRbbGluZU5hbWVdXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBzaGlmdCA9IG1hcmdpbi5sZWZ0ICsgeC5iYW5kd2lkdGgoKSAvIDI7XG4gICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEoW3RoaXMuZGF0YV0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCB0aGlzLmxpbmVDb2xvcilcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoIFwiICsgc2hpZnQgKyBcIiwgMjAgKVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2YWx1ZWxpbmUpO1xuICAgICAgICAgICAgbGV0IHBvaW50czEgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCJjaXJjbGUucG9pbnQxXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxuXG4gICAgICAgICAgICBwb2ludHMxLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLm1lcmdlKHBvaW50czEpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInBvaW50MVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCB0aGlzLmxpbmVDb2xvcilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHRoaXMubGluZUNvbG9yKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoXG4gICAgICAgICAgICAgICAgICAgICAgICBkW09iamVjdC5rZXlzKGQpWzBdXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geShcbiAgICAgICAgICAgICAgICAgICAgICAgIGRbbGluZU5hbWVdXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgKGQpID0+IHsgcmV0dXJuIDU7IH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoIFwiICsgc2hpZnQgKyBcIiwgMjAgKVwiKVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwTGluZURhdGEoZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbWJvTGluZUNsaWNrKGQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmRyaWxsYWJsZUNsaWNrKHRoaXMsIGQsZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL2xpbmUgY29kZSBlbmRzXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgcGxvdExpbmUoZyx4LHksaGVpZ2h0LHdpZHRoKVxue1xuXG4gICAgaWYodGhpcy5oU2NhbGUpe1xuICAgICAgICBnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgICAgLiB0aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoJycpKTsgICAgIFxuICAgIH1cbn1cbiAgICBmb3JtVG9vbHRpcERhdGEodG9vbHRpcERhdGE6IGFueSkge1xuICAgICAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0b29sdGlwRGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbFRpcEZvckJhcihvYmplY3QpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybURhdGEoZGF0YTogYW55KSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRkYXRhPVtdO1xuICAgICAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgIFxuICAgICAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IER1bW15T2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb3JFYWNoKChpbmRpdmlkdWFsdmFsdWUsIGtleWluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIER1bW15T2JqZWN0W3RoaXMua2V5QXJyYXlba2V5aW5kZXhdXSA9IGluZGl2aWR1YWx2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTsvL2lubmVyIGZvciBsb29wIGVuZHNcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5wdXNoKER1bW15T2JqZWN0KTtcbiAgICAgICAgICAgIH0vL2lmIGVuZHNcbiAgICAgICAgfSk7Ly9vdXRlciBmb3IgbG9vcCBlbmRzXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMudHJhbnNmb3JtZWRkYXRhO1xuICAgIH1cblxuICAgIGZvcm1MZWdlbmREYXRhKCkge1xuICAgICAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgbGV0IGxlZ2VuZG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgbGVnZW5kb2JqZWN0WydsYWJlbCddID0gZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KVswXV07XG4gICAgICAgICAgICBsZWdlbmRvYmplY3RbJ3ZhbHVlJ10gPSBlbGVtZW50W09iamVjdC5rZXlzKGVsZW1lbnQpWzFdXTtcbiAgICAgICAgICAgIGxlZ2VuZG9iamVjdFsnY29sb3InXSA9IGVsZW1lbnQuY29sb3I7XG4gICAgICAgICAgICB0aGlzLmxlZ2VuZEFycmF5LnB1c2gobGVnZW5kb2JqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25CYXJMZWdlbmRDbGljayhsZWdlbmRldmVudDogYW55KSB7XG4gICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgb2JqW3RoaXMua2V5QXJyYXlbMF1dID0gbGVnZW5kZXZlbnQubGFiZWw7XG4gICAgICAgIG9ialt0aGlzLmtleUFycmF5WzFdXSA9IGxlZ2VuZGV2ZW50LnZhbHVlO1xuICAgICAgICB0aGlzLmxlZ2VuZENsaWNrKG9iaik7XG4gICAgfVxuXG5cbiAgICBiYXJDaGFydENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgbGV0IG9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZXZlbnQpKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnRDbGljayhvYmplY3QpO1xuICAgIH1cblxuICAgIG9uQ29tYm9MaW5lQ2xpY2soZGF0YTogYW55KSB7XG4gICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9IFwiY29sb3JcIikge1xuICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21ib0xpbmVDbGljayhvYmplY3QpO1xuICAgICAgICAvL3RoaXMuY2hhcnRDbGljayhvYmplY3QpO1xuICAgIH1cblxuICAgIGZvcm1Ub29sdGlwTGluZURhdGEoZGF0YTogYW55KSB7XG4gICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09IHRoaXMubGluZUlucHV0KSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCk7XG4gICAgfVxuXG4gICAgcmVzaXplKCkge1xuXG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgICB0aGlzLnJlc2l6ZWZsYWcgPSB0cnVlO1xuICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgLy8gIHRoaXMuc3ZnaGVpZ2h0PXRoaXMub2Zmc2V0aGVpZ2h0O1xuICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG5cbiAgICB9XG5cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxvdENhcnQgfSBmcm9tIFwiLi4vYmFzZS9jaGFydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBEZXZpY2VRdWVyeVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtaGlzdG9ncmFtJyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICAgKm5nSWY9XCJkcmlsbGFibGVGbGFnXCIgI2RpdmlkICh3aW5kb3c6cmVzaXplKT1cInJlc2l6ZSgpXCIgPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQgPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQgY29sc3Bhbj1cIjJcIiBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IFwiPiB7e3RpdGxlfX0gPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cInN2Z2hlaWdodFwiIFthdHRyLndpZHRoXT1cInN2Z3dpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyBwYWRkaW5nOiA1cHg7XCI+XG4gICAgICAgICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwibGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZHNcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPjwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgPC90YWJsZT5cbjwvZGl2PlxuYCxcbiAgc3R5bGVzOiBbYC5iYXJ7YmFja2dyb3VuZC1jb2xvcjojMzk0M2NmO3BhZGRpbmc6LjAycHh9YF1cbn0pXG5leHBvcnQgY2xhc3MgSGlzdG9ncmFtQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDQwMDtcbiAgQElucHV0KCdjb2xvcicpIGNvbG9yOiBzdHJpbmcgPSBcImJsdWVcIjtcbiAgQElucHV0KCdkYXRhJykgZGF0YWhpc3RvOiBhbnk7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCdsYWJlbC1jb2xvcicpIGxhYmVsY29sb3I6IHN0cmluZyA9IFwiYmxhY2tcIjtcbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW11cbiAgaHR0cHJlc3BvbnNlOiBhbnk7XG4gIHN2ZzogYW55O1xuICByZXNpemVmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICBkYXRhMTogYW55O1xuICB2YWx1ZXM6IGFueVtdID0gW107XG4gIGFycmF5OiBhbnlbXSA9IFtdO1xuICB4YXhpc0FycmF5OiBhbnlbXSA9IFtdO1xuICB5YXhpc0FycmF5OiBhbnlbXSA9IFtdO1xuICB5YXhpc0RhdGE6IGFueVtdID0gW107XG4gIGhpc3RvZ3JhbWFycmF5OiBhbnlbXSA9IFtdO1xuICBoaXN0b2dyYW1kYXRhOiBhbnlbXSA9IFtdXG4gIGxlbmd0aGFycmF5OiBhbnlbXSA9IFtdO1xuICBhcnJheW9mTGVuZ3RoOiBhbnlbXSA9IFtdO1xuICBjaGFydERhdGE6IGFueVtdID0gW107XG4gIGZpbmFsZGF0YWFycmF5OiBhbnlbXSA9IFtdO1xuICBsZWdlbmRBcnJheTogYW55W107XG4gIGtleUFycmF5OiBhbnlbXTtcbiAgcHJlZGVmaW5lZGNvbG9yczogYW55W107XG4gIGxlZ2VuZHM6IGFueVtdO1xuICBjaGFydHR5cGU6IHN0cmluZztcbiAgZGF0YTogYW55W107XG4gIGRhdGFyZWFkZXJkYXRhOiBhbnlbXTtcbiAgeGF4aXM6IGFueTtcbiAgdGVtcHA6IGFueTtcbiAgdG9vbHRpcEFycmF5OiBhbnlbXSA9IFtdO1xuICBpbmRleCA9IDA7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSwgcHJpdmF0ZSBkZXZpY2U6IERldmljZVF1ZXJ5U2VydmljZSkge1xuICAgIHN1cGVyKCdoaXN0b2dyYW0nKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGxldCByZXM6IGFueVxuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICAgIHRoaXMubXlzZXJ2aWNlLmZldGNoVXJsRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCkuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHJlcyA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGFoaXN0byA9IFtdO1xuICAgICAgICAgICAgdGhpcy5kYXRhaGlzdG8gPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXMpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKClcbiAgICAgICAgICAgIHRoaXMucGxvdFhheGlzKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3RZYXhpcygpO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5kYXRhZm9yQ2hhcnQoKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YTEodGhpcy5maW5hbGRhdGFhcnJheSk7XG4gICAgICAgICAgICB0aGlzLnBsb3RDaGFydCgpO1xuXG4gICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhaGlzdG8pIHtcblxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGF0YWhpc3RvID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5kYXRhaGlzdG8pO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSgpXG4gICAgICAgICAgdGhpcy5wbG90WGF4aXMoKTtcbiAgICAgICAgICB0aGlzLnBsb3RZYXhpcygpO1xuICAgICAgICAgIHRoaXMudG9vbHRpcERhdGEoKTtcbiAgICAgICAgICB0aGlzLmRhdGFmb3JDaGFydCgpO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YTEodGhpcy5maW5hbGRhdGFhcnJheSk7XG4gICAgICAgICAgdGhpcy5wbG90Q2hhcnQoKTtcblxuICAgICAgICB9LCAwKTtcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYgKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpIHtcbiAgICAgIGxldCBkcmlsbGFibGVkYXRhID0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLCBrZXkpO1xuICAgICAgcmVxdWVzdEpzb24gPSBkcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcbiAgICB9XG5cblxuICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICB0aGlzLm15c2VydmljZS5wb3N0ZmV0Y2hEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgLy90aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGF0YWhpc3RvID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5odHRwcmVzcG9uc2UpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKClcbiAgICAgIHRoaXMucGxvdFhheGlzKCk7XG4gICAgICB0aGlzLnBsb3RZYXhpcygpO1xuICAgICAgdGhpcy50b29sdGlwRGF0YSgpO1xuICAgICAgdGhpcy5kYXRhZm9yQ2hhcnQoKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRGF0YTEodGhpcy5maW5hbGRhdGFhcnJheSk7XG4gICAgICB0aGlzLnBsb3RDaGFydCgpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgZ2V0UmVzcG9uc2VEYXRhKGh0dHBSZXNwb25zZTogYW55KSB7XG4gICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgfVxuXG4gIHRyYW5zZm9ybURhdGExKGRhdGExOiBhbnkpIHtcbiAgICB0aGlzLmtleUFycmF5ID0gW107XG4gICAgdGhpcy5sZWdlbmRBcnJheSA9IFtdO1xuICAgIGRhdGExLmZvckVhY2goKGVsZW1lbnQsIGkpID0+IHtcbiAgICAgIGlmIChpID09IDApIHtcbiAgICAgICAgZWxlbWVudC5mb3JFYWNoKChpbm5lcmVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRBcnJheVtpbm5lcmVsZW1lbnRdID0geyAnZGF0YSc6IFtdIH07XG4gICAgICAgICAgICB0aGlzLmtleUFycmF5LnB1c2goaW5uZXJlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT0gMCkge1xuICAgICAgICAgICAgdGhpcy54YXhpcyA9IGlubmVyZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCB0ZW1waW5uZXJhcnJheTogYW55W107XG4gICAgdGVtcGlubmVyYXJyYXkgPSBbXTtcbiAgICBkYXRhMS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBsZXQgb2JqOiBhbnkgPSB7fTtcbiAgICAgICAgZWxlbWVudC5mb3JFYWNoKChpbm5lcmVsZW1lbnQsIGlubmVyaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoaW5uZXJpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleUFycmF5W2lubmVyaW5kZXggLSAxXTtcbiAgICAgICAgICAgIG9ialtrZXldID0gZWxlbWVudFtpbm5lcmluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2VuZGRhdGEgPSB0aGlzLmxlZ2VuZEFycmF5W2tleV07XG4gICAgICAgICAgICBpZiAobGVnZW5kZGF0YSkge1xuICAgICAgICAgICAgICBsZWdlbmRkYXRhLmRhdGEucHVzaCh7ICd2YWx1ZSc6IGVsZW1lbnRbaW5uZXJpbmRleF0sICdsYWJlbCc6IGVsZW1lbnRbMF0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGVtcGlubmVyYXJyYXkucHVzaChvYmopO1xuICAgICAgfVxuXG4gICAgfSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGVtcGlubmVyYXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKGVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHRoaXMubGVnZW5kcyA9IFtdO1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5kYXRhaGlzdG9bMF07XG4gICAgbGV0IG9iamVjdCA9IHsgJ2xhYmVsJzogZWxlbWVudFsxXSArIFwiIFwiICsgXCJvZlwiICsgXCIgXCIgKyBlbGVtZW50WzBdLCAnY29sb3InOiB0aGlzLmNvbG9yIH07XG4gICAgdGhpcy5sZWdlbmRzLnB1c2gob2JqZWN0KTtcbiAgfVxuXG4gIHBsb3RDaGFydCgpIHtcblxuICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGxldCBkYXRhO1xuICAgIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IGtleXNldGFycmF5OiBzdHJpbmdbXSA9IFtdO1xuICAgIGxldCBzZXJpZXM7XG4gICAgc2VyaWVzID0gW107XG4gICAgc2VyaWVzID0gZDMuc3RhY2soKS5rZXlzKHRoaXMua2V5QXJyYXkpXG4gICAgICAub2Zmc2V0KGQzLnN0YWNrT2Zmc2V0RGl2ZXJnaW5nKVxuICAgICAgKHRoaXMuZGF0YSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCB0ZW1wZGF0YTtcbiAgICB0ZW1wZGF0YSA9IFtdO1xuICAgIHRlbXBkYXRhID0gc2VyaWVzO1xuICAgIHRlbXBkYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBlbGVtZW50LmZvckVhY2goaW5uZXJlbGVtZW50ID0+IHtcbiAgICAgICAgbGV0IHNpbmdsZXRvb2x0aXAgPSBbXTtcbiAgICAgICAgc2luZ2xldG9vbHRpcC5wdXNoKGlubmVyZWxlbWVudC5kYXRhLnRvb2x0aXBkYXRhW2ldKTtcbiAgICAgICAgaW5uZXJlbGVtZW50LnB1c2goc2luZ2xldG9vbHRpcCk7XG4gICAgICB9KTtcbiAgICAgIGkrKztcbiAgICB9KTtcblxuICAgIGxldCBjaGFydGRhdGEgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGVtcGRhdGEubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjaGFydGRhdGEucHVzaCh0ZW1wZGF0YVtpXSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlc2l6ZWZsYWcgPT0gZmFsc2UpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0SWQpIHtcbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuY2hhcnRJZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5zdmd3aWR0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWFyZ2luID0geyB0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogNTAsIGxlZnQ6IDYwIH07XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnN2Z3dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5zdmdoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuICAgIC8vY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKFwiaGVpZ2h0XCIpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICBsZXQgeCwgeTtcblxuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZClcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICBsZXQgYmFyV2lkdGggPSAod2lkdGggLyB0aGlzLmNoYXJ0RGF0YS5sZW5ndGgpO1xuICAgIGxldCBpbmMgPSBiYXJXaWR0aCAvIDI7XG4gICAgeCA9IGQzLnNjYWxlUG9pbnQoKVxuICAgICAgLmRvbWFpbih0aGlzLnhheGlzQXJyYXksIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkOyB9KVxuICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSk7XG5cblxuICAgIHkgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pO1xuICAgIHkuZG9tYWluKFswLCBkMy5tYXgodGhpcy5hcnJheW9mTGVuZ3RoKV0pO1xuXG4gICAgbGV0IHogPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XG4gICAgdGhpcy5hcnJheW9mTGVuZ3RoID0gW107XG4gICAgLy8gYWRkIHggYXhpcyB0byBzdmdcblxuICAgIGlmICh0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKSA9PSB0cnVlKSB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSkuXG4gICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgIC5hdHRyKFwieFwiLCA5KVxuICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoNjApXCIpXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG5cbiAgICB9XG5cbiAgICBsZXQgaG9yaXpvbnRhbHBhZGRpbmcgPSAwLjA1O1xuICAgIC8vYWRkIHkgYXhpcyB0byBzdmdcbiAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSk7XG5cbiAgICB0aGlzLnBsb3RMaW5lKHRoaXMuc3ZnLCB4LCB5LCBoZWlnaHQsIHdpZHRoKTtcbiAgIFxuIGxldCBoaXN0b2dyYW1CYXIgPSB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgLmRhdGEoY2hhcnRkYXRhKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIHRoaXMuY29sb3IpXG4gICAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgLmRhdGEoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9KVxuXG4gICAgbGV0IGhpc3RvZ3JhbUJhcjEgPSB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgLmRhdGEoY2hhcnRkYXRhKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLy8gLmF0dHIoXCJmaWxsXCIsIHRoaXMuY29sb3IpXG4gICAgICAuc2VsZWN0QWxsKFwibGFiZWxzXCIpXG4gICAgICAuZGF0YSgoZCkgPT4ge1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pXG4gICAgbGV0IGNudCA9IDA7XG5cblxuICAgIGhpc3RvZ3JhbUJhci5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgYmFyV2lkdGggLSAxKVxuICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpbmRleCkgPT4ge1xuICAgICAgICBjbnQrKztcbiAgICAgICAgcmV0dXJuIHkoZFsxXSk7XG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAuYXR0cihcImhlaWdodFwiLCAoZCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHkoZFswXSkgLSB5KGRbMV0gLSBob3Jpem9udGFscGFkZGluZykpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSBbYmFyV2lkdGggKiBpLCAwXTtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdHJhbnNsYXRlICsgXCIpXCI7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICB9KS5vbihcIm1vdXNlbW92ZVwiLFxuICAgICAgICAoZDogYW55KSA9PiB7XG4gICAgICAgICAgbGV0IGRhdGEgPSBkWzJdO1xuICAgICAgICAgIHJldHVybiB0b29sdGlwLmh0bWwodGhpcy5zZXRLZXkoZGF0YVswXSkpXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuXG4gICAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICBsZXQgY2xpY2tkYXRhID0gZFsyXTtcbiAgICAgICAgdGhpcy5oaXN0b2dyYW1DbGljayhjbGlja2RhdGFbMF0pO1xuICAgICAgICB0aGlzLmZvcmRyaWxsYWJsZUNsaWNrKHRoaXMsIGQsIGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSk7XG4gICBpZih0aGlzLmxhYmVsZmxhZykge1xuICAgIGhpc3RvZ3JhbUJhcjEuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5zdHlsZShcImZvbnQtd2VpZ2h0XCIsIFwiYm9sZFwiKVxuICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgIGlmKHRoaXMubGFiZWxjb2xvci5sZW5ndGg+MCl7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxjb2xvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICByZXR1cm4geShkWzFdKTtcbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgIFxuICAgICAgICBsZXQgZGF0YTogYW55O1xuICAgICAgICBsZXQgZGF0YTI6IGFueTtcbiAgICAgICAgZGF0YSA9IGRbMl07XG4gICAgICAgIGRhdGEyID0gZGF0YVswXTtcbiAgICAgICAgaWYgKGRhdGEyKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEyLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IFsoKGJhcldpZHRoICogaSkgKyBiYXJXaWR0aCAvIDIpLCAoTWF0aC5hYnMoeShkWzBdKSAtIHkoZFsxXSAtIGhvcml6b250YWxwYWRkaW5nKSkpXTtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdHJhbnNsYXRlICsgXCIpXCI7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAgLmFwcGVuZChcImxhYmVsXCIpXG4gICAgLy8gLy8gIC5hdHRyKFwid2lkdGhcIiwgYmFyV2lkdGggLSAxKVxuICAgIC8vICAuYXR0cihcInlcIiwgKGQsIGluZGV4KSA9PiB7XG4gICAgLy8gICAgcmV0dXJuIHkoZFsxXSk7XG4gICAgLy8gIH0pXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgLy8gICAuZGF0YSggY2hhcnRkYXRhKVxuICAgIC8vICAgLmVudGVyKCApLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC8vIC5hdHRyKFwiZmlsbFwiLCB0aGlzLmNvbG9yKVxuICAgIC8vICAgLy8gLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAvLyAgIC5kYXRhKChkKSA9PiB7XG4gICAgLy8gICAgIHJldHVybiBkO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIGhpc3RvZ3JhbUJhci5lbnRlciggIClcbiAgICAvLyAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLy8gICAvLyAuYXR0cihcIndpZHRoXCIsIGJhcldpZHRoIC0gMSlcbiAgICAvLyAgIC5hdHRyKFwieVwiLCAoZCwgaW5kZXgpID0+IHtcbiAgICAvLyAgICAgcmV0dXJuIHkoZFsxXSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkLCBpbmRleCkgPT4ge1xuICAgIC8vICAgICByZXR1cm4gTWF0aC5hYnMoeShkWzBdKSAtIHkoZFsxXSAtIGhvcml6b250YWxwYWRkaW5nKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAvLyAgICAgdmFyIHRyYW5zbGF0ZSA9IFtiYXJXaWR0aCAqIGksIDBdO1xuICAgIC8vICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0cmFuc2xhdGUgKyBcIilcIjtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJha3NhXCIpO1xuICAgIC8vICAgICAgIHJldHVybiBcImFrc2FcIjtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuc3R5bGUoXCJmb250LXdlaWdodFwiLFwiYm9sZFwiKVxuICAgIC8vIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAvLyAuYXR0cihcImZpbGxcIiwgKGQpPT57XG4gICAgLy8gICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgLy8gfSk7XG5cblxuICB9XG5cbiAgaGlzdG9ncmFtQ2xpY2sob2JqOiBhbnkpIHtcblxuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YWhpc3RvWzBdO1xuICAgIGxldCBsYWJlbDEgPSBkYXRhWzFdO1xuICAgIGxldCBsYWJlbDIgPSBkYXRhWzBdO1xuICAgIGlmIChvYmoubGFiZWwubGVuZ3RoKSB7XG4gICAgICBvYmplY3RbbGFiZWwyICsgXCI6XCJdID0gb2JqLmxhYmVsO1xuICAgICAgb2JqZWN0W2xhYmVsMSArIFwiOlwiXSA9IG9iai52YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG5cbiAgbGVnZW5kQ2xpY2soZXZlbnQ6IGFueSkge1xuXG4gICAgdGhpcy5vbkxlZ2VuZENsaWNrLmVtaXQodGhpcy5kYXRhaGlzdG8pO1xuXG4gIH1cblxuICB0cmFuc2Zvcm1EYXRhKCkge1xuICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgIHRoaXMuZGF0YWhpc3RvLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICB0aGlzLnZhbHVlcy5wdXNoKGVsZW1lbnRbMV0pO1xuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYXJyYXkucHVzaCh0aGlzLnZhbHVlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcGxvdFhheGlzKCkge1xuXG4gICAgdGhpcy54YXhpc0FycmF5ID0gW107XG4gICAgdGhpcy54YXhpc0FycmF5LnB1c2goMCk7XG4gICAgbGV0IG5ld3ZhbHVlOiBudW1iZXIgPSAwO1xuICAgIGxldCB2YWx1ZSA9IE1hdGguY2VpbChkMy5tYXgodGhpcy5hcnJheSkpO1xuXG4gICAgaWYgKHZhbHVlICUgMTAgPT0gMCkge1xuICAgICAgdmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSAoMTAgLSB2YWx1ZSAlIDEwKSArIHZhbHVlO1xuICAgIH1cbiAgICBsZXQgcXVvdGllbnQgPSB2YWx1ZSAvIDU7XG4gICAgd2hpbGUgKG5ld3ZhbHVlIDwgdmFsdWUpIHtcbiAgICAgIG5ld3ZhbHVlID0gbmV3dmFsdWUgKyBxdW90aWVudDtcbiAgICAgIHRoaXMueGF4aXNBcnJheS5wdXNoKG5ld3ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwbG90WWF4aXMoKSB7XG5cbiAgICBsZXQgdGVtcHZhbHVlID0gMDtcbiAgICBsZXQgbGVuZ3Rob2ZBcnJheSA9IDA7XG4gICAgbGV0IGxlbmd0aGNvdW50ID0gMDtcbiAgICBsZXQgdGVtcGxlbmd0aCA9IDA7XG4gICAgbGV0IG5ld3ZhbHVlOiBudW1iZXIgPSAwO1xuICAgIHRoaXMueWF4aXNBcnJheSA9IFtdO1xuICAgIHRoaXMuaGlzdG9ncmFtYXJyYXkgPSBbXTtcbiAgICB0aGlzLmxlbmd0aGFycmF5ID0gW107XG4gICAgdGhpcy5oaXN0b2dyYW1kYXRhID0gW107XG4gICAgdGhpcy5hcnJheW9mTGVuZ3RoID0gW107XG4gICAgdGhpcy5jaGFydERhdGEgPSBbXTtcbiAgICB0aGlzLnhheGlzQXJyYXkuZm9yRWFjaChlbGVtZW50MSA9PiB7XG4gICAgICB0aGlzLnlheGlzQXJyYXkgPSBbXTtcbiAgICAgIHRoaXMuYXJyYXkuZm9yRWFjaChlbGVtZW50MiA9PiB7XG5cbiAgICAgICAgaWYgKHRlbXB2YWx1ZSA8IGVsZW1lbnQyICYmIGVsZW1lbnQyIDw9IGVsZW1lbnQxKSB7XG4gICAgICAgICAgdGhpcy55YXhpc0FycmF5LnB1c2goZWxlbWVudDIpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aG9mQXJyYXkgPSB0aGlzLnlheGlzQXJyYXkubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgICBpZiAodGVtcGxlbmd0aCA+IGxlbmd0aG9mQXJyYXkpIHtcbiAgICAgICAgbGVuZ3RoY291bnQgPSB0ZW1wbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxlbmd0aGNvdW50ID0gbGVuZ3Rob2ZBcnJheTtcbiAgICAgIH1cbiAgICAgIHRlbXBsZW5ndGggPSBsZW5ndGhjb3VudDtcbiAgICAgIHRlbXB2YWx1ZSA9IGVsZW1lbnQxO1xuICAgICAgLy90aGlzLmhpc3RvZ3JhbWFycmF5LnB1c2godGhpcy55YXhpc0FycmF5KTtcbiAgICAgIHRoaXMubGVuZ3RoYXJyYXkucHVzaChsZW5ndGhvZkFycmF5KTtcbiAgICB9KTtcblxuICAgIGxldCB2YWx1ZSA9IE1hdGguY2VpbCh0ZW1wbGVuZ3RoKTtcbiAgICBsZXQgcXVvdGllbnQgPSB2YWx1ZSAvIDU7XG4gICAgd2hpbGUgKG5ld3ZhbHVlIDw9IHZhbHVlKSB7XG4gICAgICBuZXd2YWx1ZSA9IG5ld3ZhbHVlICsgcXVvdGllbnQ7XG4gICAgICB0aGlzLnlheGlzRGF0YS5wdXNoKG5ld3ZhbHVlKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5oaXN0b2dyYW1hcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5oaXN0b2dyYW1kYXRhLnB1c2godGhpcy5oaXN0b2dyYW1hcnJheVtpXSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmxlbmd0aGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFycmF5b2ZMZW5ndGgucHVzaCh0aGlzLmxlbmd0aGFycmF5W2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFycmF5b2ZMZW5ndGgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBkYXRhID0ge307XG4gICAgICBkYXRhW1widmFsdWVcIl0gPSB0aGlzLmFycmF5b2ZMZW5ndGhbaV07XG4gICAgICB0aGlzLmNoYXJ0RGF0YS5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICB0aGlzLmFycmF5ID0gW107XG5cbiAgfVxuXG4gIHJlc2l6ZSgpIHtcblxuICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICB0aGlzLnJlc2l6ZWZsYWcgPSB0cnVlO1xuICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmRpdmlkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICB0aGlzLnRyYW5zZm9ybURhdGEoKVxuICAgIHRoaXMucGxvdFhheGlzKCk7XG4gICAgdGhpcy5wbG90WWF4aXMoKTtcbiAgICB0aGlzLnRvb2x0aXBEYXRhKCk7XG4gICAgdGhpcy5kYXRhZm9yQ2hhcnQoKTtcbiAgICB0aGlzLnRyYW5zZm9ybURhdGExKHRoaXMuZmluYWxkYXRhYXJyYXkpO1xuICAgIHRoaXMucGxvdENoYXJ0KCk7XG4gIH1cblxuICBkYXRhZm9yQ2hhcnQoKSB7XG4gICAgdGhpcy5maW5hbGRhdGFhcnJheSA9IFtdID0gW107XG4gICAgbGV0IGluaXRpYWxBcnJheTogYW55W10gPSBbXTtcbiAgICBsZXQgdGVtcGFycmF5OiBhbnlbXSA9IFtdO1xuICAgIGluaXRpYWxBcnJheS5wdXNoKCdsZXZlbCcpO1xuICAgIGxldCBtYXhFbGVtZW50ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcy5hcnJheW9mTGVuZ3RoKTtcbiAgICBsZXQgbWF4bGVuZ3RoID0gbWF4RWxlbWVudDtcbiAgICBsZXQgbiA9IDE7XG4gICAgd2hpbGUgKG4gPD0gbWF4RWxlbWVudCkge1xuICAgICAgaW5pdGlhbEFycmF5LnB1c2goJycgKyBuKVxuICAgICAgbisrO1xuICAgIH1cbiAgICBpbml0aWFsQXJyYXkucHVzaCgndG9vbHRpcGRhdGEnKTtcbiAgICBsZXQgbGVuZ3RoID0gdGhpcy5hcnJheW9mTGVuZ3RoLmxlbmd0aDtcbiAgICBsZXQgbnVtID0gMTtcbiAgICBsZXQgbnVtYmVyID0gMTtcbiAgICBsZXQgaiA9IDA7XG4gICAgdGhpcy5maW5hbGRhdGFhcnJheS5wdXNoKGluaXRpYWxBcnJheSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXJyYXlvZkxlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5hcnJheW9mTGVuZ3RoW2ldO1xuICAgICAgbGV0IHRlbXB2YWx1ZSA9IHZhbHVlO1xuICAgICAgdGVtcGFycmF5ID0gW107XG4gICAgICB0ZW1wYXJyYXkucHVzaCgnJyArIGkpO1xuICAgICAgbWF4RWxlbWVudCA9IG1heGxlbmd0aDtcbiAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgd2hpbGUgKHZhbHVlICE9IDApIHtcbiAgICAgICAgICB0ZW1wYXJyYXkucHVzaChudW1iZXIpO1xuICAgICAgICAgIHZhbHVlLS1cbiAgICAgICAgfVxuICAgICAgICBtYXhFbGVtZW50ID0gbWF4RWxlbWVudCAtIHRlbXB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAobWF4RWxlbWVudCAhPSAwKSB7XG4gICAgICAgICAgdGVtcGFycmF5LnB1c2goMCk7XG4gICAgICAgICAgbWF4RWxlbWVudC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgd2hpbGUgKG1heEVsZW1lbnQgIT0gMCkge1xuICAgICAgICAgIHRlbXBhcnJheS5wdXNoKDApO1xuICAgICAgICAgIG1heEVsZW1lbnQtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGVtcGFycmF5LnB1c2godGhpcy50b29sdGlwQXJyYXlbal0pXG4gICAgICB0aGlzLmZpbmFsZGF0YWFycmF5LnB1c2godGVtcGFycmF5KTtcbiAgICAgIGorKztcbiAgICB9XG4gIH1cblxuXG4gIHRvb2x0aXBEYXRhKCkge1xuXG4gICAgbGV0IGFycmF5b2ZUb29sdGlwOiBhbnlbXSA9IFtdO1xuICAgIGxldCBvYmogPSB7IFwibGFiZWxcIjogXCJcIiwgXCJ2YWx1ZVwiOiBcIlwiIH07XG4gICAgdGhpcy5kYXRhaGlzdG8uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIG9iaiA9IHsgXCJsYWJlbFwiOiBcIlwiLCBcInZhbHVlXCI6IFwiXCIgfTtcbiAgICAgIG9ialtcImxhYmVsXCJdID0gZWxlbWVudFswXTtcbiAgICAgIG9ialtcInZhbHVlXCJdID0gZWxlbWVudFsxXTtcbiAgICAgIGFycmF5b2ZUb29sdGlwLnB1c2gob2JqKTtcbiAgICB9KTtcblxuICAgIGxldCB2YWx1ZTEgPSB0aGlzLnhheGlzQXJyYXlbMF07XG5cbiAgICBsZXQgdG9vbHRpcGRhdGE6IGFueVtdID0gW107XG4gICAgZm9yIChsZXQgaiA9IDE7IGogPCB0aGlzLnhheGlzQXJyYXkubGVuZ3RoOyBqKyspIHtcbiAgICAgIHRvb2x0aXBkYXRhID0gW107XG4gICAgICBsZXQgdmFsdWUyID0gdGhpcy54YXhpc0FycmF5W2pdO1xuXG4gICAgICBhcnJheW9mVG9vbHRpcC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXG4gICAgICAgIGlmICh2YWx1ZTEgPD0gZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnZhbHVlIDw9IHZhbHVlMikge1xuXG4gICAgICAgICAgbGV0IHRvb2x0aXBvYmogPSB7IFwibGFiZWxcIjogXCJcIiwgXCJ2YWx1ZVwiOiBcIlwiIH1cbiAgICAgICAgICB0b29sdGlwb2JqW1wibGFiZWxcIl0gPSBlbGVtZW50W1wibGFiZWxcIl07XG4gICAgICAgICAgdG9vbHRpcG9ialtcInZhbHVlXCJdID0gZWxlbWVudFtcInZhbHVlXCJdO1xuICAgICAgICAgIHRvb2x0aXBkYXRhLnB1c2godG9vbHRpcG9iaik7XG5cblxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgICAgdGhpcy50b29sdGlwQXJyYXkucHVzaCh0b29sdGlwZGF0YSk7XG4gICAgICB2YWx1ZTEgPSB2YWx1ZTI7XG4gICAgfVxuICB9XG5cblxuICBzZXRLZXkob2JqOiBhbnkpIHtcblxuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YWhpc3RvWzBdO1xuICAgIGxldCBsYWJlbDEgPSBkYXRhWzFdO1xuICAgIGxldCBsYWJlbDIgPSBkYXRhWzBdO1xuXG4gICAgb2JqZWN0W2xhYmVsMiArIFwiOlwiXSA9IG9iai5sYWJlbDtcbiAgICBvYmplY3RbbGFiZWwxICsgXCI6XCJdID0gb2JqLnZhbHVlO1xuXG4gICAgcmV0dXJuICh0aGlzLnRvb2xUaXBGb3JCYXIob2JqZWN0KSlcbiAgfVxuXG4gIHBsb3RMaW5lKGcsIHgsIHksIGhlaWdodCwgd2lkdGgpIHtcbiAgICBpZiAodGhpcy5oU2NhbGUpIHtcbiAgICAgIGcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImxpZ2h0Z3JleVwiKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoJycpKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2UvYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbWFuRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlJztcbmltcG9ydHtEZXZpY2VRdWVyeVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2RldmljZS5xdWVyeS5zZXJ2aWNlJztcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtc2NhdHRlcicsXG4gIHRlbXBsYXRlOiBgPGRpdiAqbmdJZj1cImRyaWxsYWJsZUZsYWdcIiAjZGl2aWQgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIj5cbiAgICA8dGFibGUgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAjY2hhcnRJZCA+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBjb2xzcGFuPVwiMlwiIHN0eWxlPVwiZm9udC1zaXplOiAxOHB4OyBmb250LXdlaWdodDogYm9sZDsgXCI+IHt7dGl0bGV9fSA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgPHN2ZyBbYXR0ci5oZWlnaHRdPVwic3ZnaGVpZ2h0XCIgW2F0dHIud2lkdGhdPVwic3Znd2lkdGhcIiBbYXR0ci5pZF09XCJjb21wb25lbnRJZFwiPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7IHBhZGRpbmc6IDVweDtcIj5cbiAgICAgICAgICAgICAgICA8YW1leGlvLWQzLWxlZ2VuZCAqbmdJZj1cImxlZ2VuZFwiIFtob3Jpem9udGFsXT1cInRydWVcIiAob25DbGljayk9XCJvblNjYXR0ZXJMZWdlbmRDbGljaygkZXZlbnQpXCIgW2RhdGFdPVwibGVnZW5kc1wiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+PC9hbWV4aW8tZDMtbGVnZW5kPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICA8L3RhYmxlPlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbYGBdXG59KVxuZXhwb3J0IGNsYXNzIFNjYXR0ZXJjaGFydENvbXBvbmVudCBleHRlbmRzIEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCd3aWR0aCcpIHN2Z3dpZHRoOiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnY29sb3InKSBjb2xvcjogYW55ID0gXCJibHVlXCI7XG4gIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW107XG4gIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgndmVydGljYWwtc2NhbGUnKSB2U2NhbGU6IGJvb2xlYW4gPSB0cnVlO1xuICBkcmlsbGFibGVGbGFnOiBib29sZWFuID0gdHJ1ZTtcbiAgcmVzaXplZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBzdmc6IGFueTtcbiAga2V5QXJyYXk6IGFueVtdID0gW107XG4gIHRyYW5zZm9ybWVkZGF0YTogYW55W10gPSBbXTtcbiAgZGF0YTogYW55O1xuICBkYXRhRm9ybWF0dGVkOiBhbnk7XG4gIGNvbG9yZGF0YTogYW55O1xuICBsZWdlbmRzOiBhbnlbXTtcbiAgbGVnZW5kYXJyYXk6IGFueVtdID0gW107XG4gIGxlZ2VuZERhdGE6IGFueTtcbiAgaHR0cHJlc3BvbnNlOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSwgcHJpdmF0ZSBkZXZpY2U6IERldmljZVF1ZXJ5U2VydmljZSkge1xuICAgIHN1cGVyKCdzY2F0dGVyJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGFGb3JtYXR0ZWQgPSBbXTtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICBsZXQgcmVzcDogYW55O1xuICAgICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgICAgdGhpcy5teXNlcnZpY2UuZmV0Y2hVcmxEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcDtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgdGhpcy5kYXRhRm9ybWF0dGVkID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YUZvcm1hdHRlZCk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yR2VuZXJhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRDcmVhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5wbG90U2NhdHRlckNoYXJ0KCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGF0YUZvcm1hdHRlZCA9IHRoaXMuZGF0YTtcbiAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YSh0aGlzLmRhdGEpO1xuXG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgdGhpcy5jb2xvckdlbmVyYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmxlZ2VuZENyZWF0aW9uKCk7XG4gICAgICAgICAgdGhpcy5wbG90U2NhdHRlckNoYXJ0KCk7XG5cbiAgICAgICAgfSwgMCk7XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYgKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpIHtcbiAgICAgIGxldCBkcmlsbGFibGVkYXRhID0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLCBrZXkpO1xuICAgICAgcmVxdWVzdEpzb24gPSBkcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcbiAgICB9XG5cblxuICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICB0aGlzLm15c2VydmljZS5wb3N0ZmV0Y2hEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgLy90aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuaHR0cHJlc3BvbnNlKTtcbiAgICAgIHRoaXMuZGF0YUZvcm1hdHRlZCA9IHRoaXMuZGF0YTtcblxuXG4gICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgIHRoaXMuY29sb3JHZW5lcmF0aW9uKCk7XG4gICAgICB0aGlzLmxlZ2VuZENyZWF0aW9uKCk7XG4gICAgICB0aGlzLnBsb3RTY2F0dGVyQ2hhcnQoKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8vIE1ldGhvZCB0byB0cmFuc2Zvcm0gZGF0YSBpbiBrZXkgdmFsdWUgcGFpciBcbiAgdHJhbnNmb3JtRGF0YShkYXRhOiBhbnkpIHtcbiAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBEdW1teU9iamVjdCA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGluZGl2aWR1YWx2YWx1ZSwga2V5aW5kZXgpID0+IHtcbiAgICAgICAgICBEdW1teU9iamVjdFt0aGlzLmtleUFycmF5W2tleWluZGV4XV0gPSBpbmRpdmlkdWFsdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5wdXNoKER1bW15T2JqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnRyYW5zZm9ybWVkZGF0YTtcbiAgfVxuXG4gIC8vIE1ldGhvZCBnZXQgcmVzcG9uc2UgZGF0YSB1c2luZyBkYXRhIHJlYWRlclxuICBnZXRSZXNwb25zZURhdGEoaHR0cFJlc3BvbnNlOiBhbnkpIHtcbiAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIGlmICh0aGlzLmRhdGFyZWFkZXIgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZHIgPSB0aGlzLmRhdGFyZWFkZXIuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAoY29uc3QgaXIgb2YgZHIpIHtcbiAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICB9XG5cbiAgLy8gTWV0aG9kIHRvIHBsb3QgZDMgY2hhcnRcbiAgcGxvdFNjYXR0ZXJDaGFydCgpIHtcbiAgICBpZiAodGhpcy5yZXNpemVmbGFnID09IGZhbHNlKSB7XG4gICAgICBpZiAodGhpcy5jaGFydElkKSB7XG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuc3Znd2lkdGg7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDMwLCBsZWZ0OiA2MCB9O1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5zdmd3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuc3ZnaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICBsZXQgeCwgeTtcblxuICAgIHggPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbMCwgd2lkdGhdKTtcblxuICAgIHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XG5cbiAgICBsZXQgeEF4aXMgPSBkMy5heGlzQm90dG9tKHgpO1xuXG4gICAgbGV0IHlBeGlzID0gZDMuYXhpc0xlZnQoeSk7XG5cbiAgICB0aGlzLnN2ZyA9IGQzLnNlbGVjdChcIiNcIiArIHRoaXMuY29tcG9uZW50SWQpXG4gICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG4gICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gICAgeC5kb21haW4oWzAsIGQzLm1heCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkW09iamVjdC5rZXlzKGQpWzBdXSB9KV0pO1xuICAgIHkuZG9tYWluKFswLCBkMy5tYXgodGhpcy5kYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVsxXV0gfSldKTtcblxuICAgIGlmICh0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKSA9PSB0cnVlKSB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgLmNhbGwoeEF4aXMpLlxuICAgICAgICBzZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDYwKVwiKVxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuICAgIH1cblxuXG5cbiAgICAvLyB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgLy8gICAuY2FsbCh4QXhpcylcbiAgICAvLyAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsIFwibGFiZWxcIilcbiAgICAvLyAgIC5hdHRyKFwieFwiLCB3aWR0aClcbiAgICAvLyAgIC5hdHRyKFwieVwiLCAtNilcbiAgICAvLyAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpO1xuXG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKVxuICAgICAgLmNhbGwoeUF4aXMpXG4gICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXG4gICAgICAuYXR0cihcInlcIiwgNilcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuNzFlbVwiKVxuICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcblxuICAgIGlmICh0aGlzLmRhdGFGb3JtYXR0ZWRbMF0ubGVuZ3RoID09IDIpIHtcbiAgICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHgsIHksIGhlaWdodCwgd2lkdGgpO1xuXG4gICAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuZG90XCIpXG4gICAgICAgIC5kYXRhKHRoaXMuZGF0YSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb3RcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIHRoaXMuY29sb3IpXG4gICAgICAgIC5hdHRyKFwiclwiLCA0LjUpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgcmV0dXJuIHgoZFtPYmplY3Qua2V5cyhkKVswXV0pO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB5KGRbT2JqZWN0LmtleXMoZClbMV1dKTsgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXAuaHRtbChcbiAgICAgICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgdGhpcy5zY2F0dGVyQ2hhcnRDbGljayhkKTtcbiAgICAgICAgICB0aGlzLmZvcmRyaWxsYWJsZUNsaWNrKHRoaXMsIGQsIGV2ZW50KTtcbiAgICAgICAgICByZXR1cm4gdG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgIH0pO1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICBpZiAodGhpcy5sYWJlbGZsYWcpIHtcbiAgICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwibGFiZWxzXCIpXG4gICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLCBcImJvbGRcIilcbiAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgLmF0dHIoXCJ2ZXJ0aWNhbC1hbGlnblwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgIC5hdHRyKFwibWFyZ2luLXRvcFwiLCBtYXJnaW4udG9wKVxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFiZWxjb2xvci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geChkW09iamVjdC5rZXlzKGQpWzBdXSkgKyAxMTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHkoZFtPYmplY3Qua2V5cyhkKVsxXV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGV4dCgoZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMV1dO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHgsIHksIGhlaWdodCwgd2lkdGgpO1xuXG4gICAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuZG90XCIpXG4gICAgICAgIC5kYXRhKHRoaXMudHJhbnNmb3JtZWRkYXRhKVxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvdFwiKVxuICAgICAgICAuYXR0cihcInJcIiwgNC41KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiB4KGRbT2JqZWN0LmtleXMoZClbMF1dKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geShkW09iamVjdC5rZXlzKGQpWzFdXSk7IH0pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCwgKSB7IHJldHVybiBkW09iamVjdC5rZXlzKGQpWzRdXSB9KVxuXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCAoZCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0b29sdGlwLmh0bWwoXG4gICAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAxMCkgKyBcInB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2NhdHRlckNoYXJ0Q2xpY2soZCk7XG4gICAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIGlmICh0aGlzLmxhYmVsZmxhZykge1xuICAgICAgICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcImxhYmVsc1wiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC13ZWlnaHRcIiwgXCJib2xkXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcInZlcnRpY2FsLWFsaWduXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcIm1hcmdpbi10b3BcIiwgbWFyZ2luLnRvcClcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICBpZiAodGhpcy5sYWJlbGNvbG9yLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbGNvbG9yO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHgoZFtPYmplY3Qua2V5cyhkKVswXV0pICsgMTE7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB5KGRbT2JqZWN0LmtleXMoZClbMV1dKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzFdXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgfVxuXG4gIC8vIE1ldGhvZCB0byBmb3JtIHRvb2x0aXAgZGF0YVxuICBmb3JtVG9vbHRpcERhdGEodG9vbHRpcERhdGE6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModG9vbHRpcERhdGEpKSB7XG4gICAgICBpZiAoa2V5ICE9ICdjb2xvcicpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9vbFRpcEZvckJhcihvYmplY3QpO1xuICB9XG5cbiAgLy8gTWV0aG9kIG9uIGNoYXJ0IGNsaWNrXG4gIHNjYXR0ZXJDaGFydENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50KSkge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5jaGFydENsaWNrKG9iamVjdCk7XG4gIH1cblxuICAvLyBtZXRob2QgdG8gY3JlYXRlIExlZ2VuZFxuICBsZWdlbmRDcmVhdGlvbigpIHtcbiAgICBpZiAodGhpcy5kYXRhRm9ybWF0dGVkWzBdLmxlbmd0aCA9PSAyKSB7XG4gICAgICB0aGlzLmxlZ2VuZHMgPSBbXTtcbiAgICAgIGxldCBlbGVtZW50ID0gdGhpcy5kYXRhRm9ybWF0dGVkWzBdO1xuXG4gICAgICBsZXQgb2JqZWN0ID0geyAnbGFiZWwnOiBlbGVtZW50WzBdICsgXCIgXCIgKyBcInZzXCIgKyBcIiBcIiArIGVsZW1lbnRbMV0sICdjb2xvcic6IHRoaXMuY29sb3IgfTtcbiAgICAgIHRoaXMubGVnZW5kcy5wdXNoKG9iamVjdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5sZWdlbmRzID0gW107XG4gICAgICB0aGlzLmxlZ2VuZGFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGxldCBsZWdlbmRvYmplY3QgPSB7fTtcbiAgICAgICAgbGVnZW5kb2JqZWN0WydsYWJlbCddID0gZWxlbWVudC5sYWJlbDtcbiAgICAgICAgbGVnZW5kb2JqZWN0Wydjb2xvciddID0gZWxlbWVudC5jb2xvcjtcbiAgICAgICAgdGhpcy5sZWdlbmRzLnB1c2gobGVnZW5kb2JqZWN0KTtcbiAgICAgIH0pO1xuXG4gICAgfVxuXG4gIH1cblxuICAvLyBNZXRob2Qgb24gTGVnZW5kIENsaWNrXG4gIG9uU2NhdHRlckxlZ2VuZENsaWNrKGxlZ2VuZGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5kYXRhRm9ybWF0dGVkWzBdLmxlbmd0aCA9PSAyKSB7XG4gICAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdCh0aGlzLmRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlZ2VuZGFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGlmIChsZWdlbmRldmVudC5sYWJlbCA9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgdGhpcy5sZWdlbmRDbGljayhlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTWV0aG9kIGZvciByZXNwb25zaXZlbmVzc1xuICByZXNpemUoKSB7XG4gICAgdGhpcy5zdmd3aWR0aCA9IDA7XG4gICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIHRoaXMucmVzaXplZmxhZyA9IHRydWU7XG4gICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuZGl2aWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB0aGlzLnBsb3RTY2F0dGVyQ2hhcnQoKTtcblxuXG4gIH1cblxuICBwbG90TGluZShnLCB4LCB5LCBoZWlnaHQsIHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudlNjYWxlKSB7XG4gICAgICBnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgaGVpZ2h0ICsgJyknKVxuICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpLlxuICAgICAgICAgIHRpY2tTaXplKC10aGlzLndpZHRoKS50aWNrRm9ybWF0KCcnKVxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5oU2NhbGUpIHtcbiAgICAgIGcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImxpZ2h0Z3JleVwiKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoJycpKTtcbiAgICB9XG4gIH1cblxuICBjb2xvckdlbmVyYXRpb24oKSB7XG4gICAgdGhpcy5sZWdlbmRhcnJheSA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbmFtZXMgPSB0aGlzLmRhdGFGb3JtYXR0ZWRcbiAgICAgIC5tYXAoZSA9PiBlWzJdKVxuICAgICAgLmZpbHRlcigoZSwgaSwgYSkgPT4gYS5pbmRleE9mKGUpID09PSBpKTtcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IG5hbWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgdmFsdWUgPSBbXTtcbiAgICAgIGxldCBvYmogPSB7IFwibGFiZWxcIjogXCJcIiwgXCJjb2xvclwiOiBcIlwiLCBcInZhbHVlXCI6IFtdIH07XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KVsyXV0gPT0gbmFtZXNbal0pIHtcbiAgICAgICAgICBlbGVtZW50Wydjb2xvciddID0gdGhpcy5wcmVkZWZpbmVkY29sb3JzW2ldO1xuICAgICAgICAgIHZhbHVlLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb2JqW1widmFsdWVcIl0gPSB2YWx1ZTtcbiAgICAgIG9ialtcImxhYmVsXCJdID0gbmFtZXNbal07XG4gICAgICBvYmpbXCJjb2xvclwiXSA9IHRoaXMucHJlZGVmaW5lZGNvbG9yc1tpXTtcbiAgICAgIHRoaXMubGVnZW5kYXJyYXkucHVzaChvYmopO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1MZWdlbmREYXRhKCkge1xuICAgIHRoaXMubGVnZW5kRGF0YSA9IFtdO1xuICAgIHRoaXMubGVnZW5kYXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBsZWdlbmRvYmplY3QgPSB7fTtcbiAgICAgIGxlZ2VuZG9iamVjdFsnbGFiZWwnXSA9IGVsZW1lbnQubGFiZWw7XG4gICAgICBsZWdlbmRvYmplY3RbJ2NvbG9yJ10gPSBlbGVtZW50LmNvbG9yO1xuICAgICAgdGhpcy5sZWdlbmREYXRhLnB1c2gobGVnZW5kb2JqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG5cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxvdENhcnQgfSBmcm9tIFwiLi4vYmFzZS9jaGFydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBLZXkgfSBmcm9tICdzZWxlbml1bS13ZWJkcml2ZXInO1xuaW1wb3J0e0RldmljZVF1ZXJ5U2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvZGV2aWNlLnF1ZXJ5LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtbXVsdGlhcmVhJyxcbiAgdGVtcGxhdGU6IGBcbjxkaXYgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoKVwiPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQ+XG4gIDx0cj5cbiAgICAgIDx0ZCBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IFwiPiB7e3RpdGxlfX0gPC90ZD5cbiAgPC90cj5cbiAgPHRyPlxuICAgICAgPHRkPlxuICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cInN2Z2hlaWdodFwiIFthdHRyLndpZHRoXT1cInN2Z3dpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgIDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZCBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyBwYWRkaW5nOiA1cHg7XCI+XG4gICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwib25BcmVhTGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZEFycmF5XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgICA8L2FtZXhpby1kMy1sZWdlbmQ+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PmAsXG4gIHN0eWxlczogW2BgXVxufSlcbmV4cG9ydCBjbGFzcyBNdWx0aWFyZWFDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0LCBPbkluaXQge1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDM1MDtcbiAgQElucHV0KCdkYXRhLXJlYWRlcicpIGRhdGFyZWFkZXI6IGFueTtcbiAgQElucHV0KCdsZXZlbCcpIGxldmVsOiBudW1iZXIgPSAwO1xuICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0OiBudW1iZXI7XG4gIEBJbnB1dCgnZHJpbGxhYmxlLWRhdGEnKSBkcmlsbGFibGVkYXRha2V5OiBhbnlbXSA9IFtdXG4gIGh0dHByZXNwb25zZTphbnk7XG4gIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICByZXNpemVmbGFnOmJvb2xlYW4gPSBmYWxzZTtcbiAgdG9nZ2xlbGFiZWw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9uVG9vbHRpcENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcblxuICBzdmc6IGFueTtcbiAgeDogYW55O1xuICB5OiBhbnk7XG4gIHo6IGFueTtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIG1hcmdpbjogYW55ID0ge307XG4gIGk6IG51bWJlcjtcbiAgcGFyc2VUaW1lOiBhbnk7XG4gIGtleUFycmF5OiBhbnlbXSA9IFtdO1xuICBtYXhpbXVtVmFsdWU6IG51bWJlcjtcbiAgcHJlZGVmaW5lZENvbG9yczogYW55W107XG4gIGFyZWFBcnJheTogYW55O1xuICB0cmFuc2Zvcm1lZGRhdGE6IGFueVtdID0gW107XG4gIGRhdGExOiBhbnlbXSA9IFtdO1xuICBsZWdlbmRBcnJheTogYW55W10gPSBbXTtcbiAgdG9vbHRpcDogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UscHJpdmF0ZSBkZXZpY2U6RGV2aWNlUXVlcnlTZXJ2aWNlKSB7XG5cbiAgICBzdXBlcihcImFyZWFjaGFydFwiKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudG9nZ2xlbGFiZWwgPSBmYWxzZTtcbiAgICAgbGV0IHJlcztcbiAgICAgaWYodGhpcy5sZXZlbDw9MSl7XG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIHRoaXMubXlzZXJ2aWNlLmZldGNoVXJsRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCkuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLmh0dHByZXNwb25zZT1yZXNwb25zZTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcG9uc2UpO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICAgIHRoaXMuaW5pdEFyZWFDaGFydCgpO1xuICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YTEpIHtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmluaXRBcmVhQ2hhcnQoKTtcbiAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuXG4gIH1cbiAgfVxuXG5cbiAgZmV0Y2hEYXRhKGRhdGE6IGFueSkge1xuICAgXG4gICAgbGV0IHJlcXVlc3RKc29uO1xuICAgIGxldCBrZXk9dGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYodGhpcy5kcmlsbGFibGVkYXRha2V5Lmxlbmd0aClcbiAgICB7XG4gICAgICAgICBsZXQgZHJpbGxhYmxlZGF0YT0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLGtleSk7XG4gICAgICAgICByZXF1ZXN0SnNvbj1kcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICAgICAgcmVxdWVzdEpzb249ZGF0YTsgIFxuICAgICAgICB9XG4gIFxuICAgIFxuIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gdGhpcy5teXNlcnZpY2UucG9zdGZldGNoRGF0YSh0aGlzLmh0dHB1cmwsdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgdGhpcy5odHRwcmVzcG9uc2U9cmVzcG9uc2U7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvL3RoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7XG4gICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH1cbn1cblxuZHJhd0NoYXJ0KCkge1xuICBzZXRUaW1lb3V0KCgpID0+IHsgXG4gICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5odHRwcmVzcG9uc2UpO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICAgIHRoaXMuaW5pdEFyZWFDaGFydCgpO1xuICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTsgICAgICBcblxuICB9LCAwKTtcbn0gXG5cbiAgaW5pdEFyZWFDaGFydCgpIHtcbiAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGlmKHRoaXMucmVzaXplZmxhZz09ZmFsc2UpXG4gICAge1xuXG4gICAgXG4gICAgaWYodGhpcy5jaGFydElkKXtcbiAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB9IGVsc2V7XG4gICAgXG4gICAgICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgICAgdGhpcy5tYXJnaW4gPSB7IHRvcDogMzAsIHJpZ2h0OiA0NCwgYm90dG9tOiA1MCwgbGVmdDogMzAgfSxcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLnN2Z3dpZHRoIC0gdGhpcy5tYXJnaW4ubGVmdCAtIHRoaXMubWFyZ2luLnJpZ2h0LFxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnN2Z2hlaWdodCAtIHRoaXMubWFyZ2luLnRvcCAtIHRoaXMubWFyZ2luLmJvdHRvbTtcbiAgICAvL2ZpbmQgbWF4IGFuZCBpbml0aWFsaXplIG1heFxuICAgIHRoaXMubWF4aW11bVZhbHVlID0gdGhpcy5maW5kTWF4RGF0YSh0aGlzLmRhdGEpO1xuXG4gICAgdGhpcy54ID0gZDMuc2NhbGVQb2ludCgpXG4gICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKVxuICAgICAgLy8gLnBhZGRpbmcoMC4xKTtcblxuICAgIHRoaXMueSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLmhlaWdodCwgMF0pO1xuICAgIHRoaXMuYXJlYUFycmF5PVtdO1xuICAgIC8vc2V0IHggeSBkb21haW5cbiAgICB0aGlzLmFyZWFBcnJheSA9IHRoaXMuZGF0YS5tYXAoIChkKT0+IHsgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMF1dOyB9KTtcbiAgICB0aGlzLnguZG9tYWluKHRoaXMuYXJlYUFycmF5KTtcbiAgICB0aGlzLnkuZG9tYWluKFswLCB0aGlzLm1heGltdW1WYWx1ZV0pO1xuICAgIC8vaW5pdGlhbGl6ZSBzdmdcbiAgICB0aGlzLnN2ZyA9XG4gICAgICBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmNvbXBvbmVudElkKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMud2lkdGggKyB0aGlzLm1hcmdpbi5sZWZ0ICsgdGhpcy5tYXJnaW4ucmlnaHQpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMuaGVpZ2h0ICsgdGhpcy5tYXJnaW4udG9wICsgdGhpcy5tYXJnaW4uYm90dG9tKVxuICAgIHRoaXMucHJlZGVmaW5lZENvbG9ycyA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuICB9XG5cbiAgcGxvdEQzQ2hhcnQoKSB7XG4gICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICAgIGxldCBjb3VudGVyOiBudW1iZXI7XG4gICAgbGV0IGcgPSB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLm1hcmdpbi5sZWZ0ICsgXCIsXCIgKyB0aGlzLm1hcmdpbi50b3AgKyBcIilcIik7XG4gICAgLy8gYWRkIHRoZSBYIFxuICAgIGlmKHRoaXMuZGV2aWNlLklzRGVza3RvcCgpPT10cnVlKVxuICAgIHtcbiAgICAgIGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB0aGlzLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy54KSlcbiAgICB9XG4gIGVsc2VcbiAgIHtcbiAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgdGhpcy5oZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHRoaXMueCkpLlxuICAgICAgICAgICBzZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDYwKVwiKVxuICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuXG4gIH1cbiAgICAvLyBhZGQgdGhlIFkgQXhpc1xuICAgIGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQodGhpcy55KSk7XG5cbiAgICAgIHRoaXMucGxvdExpbmUoZywgdGhpcy54LCB0aGlzLnksIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoKTtcblxuICAgIGZvciAoY291bnRlciA9IDE7IGNvdW50ZXIgPCB0aGlzLmtleUFycmF5Lmxlbmd0aDsgY291bnRlcisrKSB7XG4gICAgICBsZXQgaW5uZXJHcm91cCA9IHRoaXMuc3ZnLmFwcGVuZChcImdcIikuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHRoaXMubWFyZ2luLmxlZnQgKyBcIixcIiArIHRoaXMubWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgICAgdGhpcy5wbG90QXJlYUNoYXJ0KGlubmVyR3JvdXAsIGNvdW50ZXIsIHRoaXMpO1xuICAgIH1cbiAgICAvL2NhbGwgbWV0aG9kIHRvIHBsb3QgcG9pbnRzXG4gICAgbGV0IGluY3JlbWVudDtcbiAgICBmb3IgKGluY3JlbWVudCA9IDE7IGluY3JlbWVudCA8IHRoaXMua2V5QXJyYXkubGVuZ3RoOyBpbmNyZW1lbnQrKykge1xuICAgICAgLy9wbG90IGxpbmVcbiAgICAgIGxldCBpbm5lckdyb3VwID0gdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpcy5tYXJnaW4ubGVmdCArIFwiLFwiICsgdGhpcy5tYXJnaW4udG9wICsgXCIpXCIpO1xuICAgICAgdGhpcy5QbG90TGluZURvdChpbm5lckdyb3VwLCBpbmNyZW1lbnQsIHRoaXMpO1xuICAgIH0vL2luY3JlbWVudCBmb3IgZW5kc1xuICB9XG5cbiAgUGxvdExpbmVEb3QoZzogYW55LCBpOiBudW1iZXIsIHRoaXNhOiB0aGlzKSB7XG4gICAgbGV0IGZsYWcgPSB0aGlzLnRvZ2dsZWxhYmVsO1xuICAgIGNvbnN0IGxpbmUgPSBkMy5saW5lKClcbiAgICAgIC54KCAoZCk9PiB7IHJldHVybiB0aGlzYS54KGRbT2JqZWN0LmtleXMoZClbMF1dKTsgfSlcbiAgICAgIC55KCAoZCk9PiB7IHJldHVybiB0aGlzYS55KGRbT2JqZWN0LmtleXMoZClbaV1dKTsgfSk7XG4gICAgZy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuZGF0YShbdGhpc2EuZGF0YV0pXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCB0aGlzYS5wcmVkZWZpbmVkY29sb3JzW2ldKVxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxuICAgICAgLmF0dHIoXCJkXCIsIGxpbmUpXG4gICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC4yKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgLy8gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLm1hcmdpbi5sZWZ0ICsgXCIsXCIgKyAwICsgXCIpXCIpO1xuICAgICAgICBcInRyYW5zbGF0ZShcIiArICAwICsgXCIsXCIgKyAwICsgXCIpXCIpO1xuICAgIC8vLS0tLS0tLS0tLVxuXG4gICAgZy5zZWxlY3RBbGwoJ2RvdCcpXG4gICAgICAuZGF0YSh0aGlzYS5kYXRhKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignb3BhY2l0eScsIDApXG4gICAgICAuYXR0cihcImZpbGxcIiwgdGhpc2EucHJlZGVmaW5lZGNvbG9yc1tpXSlcbiAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHsgcmV0dXJuIHRoaXNhLngoZFtPYmplY3Qua2V5cyhkKVswXV0pOyB9KVxuICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4geyByZXR1cm4gdGhpc2EueShkW09iamVjdC5rZXlzKGQpW2ldXSk7IH0pXG4gICAgICAuYXR0cigncicsIDQpXG4gICAgICAuYXR0cihcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkLCBpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuXG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXAuaHRtbChcbiAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkLCBpKVxuICAgICAgICApXG4gICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICB9KVxuXG4gICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLm9uQXJlYVRvb2x0aXBDbGljayhkLCBpKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAvL3RoaXMuY2hhcnRDbGljayhkKTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICAvLyBcInRyYW5zbGF0ZShcIiArIHRoaXMubWFyZ2luLmxlZnQgKyBcIixcIiArIDAgKyBcIilcIik7XG4gICAgICAgIFwidHJhbnNsYXRlKFwiICsgIDAgKyBcIixcIiArIDAgKyBcIilcIik7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGlmKHRoaXMubGFiZWxmbGFnKSB7XG4gICAgZy5zZWxlY3RBbGwoJ2xhYmVscycpXG4gICAgLmRhdGEodGhpc2EuZGF0YSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgIC5zdHlsZShcImZvbnQtd2VpZ2h0XCIsXCJib2xkXCIpXG4gICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCAoZCk9PntcbiAgICAgIGlmKHRoaXMubGFiZWxjb2xvci5sZW5ndGg+MCl7XG4gICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIC8vIGxldCBsZW5ndGggPSBTdHJpbmcoZFtPYmplY3Qua2V5cyhkKVtpXV0pLmxlbmd0aFxuICAgICAgICByZXR1cm4gdGhpc2EueChkW09iamVjdC5rZXlzKGQpWzBdXSkgKyAyMDtcbiAgICAgfSlcbiAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgbGV0IGtleTogYW55ID0gW09iamVjdC5rZXlzKGQpW2ldXTtcbiAgICAgICAgaWYoZmxhZylcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXNhLnkoZFtrZXldKSAtIDU7Ly8gZnIgdXBcbiAgICAgIH0gXG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXNhLnkoZFtrZXldKSArIDE1O1xuICAgICAgICAgICB9XG4gICAgICAvLyByZXR1cm4gdGhpc2EueShkW09iamVjdC5rZXlzKGQpW2ldXSk7XG4gICAgICAgIC8vICByZXR1cm4geShkW09iamVjdC5rZXlzKGQpWzFdXSkreVRleHRQYWRkaW5nO1xuICAgIH0pXG4gICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbaV1dO1xuICAgIH0pXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICBcInRyYW5zbGF0ZShcIiArICAwICsgXCIsXCIgKyAwICsgXCIpXCIpO1xuXG59XG4gICAgIGlmKHRoaXMudG9nZ2xlbGFiZWwpIHtcbiAgICAgIHRoaXMudG9nZ2xlbGFiZWwgPSBmYWxzZTtcbiAgICAgfVxuICAgICBlbHNlIHtcbiAgICAgIHRoaXMudG9nZ2xlbGFiZWwgPSB0cnVlO1xuICAgICB9XG4gICAgIFxuICB9XG5cbiAgcGxvdEFyZWFDaGFydChnOiBhbnksIGk6IG51bWJlciwgdGhpc2E6IHRoaXMpIHtcbiAgICAvLyBjYWxjdWxhdGUgYXJlYSBhbmQgdmFsdWVsaW5lXG4gICAgLy8gZGVmaW5lIHRoZSBsaW5lXG4gICAgY29uc3QgdmFsdWVsaW5lID0gZDMubGluZSgpXG4gICAgICAueCggKGQpPT4ge1xuICAgICAgICBsZXQga2V5OiBhbnkgPSBbT2JqZWN0LmtleXMoZClbMF1dO1xuICAgICAgICByZXR1cm4gdGhpc2EueChkW2tleV0pO1xuICAgICAgfSlcbiAgICAgIC55KChkKT0+IHtcbiAgICAgICAgbGV0IGtleTogYW55ID0gW09iamVjdC5rZXlzKGQpW2ldXTtcbiAgICAgICAgcmV0dXJuIHRoaXNhLnkoZFtrZXldKTtcbiAgICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSB2YWx1ZWxpbmUgcGF0aC5cbiAgICBnLmFwcGVuZChcInBhdGhcIilcbiAgICAgIC5kYXRhKFt0aGlzLmRhdGFdKVxuICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsXG4gICAgICAgIHRoaXMucHJlZGVmaW5lZENvbG9yc1tpXVxuICAgICAgKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMnB4XCIpXG4gICAgICAuYXR0cihcImRcIiwgdmFsdWVsaW5lKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgLy8gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLm1hcmdpbi5sZWZ0ICsgXCIsXCIgKyAwICsgXCIpXCIpO1xuICAgICAgICBcInRyYW5zbGF0ZShcIiArIDAgKyBcIixcIiArIDAgKyBcIilcIik7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGFyZWFcbiAgICBsZXQgYXJlYSA9IGQzLmFyZWEoKVxuICAgICAgLngoIChkKT0+IHtcbiAgICAgICAgbGV0IGtleTogYW55ID0gW09iamVjdC5rZXlzKGQpWzBdXTtcbiAgICAgICAgcmV0dXJuIHRoaXNhLngoZFtrZXldKTtcbiAgICAgIH0pXG4gICAgICAueTAodGhpcy5oZWlnaHQpXG4gICAgICAueTEoIChkKT0+IHtcbiAgICAgICAgbGV0IGtleTogYW55ID0gW09iamVjdC5rZXlzKGQpW2ldXTtcbiAgICAgICAgcmV0dXJuIHRoaXNhLnkoZFtrZXldKTtcbiAgICAgIH0pO1xuXG4gICAgZy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuZGF0YShbdGhpcy5kYXRhXSlcbiAgICAgIC5hdHRyKFwiZFwiLCBhcmVhKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgLy8gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLm1hcmdpbi5sZWZ0ICsgXCIsXCIgKyAwICsgXCIpXCIpXG4gICAgICAgIFwidHJhbnNsYXRlKFwiICsgMCArIFwiLFwiICsgMCArIFwiKVwiKVxuICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwibm9uZVwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIHRoaXMucHJlZGVmaW5lZENvbG9yc1tpXVxuICAgICAgKVxuICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjUpXG4gIH1cblxuICBvbkFyZWFUb29sdGlwQ2xpY2sodG9vbHRpcERhdGE6IGFueSwgY291bnQ6IG51bWJlcikge1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBvYmpbdGhpcy5rZXlBcnJheVswXV0gPSB0b29sdGlwRGF0YVtPYmplY3Qua2V5cyh0b29sdGlwRGF0YSlbMF1dO1xuICAgIG9ialt0aGlzLmtleUFycmF5W2NvdW50XV0gPSB0b29sdGlwRGF0YVtPYmplY3Qua2V5cyh0b29sdGlwRGF0YSlbY291bnRdXTtcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqKTtcbiAgfVxuXG4gIGZpbmRNYXhEYXRhKGRhdGE6IGFueSkge1xuICAgIGxldCB0ZW1wQXJyYXkgPSBbXTtcbiAgICBsZXQgbGFyZ2VWYWx1ZXMgPSBbXTtcbiAgICBsZXQgbWF4VmFsdWU7XG4gICAgLy9sb2dpYyB0byBzZWFyY2ggMyBsYXJnZXN0IHZhbHVlcyBcbiAgICBkYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBsZXQgdGVtcCA9IFtdO1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVsZW1lbnQpKSB7XG4gICAgICAgIC8vZXhlbXB0cyBmaXJzdCBjb2x1bW4gb2YgZGF0YSBhcyBpdCBpcyB0cmVhdGVkIGFzIHgtYXhpc1xuICAgICAgICBpZiAoa2V5ICE9IHRoaXMua2V5QXJyYXlbMF0pIHtcbiAgICAgICAgICB0ZW1wQXJyYXkucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0vL2ZvciBsb29wIGVuZFxuICAgICAgdmFsdWUgPSB0aGlzLmZpbmRMYXJnZXN0VmFsdWUodGVtcEFycmF5KTtcbiAgICAgIGxhcmdlVmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIG1heFZhbHVlID0gdGhpcy5maW5kTGFyZ2VzdFZhbHVlKGxhcmdlVmFsdWVzKTtcbiAgICByZXR1cm4gbWF4VmFsdWU7XG4gIH1cblxuICBmaW5kTGFyZ2VzdFZhbHVlKGFycmF5OiBhbnlbXSkge1xuICAgIGxldCBpO1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldID4gbWF4KSB7XG4gICAgICAgIG1heCA9IGFycmF5W2ldO1xuICAgICAgfS8vaWYgZW5kcyBcbiAgICB9Ly9tYXggZW5kc1xuICAgIHJldHVybiBtYXg7XG4gIH1cblxuICAvL2NvdmVydCBkYXRhXG4gIHRyYW5zZm9ybURhdGEoZGF0YTogYW55KSB7XG4gICAgdGhpcy50cmFuc2Zvcm1lZGRhdGE9W107XG4gICAgdGhpcy5rZXlBcnJheSA9IGRhdGFbMF07XG4gICAgZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBsZXQgRHVtbXlPYmplY3Q6IGFueSA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGluZGl2aWR1YWx2YWx1ZSwga2V5aW5kZXgpID0+IHtcbiAgICAgICAgICBEdW1teU9iamVjdFt0aGlzLmtleUFycmF5W2tleWluZGV4XV0gPSBpbmRpdmlkdWFsdmFsdWU7XG4gICAgICAgIH0pOy8vaW5uZXIgZm9yIGxvb3AgZW5kc1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5wdXNoKER1bW15T2JqZWN0KTtcbiAgICAgIH0vL2lmIGVuZHNcbiAgICB9KTsvL291dGVyIGZvciBsb29wIGVuZHNcblxuICAgIGxldCBwYXJzZWR0cmFuc2Zvcm1lZGRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMudHJhbnNmb3JtZWRkYXRhKSk7XG5cbiAgICB0aGlzLmRhdGEgPSBwYXJzZWR0cmFuc2Zvcm1lZGRhdGE7XG4gIH1cblxuICBmb3JtTGVnZW5kRGF0YSgpIHtcbiAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG4gICAgdGhpcy5rZXlBcnJheS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBsZXQgbGVnZW5kb2JqZWN0ID0ge307XG4gICAgICAgIGxlZ2VuZG9iamVjdFsnbGFiZWwnXSA9IGVsZW1lbnQ7XG4gICAgICAgIGxlZ2VuZG9iamVjdFsnY29sb3InXSA9IHRoaXMucHJlZGVmaW5lZENvbG9yc1tpbmRleCArIDFdO1xuICAgICAgICB0aGlzLmxlZ2VuZEFycmF5LnB1c2gobGVnZW5kb2JqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG9uQXJlYUxlZ2VuZENsaWNrKGxlZ2VuZERhdGE6IGFueSkge1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBvYmpbXCJsYWJlbFwiXSA9IGxlZ2VuZERhdGEubGFiZWw7XG4gICAgbGV0IGRhdGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGFbMF0pKSB7XG4gICAgICAgIGlmIChrZXkgPT0gbGVnZW5kRGF0YS5sYWJlbCkge1xuICAgICAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIGRhdGEucHVzaChvYmplY3QpO1xuICAgICAgICB9Ly9pbm5lciBpZiBlbmRzXG4gICAgICB9Ly9pbm5lciBmb3Jsb29wIGVuZHNcbiAgICB9KTsvL291dGVyIGZvcmVhY2ggZW5kc1xuICAgIG9ialtcImRhdGFcIl0gPSBkYXRhO1xuICAgIHRoaXMub25MZWdlbmRDbGljay5lbWl0KG9iaik7XG4gIH1cblxuICBnZXRSZXNwb25zZURhdGEoaHR0cFJlc3BvbnNlOiBhbnkpIHtcbiAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIGlmICh0aGlzLmRhdGFyZWFkZXIgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZHIgPSB0aGlzLmRhdGFyZWFkZXIuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAoY29uc3QgaXIgb2YgZHIpIHtcbiAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICB9XG5cbiAgcmVzaXplKCkge1xuICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgdGhpcy5yZXNpemVmbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHRoaXMuaW5pdEFyZWFDaGFydCgpO1xuICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgfVxuXG4gIGZvcm1Ub29sdGlwRGF0YSh0b29sdGlwRGF0YTogYW55LCBjb3VudDogbnVtYmVyKSB7XG4gICAgbGV0IG9iaiA9IHt9O1xuICAgIG9ialt0aGlzLmtleUFycmF5WzBdXSA9IHRvb2x0aXBEYXRhW09iamVjdC5rZXlzKHRvb2x0aXBEYXRhKVswXV07XG4gICAgb2JqW3RoaXMua2V5QXJyYXlbY291bnRdXSA9IHRvb2x0aXBEYXRhW09iamVjdC5rZXlzKHRvb2x0aXBEYXRhKVtjb3VudF1dO1xuICAgIHJldHVybiB0aGlzLnRvb2xUaXBGb3JCYXIob2JqKTtcbiAgfVxuXG4gIHBsb3RMaW5lKGcsIHgsIHksIGhlaWdodCwgd2lkdGgpIHtcbiAgICBpZiAodGhpcy5oU2NhbGUpIHtcbiAgICAgIGcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoXCJjb2xvclwiLCBcImxpZ2h0Z3JleVwiKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KVxuICAgICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoJycpKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxvdENhcnQgfSBmcm9tIFwiLi4vYmFzZS9jaGFydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnR7RGV2aWNlUXVlcnlTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtd2F0ZXJmYWxsJyxcbiAgdGVtcGxhdGU6IGBcbjxkaXYgICAqbmdJZj1cImRyaWxsYWJsZUZsYWdcIiAjZGl2aWQgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIiA+XG48dGFibGUgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAjY2hhcnRJZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoKVwiPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZD5cbiAgICAgICAgICA8c3ZnIFthdHRyLmhlaWdodF09XCJzdmdoZWlnaHRcIiBbYXR0ci53aWR0aF09XCJzdmd3aWR0aFwiIFthdHRyLmlkXT1cImNvbXBvbmVudElkXCI+XG4gICAgICAgICAgPC9zdmc+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgIDxhbWV4aW8tZDMtbGVnZW5kICpuZ0lmPVwibGVnZW5kXCIgW2hvcml6b250YWxdPVwidHJ1ZVwiIChvbkNsaWNrKT1cIm9uQ2FuZGxlc3RpY2tMZWdlbmRDbGljaygkZXZlbnQpXCIgW2RhdGFdPVwibGVnZW5kQXJyYXlcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlxuICAgICAgICAgIDwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgIDwvdGQ+XG4gIDwvdHI+XG48L3RhYmxlPlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbYGBdXG59KVxuXG5leHBvcnQgY2xhc3MgQ2FuZGxlc3RpY2tDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0LCBPbkluaXQge1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdkYXRhLXJlYWRlcicpIGRhdGFyZWFkZXI6IGFueTtcbiAgQElucHV0KCkgZGF0YTogYW55W107XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW107XG4gIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgZHJpbGxhYmxlRmxhZzogYm9vbGVhbiA9IHRydWU7XG4gIHJlc2l6ZWZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJlZGVmaW5lZENvbG9yID0gW107XG4gIGtleUFycmF5OiBhbnlbXSA9IFtdO1xuICB0cmFuc2Zvcm1lZGRhdGE6IGFueTtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIG1hcmdpbjogYW55ID0ge307XG4gIHg6IGFueTtcbiAgeTogYW55O1xuICBzdmc6IGFueTtcbiAgdG9vbHRpcDogYW55O1xuICBsZWdlbmRBcnJheTogYW55W10gPSBbXTtcbiAgaHR0cHJlc3BvbnNlOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSxwcml2YXRlIGRldmljZTpEZXZpY2VRdWVyeVNlcnZpY2UpIHtcbiAgICBzdXBlcihcImNhbmRsZXN0aWNrd2F0ZXJmYWxsY2hhcnRcIik7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnByZWRlZmluZWRDb2xvciA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGxldCByZXM7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAvL3RoaXMuZGF0YSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcG9uc2UpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3RYWUF4aXMoKTtcbiAgICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmZXRjaERhdGEoZGF0YTogYW55KSB7XG4gICAgbGV0IHJlcXVlc3RKc29uO1xuICAgIGxldCBrZXkgPSB0aGlzLmRyaWxsYWJsZWRhdGFrZXk7XG4gICAgbGV0IHJlc3A6IGFueTtcbiAgICBpZiAodGhpcy5kcmlsbGFibGVkYXRha2V5Lmxlbmd0aCkge1xuICAgICAgbGV0IGRyaWxsYWJsZWRhdGEgPSB0aGlzLmdldE11bHRpcGxlRHJpbGxibGVLZXlEYXRhKGRhdGEsIGtleSk7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRyaWxsYWJsZWRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVxdWVzdEpzb24gPSBkYXRhO1xuICAgIH1cbiAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgdGhpcy5teXNlcnZpY2UucG9zdGZldGNoRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCwgcmVxdWVzdEpzb24pLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLmh0dHByZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcblxuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuaHR0cHJlc3BvbnNlKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBpbml0aWFsaXplRGF0YSgpIHtcbiAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGlmICh0aGlzLnJlc2l6ZWZsYWcgPT0gZmFsc2UpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0SWQpIHtcbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuY2hhcnRJZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuc3Znd2lkdGg7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWFyZ2luID0geyB0b3A6IDIwLCByaWdodDogMzAsIGJvdHRvbTogNTAsIGxlZnQ6IDYwIH0sXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5zdmd3aWR0aCAtIHRoaXMubWFyZ2luLmxlZnQgLSB0aGlzLm1hcmdpbi5yaWdodCxcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zdmdoZWlnaHQgLSB0aGlzLm1hcmdpbi50b3AgLSB0aGlzLm1hcmdpbi5ib3R0b207XG4gIH1cblxuICBwbG90WFlBeGlzKCkge1xuICAgIC8vIHNldCB0aGUgcmFuZ2VzXG4gICAgdGhpcy54ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHRoaXMud2lkdGhdKTtcbiAgICB0aGlzLnkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbdGhpcy5oZWlnaHQsIDBdKTtcbiAgICAvLyBzY2FsZSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAgICBsZXQgY2FuZGxlc3RpY2tBcnJheSA9IHRoaXMuZGF0YS5tYXAoKGQpID0+IHtcbiAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzBdXTtcbiAgICAgfSk7XG4gICAgdGhpcy54LmRvbWFpbihjYW5kbGVzdGlja0FycmF5KTtcbiAgICBsZXQgbWF4ID0gZDMubWF4KHRoaXMuZGF0YSwgKGQpID0+IHsgcmV0dXJuIGQuZW5kOyB9KTtcbiAgICB0aGlzLnkuZG9tYWluKFswLCBtYXhdKTtcblxuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZClcbiAgICAgIC8vIGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMud2lkdGggKyB0aGlzLm1hcmdpbi5sZWZ0ICsgdGhpcy5tYXJnaW4ucmlnaHQpXG4gICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLmhlaWdodCArIHRoaXMubWFyZ2luLnRvcCArIHRoaXMubWFyZ2luLmJvdHRvbSlcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZShcIiArIHRoaXMubWFyZ2luLmxlZnQgKyBcIixcIiArIHRoaXMubWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIC8vIGFkZCB0aGUgWCBBeGlzXG5cbiAgICBpZih0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKT09dHJ1ZSlcbiAgICB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLngpKVxuICAgIH1cbiAgZWxzZVxuICAge1xuICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLngpKS5cbiAgICAgICAgICAgc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDkpXG4gICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxuICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2MClcIilcbiAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKTtcblxuICB9XG5cbiAgICAvLyB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgdGhpcy5oZWlnaHQgKyBcIilcIilcbiAgICAvLyAgIC5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy54KSk7XG5cbiAgICAvLyBhZGQgdGhlIFkgQXhpc1xuICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueSkpO1xuICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHRoaXMueCwgdGhpcy55LCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCk7XG4gIH1cblxuXG4gIHBsb3REM0NoYXJ0KCkge1xuICAgIGxldCBiYXIgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuYmFyXCIpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIChkKSA9PiB7IHJldHVybiBcImJhciBcIiArIGQuY2xhc3MgfSlcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueChcbiAgICAgICAgICBkW09iamVjdC5rZXlzKGQpWzBdXVxuICAgICAgICAgKSArIFwiLDApXCI7XG4gICAgICB9KTtcblxuICAgIGJhci5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAuYXR0cihcInlcIiwgKGQpID0+IHsgcmV0dXJuIHRoaXMueShNYXRoLm1heChkLnN0YXJ0LCBkLmVuZCkpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IHsgcmV0dXJuIE1hdGguYWJzKHRoaXMueShkLnN0YXJ0KSAtIHRoaXMueShkLmVuZCkpOyB9KVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnguYmFuZHdpZHRoKCkpXG4gICAgICAuYXR0cihcImZpbGxcIiwgKGQsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZGVmaW5lZENvbG9yW2ldO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG5cbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5odG1sKFxuICAgICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQpXG4gICAgICAgIClcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW91dFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLm9uQ2FuZGxlc3RpY2tDbGljayhkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSlcbiAgICBcbiAgICBpZih0aGlzLmxhYmVsZmxhZykge1xuICAgIGJhci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLCBcImJvbGRcIilcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjF2d1wiKVxuICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsY29sb3IubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMueC5iYW5kd2lkdGgoKSkgLyAyO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieVwiLCAoZCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMueShNYXRoLm1heChkLnN0YXJ0LCBkLmVuZCkpICsgMjA7XG4gICAgICAgfSlcbiAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVsxXV1cbiAgICAgICB9KTtcbiAgICAgIH1cbiAgfVxuXG4gIHBsb3RMaW5lKHN2ZywgeCwgeSwgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGlmICh0aGlzLmhTY2FsZSkge1xuICAgICAgc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgICAudGlja1NpemUoLXdpZHRoKS50aWNrRm9ybWF0KCcnKSk7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNmb3JtRGF0YShkYXRhOiBhbnkpIHtcbiAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YSA9IFtdO1xuICAgIHRoaXMua2V5QXJyYXkgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBEdW1teU9iamVjdDogYW55ID0ge307XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5kaXZpZHVhbHZhbHVlLCBrZXlpbmRleCkgPT4ge1xuICAgICAgICAgIER1bW15T2JqZWN0W3RoaXMua2V5QXJyYXlba2V5aW5kZXhdXSA9IGluZGl2aWR1YWx2YWx1ZTtcbiAgICAgICAgfSk7Ly9pbm5lciBmb3IgbG9vcCBlbmRzXG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRkYXRhLnB1c2goRHVtbXlPYmplY3QpO1xuICAgICAgfS8vaWYgZW5kc1xuICAgIH0pOy8vb3V0ZXIgZm9yIGxvb3AgZW5kcyBcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnRyYW5zZm9ybWVkZGF0YTtcbiAgICB0aGlzLmFkZERhdGFLZXlzKCk7XG4gICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICB9XG5cbiAgYWRkRGF0YUtleXMoKSB7XG4gICAgbGV0IGN1bXVsYXRpdmU6IGFueSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZGF0YVtpXVtcInN0YXJ0XCJdID0gY3VtdWxhdGl2ZTtcbiAgICAgIGN1bXVsYXRpdmUgKz0gdGhpcy5kYXRhW2ldW3RoaXMua2V5QXJyYXlbMV1dO1xuICAgICAgdGhpcy5kYXRhW2ldW1wiZW5kXCJdID0gY3VtdWxhdGl2ZTtcbiAgICAgIHRoaXMuZGF0YVtpXVtcImNsYXNzXCJdID0gKHRoaXMuZGF0YVtpXVt0aGlzLmtleUFycmF5WzFdXSA+PSAwKSA/ICdwb3NpdGl2ZScgOiAnbmVnYXRpdmUnXG4gICAgfVxuICB9XG5cbiAgZ2V0UmVzcG9uc2VEYXRhKGh0dHBSZXNwb25zZTogYW55KSB7XG4gICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgfVxuXG4gIGZvcm1Ub29sdGlwRGF0YSh0b29sdGlwRGF0YTogYW55KSB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzBdXSA9IHRvb2x0aXBEYXRhW09iamVjdC5rZXlzKHRvb2x0aXBEYXRhKVswXV07XG4gICAgb2JqZWN0W3RoaXMua2V5QXJyYXlbMV1dID0gdG9vbHRpcERhdGFbT2JqZWN0LmtleXModG9vbHRpcERhdGEpWzFdXTtcbiAgICByZXR1cm4gdGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCk7XG4gIH1cblxuICBvbkNhbmRsZXN0aWNrQ2xpY2soY2hhcnREYXRhOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W3RoaXMua2V5QXJyYXlbMF1dID0gY2hhcnREYXRhW09iamVjdC5rZXlzKGNoYXJ0RGF0YSlbMF1dO1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzFdXSA9IGNoYXJ0RGF0YVtPYmplY3Qua2V5cyhjaGFydERhdGEpWzFdXTtcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG4gIGZvcm1MZWdlbmREYXRhKCkge1xuICAgIHRoaXMubGVnZW5kQXJyYXkgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhlbGVtZW50KSkge1xuICAgICAgICBpZiAoa2V5ID09IHRoaXMua2V5QXJyYXlbMF0pIHtcbiAgICAgICAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgICAgICAgb2JqZWN0W1wibGFiZWxcIl0gPSB2YWx1ZTtcbiAgICAgICAgICBvYmplY3RbXCJjb2xvclwiXSA9IHRoaXMucHJlZGVmaW5lZENvbG9yW2luZGV4XTtcbiAgICAgICAgICB0aGlzLmxlZ2VuZEFycmF5LnB1c2gob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25DYW5kbGVzdGlja0xlZ2VuZENsaWNrKGNoYXJ0RGF0YTogYW55KSB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVsZW1lbnQpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBjaGFydERhdGEubGFiZWwpIHtcbiAgICAgICAgICBvYmplY3RbY2hhcnREYXRhLmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmplY3QpO1xuICB9XG5cbiAgcmVzaXplKCkge1xuICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgdGhpcy5yZXNpemVmbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICB0aGlzLnBsb3RYWUF4aXMoKTtcbiAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBWaWV3Q2hpbGQsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Jhc2UvYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbWFuRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlJztcbmltcG9ydHtEZXZpY2VRdWVyeVNlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RldmljZS5xdWVyeS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1idWJibGUnLFxuICB0ZW1wbGF0ZTogYFxuPGRpdiAgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoJGV2ZW50KVwiPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQgPlxuICA8dHI+XG4gICAgICA8dGQgY29sc3Bhbj1cIjJcIiBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IFwiPiB7e3RpdGxlfX0gPC90ZD5cbiAgPC90cj5cbiAgPHRyPlxuICAgICAgPHRkPlxuICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cInN2Z2hlaWdodFwiIFthdHRyLndpZHRoXT1cInN2Z3dpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgIDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZCBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyBwYWRkaW5nOiA1cHg7XCI+XG4gICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwib25CdWJibGVMZWdlbmRDbGljaygkZXZlbnQpXCIgW2RhdGFdPVwibGVnZW5kRGF0YVwiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+PC9hbWV4aW8tZDMtbGVnZW5kPlxuICAgICAgPC90ZD5cbiAgPC90cj5cbjwvdGFibGU+XG48L2Rpdj5gLFxuICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgQnViYmxlQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdjb2xvcicpIGNvbG9yOiBhbnkgPSBcImJsdWVcIjtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW107XG4gIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgndmVydGljYWwtc2NhbGUnKSB2U2NhbGU6IGJvb2xlYW4gPSB0cnVlO1xuICBkcmlsbGFibGVGbGFnOiBib29sZWFuID0gdHJ1ZTtcbiAgcmVzaXplZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBrZXlBcnJheTogYW55W10gPSBbXTtcbiAgdHJhbnNmb3JtZWRkYXRhOiBhbnlbXSA9IFtdO1xuICBjb2xvcnM6IGFueVtdID0gW107XG4gIGRhdGExOiBhbnk7XG4gIHhheGlzQXJyYXk6IGFueVtdID0gW107XG4gIHhhcnJheTogYW55W10gPSBbXTtcbiAgbGVnZW5kczogYW55W10gPSBbXTtcbiAgbGVnZW5kYXJyYXk6IGFueVtdID0gW107XG4gIGxlZ2VuZERhdGE6IGFueVtdID0gW107XG4gIG1pbnh2YWx1ZTogbnVtYmVyID0gMDtcbiAgbWF4eHZhbHVlOiBudW1iZXIgPSAwO1xuICBjb2xvcmRhdGE6IGFueTtcbiAgYnViYmxlY2hhcnRkYXRhOiBhbnlbXSA9IFtdO1xuICBodHRwcmVzcG9uc2U6IGFueTtcbiAgc3ZnOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSwgcHJpdmF0ZSBjZGY6IENoYW5nZURldGVjdG9yUmVmLHByaXZhdGUgZGV2aWNlOkRldmljZVF1ZXJ5U2VydmljZSkge1xuXG4gICAgc3VwZXIoJ2J1YmJsZScpO1xuICAgIHRoaXMucHJlZGVmaW5lZGNvbG9ycyA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuXG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIHRoaXMuZGF0YTEgPSBbXTtcblxuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGxldCByZXNwOiBhbnk7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgICAgdGhpcy5odHRwcmVzcG9uc2UgPSByZXNwO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgICB0aGlzLmRhdGExID0gdGhpcy5kYXRhO1xuXG4gICAgICAgICAgICB0aGlzLnhheGlzRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YTEpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1kYXRhKCk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yR2VuZXJhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5wbG90QnViYmxlQ2hhcnQoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhKSB7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kYXRhMSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICAgIHRoaXMueGF4aXNEYXRhKCk7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1kYXRhKCk7XG4gICAgICAgICAgdGhpcy5jb2xvckdlbmVyYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmZvcm1MZWdlbmREYXRhKCk7XG4gICAgICAgICAgdGhpcy5wbG90QnViYmxlQ2hhcnQoKTtcblxuICAgICAgICB9LCAwKTtcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYgKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpIHtcbiAgICAgIGxldCBkcmlsbGFibGVkYXRhID0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLCBrZXkpO1xuICAgICAgcmVxdWVzdEpzb24gPSBkcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIHRoaXMubXlzZXJ2aWNlLnBvc3RmZXRjaERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QsIHJlcXVlc3RKc29uKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5odHRwcmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAvL3RoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZHJhd0NoYXJ0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5odHRwcmVzcG9uc2UpO1xuICAgICAgdGhpcy5kYXRhMSA9IHRoaXMuZGF0YTtcblxuICAgICAgdGhpcy54YXhpc0RhdGEoKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGExKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtZGF0YSgpO1xuICAgICAgdGhpcy5jb2xvckdlbmVyYXRpb24oKTtcbiAgICAgIHRoaXMuZm9ybUxlZ2VuZERhdGEoKTtcbiAgICAgIHRoaXMucGxvdEJ1YmJsZUNoYXJ0KCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBnZXRSZXNwb25zZURhdGEoaHR0cFJlc3BvbnNlOiBhbnkpIHtcbiAgICBsZXQgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIGlmICh0aGlzLmRhdGFyZWFkZXIgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZHIgPSB0aGlzLmRhdGFyZWFkZXIuc3BsaXQoJy4nKTtcbiAgICAgIGZvciAoY29uc3QgaXIgb2YgZHIpIHtcbiAgICAgICAgcmVzcG9uc2VkYXRhID0gcmVzcG9uc2VkYXRhW2lyXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2VkYXRhID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VkYXRhO1xuICB9XG5cblxuXG4gIHRyYW5zZm9ybURhdGEoZGF0YTogYW55KSB7XG4gICAgdGhpcy5jb2xvcmRhdGEgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBEdW1teU9iamVjdCA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGluZGl2aWR1YWx2YWx1ZSwga2V5aW5kZXgpID0+IHtcbiAgICAgICAgICBEdW1teU9iamVjdFt0aGlzLmtleUFycmF5W2tleWluZGV4XV0gPSBpbmRpdmlkdWFsdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5wdXNoKER1bW15T2JqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnRyYW5zZm9ybWVkZGF0YTtcbiAgICB0aGlzLmNvbG9yZGF0YSA9IHRoaXMudHJhbnNmb3JtZWRkYXRhO1xuXG4gIH1cblxuICBwbG90QnViYmxlQ2hhcnQoKSB7XG5cbiAgICBsZXQgY29sb3JzID0gdGhpcy5wcmVkZWZpbmVkY29sb3JzO1xuICAgIGlmICh0aGlzLnJlc2l6ZWZsYWcgPT0gZmFsc2UpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0SWQpIHtcblxuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDYwLCBib3R0b206IDUwLCBsZWZ0OiA2MCB9O1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5zdmd3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuc3ZnaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICBsZXQgeCwgeTtcblxuXG4gICAgeCA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pO1xuXG4gICAgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKTtcblxuICAgIGxldCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeCk7XG5cbiAgICBsZXQgeUF4aXMgPSBkMy5heGlzTGVmdCh5KTtcblxuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZClcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAvLyB4LmRvbWFpbihbMCwgZDMubWF4KHRoaXMuZGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMV1dIH0pXSk7XG4gICAgeS5kb21haW4oWzAsIGQzLm1heCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkW09iamVjdC5rZXlzKGQpWzJdXSB9KV0pO1xuXG4gICAgeC5kb21haW4oW3RoaXMubWlueHZhbHVlLCB0aGlzLm1heHh2YWx1ZV0pO1xuXG5cbiAgICB2YXIgclNjYWxlID0gZDMuc2NhbGVTcXJ0KCkucmFuZ2VSb3VuZChbNiwgMzBdKTtcblxuXG4gICAgclNjYWxlLmRvbWFpbihbZDMubWluKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbNF1dIH0pLCBkMy5tYXgodGhpcy5kYXRhLCBmdW5jdGlvbiAoZCwgaSkgeyByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVs0XV0gfSldKVxuXG5cblxuICAgIGlmKHRoaXMuZGV2aWNlLklzRGVza3RvcCgpPT10cnVlKVxuICAgIHtcbiAgICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgIC5jYWxsKHhBeGlzKVxuICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgLmF0dHIoXCJ4XCIsIDkpXG4gICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXG4gICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKTtcbiAgICB9XG4gIGVsc2VcbiAgIHtcbiAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInggYXhpc1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAuY2FsbCh4QXhpcykuXG4gICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgIC5hdHRyKFwieFwiLCA5KVxuICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoNjApXCIpXG4gICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG4gIH1cbiAgXG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKVxuICAgICAgLmNhbGwoeUF4aXMpXG4gICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXG4gICAgICAuYXR0cihcInlcIiwgNilcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuNzFlbVwiKVxuICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcblxuICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHgsIHksIGhlaWdodCwgd2lkdGgpO1xuXG4gICAgbGV0IG5vZGUgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuZG90XCIpXG4gICAgICAuZGF0YSh0aGlzLmJ1YmJsZWNoYXJ0ZGF0YSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvdFwiKVxuICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiByU2NhbGUoZFtPYmplY3Qua2V5cyhkKVs0XV0pOyB9KVxuICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiB4KGRbT2JqZWN0LmtleXMoZClbMV1dKTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB5KGRbT2JqZWN0LmtleXMoZClbMl1dKTsgfSlcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCwgKSB7IHJldHVybiBkW09iamVjdC5rZXlzKGQpWzVdXSB9KVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCAwLjcpXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuaHRtbChcbiAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkKVxuICAgICAgICApXG4gICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgIHRoaXMuYnViYmxlQ2hhcnRDbGljayhkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZm9ybVRvb2x0aXBEYXRhKHRvb2x0aXBEYXRhOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRvb2x0aXBEYXRhKSkge1xuICAgICAgaWYgKGtleSAhPSAnY29sb3InKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvb2xUaXBGb3JCYXIob2JqZWN0KTtcbiAgfVxuXG4gIC8vIE1ldGhvZCBvbiBjaGFydCBjbGlja1xuICBidWJibGVDaGFydENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50KSkge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5jaGFydENsaWNrKG9iamVjdCk7XG4gIH1cblxuICByZXNpemUoZGF0YTogYW55KSB7XG4gICAgdGhpcy5zdmd3aWR0aCA9IDA7XG4gICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIHRoaXMucmVzaXplZmxhZyA9IHRydWU7XG4gICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuZGl2aWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcblxuICAgIHRoaXMucGxvdEJ1YmJsZUNoYXJ0KCk7XG5cbiAgfVxuICB4YXhpc0RhdGEoKSB7XG5cbiAgICBsZXQgYXJyYXkgPSBbXTtcbiAgICB0aGlzLm1pbnh2YWx1ZSA9IDA7XG4gICAgdGhpcy5tYXh4dmFsdWUgPSAwO1xuICAgIHRoaXMueGF4aXNBcnJheSA9IFtdO1xuICAgIHRoaXMueGFycmF5ID0gW107XG4gICAgdGhpcy5kYXRhMS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgYXJyYXkucHVzaChlbGVtZW50WzFdKTtcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnhheGlzQXJyYXkucHVzaChhcnJheVtpXSk7XG4gICAgfVxuXG4gICAgbGV0IG1pbnZhbHVlID0gTWF0aC5mbG9vcihkMy5taW4odGhpcy54YXhpc0FycmF5KSk7XG4gICAgbGV0IG1heHZhbHVlID0gTWF0aC5jZWlsKGQzLm1heCh0aGlzLnhheGlzQXJyYXkpKTtcbiAgICB0aGlzLm1pbnh2YWx1ZSA9IDUgKiAoTWF0aC5mbG9vcihNYXRoLmFicyhtaW52YWx1ZSAvIDUpKSk7XG4gICAgdGhpcy5tYXh4dmFsdWUgPSA1ICogKE1hdGguY2VpbChNYXRoLmFicyhtYXh2YWx1ZSAvIDUpKSk7XG5cbiAgfVxuXG4gIGNvbG9yR2VuZXJhdGlvbigpIHtcbiAgICBcbiAgICB0aGlzLmxlZ2VuZGFycmF5ID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBuYW1lcyA9IHRoaXMuZGF0YTFcbiAgICAgIC5tYXAoZSA9PiBlWzNdKVxuICAgICAgLmZpbHRlcigoZSwgaSwgYSkgPT4gYS5pbmRleE9mKGUpID09PSBpKTtcblxuICAgIGZvciAobGV0IGogPSAxOyBqIDwgbmFtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCB2YWx1ZSA9IFtdO1xuICAgICAgbGV0IG9iaiA9IHsgXCJsYWJlbFwiOiBcIlwiLCBcImNvbG9yXCI6IFwiXCIsIFwidmFsdWVcIjogW10gfTtcbiAgICAgIHRoaXMuY29sb3JkYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50W09iamVjdC5rZXlzKGVsZW1lbnQpWzNdXSA9PSBuYW1lc1tqXSkge1xuICAgICAgICAgIGVsZW1lbnRbJ2NvbG9yJ10gPSB0aGlzLnByZWRlZmluZWRjb2xvcnNbaV07XG4gICAgICAgICAgdmFsdWUucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvYmpbXCJ2YWx1ZVwiXSA9IHZhbHVlO1xuICAgICAgb2JqW1wibGFiZWxcIl0gPSBuYW1lc1tqXTtcbiAgICAgIG9ialtcImNvbG9yXCJdID0gdGhpcy5wcmVkZWZpbmVkY29sb3JzW2ldO1xuICAgICAgdGhpcy5sZWdlbmRhcnJheS5wdXNoKG9iaik7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG5cbiAgZm9ybUxlZ2VuZERhdGEoKSB7XG4gICAgdGhpcy5sZWdlbmREYXRhID0gW107XG4gICAgdGhpcy5sZWdlbmRhcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgbGV0IGxlZ2VuZG9iamVjdCA9IHt9O1xuICAgICAgbGVnZW5kb2JqZWN0WydsYWJlbCddID0gZWxlbWVudC5sYWJlbDtcbiAgICAgIGxlZ2VuZG9iamVjdFsnY29sb3InXSA9IGVsZW1lbnQuY29sb3I7XG4gICAgICB0aGlzLmxlZ2VuZERhdGEucHVzaChsZWdlbmRvYmplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgb25CdWJibGVMZWdlbmRDbGljayhsZWdlbmRldmVudDogYW55KSB7XG4gICAgdGhpcy5sZWdlbmRhcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGxlZ2VuZGV2ZW50LmxhYmVsID09IGVsZW1lbnQubGFiZWwpIHtcbiAgICAgICAgdGhpcy5sZWdlbmRDbGljayhlbGVtZW50LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgcGxvdExpbmUoZywgeCwgeSwgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGlmICh0aGlzLnZTY2FsZSkge1xuICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJylcbiAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS5cbiAgICAgICAgICB0aWNrU2l6ZSgtdGhpcy53aWR0aCkudGlja0Zvcm1hdCgnJylcbiAgICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaFNjYWxlKSB7XG4gICAgICBnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgICAudGlja1NpemUoLXdpZHRoKS50aWNrRm9ybWF0KCcnKSk7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNmb3JtZGF0YSgpIHtcbiAgICB0aGlzLmJ1YmJsZWNoYXJ0ZGF0YSA9IFtdXG4gICAgbGV0IGJ1dWJsZWRhdGEgPSBbXTtcbiAgICB0aGlzLmNvbG9yZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG5cbiAgICAgIGJ1dWJsZWRhdGEucHVzaChlbGVtZW50W09iamVjdC5rZXlzKGVsZW1lbnQpWzRdXSk7XG5cbiAgICB9KTtcblxuXG4gICAgbGV0IGRhdGEgPSBidXVibGVkYXRhLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIgLSBhIH0pO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgdGhpcy5jb2xvcmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgaWYgKGRhdGFbal0gPT0gZWxlbWVudFtPYmplY3Qua2V5cyhlbGVtZW50KVs0XV0pXG4gICAgICAgICAgdGhpcy5idWJibGVjaGFydGRhdGEucHVzaChlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsICBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R3JvdXBiYXJDb21wb25lbnR9IGZyb20gJy4uL2dyb3VwYmFyL2dyb3VwYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQge0FtZXhpb0QzQmFyQ2hhcnRDb21wb25lbnR9IGZyb20gJy4uL2Jhci9iYXIuY29tcG9uZW50JztcbmltcG9ydCB7QW1leGlvRDNEb3VudXRDaGFydENvbXBvbmVudH0gZnJvbSAnLi4vZG91bnV0L2RvdW51dC5jb21wb25lbnQnO1xuaW1wb3J0e0FtZXhpb0QzUGllQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9waWUvcGllLmNvbXBvbmVudCc7XG5pbXBvcnQge0FtZXhpb0QzTGluZUNvbXBvbmVudH0gZnJvbSAnLi4vbGluZS9saW5lLmNvbXBvbmVudCc7XG5pbXBvcnR7QmFyc3RhY2tDb21wb25lbnR9ICBmcm9tICcuLi9iYXJzdGFjay9iYXJzdGFjay5jb21wb25lbnQnO1xuaW1wb3J0e0NvbWJvY2hhcnRDb21wb25lbnR9IGZyb20gJy4uL2NvbWJvY2hhcnQvY29tYm9jaGFydC5jb21wb25lbnQnXG5pbXBvcnR7SGlzdG9ncmFtQ29tcG9uZW50fSBmcm9tICcuLi9oaXN0b2dyYW0vaGlzdG9ncmFtLmNvbXBvbmVudCdcbmltcG9ydHtTY2F0dGVyY2hhcnRDb21wb25lbnR9IGZyb20nLi4vc2NhdHRlcmNoYXJ0L3NjYXR0ZXJjaGFydC5jb21wb25lbnQnXG5pbXBvcnR7TXVsdGlhcmVhQ29tcG9uZW50fSBmcm9tICcuLi9tdWx0aWFyZWEvbXVsdGlhcmVhLmNvbXBvbmVudCdcbmltcG9ydHtDYW5kbGVzdGlja0NvbXBvbmVudH0gZnJvbSAnLi4vY2FuZGxlc3RpY2svY2FuZGxlc3RpY2suY29tcG9uZW50J1xuaW1wb3J0e0J1YmJsZUNvbXBvbmVudH0gZnJvbScuLi9idWJibGUvYnViYmxlL2J1YmJsZS5jb21wb25lbnQnXG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsXG4gICBWaWV3Q2hpbGRyZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgVmlld0RyaWxsYWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihBbWV4aW9EM0JhckNoYXJ0Q29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIHF1ZXJ5QmFyY2hhcnRpbnB1dDogUXVlcnlMaXN0PEFtZXhpb0QzQmFyQ2hhcnRDb21wb25lbnQ+O1xuICBiYXJjaGFydGlucHV0OkFtZXhpb0QzQmFyQ2hhcnRDb21wb25lbnRbXSA7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihHcm91cGJhckNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeUdyb3VwYmFyY2hhcnRpbnB1dDogUXVlcnlMaXN0PEdyb3VwYmFyQ29tcG9uZW50PjtcbiAgZ3JvdXBiYXJjaGFydGlucHV0Okdyb3VwYmFyQ29tcG9uZW50W10gO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oQW1leGlvRDNMaW5lQ29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIFF1ZXJ5TGluZWNoYXJ0aW5wdXQ6IFF1ZXJ5TGlzdDxBbWV4aW9EM0xpbmVDb21wb25lbnQ+O1xuICBsaW5lY2hhcnRpbnB1dDpBbWV4aW9EM0xpbmVDb21wb25lbnRbXSA7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihBbWV4aW9EM1BpZUNoYXJ0Q29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIFF1ZXJ5UGllY2hhcnRpbnB1dDogUXVlcnlMaXN0PEFtZXhpb0QzUGllQ2hhcnRDb21wb25lbnQ+O1xuICBwaWVjaGFydGlucHV0OkFtZXhpb0QzUGllQ2hhcnRDb21wb25lbnRbXSA7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihBbWV4aW9EM0RvdW51dENoYXJ0Q29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIFF1ZXJ5RG9udXRjaGFydGlucHV0OiBRdWVyeUxpc3Q8QW1leGlvRDNEb3VudXRDaGFydENvbXBvbmVudD47XG4gIGRvbnV0Y2hhcnRpbnB1dDpBbWV4aW9EM0RvdW51dENoYXJ0Q29tcG9uZW50W10gO1xuXG5cbiAgQENvbnRlbnRDaGlsZHJlbihCYXJzdGFja0NvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeUJhclN0YWNrY2hhcnRpbnB1dDogUXVlcnlMaXN0PEJhcnN0YWNrQ29tcG9uZW50PjtcbiAgYmFyc3RhY2tjaGFydGlucHV0OkJhcnN0YWNrQ29tcG9uZW50W10gO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ29tYm9jaGFydENvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeUNvbWJvY2hhcnRpbnB1dDogUXVlcnlMaXN0PENvbWJvY2hhcnRDb21wb25lbnQ+O1xuICBjb21ib2NoYXJ0aW5wdXQ6Q29tYm9jaGFydENvbXBvbmVudFtdIDtcblxuICBAQ29udGVudENoaWxkcmVuKEhpc3RvZ3JhbUNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeUhpc3RvZ3JhbWNoYXJ0aW5wdXQ6IFF1ZXJ5TGlzdDxIaXN0b2dyYW1Db21wb25lbnQ+O1xuICBoaXN0b2dyYW1jaGFydGlucHV0Okhpc3RvZ3JhbUNvbXBvbmVudFtdIDtcblxuICBAQ29udGVudENoaWxkcmVuKFNjYXR0ZXJjaGFydENvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeVNhdHRlcmNoYXJ0aW5wdXQ6IFF1ZXJ5TGlzdDxTY2F0dGVyY2hhcnRDb21wb25lbnQ+O1xuICBzY2F0dGVyY2hhcnRpbnB1dDpTY2F0dGVyY2hhcnRDb21wb25lbnRbXSA7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihNdWx0aWFyZWFDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgUXVlcnlNdWx0aWFyZWFjaGFydGlucHV0OiBRdWVyeUxpc3Q8TXVsdGlhcmVhQ29tcG9uZW50PjtcbiAgbXVsdGlhcmVhY2hhcnRpbnB1dDpNdWx0aWFyZWFDb21wb25lbnRbXSA7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihDYW5kbGVzdGlja0NvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSBRdWVyeUNhbmRsZXN0aWNrY2hhcnRpbnB1dDogUXVlcnlMaXN0PENhbmRsZXN0aWNrQ29tcG9uZW50PjtcbiAgY2FuZGxlc3RpY2tjaGFydGlucHV0OkNhbmRsZXN0aWNrQ29tcG9uZW50W10gO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oQnViYmxlQ29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIFF1ZXJ5QnViYmxlY2hhcnRpbnB1dDogUXVlcnlMaXN0PEJ1YmJsZUNvbXBvbmVudD47XG4gIGJ1YmJsZWNoYXJ0aW5wdXQ6QnViYmxlQ29tcG9uZW50W10gO1xuXG4gICBjaGFydElucHV0QXJyYXk6YW55O1xuXG4gIGNvbnN0cnVjdG9yKCkgeyBcblxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG5cbiAgfVxuXG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgXG4gICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnREYXRhKCk7XG4gIFxuICB9XG5cbmdldENvbXBvbmVudERhdGEoKTogYW55XG57XG5cbiAgdGhpcy5jaGFydElucHV0QXJyYXk9W107XG5cbiAgdGhpcy5iYXJjaGFydGlucHV0ID0gdGhpcy5xdWVyeUJhcmNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLmdyb3VwYmFyY2hhcnRpbnB1dCA9IHRoaXMuUXVlcnlHcm91cGJhcmNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLmxpbmVjaGFydGlucHV0PXRoaXMuUXVlcnlMaW5lY2hhcnRpbnB1dC50b0FycmF5KCk7XG4gIHRoaXMuZG9udXRjaGFydGlucHV0PXRoaXMuUXVlcnlEb251dGNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLnBpZWNoYXJ0aW5wdXQ9dGhpcy5RdWVyeVBpZWNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLmJhcnN0YWNrY2hhcnRpbnB1dD10aGlzLlF1ZXJ5QmFyU3RhY2tjaGFydGlucHV0LnRvQXJyYXkoKTtcbiAgdGhpcy5jb21ib2NoYXJ0aW5wdXQ9dGhpcy5RdWVyeUNvbWJvY2hhcnRpbnB1dC50b0FycmF5KCk7XG4gIHRoaXMuaGlzdG9ncmFtY2hhcnRpbnB1dD10aGlzLlF1ZXJ5SGlzdG9ncmFtY2hhcnRpbnB1dC50b0FycmF5KCk7XG4gIHRoaXMuc2NhdHRlcmNoYXJ0aW5wdXQ9dGhpcy5RdWVyeVNhdHRlcmNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLm11bHRpYXJlYWNoYXJ0aW5wdXQ9dGhpcy5RdWVyeU11bHRpYXJlYWNoYXJ0aW5wdXQudG9BcnJheSgpO1xuICB0aGlzLmNhbmRsZXN0aWNrY2hhcnRpbnB1dD10aGlzLlF1ZXJ5Q2FuZGxlc3RpY2tjaGFydGlucHV0LnRvQXJyYXkoKTtcbiAgdGhpcy5idWJibGVjaGFydGlucHV0PXRoaXMuUXVlcnlCdWJibGVjaGFydGlucHV0LnRvQXJyYXkoKTtcbiAgdGhpcy5jaGFydElucHV0QXJyYXk9dGhpcy5jaGFydElucHV0QXJyYXkuY29uY2F0KCB0aGlzLmJhcmNoYXJ0aW5wdXQsdGhpcy5ncm91cGJhcmNoYXJ0aW5wdXQsdGhpcy5saW5lY2hhcnRpbnB1dCx0aGlzLmRvbnV0Y2hhcnRpbnB1dCx0aGlzLnBpZWNoYXJ0aW5wdXQsdGhpcy5iYXJzdGFja2NoYXJ0aW5wdXQsdGhpcy5jb21ib2NoYXJ0aW5wdXQsdGhpcy5oaXN0b2dyYW1jaGFydGlucHV0LHRoaXMuc2NhdHRlcmNoYXJ0aW5wdXQsdGhpcy5tdWx0aWFyZWFjaGFydGlucHV0LHRoaXMuY2FuZGxlc3RpY2tjaGFydGlucHV0LHRoaXMuYnViYmxlY2hhcnRpbnB1dCk7XG4gXG4gIHJldHVybiB0aGlzLmNoYXJ0SW5wdXRBcnJheTtcbiBcbn1cblxuXG5cbiAgXG5cbn1cbiIsIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdEcmlsbGFibGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9iYXNlL3ZpZXcuY29tcG9uZW50JztcblxuaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkLFxuICBWaWV3Q2hpbGRyZW5cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtZXhpby1kcmlsbGFibGUnLFxuICB0ZW1wbGF0ZTogYFxuPGRpdiA+IFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJkaXNhYmxlRmxhZ1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b25cIlxuICAgICAgICAgICAgIChjbGljayk9XCJwcmV2aW91c2NoYXJ0Q2xpY2soJGV2ZW50KVwiPlxuICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYXJyb3ctbGVmdFwiPjwvaT4gXG4gICAgICAgICAgICAgXG4gICAgICAgICAgICA8L2J1dHRvbj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cbjwvZGl2PlxuXG48c3BhbiBbbmdTdHlsZV09XCJjb250ZXh0U3R5bGVcIiA+XG4gIDx1bCAqbmdJZj1cImNvbnRleHRtZW51RmxhZ1wiIGNsYXNzPVwiY2xvc2UtdGhpa1wiIGNsYXNzPVwiY29udGV4dC1tZW51LWxpc3RcIiAgPlxuICAgIDxzcGFuIChjbGljayk9XCJvbkNsb3NlQ2xpY2soKVwiIGNsYXNzPVwiY2xvc2VcIj48aSBjbGFzcz1cImZhIGZhLWNsb3NlXCI+PC9pPjwvc3Bhbj5cbiAgPGxpIChjbGljayk9XCJvbkNvbnRleHROb2RlQ2xpY2soaXRlbUNvbmZpZylcIiBjbGFzcz1cImNvbnRleHQtbWVudS1saXN0LWl0ZW1zXCIgXG4gICpuZ0Zvcj1cImxldCBpdGVtQ29uZmlnIG9mIGFycmF5b2ZzYW1lTGV2ZWxcIj5cbiAgPGVtIFtuZ1N0eWxlXT1cInsncGFkZGluZy1sZWZ0JzogaXRlbUNvbmZpZy5pY29uID8gJzVweCc6JzE5cHgnfVwiPjwvZW0+XG4gIDxzcGFuIHN0eWxlPVwid2hpdGUtc3BhY2U6IG5vd3JhcDtkaXNwbGF5OiBpbmxpbmUgOyBwYWRkaW5nLWxlZnQ6NXB4XCI+e3tpdGVtQ29uZmlnLnRpdGxlfX1cbiAgPC9zcGFuPlxuICA8L2xpPlxuICA8L3VsPlxuICA8L3NwYW4+XG4gIGAsXG4gIHN0eWxlczogW2AuYnV0dG9ue3Bvc2l0aW9uOnJlbGF0aXZlO2JvcmRlcjoxcHggc29saWQgIzU1NTtmb250LXdlaWdodDo0MDA7Y29sb3I6IzAwMDtwYWRkaW5nOi41cmVtIDFyZW07dGV4dC1hbGlnbjpjZW50ZXI7dHJhbnNpdGlvbi1kdXJhdGlvbjouNHM7dGV4dC1kZWNvcmF0aW9uOm5vbmU7b3ZlcmZsb3c6aGlkZGVuO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6M3B4fS5idXR0b246YWZ0ZXJ7Y29udGVudDpcIlwiO2JhY2tncm91bmQ6IzAwMDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmctdG9wOjMwMCU7cGFkZGluZy1sZWZ0OjM1MCU7bWFyZ2luLWxlZnQ6LTIwcHghaW1wb3J0YW50O21hcmdpbi10b3A6LTEyMCU7b3BhY2l0eTowO3RyYW5zaXRpb246LjhzfS5idXR0b246YWN0aXZlOmFmdGVye3BhZGRpbmc6MDttYXJnaW46MDtvcGFjaXR5OjE7dHJhbnNpdGlvbjpub25lfS5jb250ZXh0LW1lbnUtbGlzdHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjttaW4td2lkdGg6MTgwcHg7Y3Vyc29yOnBvaW50ZXI7bWF4LWhlaWdodDoxNTBweDt6LWluZGV4OjE7cGFkZGluZzoxMHB4IDA7b3ZlcmZsb3cteTphdXRvO2JhY2tncm91bmQtY29sb3I6I2ZmZiFpbXBvcnRhbnQ7Ym94LXNoYWRvdzowIDVweCA1cHggLTNweCByZ2JhKDAsMCwwLC4yKSwwIDhweCAxMHB4IDFweCByZ2JhKDAsMCwwLC4xNCksMCAzcHggMTRweCAycHggcmdiYSgwLDAsMCwuMTIpfS5jb250ZXh0LW1lbnUtbGlzdCAuY29udGV4dC1tZW51LWxpc3QtaXRlbXN7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1zaXplOjE0cHghaW1wb3J0YW50O3BhZGRpbmc6NXB4O2Rpc3BsYXk6YmxvY2t9LmNsb3Nle2Zsb2F0OnJpZ2h0O3BhZGRpbmctcmlnaHQ6OHB4O2N1cnNvcjpwb2ludGVyfWBdXG59KVxuXG5cbmV4cG9ydCBjbGFzcyBEcmlsbGFibGVDb21wb25lbnQgZXh0ZW5kcyBWaWV3RHJpbGxhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBtb3VzZUxvY2F0aW9uOiB7IGxlZnQ6IG51bWJlcjsgdG9wOiBudW1iZXIgfSA9IHsgbGVmdDogMCwgdG9wOiAwIH07XG4gIGNvbnRleHRtZW51RmxhZzogYm9vbGVhbjtcbiAgY29udGV4dFN0eWxlOiBhbnk7XG4gIENvbXBvbmVudERhdGFBcnJheTogYW55XG4gIGNvbXBvbmVudGNvdW50ZXI6IG51bWJlciA9IDE7XG4gIGRpc2FibGVGbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIGFycmF5b2ZzYW1lTGV2ZWw6IGFueTtcbiAgZXZlbnREYXRhOiBhbnk7XG4gIHJpZ2h0Q2xpY2tOb2RlRGF0YTogYW55O1xuICBwb3NpeFVwOiBib29sZWFuO1xuICBsZXZlbEFycmF5OiBhbnk7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuXG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG5cbiAgICB0aGlzLkNvbXBvbmVudERhdGFBcnJheSA9IHRoaXMuZ2V0Q29tcG9uZW50RGF0YSgpO1xuICAgIHRoaXMuZ2V0RGF0YSh0aGlzLkNvbXBvbmVudERhdGFBcnJheSk7XG5cbiAgfVxuICBnZXREYXRhKGRhdGE6IGFueSkge1xuICAgIGRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcblxuICAgICAgaWYgKGVsZW1lbnQubGV2ZWwgIT09IDEpIHtcbiAgICAgICAgZWxlbWVudC5kcmlsbGFibGVGbGFnID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRXZlbnQuc3Vic2NyaWJlKChldmVudGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuaGlkZVVJKGV2ZW50ZGF0YSk7XG4gICAgICAgICAgdGhpcy5zYW1lTGV2ZWxDaGFydChldmVudGRhdGEpO1xuICAgICAgICAgIHRoaXMuU2hvd1VJKGV2ZW50ZGF0YSk7XG5cblxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZUZsYWcgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC5kcmlsbGFibGVFdmVudC5zdWJzY3JpYmUoKGV2ZW50ZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5oaWRlVUkoZXZlbnRkYXRhKTtcbiAgICAgICAgICB0aGlzLnNhbWVMZXZlbENoYXJ0KGV2ZW50ZGF0YSk7XG4gICAgICAgICAgdGhpcy5TaG93VUkoZXZlbnRkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgaGlkZVVJKGV2ZW50UmVmOiBhbnkpIHtcbiAgICB0aGlzLkNvbXBvbmVudERhdGFBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQubGV2ZWwgPT0gZXZlbnRSZWYucmVmLmxldmVsKSB7XG4gICAgICAgIGV2ZW50UmVmLnJlZi5kcmlsbGFibGVGbGFnID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIFNob3dVSShldmVudFJlZjogYW55KSB7XG4gICAgdGhpcy5ldmVudERhdGEgPSBbXTtcbiAgICB0aGlzLmV2ZW50RGF0YSA9IGV2ZW50UmVmO1xuICAgIHRoaXMuQ29tcG9uZW50RGF0YUFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRSZWYucmVmLnRhcmdldCA9PSBlbGVtZW50LmxldmVsKSB7XG4gICAgICAgIGlmICh0aGlzLmFycmF5b2ZzYW1lTGV2ZWwubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICB0aGlzLmRpc2FibGVGbGFnID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUZsYWcgPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnQuZmV0Y2hEYXRhKGV2ZW50UmVmLm5vZGUpO1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50Y291bnRlciA9IGVsZW1lbnQubGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0bWVudUZsYWcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubW91c2VMb2NhdGlvbi5sZWZ0ID0gZXZlbnRSZWYuZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICB0aGlzLm1vdXNlTG9jYXRpb24udG9wID0gZXZlbnRSZWYuZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICB0aGlzLmNvbnRleHRTdHlsZSA9IHRoaXMuZ2V0Q29udGV4dE1lbnVTdHlsZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIGlmICh0aGlzLmNvbXBvbmVudGNvdW50ZXIgPT0gZXZlbnRSZWYucmVmLmxldmVsKSB7XG4gICAgICBldmVudFJlZi5yZWYuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgfVxuXG4gIH1cbiAgcHJldmlvdXNjaGFydENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgY2hhcnRMZXZlbCA9IHRoaXMuY29tcG9uZW50Y291bnRlciAtIDE7XG4gICAgdGhpcy5Db21wb25lbnREYXRhQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChjaGFydExldmVsID09IGVsZW1lbnQubGV2ZWwpIHtcbiAgICAgICAgZWxlbWVudC5kcmlsbGFibGVGbGFnID0gdHJ1ZTtcbiAgICAgICAgZWxlbWVudC5kcmF3Q2hhcnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRjb3VudGVyID09IGVsZW1lbnQubGV2ZWwpIHtcbiAgICAgICAgZWxlbWVudC5kcmlsbGFibGVGbGFnID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50Y291bnRlciA9PSAyKSB7XG4gICAgICB0aGlzLmRpc2FibGVGbGFnID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuY29tcG9uZW50Y291bnRlciA9IGNoYXJ0TGV2ZWw7XG4gIH1cblxuXG4gIHNhbWVMZXZlbENoYXJ0KGV2ZW50UmVmOiBhbnkpIHtcbiAgXG4gICAgdGhpcy5hcnJheW9mc2FtZUxldmVsID0gW107XG4gICAgdGhpcy5Db21wb25lbnREYXRhQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChldmVudFJlZi5yZWYudGFyZ2V0ID09IGVsZW1lbnQubGV2ZWwpIHtcbiAgICAgICAgdGhpcy5hcnJheW9mc2FtZUxldmVsID0gdGhpcy5hcnJheW9mc2FtZUxldmVsLmNvbmNhdChlbGVtZW50KTtcblxuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvL01ldGhvZCBDcmVhdGVzIHN0eWxlIGlmIHR3byBzYW1lIHRhcmdldHMgZm91bmQuXG4gIGdldENvbnRleHRNZW51U3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdjdXJzb3InOiAnZGVmYXVsdCcsXG4gICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgJ2Rpc3BsYXknOiB0aGlzLmNvbnRleHRtZW51RmxhZyA/ICdibG9jaycgOiAnbm9uZScsXG4gICAgICAnbGVmdCc6IHRoaXMubW91c2VMb2NhdGlvbi5sZWZ0ICsgJ3B4JyxcbiAgICAgICd0b3AnOiB0aGlzLm1vdXNlTG9jYXRpb24udG9wICsgJ3B4JyxcbiAgICAgICdib3gtc2hhZG93JzogJzFweCAxcHggMnB4ICMwMDAwMDAnLFxuICAgICAgJ3dpZHRoJzogJzE1JScsXG4gICAgfTtcbiAgfVxuXG5cblxuICBnZXRMaXN0UG9zaXRpb24oZWxlbWVudFJlZjogYW55KTogYm9vbGVhbiB7XG4gICAgY29uc3QgaGVpZ2h0ID0gMjQwO1xuICAgIGlmICgod2luZG93LnNjcmVlbi5oZWlnaHQgLSBlbGVtZW50UmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSkgPCBoZWlnaHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgb25Db250ZXh0Tm9kZUNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLmNvbXBvbmVudGNvdW50ZXIgPSAwO1xuICAgIHRoaXMuY29udGV4dG1lbnVGbGFnID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudERhdGEucmVmLmRyaWxsYWJsZUZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLmRpc2FibGVGbGFnID0gdHJ1ZTtcbiAgICBldmVudC5kcmlsbGFibGVGbGFnID0gdHJ1ZTtcbiAgICBldmVudC5mZXRjaERhdGEodGhpcy5ldmVudERhdGEubm9kZSk7XG4gICAgdGhpcy5jb21wb25lbnRjb3VudGVyID0gZXZlbnQubGV2ZWw7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnRjb3VudGVyID09IHRoaXMuZXZlbnREYXRhLnJlZi5sZXZlbCkge1xuICAgICAgdGhpcy5ldmVudERhdGEucmVmLmRyaWxsYWJsZUZsYWcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2VDbGljaygpIHtcbiAgICB0aGlzLmNvbnRleHRtZW51RmxhZyA9IGZhbHNlO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IEFtZXhpb0QzRG91bnV0Q2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2RvdW51dC9kb3VudXQuY29tcG9uZW50JztcbmltcG9ydCB7IEFtZXhpb0QzUGllQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL3BpZS9waWUuY29tcG9uZW50JztcbmltcG9ydCB7IEFtZXhpb0QzTGVnZW5kIH0gZnJvbSAnLi9sZWdlbmQvbGVnZW5kLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBbWV4aW9EM0JhckNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9iYXIvYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBbWV4aW9EM0xpbmVDb21wb25lbnQgfSBmcm9tICcuL2xpbmUvbGluZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmFyc3RhY2tDb21wb25lbnQgfSBmcm9tICcuL2JhcnN0YWNrL2JhcnN0YWNrLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcm91cGJhckNvbXBvbmVudCB9IGZyb20gJy4vZ3JvdXBiYXIvZ3JvdXBiYXIuY29tcG9uZW50JztcbmltcG9ydCB7IERyaWxsYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZHJpbGxhYmxlL2RyaWxsYWJsZS9kcmlsbGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IENvbWJvY2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2NvbWJvY2hhcnQvY29tYm9jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGlzdG9ncmFtQ29tcG9uZW50IH0gZnJvbSAnLi9oaXN0b2dyYW0vaGlzdG9ncmFtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNdWx0aWFyZWFDb21wb25lbnQgfSBmcm9tICcuL211bHRpYXJlYS9tdWx0aWFyZWEuY29tcG9uZW50JztcbmltcG9ydCB7IFNjYXR0ZXJjaGFydENvbXBvbmVudCB9IGZyb20gJy4vc2NhdHRlcmNoYXJ0L3NjYXR0ZXJjaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FuZGxlc3RpY2tDb21wb25lbnQgfSBmcm9tICcuL2NhbmRsZXN0aWNrL2NhbmRsZXN0aWNrLmNvbXBvbmVudCc7XG5pbXBvcnR7QnViYmxlQ29tcG9uZW50fSBmcm9tICcuL2J1YmJsZS9idWJibGUvYnViYmxlLmNvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgRDNfQ09NUE9ORU5UUyA6IGFueVtdID0gW1xuICBBbWV4aW9EM0xlZ2VuZCxcbiAgQW1leGlvRDNEb3VudXRDaGFydENvbXBvbmVudCxcbiAgQW1leGlvRDNCYXJDaGFydENvbXBvbmVudCxcbiAgQW1leGlvRDNQaWVDaGFydENvbXBvbmVudCxcbiAgQW1leGlvRDNMaW5lQ29tcG9uZW50LFxuICBCYXJzdGFja0NvbXBvbmVudCxcbiAgR3JvdXBiYXJDb21wb25lbnQsXG4gIENvbWJvY2hhcnRDb21wb25lbnQsXG4gIERyaWxsYWJsZUNvbXBvbmVudCxcbiAgSGlzdG9ncmFtQ29tcG9uZW50LFxuICBNdWx0aWFyZWFDb21wb25lbnQsXG4gIFNjYXR0ZXJjaGFydENvbXBvbmVudCxcbiAgQ2FuZGxlc3RpY2tDb21wb25lbnQsXG4gIEJ1YmJsZUNvbXBvbmVudFxuXVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEQzX0NPTVBPTkVOVFMgfSBmcm9tICcuL2FtZXhpby1jaGFydC1kMy1jb21wb25lbnRzJztcbmltcG9ydCB7Rm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7ICBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0e0RldmljZVF1ZXJ5U2VydmljZX0gZnJvbSAnLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSdcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIEZvcm1zTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgXSxcbiBcbiAgZGVjbGFyYXRpb25zOiBEM19DT01QT05FTlRTLFxuICBwcm92aWRlcnM6IFtEZXZpY2VRdWVyeVNlcnZpY2VdLFxuICBleHBvcnRzOiBEM19DT01QT05FTlRTXG59KVxuZXhwb3J0IGNsYXNzIEFtZXhpb0NoYXJ0RDNNb2R1bGUgeyB9XG4gICAgICAgICAgICAgICAiXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwidHNsaWJfMS5fX3ZhbHVlcyIsImQzIiwiT3V0cHV0IiwiSW5wdXQiLCJIdHRwSGVhZGVycyIsIkluamVjdGFibGUiLCJIdHRwQ2xpZW50IiwidHNsaWJfMS5fX2V4dGVuZHMiLCJkMy5hcmMiLCJkMy5waWUiLCJkMy5zZWxlY3QiLCJkMy5ldmVudCIsIkNvbXBvbmVudCIsIkNoYW5nZURldGVjdG9yUmVmIiwiVmlld0NoaWxkIiwiaXNQbGF0Zm9ybUJyb3dzZXIiLCJJbmplY3QiLCJQTEFURk9STV9JRCIsImQzLnNjYWxlQmFuZCIsImQzLnNjYWxlTGluZWFyIiwiZDMubWF4IiwiZDMuYXhpc0JvdHRvbSIsImQzLmF4aXNMZWZ0IiwiZDMubGluZSIsImQzLnN0YWNrIiwiZDMuc3RhY2tPZmZzZXREaXZlcmdpbmciLCJkMy5taW4iLCJkMy5zY2FsZVBvaW50IiwiZDMuc2NhbGVPcmRpbmFsIiwiZDMuc2NoZW1lQ2F0ZWdvcnkxMCIsImQzLmFyZWEiLCJkMy5zY2FsZVNxcnQiLCJDb250ZW50Q2hpbGRyZW4iLCJOZ01vZHVsZSIsIkZvcm1zTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFBQTs7Ozs7Ozs7Ozs7Ozs7SUFjQTtJQUVBLElBQUksYUFBYSxHQUFHLFVBQVMsQ0FBQyxFQUFFLENBQUM7UUFDN0IsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO2FBQ2hDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEtBQUssSUFBSSxV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