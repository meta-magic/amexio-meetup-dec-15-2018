import { __values, __read, __extends } from 'tslib';
import { Input, Output, EventEmitter, Injectable, Component, ViewChild, NgModule, ContentChildren, defineInjectable, inject, Inject, PLATFORM_ID, ChangeDetectorRef } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as d3 from 'd3';
import { scaleBand, scaleLinear, max, select, axisBottom, axisLeft, event as event$1, line, stack, stackOffsetDiverging, scalePoint, scaleOrdinal, schemeCategory10, area, scaleSqrt, min, arc, pie } from 'd3';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3BaseChartComponent = /** @class */ (function () {
    function AmexioD3BaseChartComponent(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.initializeData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data.forEach(function (element) {
            element.color = _this.getColor(element);
        });
    };
    /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getMultipleDrillbleKeyData = /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    function (data, drillablekeys) {
        /** @type {?} */
        var nodeObject = {};
        if (data) {
            for (var index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                var element = drillablekeys[index];
                try {
                    for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key == element) {
                            nodeObject[key] = value;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return nodeObject;
        }
        var e_1, _d;
    };
    /**
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.generateId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "";
        for (var i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getColor = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            var color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.comboLineClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLineClick.emit(node);
    };
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    };
    /**
     * @param {?} d3
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTip = /**
     * @param {?} d3
     * @return {?}
     */
    function (d3$$1) {
        return d3$$1.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("visibility", "hidden");
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipContent = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var tooltiphtml = "<table>";
        for (var key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                var value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    };
    /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipWithLegendandAxis = /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    function (legend, xaxis, yaxis) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipForBar = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                /** @type {?} */
                var sideStyle = "float:left";
                tooltiphtml = tooltiphtml + "<div>";
                tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
                tooltiphtml = tooltiphtml + "</div>";
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tooltiphtml;
        var e_2, _d;
    };
    AmexioD3BaseChartComponent.propDecorators = {
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        onLineClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        data: [{ type: Input, args: ['data',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        legend: [{ type: Input, args: ['legend',] }],
        colors: [{ type: Input, args: ['color',] }],
        height: [{ type: Input, args: ['height',] }],
        width: [{ type: Input, args: ['width',] }],
        title: [{ type: Input, args: ['title',] }]
    };
    return AmexioD3BaseChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var CommanDataService = /** @class */ (function () {
    function CommanDataService(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    CommanDataService.prototype.fetchUrlData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    function (serviceUrl, methodType) {
        /** @type {?} */
        var requestJson = {};
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    CommanDataService.prototype.postfetchData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    function (serviceUrl, methodType, requestJson) {
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    CommanDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    CommanDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ CommanDataService.ngInjectableDef = defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(inject(HttpClient)); }, token: CommanDataService, providedIn: "root" });
    return CommanDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3DounutChartComponent = /** @class */ (function (_super) {
    __extends(AmexioD3DounutChartComponent, _super);
    function AmexioD3DounutChartComponent(myservice, cdf) {
        var _this = _super.call(this, 'DONUTCHART') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.pie = false;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillableFlag = true;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.drawChart();
                        _this.data = _this.getResponseData(resp_1);
                        //this.transformData(this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.response = resp;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.drillableFlag = true;
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        var outerRadius = 0;
        /** @type {?} */
        var innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var arc$$1 = arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        var pie$$1 = pie()
            .value(function (d) {
            return d[Object.keys(d)[1]];
            //  return d.value
        });
        this.svg = select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie$$1(this.data))
            .enter();
        /** @type {?} */
        var path = this.svg.append('path')
            .attr('d', arc$$1)
            .attr('fill', function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        })
            .attr('cursor', 'pointer')
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.DonutChartClick(d.data);
            _this.fordrillableClick(_this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        });
        if (this.labelflag) {
            /** @type {?} */
            var text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", function (d) {
                return "translate(" + arc$$1.centroid(d) + ")";
            })
                .attr("text-anchor", "middle")
                .text(function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            })
                .style('fill', function (d) {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            })
                .style('font-size', '12px');
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.onDonutLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color' && key != 'textcolor') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.DonutChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    AmexioD3DounutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-donut',
                    template: "<div *ngIf=\"drillableFlag\" #chartId>\n\n\n    <div colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \">\n        {{title}}\n    </div>\n        <div style=\"display: flex;flex-direction: row\">\n            <svg preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 300 300\" [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n            <div>\n\n           <div style=\"display: block; padding: 1%;\">\n                    <amexio-d3-legend *ngIf=\"legend\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n          </div>\n   </div>\n    "
                },] },
    ];
    AmexioD3DounutChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef }
    ]; };
    AmexioD3DounutChartComponent.propDecorators = {
        pie: [{ type: Input, args: ['pie',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillData: [{ type: Input }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return AmexioD3DounutChartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3PieChartComponent = /** @class */ (function () {
    function AmexioD3PieChartComponent() {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.colors = [];
        this.width = "300";
        this.height = "300";
        this.title = "";
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillableFlag = true;
    }
    /**
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} ref
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        this.drillableEvent.emit(ref);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.drillData = data;
    };
    /**
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        this.donutref.drillableFlag = true;
        this.donutref.drawChart();
    };
    AmexioD3PieChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-pie',
                    template: "<div   *ngIf=\"drillableFlag\">\n<amexio-d3-chart-donut #id (onLegendClick)=\"legendClick($event)\" \n                       (onChartClick)=\"chartClick($event)\" \n                       (drillableEvent)=\" fordrillableClick($event)\"\n                        [height]=\"height\"\n                        [width]=\"width\"\n                        [title]=\"title\"\n                        [data] = \"data\"\n                        [pie]  = \"true\"\n                        [color]=\"colors\"\n                        [http-url]=\"httpurl\"\n                        [http-method]=\"httpmethod\"\n                        [data-reader]=\"datareader\"\n                        [label]=\"labelflag\"\n                        [label-color]=\"labelcolor\"\n                        [level]=\"level\"\n                        [target]=\"target\"\n                        [drillable-data]=\"drillabledatakey\"\n                        [drillData]=\"drillData\">\n</amexio-d3-chart-donut>\n</div>\n"
                },] },
    ];
    AmexioD3PieChartComponent.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        donutref: [{ type: ViewChild, args: ['id',] }],
        legend: [{ type: Input }],
        colors: [{ type: Input, args: ['color',] }],
        width: [{ type: Input, args: ['width',] }],
        height: [{ type: Input, args: ['height',] }],
        title: [{ type: Input }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }]
    };
    return AmexioD3PieChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3Legend = /** @class */ (function () {
    function AmexioD3Legend() {
        this.horizontal = false;
        this.onClick = new EventEmitter();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3Legend.prototype.onLegendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onClick.emit(node);
    };
    AmexioD3Legend.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-legend',
                    template: "<div style =\" width: 100% ; padding-left: 20px; padding-top: 8px; \">\n<table *ngIf=\"!horizontal\" style=\"height: 100%;\">\n    <tr *ngFor = \"let node of data\" style=\"cursor: pointer;\" (click)=\"onLegendClick(node)\">\n        <td style=\"height: 10px; width: 23px; padding-left: 2px;\"\n            [ngStyle]=\"{'background-color': node.color}\"></td>\n        <td>{{node.label}}</td>\n    </tr>\n</table>\n</div>\n\n<table *ngIf=\"horizontal\" style=\"height: 100%;\">\n    <tr>\n        <td *ngFor = \"let node of data\" \n                    (click)=\"onLegendClick(node)\" \n                    style=\"cursor: pointer;\">\n            \n            <div style=\" display: inline-block; display: inline-block; padding: 2px;\">\n                    <div style=\" width: 10px; display: inline-block; padding: 2px; \" \n                    [ngStyle]=\"{'background-color': node.color}\"></div>\n                {{node.label}}\n            </div>\n        </td>\n        \n    </tr>\n</table>"
                },] },
    ];
    AmexioD3Legend.ctorParameters = function () { return []; };
    AmexioD3Legend.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        horizontal: [{ type: Input, args: ['horizontal',] }],
        onClick: [{ type: Output }]
    };
    return AmexioD3Legend;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var DeviceQueryService = /** @class */ (function () {
    function DeviceQueryService(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = function (mq) {
            if (isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        };
        this.IsTablet = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        };
        this.IsDesktop = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        };
        this.IsPortrait = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        };
        this.IsLandscape = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        };
        this.IsRetina = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        };
        this.browserWindow = function () {
            return window;
        };
    }
    /**********************************************
     METHODS FOR CHECKING TYPE
     **********************************************/
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    DeviceQueryService.prototype.IsPhone = /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    };
    /**********************************************
     EVENT LISTENERS BY TYPE
     **********************************************/
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPhone = /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnTablet = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnDesktop = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPortrait = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnLandscape = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    DeviceQueryService.prototype.mqlMethod = /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    function (callBack, mql) {
        mql.addListener(function (mql1) {
            if (mql1.matches) {
                callBack(mql);
            }
        });
    };
    DeviceQueryService.decorators = [
        { type: Injectable },
    ];
    DeviceQueryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DeviceQueryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3BarChartComponent = /** @class */ (function (_super) {
    __extends(AmexioD3BarChartComponent, _super);
    function AmexioD3BarChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bar') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.horizontal = false;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.resizeflag = false;
        _this.drillableFlag = true;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.drawChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 30, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map(function (d) {
                return d[Object.keys(d)[0]];
                //    return d.label
            }));
            y.domain([0, max(this.data, function (d) {
                    return d[Object.keys(d)[1]];
                    //return d.value;
                })]);
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", function (d) {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            })
                .attr("y", function (d) {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", function (d) {
                // return "blue";
                return d.color;
            })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            x = scaleLinear()
                .rangeRound([0, width]);
            y = scaleBand()
                .rangeRound([height, 0]).padding(0.1);
            //setting content for x and y axis
            x.domain([0, max(this.data, function (d) {
                    return parseInt(d[Object.keys(d)[1]]
                    // d.value
                    );
                })]);
            // d[Object.keys(d)[1]]
            y.domain(this.data.map(function (d) {
                return d[Object.keys(d)[0]];
                //return d.label;
            }));
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x).ticks(10));
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", function (d) {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            })
                .attr("cursor", "pointer")
                .attr("width", function (d) {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            })
                .attr("height", y.bandwidth())
                .style("fill", function (d) { return d.color; })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding_1 = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[1]]) + yTextPadding_1;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            }
        } //else ends(horizontal bar logic ends)
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.onBarLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.barChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.resize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    AmexioD3BarChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bar',
                    template: "<div *ngIf=\"drillableFlag\"  #divid (window:resize)=\"resize($event)\" >\n<table style=\"width: 100%;\" position=\" relative\" #chartId >\n    <tr>\n        <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\" \n          >\n            </svg>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n            </amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n</div>"
                },] },
    ];
    AmexioD3BarChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3BarChartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        horizontal: [{ type: Input }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return AmexioD3BarChartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3BaseLineComponent = /** @class */ (function (_super) {
    __extends(AmexioD3BaseLineComponent, _super);
    function AmexioD3BaseLineComponent(deviceQueryService) {
        var _this = _super.call(this, 'line') || this;
        _this.deviceQueryService = deviceQueryService;
        _this.svgheight = 300;
        _this.hScale = true;
        _this.vScale = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BaseLineComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            this.createXYAxisData();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.createXYAxisData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        var msdarray = [];
        for (var index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            var legend = this._data[0][index];
            msdarray[index] = [];
            this.legenddata.push({ 'label': legend.label, 'color': this.predefinedcolors[index + 1] });
            if (index > 0)
                this.legends.push({ 'label': legend.label, 'color': this.predefinedcolors[index] });
        }
        /** @type {?} */
        var i = 0;
        this._data.forEach(function (object) {
            if (i > 0) {
                /** @type {?} */
                var j_1 = 0;
                object.forEach(function (a) {
                    if (j_1 === 0) {
                        _this.xaxisdata.push({ 'label': a, 'value': a });
                    }
                    else {
                        _this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    msdarray[j_1].push(a);
                    j_1++;
                });
            }
            i++;
        });
        for (var index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            var element = msdarray[index];
            if (index > 0) {
                /** @type {?} */
                var md = [];
                for (var j = 0; j < element.length; j++) {
                    /** @type {?} */
                    var v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].value, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.initChart = /**
     * @return {?}
     */
    function () {
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        var margin = { top: 40, right: 20, bottom: 30, left: 40 };
        /** @type {?} */
        var width = +this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var g = this.svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x = scaleBand()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        var y = scaleLinear()
            .rangeRound([height, 0]);
        x.domain(this.xaxisdata.map(function (d) { return d.label; }));
        y.domain([0, max(this.yaxisdata, function (d) { return d.value; })]);
        //add axis 
        if (this.deviceQueryService.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(axisBottom(x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        g.append("g")
            .attr("color", "grey")
            .call(axisLeft(y));
        return {
            g: g, x: x, y: y, height: height, width: width
        };
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.plotScale = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        var _this = this;
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        var obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        var data = [];
        node.data.forEach(function (element) {
            /** @type {?} */
            var object = {};
            object[element.legend] = element.value;
            object[_this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    };
    AmexioD3BaseLineComponent.propDecorators = {
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }],
        httpurl: [{ type: Input, args: ['data',] }, { type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }]
    };
    return AmexioD3BaseLineComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioD3LineComponent = /** @class */ (function (_super) {
    __extends(AmexioD3LineComponent, _super);
    function AmexioD3LineComponent(deviceQueryService, myservice) {
        var _this = _super.call(this, deviceQueryService) || this;
        _this.deviceQueryService = deviceQueryService;
        _this.myservice = myservice;
        _this.level = 0;
        _this.labelflag = false;
        _this.labelcolor = "black";
        _this.drillabledatakey = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3LineComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotD3Chart();
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3LineComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var linechart = this.initChart();
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        for (var index = 0; index < this.multiseriesdata.length; index++) {
            this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
        }
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    function (g, x, y, height, width, data, tooltip, i) {
        var _this = this;
        /** @type {?} */
        var line$$1 = line()
            .x(function (d) { return x(d.label); })
            .y(function (d) { return y(d.value); });
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", this.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line$$1);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", function (d) { return x(d.label); })
            .attr("cy", function (d) { return y(d.value); })
            .attr('r', 2)
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.callTooltip(d)
            //  this.toolTipForLine(d)
            //  this.toolTipWithLegendandAxis(d.legend,d.label,d.value)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.lineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d, i) {
                return x(d.label);
            })
                .attr("y", function (d, i) {
                return y(d.value) - 10;
            })
                .text(function (d) {
                return d.value;
            });
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    AmexioD3LineComponent.prototype.lineChartClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3LineComponent.prototype.callTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    };
    AmexioD3LineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-line',
                    template: "\n<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\"> \n<table style=\"width: 100%;\" #chartId  >\n        <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"height\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>            \n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                        [data]=\"legends\" style=\"height:100%;\">\n                    </amexio-d3-legend>\n            </td>\n        \n        </tr>\n</table>\n</div>\n    "
                },] },
    ];
    AmexioD3LineComponent.ctorParameters = function () { return [
        { type: DeviceQueryService },
        { type: CommanDataService }
    ]; };
    AmexioD3LineComponent.propDecorators = {
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return AmexioD3LineComponent;
}(AmexioD3BaseLineComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var BarstackComponent = /** @class */ (function (_super) {
    __extends(BarstackComponent, _super);
    function BarstackComponent(myservice, device) {
        var _this = _super.call(this, 'barstack') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.maxYValue = 0;
        _this.barwidth = 0;
        _this.labelflag = false;
        _this.title = "";
        _this.legend = true;
        _this.labelcolor = "black";
        _this.color = [];
        _this.svgwidth = 300;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.svgheight = 300;
        _this.onLegendClick = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    BarstackComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    //this.data = response;
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.transformData(_this.data);
                        _this.plotChart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(function () {
                    _this.transformData(_this.data1);
                    _this.plotChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BarstackComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.plotChart();
        }, 0);
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    BarstackComponent.prototype.transformData = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach(function (element, i) {
            if (i == 0) {
                element.forEach(function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach(function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj_1);
            }
        });
        this.data = [];
        tempinnerarray.forEach(function (element) {
            _this.data.push(element);
        });
        /** @type {?} */
        var maxY = 0;
        /** @type {?} */
        var yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach(function (element) {
            var _loop_1 = function (key, value) {
                _this.keyArray.forEach(function (key1) {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                }); //keyarray loop ends here
            };
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    _loop_1(key, value);
                } //for ends here
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            yaxismaxArray.push(maxY);
            maxY = 0;
            var e_1, _d;
        }); // foreach ends
        // foreach ends
        /** @type {?} */
        var tempLarge = 0;
        /** @type {?} */
        var i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach(function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            if (_this.color.length > 0) {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.color[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
            else {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
        });
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            try {
                for (var _a = __values(Object.entries(this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    keysetarray.push(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        var series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height;
        // height=this.chartId.nativeElement.offsetHeight-20;
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        var x = scaleBand()
            .domain(data.map(function (d) {
            return d[Object.keys(d)[0]];
        }))
            .rangeRound([margin.left, width - margin.right])
            .padding(0.35);
        /** @type {?} */
        var y = scaleLinear()
            .domain([min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        // if (this.barwidth > 0) {
        //   this.barwidth = this.barwidth;
        // }
        // else {
        //   this.barwidth = x.bandwidth();
        // }
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(axisLeft(y));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        var svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", function (d, index) {
            if (_this.color.length > 0) {
                if (_this.color[index]) {
                    return _this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        })
            .selectAll("rect")
            .data(function (d) {
            return d;
        });
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', function (d, i) {
            return d.data[i];
        })
            .attr("x", function (d) {
            return x(+d.data[Object.keys(d.data)[0]]);
        })
            .attr("y", function (d, index) {
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", function (d, index) {
            return y(d[0]) - y(d[1]);
        })
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.setBarClickText(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
                // +  margin.left;
            })
                .attr("y", function (d, index) {
                return y(d[1]) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
            });
        }
        var e_2, _d;
    };
    /**
     * @param {?} serie
     * @return {?}
     */
    BarstackComponent.prototype.stackMin = /**
     * @param {?} serie
     * @return {?}
     */
    function (serie) {
        return min(serie, function (d) { return d[0]; });
    };
    // stackMax(serie) {
    //   return d3.max(serie, function (d) { return d[1]; });
    // }
    // stackMax(serie) {
    //   return d3.max(serie, function (d) { return d[1]; });
    // }
    /**
     * @return {?}
     */
    BarstackComponent.prototype.resize = 
    // stackMax(serie) {
    //   return d3.max(serie, function (d) { return d[1]; });
    // }
    /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotChart();
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    BarstackComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    function (svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BarstackComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach(function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        try {
            for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    //  let object = { 'label': key, 'value': value , 'legend': d.data[Object.keys(d.data)[0]]};
                    /** @type {?} */
                    var object = {};
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                    return (this.toolTipForBar(object));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _d;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setBarClickText = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        // let object = {};
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.chartClick(object);
        var e_4, _d;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BarstackComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_5, _a;
    };
    BarstackComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-barstack',
                    template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId  (window:resize)=\"resize()\">\n  <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>            \n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n              <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                  [data]=\"legends\" style=\"height:100%;\">\n              </amexio-d3-legend>\n      </td>\n  \n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    BarstackComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    BarstackComponent.propDecorators = {
        data1: [{ type: Input, args: ['data',] }],
        barwidth: [{ type: Input }],
        labelflag: [{ type: Input, args: ['label',] }],
        title: [{ type: Input }],
        legend: [{ type: Input }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        color: [{ type: Input }],
        svgwidth: [{ type: Input, args: ['width',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        onLegendClick: [{ type: Output }]
    };
    return BarstackComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var GroupbarComponent = /** @class */ (function (_super) {
    __extends(GroupbarComponent, _super);
    function GroupbarComponent(myservice, device) {
        var _this = _super.call(this, 'multibar') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.legend = true;
        _this.barwidth = 0;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.onLegendClick = new EventEmitter();
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.groupbarchartArray = [];
        _this.urllegendArray = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var res_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    res_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(res_1);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    GroupbarComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.plotGroupBarChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var colors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        var x1 = scaleBand().padding(0.1);
        /** @type {?} */
        var y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map(function (d) { return d.labels; });
        /** @type {?} */
        var label = this.groupbarchartArray[0].values.map(function (d) { return d.label; });
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, function (labels) { return max(labels.values, function (d) { return d.value; }); })]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(10));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        var slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", function (d) { return "translate(" + x0(d.labels) + ",0)"; });
        slice.selectAll("rect")
            .data(function (d) { return d.values; })
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", function (d) {
            return x1(d.label);
        })
            .style("fill", function (d, index) { return colors[index]; })
            .attr("y", function (d) { return y(0); })
            .attr("height", function (d) { return height - y(0); })
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.setKey(d)
            //  this.toolTipContent(d)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }).on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data(function (d) { return d.values; })
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", function (d) {
                return x1(d.label) + x1.bandwidth() / 2;
            })
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(0); })
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .text(function (d) {
                return d.value;
            });
        }
        slice.selectAll("rect")
            .attr("y", function (d) {
            return y(d.value);
        })
            .attr("height", function (d) { return height - y(d.value); });
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.groupbarClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupbarComponent.prototype.resize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotGroupBarChart();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupbarComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach(function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    };
    //2d array to json conversion
    //2d array to json conversion
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.convertToJSON = 
    //2d array to json conversion
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        var firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (var i = 1; i < this.data.length; i++) {
            /** @type {?} */
            var multiSeriesArray = [];
            /** @type {?} */
            var valueOfJ = void 0;
            for (var j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                var singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                var newLabelsValues = valueOfJ;
                /** @type {?} */
                var newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.transformto2dArray = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = [];
        result.push("years");
        this.data.forEach(function (element, i) {
            if (i == 0) {
                element.values.forEach(function (element2) {
                    result.push(element2.label);
                });
            }
        });
        this.urllegendArray.push(result);
        /** @type {?} */
        var temparray = [];
        this.data.forEach(function (element) {
            temparray = [];
            /** @type {?} */
            var values;
            /** @type {?} */
            var year = element.labels;
            temparray.push(year);
            element.values.forEach(function (element2) {
                values = element2.value;
                temparray.push(values);
            });
            _this.urllegendArray.push(temparray);
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data.forEach(function (element, i) {
            if (i == 0) {
                element.forEach(function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                });
            }
        });
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach(function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
            }
        });
        this.legends = [];
        this.keyArray.forEach(function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            /** @type {?} */
            var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
            _this.legends.push(object);
        });
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    GroupbarComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    GroupbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiseries',
                    template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize($event)\"> \n<table style=\"width: 100%;\" #chartId>\n    <tr>\n        <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n</div>\n\n\n",
                    styles: [""]
                },] },
    ];
    GroupbarComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    GroupbarComponent.propDecorators = {
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        data: [{ type: Input, args: ['data',] }],
        legend: [{ type: Input }],
        barwidth: [{ type: Input }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        onLegendClick: [{ type: Output }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return GroupbarComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var CombochartComponent = /** @class */ (function (_super) {
    __extends(CombochartComponent, _super);
    function CombochartComponent(myservice, device) {
        var _this = _super.call(this, 'combochart') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.lineColor = "black";
        _this.horizontal = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CombochartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    // this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CombochartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var lineName = this.lineInput;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 85, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height;
        console.log("offsetheight", this.offsetheight);
        if (this.device.IsDesktop() == true) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight - 20 - 90;
            height = this.offsetheight;
        }
        else {
            height = this.svgheight - margin.top - margin.bottom;
        }
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map(function (d) {
                return d[Object.keys(d)[0]];
            }));
            /** @type {?} */
            var barRange = max(this.data, function (d) {
                return d[Object.keys(d)[1]];
            });
            /** @type {?} */
            var lineRange = max(this.data, function (d) {
                return d[_this.lineInput];
            });
            /** @type {?} */
            var range = void 0;
            if (barRange > lineRange) {
                range = barRange;
            }
            else {
                range = lineRange;
            }
            y.domain([0, range]);
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(65)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("y", function (d) {
                return y(d[Object.keys(d)[1]]);
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", function (d) {
                return d.color;
            })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code start
            /** @type {?} */
            var valueline = line()
                .x(function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .y(function (d) {
                return y(d[lineName]);
            });
            /** @type {?} */
            var shift = margin.left + x.bandwidth() / 2;
            this.svg.append("path")
                .data([this.data])
                .attr("fill", "none")
                .style("stroke", this.lineColor)
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + shift + ", 20 )")
                .attr("d", valueline);
            /** @type {?} */
            var points1 = this.svg.selectAll("circle.point1")
                .data(this.data);
            points1.enter().append("circle")
                .merge(points1)
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", this.lineColor)
                .style("fill", this.lineColor)
                .attr("cx", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) {
                return y(d[lineName]);
            })
                .attr("r", function (d) { return 5; })
                .attr("transform", "translate( " + shift + ", 20 )")
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipLineData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.onComboLineClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code ends
        }
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    CombochartComponent.prototype.onBarLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        this.legendClick(obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CombochartComponent.prototype.barChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.onComboLineClick = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != "color") {
                    object[key] = value;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.comboLineClick(object);
        var e_4, _d;
        //this.chartClick(object);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipLineData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key == this.lineInput) {
                    object[key] = value;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return this.toolTipForBar(object);
        var e_5, _d;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        //  this.svgheight=this.offsetheight;
        this.plotD3Chart();
    };
    CombochartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-combochart',
                    template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    CombochartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    CombochartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        lineColor: [{ type: Input, args: ['line-color',] }],
        horizontal: [{ type: Input }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        lineInput: [{ type: Input, args: ['line-data-index',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return CombochartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var HistogramComponent = /** @class */ (function (_super) {
    __extends(HistogramComponent, _super);
    function HistogramComponent(myservice, device) {
        var _this = _super.call(this, 'histogram') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 400;
        _this.color = "blue";
        _this.labelflag = false;
        _this.labelcolor = "black";
        _this.hScale = true;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.resizeflag = false;
        _this.drillableFlag = true;
        _this.values = [];
        _this.array = [];
        _this.xaxisArray = [];
        _this.yaxisArray = [];
        _this.yaxisData = [];
        _this.histogramarray = [];
        _this.histogramdata = [];
        _this.lengtharray = [];
        _this.arrayofLength = [];
        _this.chartData = [];
        _this.finaldataarray = [];
        _this.tooltipArray = [];
        _this.index = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    HistogramComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    res = response;
                    _this.httpresponse = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.datahisto = [];
                        _this.datahisto = _this.getResponseData(res);
                        _this.transformData();
                        _this.plotXaxis();
                        _this.plotYaxis();
                        _this.tooltipData();
                        _this.dataforChart();
                        _this.transformData1(_this.finaldataarray);
                        _this.plotChart();
                    }, 0);
                });
            }
            else if (this.datahisto) {
                setTimeout(function () {
                    _this.datahisto = _this.getResponseData(_this.datahisto);
                    _this.transformData();
                    _this.plotXaxis();
                    _this.plotYaxis();
                    _this.tooltipData();
                    _this.dataforChart();
                    _this.transformData1(_this.finaldataarray);
                    _this.plotChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    HistogramComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.datahisto = _this.getResponseData(_this.httpresponse);
            _this.transformData();
            _this.plotXaxis();
            _this.plotYaxis();
            _this.tooltipData();
            _this.dataforChart();
            _this.transformData1(_this.finaldataarray);
            _this.plotChart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    HistogramComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    HistogramComponent.prototype.transformData1 = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach(function (element, i) {
            if (i == 0) {
                element.forEach(function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach(function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj_1);
            }
        });
        this.data = [];
        tempinnerarray.forEach(function (element) {
            _this.data.push(element);
        });
        this.legends = [];
        /** @type {?} */
        var element = this.datahisto[0];
        /** @type {?} */
        var object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var series;
        series = [];
        series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach(function (element) {
            element.forEach(function (innerelement) {
                /** @type {?} */
                var singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            });
            i++;
        });
        /** @type {?} */
        var chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var barWidth = (width / this.chartData.length);
        x = scalePoint()
            .domain(this.xaxisArray, function (d) { return d; })
            .rangeRound([0, width]);
        y = scaleLinear().rangeRound([height, 0]);
        y.domain([0, max(this.arrayofLength)]);
        /** @type {?} */
        var z = scaleOrdinal(schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        var horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        var histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data(function (d) {
            return d;
        });
        /** @type {?} */
        var histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data(function (d) {
            return d;
        });
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", function (d, index) {
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", function (d, index) {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        })
            .attr("transform", function (d, i) {
            /** @type {?} */
            var translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        })
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        }).on("mousemove", function (d) {
            /** @type {?} */
            var data = d[2];
            return tooltip.html(_this.setKey(data[0]))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }).on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            /** @type {?} */
            var clickdata = d[2];
            _this.histogramClick(clickdata[0]);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("y", function (d, i) {
                return y(d[1]);
            })
                .text(function (d) {
                /** @type {?} */
                var data;
                /** @type {?} */
                var data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            })
                .attr("transform", function (d, i) {
                /** @type {?} */
                var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            });
        }
        //  .append("label")
        // //  .attr("width", barWidth - 1)
        //  .attr("y", (d, index) => {
        //    return y(d[1]);
        //  })
        // ---------------------------------------------------------
        //   this.svg.append("g")
        //   .selectAll("g")
        //   .data( chartdata)
        //   .enter( ).append("g")
        //   // .attr("fill", this.color)
        //   // .selectAll("rect")
        //   .data((d) => {
        //     return d;
        //   })
        //   histogramBar.enter(  )
        //   .append("text")
        //   // .attr("width", barWidth - 1)
        //   .attr("y", (d, index) => {
        //     return y(d[1]);
        //   })
        //    .attr("height", (d, index) => {
        //     return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        //   })
        //   .attr("transform", function (d, i) {
        //     var translate = [barWidth * i, 0];
        //     return "translate(" + translate + ")";
        //   })
        //   .text(function(d){
        //     console.log("aksa");
        //       return "aksa";
        //   })
        //   .style("font-weight","bold")
        // .attr("text-anchor", "middle")
        // .attr("fill", (d)=>{
        //     return "black";
        // });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.histogramClick = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    HistogramComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLegendClick.emit(this.datahisto);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.transformData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.array = [];
        this.values = [];
        this.datahisto.forEach(function (element) {
            _this.values.push(element[1]);
        });
        for (var i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotXaxis = /**
     * @return {?}
     */
    function () {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        var newvalue = 0;
        /** @type {?} */
        var value = Math.ceil(max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotYaxis = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tempvalue = 0;
        /** @type {?} */
        var lengthofArray = 0;
        /** @type {?} */
        var lengthcount = 0;
        /** @type {?} */
        var templength = 0;
        /** @type {?} */
        var newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach(function (element1) {
            _this.yaxisArray = [];
            _this.array.forEach(function (element2) {
                if (tempvalue < element2 && element2 <= element1) {
                    _this.yaxisArray.push(element2);
                }
                lengthofArray = _this.yaxisArray.length;
            });
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            //this.histogramarray.push(this.yaxisArray);
            _this.lengtharray.push(lengthofArray);
        });
        /** @type {?} */
        var value = Math.ceil(templength);
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (var i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (var i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.dataforChart = /**
     * @return {?}
     */
    function () {
        this.finaldataarray = [];
        /** @type {?} */
        var initialArray = [];
        /** @type {?} */
        var temparray = [];
        initialArray.push('level');
        /** @type {?} */
        var maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        var maxlength = maxElement;
        /** @type {?} */
        var n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        var length = this.arrayofLength.length;
        /** @type {?} */
        var number = 1;
        /** @type {?} */
        var j = 0;
        this.finaldataarray.push(initialArray);
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var value = this.arrayofLength[i];
            /** @type {?} */
            var tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.tooltipData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrayofTooltip = [];
        /** @type {?} */
        var obj = { "label": "", "value": "" };
        this.datahisto.forEach(function (element) {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        });
        /** @type {?} */
        var value1 = this.xaxisArray[0];
        /** @type {?} */
        var tooltipdata = [];
        var _loop_1 = function (j) {
            tooltipdata = [];
            /** @type {?} */
            var value2 = this_1.xaxisArray[j];
            arrayofTooltip.forEach(function (element) {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    var tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            });
            this_1.tooltipArray.push(tooltipdata);
            value1 = value2;
        };
        var this_1 = this;
        for (var j = 1; j < this.xaxisArray.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.setKey = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    HistogramComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    HistogramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-histogram',
                    template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>\n",
                    styles: [".bar{background-color:#3943cf;padding:.02px}"]
                },] },
    ];
    HistogramComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    HistogramComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        datahisto: [{ type: Input, args: ['data',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return HistogramComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var ScatterchartComponent = /** @class */ (function (_super) {
    __extends(ScatterchartComponent, _super);
    function ScatterchartComponent(myservice, device) {
        var _this = _super.call(this, 'scatter') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.vScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendarray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.dataFormatted = _this.data;
                        _this.transformData(_this.dataFormatted);
                        _this.colorGeneration();
                        _this.legendCreation();
                        _this.plotScatterChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.dataFormatted = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.colorGeneration();
                    _this.legendCreation();
                    _this.plotScatterChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.dataFormatted = _this.data;
            _this.transformData(_this.data);
            _this.colorGeneration();
            _this.legendCreation();
            _this.plotScatterChart();
        }, 0);
    };
    // Method to transform data in key value pair 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.transformData = 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                });
                _this.transformeddata.push(DummyObject_1);
            }
        });
        this.data = this.transformeddata;
    };
    // Method get response data using data reader
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    ScatterchartComponent.prototype.getResponseData = 
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    // Method to plot d3 chart
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.plotScatterChart = 
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = axisBottom(x);
        /** @type {?} */
        var yAxis = axisLeft(y);
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, max(this.data, function (d) { return d[Object.keys(d)[0]]; })]);
        y.domain([0, max(this.data, function (d) { return d[Object.keys(d)[1]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                debugger;
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .attr("fill", function (d) { return d[Object.keys(d)[4]]; })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            }
        }
    };
    // Method to form tooltip data
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    ScatterchartComponent.prototype.formTooltipData = 
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    ScatterchartComponent.prototype.scatterChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                object[key] = value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    // method to create Legend
    // method to create Legend
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.legendCreation = 
    // method to create Legend
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            var element = this.dataFormatted[0];
            /** @type {?} */
            var object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach(function (element) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                _this.legends.push(legendobject);
            });
        }
    };
    // Method on Legend Click
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    ScatterchartComponent.prototype.onScatterLegendClick = 
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach(function (element) {
                if (legendevent.label == element.label) {
                    _this.legendClick(element.value);
                }
            });
        }
    };
    // Method for responsiveness
    // Method for responsiveness
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.resize = 
    // Method for responsiveness
    /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotScatterChart();
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    ScatterchartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.dataFormatted
            .map(function (e) { return e[2]; })
            .filter(function (e, i, a) { return a.indexOf(e) === i; });
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.transformeddata.forEach(function (element) {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        });
    };
    ScatterchartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-scatter',
                    template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n    <table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onScatterLegendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>",
                    styles: [""]
                },] },
    ];
    ScatterchartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    ScatterchartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return ScatterchartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MultiareaComponent = /** @class */ (function (_super) {
    __extends(MultiareaComponent, _super);
    function MultiareaComponent(myservice, device) {
        var _this = _super.call(this, "areachart") || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 350;
        _this.level = 0;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.drillabledatakey = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.togglelabel = false;
        _this.onLegendClick = new EventEmitter();
        _this.onTooltipClick = new EventEmitter();
        _this.hScale = true;
        _this.margin = {};
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.data1 = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.togglelabel = false;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.transformData(_this.data);
                        _this.initAreaChart();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(function () {
                    _this.transformData(_this.data);
                    _this.initAreaChart();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initAreaChart();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.initAreaChart = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map(function (d) { return d[Object.keys(d)[0]]; });
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            select("#" + this.componentId)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.formLegendData();
        /** @type {?} */
        var counter;
        /** @type {?} */
        var g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(axisLeft(this.y));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        var increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    };
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.PlotLineDot = /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        var _this = this;
        /** @type {?} */
        var flag = this.togglelabel;
        /** @type {?} */
        var line$$1 = line()
            .x(function (d) { return thisa.x(d[Object.keys(d)[0]]); })
            .y(function (d) { return thisa.y(d[Object.keys(d)[i]]); });
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", thisa.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line$$1)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", thisa.predefinedcolors[i])
            .attr("cx", function (d) { return thisa.x(d[Object.keys(d)[0]]); })
            .attr("cy", function (d) { return thisa.y(d[Object.keys(d)[i]]); })
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            _this.formTooltipData(d, i);
            return _this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return _this.tooltip.html(_this.formTooltipData(d, i))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return _this.tooltip.style("visibility", "hidden");
        })
            .style("opacity", 1)
            .on("click", function (d) {
            _this.onAreaTooltipClick(d, i);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        })
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            })
                .attr("y", function (d) {
                /** @type {?} */
                var key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            })
                .text(function (d) {
                return d[Object.keys(d)[i]];
            })
                .attr("transform", "translate(" + 0 + "," + 0 + ")");
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    };
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.plotAreaChart = /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        // calculate area and valueline
        // define the line
        /** @type {?} */
        var valueline = line()
            .x(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", this.predefinedColors[i])
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        var area$$1 = area()
            .x(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y0(this.height)
            .y1(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        g.append("path")
            .data([this.data])
            .attr("d", area$$1)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", this.predefinedColors[i])
            .style("opacity", 0.5);
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaTooltipClick = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.findMaxData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var tempArray = [];
        /** @type {?} */
        var largeValues = [];
        /** @type {?} */
        var maxValue;
        //logic to search 3 largest values 
        data.forEach(function (element) {
            /** @type {?} */
            var value;
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value_1 = _c[1];
                    //exempts first column of data as it is treated as x-axis
                    if (key != _this.keyArray[0]) {
                        tempArray.push(value_1);
                    }
                } //for loop end
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            value = _this.findLargestValue(tempArray);
            largeValues.push(value);
            var e_1, _d;
        });
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    };
    /**
     * @param {?} array
     * @return {?}
     */
    MultiareaComponent.prototype.findLargestValue = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var max$$1 = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max$$1) {
                max$$1 = array[i];
            } //if ends 
        } //max ends
        return max$$1;
    };
    //covert data
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.transformData = 
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        var parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.keyArray.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element;
                legendobject['color'] = _this.predefinedColors[index + 1];
                _this.legendArray.push(legendobject);
            }
        });
    };
    /**
     * @param {?} legendData
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaLegendClick = /**
     * @param {?} legendData
     * @return {?}
     */
    function (legendData) {
        var _this = this;
        /** @type {?} */
        var obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        var data = [];
        this.data.forEach(function (element) {
            try {
                for (var _a = __values(Object.entries(_this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == legendData.label) {
                        /** @type {?} */
                        var object = {};
                        object[key] = value;
                        data.push(object);
                    } //inner if ends
                } //inner forloop ends
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        }); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    MultiareaComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_3, _a;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initAreaChart();
        this.plotD3Chart();
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    MultiareaComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    MultiareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiarea',
                    template: "\n<div  *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId>\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onAreaLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    MultiareaComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    MultiareaComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }],
        onTooltipClick: [{ type: Output }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return MultiareaComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var CandlestickComponent = /** @class */ (function (_super) {
    __extends(CandlestickComponent, _super);
    function CandlestickComponent(myservice, device) {
        var _this = _super.call(this, "candlestickwaterfallchart") || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.hScale = true;
        _this.onLegendClick = new EventEmitter();
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.predefinedColor = [];
        _this.keyArray = [];
        _this.margin = {};
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    //this.data = response;
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotXYAxis();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotXYAxis();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initializeData();
            _this.plotXYAxis();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.initializeData = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotXYAxis = /**
     * @return {?}
     */
    function () {
        // set the ranges
        this.x = scaleBand().range([0, this.width]);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        var candlestickArray = this.data.map(function (d) {
            return d[Object.keys(d)[0]];
        });
        this.x.domain(candlestickArray);
        /** @type {?} */
        var max$$1 = max(this.data, function (d) { return d.end; });
        this.y.domain([0, max$$1]);
        this.svg = select("#" + this.componentId)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(axisLeft(this.y));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", function (d) { return "bar " + d.class; })
            .attr("transform", function (d) {
            return "translate(" + _this.x(d[Object.keys(d)[0]]) + ",0)";
        });
        bar.append("rect")
            .attr("y", function (d) { return _this.y(Math.max(d.start, d.end)); })
            .attr("height", function (d) { return Math.abs(_this.y(d.start) - _this.y(d.end)); })
            .attr("width", this.x.bandwidth())
            .attr("fill", function (d, i) {
            return _this.predefinedColor[i];
        })
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            _this.formTooltipData(d);
            return _this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return _this.tooltip.html(_this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return _this.tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.onCandlestickClick(d);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                return (_this.x.bandwidth()) / 2;
            })
                .attr("y", function (d, index) {
                return _this.y(Math.max(d.start, d.end)) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]];
            });
        }
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CandlestickComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.addDataKeys = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cumulative = 0;
        for (var i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CandlestickComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    CandlestickComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element, index) {
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == _this.keyArray[0]) {
                        /** @type {?} */
                        var object = {};
                        object["label"] = value;
                        object["color"] = _this.predefinedColor[index];
                        _this.legendArray.push(object);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        });
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickLegendClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        this.data.forEach(function (element) {
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (value == chartData.label) {
                        object[chartData.label] = element.value;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var e_3, _d;
        });
        this.onLegendClick.emit(object);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    };
    CandlestickComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-waterfall',
                    template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId (window:resize)=\"resize()\">\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onCandlestickLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    CandlestickComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    CandlestickComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        data: [{ type: Input }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }]
    };
    return CandlestickComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var BubbleComponent = /** @class */ (function (_super) {
    __extends(BubbleComponent, _super);
    function BubbleComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bubble') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.vScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.colors = [];
        _this.xaxisArray = [];
        _this.xarray = [];
        _this.legends = [];
        _this.legendarray = [];
        _this.legendData = [];
        _this.minxvalue = 0;
        _this.maxxvalue = 0;
        _this.bubblechartdata = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    BubbleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.data1 = _this.data;
                        _this.xaxisData();
                        _this.transformData(_this.data1);
                        _this.transformdata();
                        _this.colorGeneration();
                        _this.formLegendData();
                        _this.plotBubbleChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data1 = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.xaxisData();
                    _this.transformData(_this.data);
                    _this.transformdata();
                    _this.colorGeneration();
                    _this.formLegendData();
                    _this.plotBubbleChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.data1 = _this.data;
            _this.xaxisData();
            _this.transformData(_this.data1);
            _this.transformdata();
            _this.colorGeneration();
            _this.formLegendData();
            _this.plotBubbleChart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BubbleComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                });
                _this.transformeddata.push(DummyObject_1);
            }
        });
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.plotBubbleChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = axisBottom(x);
        /** @type {?} */
        var yAxis = axisLeft(y);
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]] })]);
        y.domain([0, max(this.data, function (d) { return d[Object.keys(d)[2]]; })]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        var rScale = scaleSqrt().rangeRound([6, 30]);
        rScale.domain([min(this.data, function (d) { return d[Object.keys(d)[4]]; }), max(this.data, function (d, i) { return d[Object.keys(d)[4]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        var node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", function (d) { return rScale(d[Object.keys(d)[4]]); })
            .attr("cursor", "pointer")
            .attr("cx", function (d) {
            return x(d[Object.keys(d)[1]]);
        })
            .attr("cy", function (d) { return y(d[Object.keys(d)[2]]); })
            .attr("fill", function (d) { return d[Object.keys(d)[5]]; })
            .attr('opacity', 0.7)
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.bubbleChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    BubbleComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    BubbleComponent.prototype.bubbleChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                object[key] = value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.resize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotBubbleChart();
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.xaxisData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach(function (element) {
            array.push(element[1]);
        });
        for (var i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        var minvalue = Math.floor(min(this.xaxisArray));
        /** @type {?} */
        var maxvalue = Math.ceil(max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.data1
            .map(function (e) { return e[3]; })
            .filter(function (e, i, a) { return a.indexOf(e) === i; });
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.colordata.forEach(function (element) {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    BubbleComponent.prototype.onBubbleLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        this.legendarray.forEach(function (element) {
            if (legendevent.label == element.label) {
                _this.legendClick(element.value);
            }
        });
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    BubbleComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.transformdata = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.bubblechartdata = [];
        /** @type {?} */
        var buubledata = [];
        this.colordata.forEach(function (element, i) {
            buubledata.push(element[Object.keys(element)[4]]);
        });
        /** @type {?} */
        var data = buubledata.sort(function (a, b) { return b - a; });
        var _loop_2 = function (j) {
            this_2.colordata.forEach(function (element) {
                if (data[j] == element[Object.keys(element)[4]])
                    _this.bubblechartdata.push(element);
            });
        };
        var this_2 = this;
        for (var j = 0; j <= data.length; j++) {
            _loop_2(j);
        }
    };
    BubbleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bubble',
                    template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize($event)\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBubbleLegendClick($event)\" [data]=\"legendData\" style=\"height:100%;\"></amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    BubbleComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    BubbleComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return BubbleComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var ViewDrillableComponent = /** @class */ (function () {
    function ViewDrillableComponent() {
    }
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        return this.getComponentData();
    };
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.getComponentData = /**
     * @return {?}
     */
    function () {
        this.chartInputArray = [];
        this.barchartinput = this.queryBarchartinput.toArray();
        this.groupbarchartinput = this.QueryGroupbarchartinput.toArray();
        this.linechartinput = this.QueryLinechartinput.toArray();
        this.donutchartinput = this.QueryDonutchartinput.toArray();
        this.piechartinput = this.QueryPiechartinput.toArray();
        this.barstackchartinput = this.QueryBarStackchartinput.toArray();
        this.combochartinput = this.QueryCombochartinput.toArray();
        this.histogramchartinput = this.QueryHistogramchartinput.toArray();
        this.scatterchartinput = this.QuerySatterchartinput.toArray();
        this.multiareachartinput = this.QueryMultiareachartinput.toArray();
        this.candlestickchartinput = this.QueryCandlestickchartinput.toArray();
        this.bubblechartinput = this.QueryBubblechartinput.toArray();
        this.chartInputArray = this.chartInputArray.concat(this.barchartinput, this.groupbarchartinput, this.linechartinput, this.donutchartinput, this.piechartinput, this.barstackchartinput, this.combochartinput, this.histogramchartinput, this.scatterchartinput, this.multiareachartinput, this.candlestickchartinput, this.bubblechartinput);
        return this.chartInputArray;
    };
    ViewDrillableComponent.propDecorators = {
        queryBarchartinput: [{ type: ContentChildren, args: [AmexioD3BarChartComponent, { descendants: true },] }],
        QueryGroupbarchartinput: [{ type: ContentChildren, args: [GroupbarComponent, { descendants: true },] }],
        QueryLinechartinput: [{ type: ContentChildren, args: [AmexioD3LineComponent, { descendants: true },] }],
        QueryPiechartinput: [{ type: ContentChildren, args: [AmexioD3PieChartComponent, { descendants: true },] }],
        QueryDonutchartinput: [{ type: ContentChildren, args: [AmexioD3DounutChartComponent, { descendants: true },] }],
        QueryBarStackchartinput: [{ type: ContentChildren, args: [BarstackComponent, { descendants: true },] }],
        QueryCombochartinput: [{ type: ContentChildren, args: [CombochartComponent, { descendants: true },] }],
        QueryHistogramchartinput: [{ type: ContentChildren, args: [HistogramComponent, { descendants: true },] }],
        QuerySatterchartinput: [{ type: ContentChildren, args: [ScatterchartComponent, { descendants: true },] }],
        QueryMultiareachartinput: [{ type: ContentChildren, args: [MultiareaComponent, { descendants: true },] }],
        QueryCandlestickchartinput: [{ type: ContentChildren, args: [CandlestickComponent, { descendants: true },] }],
        QueryBubblechartinput: [{ type: ContentChildren, args: [BubbleComponent, { descendants: true },] }]
    };
    return ViewDrillableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var DrillableComponent = /** @class */ (function (_super) {
    __extends(DrillableComponent, _super);
    function DrillableComponent() {
        var _this = _super.call(this) || this;
        _this.mouseLocation = { left: 0, top: 0 };
        _this.componentcounter = 1;
        _this.disableFlag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DrillableComponent.prototype.getData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        data.forEach(function (element) {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe(function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                });
            }
            else {
                _this.disableFlag = false;
                element.drillableEvent.subscribe(function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                });
            }
        });
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.hideUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        this.ComponentDataArray.forEach(function (element) {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        });
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.ShowUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach(function (element) {
            if (eventRef.ref.target == element.level) {
                if (_this.arrayofsameLevel.length == 1) {
                    _this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    _this.componentcounter = element.level;
                }
                else {
                    _this.contextmenuFlag = true;
                    _this.mouseLocation.left = eventRef.event.clientX;
                    _this.mouseLocation.top = eventRef.event.clientY;
                    _this.contextStyle = _this.getContextMenuStyle();
                }
            }
        });
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.previouschartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach(function (element) {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (_this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        });
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.sameLevelChart = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach(function (element) {
            if (eventRef.ref.target == element.level) {
                _this.arrayofsameLevel = _this.arrayofsameLevel.concat(element);
            }
        });
    };
    //Method Creates style if two same targets found.
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    DrillableComponent.prototype.getContextMenuStyle = 
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DrillableComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.onContextNodeClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.contextmenuFlag = false;
    };
    DrillableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-drillable',
                    template: "\n<div > \n    <ng-container *ngIf=\"disableFlag\">\n            <button type=\"button\" class=\"button\"\n             (click)=\"previouschartClick($event)\">\n             <i class=\"fa fa-arrow-left\"></i> \n             \n            </button>\n</ng-container>\n\n<ng-content></ng-content>\n\n</div>\n\n<span [ngStyle]=\"contextStyle\" >\n  <ul *ngIf=\"contextmenuFlag\" class=\"close-thik\" class=\"context-menu-list\"  >\n    <span (click)=\"onCloseClick()\" class=\"close\"><i class=\"fa fa-close\"></i></span>\n  <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" \n  *ngFor=\"let itemConfig of arrayofsameLevel\">\n  <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\"></em>\n  <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.title}}\n  </span>\n  </li>\n  </ul>\n  </span>\n  ",
                    styles: [".button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:\"\";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}"]
                },] },
    ];
    DrillableComponent.ctorParameters = function () { return []; };
    return DrillableComponent;
}(ViewDrillableComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var D3_COMPONENTS = [
    AmexioD3Legend,
    AmexioD3DounutChartComponent,
    AmexioD3BarChartComponent,
    AmexioD3PieChartComponent,
    AmexioD3LineComponent,
    BarstackComponent,
    GroupbarComponent,
    CombochartComponent,
    DrillableComponent,
    HistogramComponent,
    MultiareaComponent,
    ScatterchartComponent,
    CandlestickComponent,
    BubbleComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var AmexioChartD3Module = /** @class */ (function () {
    function AmexioChartD3Module() {
    }
    AmexioChartD3Module.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule,
                        CommonModule
                    ],
                    declarations: D3_COMPONENTS,
                    providers: [DeviceQueryService],
                    exports: D3_COMPONENTS
                },] },
    ];
    return AmexioChartD3Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { AmexioChartD3Module, AmexioD3DounutChartComponent, AmexioD3PieChartComponent, AmexioD3BarChartComponent, AmexioD3LineComponent, BarstackComponent, GroupbarComponent, D3_COMPONENTS as ɵa, AmexioD3BaseChartComponent as ɵc, ViewDrillableComponent as ɵi, BubbleComponent as ɵn, CandlestickComponent as ɵm, CombochartComponent as ɵg, DrillableComponent as ɵh, HistogramComponent as ɵj, AmexioD3Legend as ɵb, AmexioD3BaseLineComponent as ɵf, MultiareaComponent as ɵl, ScatterchartComponent as ɵk, CommanDataService as ɵd, DeviceQueryService as ɵe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,