import { Input, Output, EventEmitter, Injectable, Component, ViewChild, ChangeDetectorRef, NgModule, ContentChildren, defineInjectable, inject, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as d3 from 'd3';
import { scaleBand, scaleLinear, max, select, axisBottom, axisLeft, event as event$1, line, stack, stackOffsetDiverging, scalePoint, scaleOrdinal, schemeCategory10, area, scaleSqrt, min, arc, pie } from 'd3';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3BaseChartComponent {
    /**
     * @param {?} charttype
     */
    constructor(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @return {?}
     */
    initializeData() {
        this.data.forEach(element => {
            element.color = this.getColor(element);
        });
    }
    /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    getMultipleDrillbleKeyData(data, drillablekeys) {
        /** @type {?} */
        let nodeObject = {};
        if (data) {
            for (let index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                let element = drillablekeys[index];
                for (let [key, value] of Object.entries(data)) {
                    if (key == element) {
                        nodeObject[key] = value;
                    }
                }
            }
            return nodeObject;
        }
    }
    /**
     * @return {?}
     */
    generateId() {
        /** @type {?} */
        let id = "";
        for (let i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    getColor(object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            const color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    comboLineClick(node) {
        this.onLineClick.emit(node);
    }
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    fordrillableClick(ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    }
    /**
     * @param {?} d3
     * @return {?}
     */
    toolTip(d3$$1) {
        return d3$$1.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("visibility", "hidden");
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    toolTipContent(tooltipdata) {
        /** @type {?} */
        let tooltiphtml = "<table>";
        for (const key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                const value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    }
    /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    toolTipWithLegendandAxis(legend, xaxis, yaxis) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    toolTipForBar(tooltipData) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        for (let [key, value] of Object.entries(tooltipData)) {
            /** @type {?} */
            let sideStyle = "float:left";
            tooltiphtml = tooltiphtml + "<div>";
            tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
            tooltiphtml = tooltiphtml + "</div>";
        }
        return tooltiphtml;
    }
}
AmexioD3BaseChartComponent.propDecorators = {
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    onLineClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    data: [{ type: Input, args: ['data',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    legend: [{ type: Input, args: ['legend',] }],
    colors: [{ type: Input, args: ['color',] }],
    height: [{ type: Input, args: ['height',] }],
    width: [{ type: Input, args: ['width',] }],
    title: [{ type: Input, args: ['title',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CommanDataService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    fetchUrlData(serviceUrl, methodType) {
        /** @type {?} */
        const requestJson = {};
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    postfetchData(serviceUrl, methodType, requestJson) {
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
}
CommanDataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
CommanDataService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ CommanDataService.ngInjectableDef = defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(inject(HttpClient)); }, token: CommanDataService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3DounutChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     */
    constructor(myservice, cdf) {
        super('DONUTCHART');
        this.myservice = myservice;
        this.cdf = cdf;
        this.pie = false;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillableFlag = true;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                        this.data = this.getResponseData(resp);
                        //this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.response = resp;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.drillableFlag = true;
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        let outerRadius = 0;
        /** @type {?} */
        let innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const arc$$1 = arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        const pie$$1 = pie()
            .value((d) => {
            return d[Object.keys(d)[1]];
            //  return d.value
        });
        this.svg = select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie$$1(this.data))
            .enter();
        /** @type {?} */
        const path = this.svg.append('path')
            .attr('d', arc$$1)
            .attr('fill', function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        })
            .attr('cursor', 'pointer')
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.DonutChartClick(d.data);
            this.fordrillableClick(this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        });
        if (this.labelflag) {
            /** @type {?} */
            const text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", function (d) {
                return "translate(" + arc$$1.centroid(d) + ")";
            })
                .attr("text-anchor", "middle")
                .text(function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            })
                .style('fill', function (d) {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            })
                .style('font-size', '12px');
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onDonutLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color' && key != 'textcolor') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
}
AmexioD3DounutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-donut',
                template: `<div *ngIf="drillableFlag" #chartId>


    <div colspan="2" style="font-size: 18px; font-weight: bold; ">
        {{title}}
    </div>
        <div style="display: flex;flex-direction: row">
            <svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 300 300" [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
            </svg>
            <div>

           <div style="display: block; padding: 1%;">
                    <amexio-d3-legend *ngIf="legend" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
          </div>
   </div>
    `
            },] },
];
AmexioD3DounutChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef }
];
AmexioD3DounutChartComponent.propDecorators = {
    pie: [{ type: Input, args: ['pie',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillData: [{ type: Input }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3PieChartComponent {
    constructor() {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.colors = [];
        this.width = "300";
        this.height = "300";
        this.title = "";
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillableFlag = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    fordrillableClick(ref) {
        this.drillableEvent.emit(ref);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        this.drillData = data;
    }
    /**
     * @return {?}
     */
    drawChart() {
        this.donutref.drillableFlag = true;
        this.donutref.drawChart();
    }
}
AmexioD3PieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-pie',
                template: `<div   *ngIf="drillableFlag">
<amexio-d3-chart-donut #id (onLegendClick)="legendClick($event)" 
                       (onChartClick)="chartClick($event)" 
                       (drillableEvent)=" fordrillableClick($event)"
                        [height]="height"
                        [width]="width"
                        [title]="title"
                        [data] = "data"
                        [pie]  = "true"
                        [color]="colors"
                        [http-url]="httpurl"
                        [http-method]="httpmethod"
                        [data-reader]="datareader"
                        [label]="labelflag"
                        [label-color]="labelcolor"
                        [level]="level"
                        [target]="target"
                        [drillable-data]="drillabledatakey"
                        [drillData]="drillData">
</amexio-d3-chart-donut>
</div>
`
            },] },
];
AmexioD3PieChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    donutref: [{ type: ViewChild, args: ['id',] }],
    legend: [{ type: Input }],
    colors: [{ type: Input, args: ['color',] }],
    width: [{ type: Input, args: ['width',] }],
    height: [{ type: Input, args: ['height',] }],
    title: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3Legend {
    constructor() {
        this.horizontal = false;
        this.onClick = new EventEmitter();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onLegendClick(node) {
        this.onClick.emit(node);
    }
}
AmexioD3Legend.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-legend',
                template: `<div style =" width: 100% ; padding-left: 20px; padding-top: 8px; ">
<table *ngIf="!horizontal" style="height: 100%;">
    <tr *ngFor = "let node of data" style="cursor: pointer;" (click)="onLegendClick(node)">
        <td style="height: 10px; width: 23px; padding-left: 2px;"
            [ngStyle]="{'background-color': node.color}"></td>
        <td>{{node.label}}</td>
    </tr>
</table>
</div>

<table *ngIf="horizontal" style="height: 100%;">
    <tr>
        <td *ngFor = "let node of data" 
                    (click)="onLegendClick(node)" 
                    style="cursor: pointer;">
            
            <div style=" display: inline-block; display: inline-block; padding: 2px;">
                    <div style=" width: 10px; display: inline-block; padding: 2px; " 
                    [ngStyle]="{'background-color': node.color}"></div>
                {{node.label}}
            </div>
        </td>
        
    </tr>
</table>`
            },] },
];
AmexioD3Legend.ctorParameters = () => [];
AmexioD3Legend.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    horizontal: [{ type: Input, args: ['horizontal',] }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DeviceQueryService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = function (mq) {
            if (isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        };
        this.IsTablet = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        };
        this.IsDesktop = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        };
        this.IsPortrait = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        };
        this.IsLandscape = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        };
        this.IsRetina = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        };
        this.browserWindow = () => {
            return window;
        };
    }
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    IsPhone() {
        if (isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    }
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    OnPhone(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnTablet(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnDesktop(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnPortrait(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnLandscape(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    mqlMethod(callBack, mql) {
        mql.addListener((mql1) => {
            if (mql1.matches) {
                callBack(mql);
            }
        });
    }
}
DeviceQueryService.decorators = [
    { type: Injectable },
];
DeviceQueryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3BarChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bar');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.horizontal = false;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.resizeflag = false;
        this.drillableFlag = true;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 30, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
                //    return d.label
            }));
            y.domain([0, max(this.data, (d) => {
                    return d[Object.keys(d)[1]];
                    //return d.value;
                })]);
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (d) => {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            })
                .attr("y", (d) => {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (d) => { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", (d) => {
                // return "blue";
                return d.color;
            })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            x = scaleLinear()
                .rangeRound([0, width]);
            y = scaleBand()
                .rangeRound([height, 0]).padding(0.1);
            //setting content for x and y axis
            x.domain([0, max(this.data, (d) => {
                    return parseInt(d[Object.keys(d)[1]]
                    // d.value
                    );
                })]);
            // d[Object.keys(d)[1]]
            y.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
                //return d.label;
            }));
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x).ticks(10));
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (d) => {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            })
                .attr("cursor", "pointer")
                .attr("width", (d) => {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            })
                .attr("height", y.bandwidth())
                .style("fill", (d) => { return d.color; })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                let yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[1]]) + yTextPadding;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            }
        } //else ends(horizontal bar logic ends)
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resize(data) {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
}
AmexioD3BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bar',
                template: `<div *ngIf="drillableFlag"  #divid (window:resize)="resize($event)" >
<table style="width: 100%;" position=" relative" #chartId >
    <tr>
        <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
    </tr>
    <tr>
        <td>
            <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId" 
          >
            </svg>
        </td>
    </tr>
    <tr>
        <td style="display: block; padding: 5px;">
            <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
            </amexio-d3-legend>
        </td>
    </tr>
</table>
</div>`
            },] },
];
AmexioD3BarChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3BarChartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    horizontal: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3BaseLineComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} deviceQueryService
     */
    constructor(deviceQueryService) {
        super('line');
        this.deviceQueryService = deviceQueryService;
        this.svgheight = 300;
        this.hScale = true;
        this.vScale = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        this.createXYAxisData();
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    createXYAxisData() {
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        const msdarray = [];
        for (let index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            const legend = this._data[0][index];
            msdarray[index] = [];
            this.legenddata.push({ 'label': legend.label, 'color': this.predefinedcolors[index + 1] });
            if (index > 0)
                this.legends.push({ 'label': legend.label, 'color': this.predefinedcolors[index] });
        }
        /** @type {?} */
        let i = 0;
        this._data.forEach(object => {
            if (i > 0) {
                /** @type {?} */
                let j = 0;
                object.forEach(a => {
                    if (j === 0) {
                        this.xaxisdata.push({ 'label': a, 'value': a });
                    }
                    else {
                        this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    msdarray[j].push(a);
                    j++;
                });
            }
            i++;
        });
        for (let index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            const element = msdarray[index];
            if (index > 0) {
                /** @type {?} */
                let md = [];
                for (let j = 0; j < element.length; j++) {
                    /** @type {?} */
                    const v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].value, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    }
    /**
     * @return {?}
     */
    initChart() {
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 40, right: 20, bottom: 30, left: 40 };
        /** @type {?} */
        const width = +this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        const g = this.svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x = scaleBand()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        const y = scaleLinear()
            .rangeRound([height, 0]);
        x.domain(this.xaxisdata.map((d) => { return d.label; }));
        y.domain([0, max(this.yaxisdata, (d) => { return d.value; })]);
        //add axis 
        if (this.deviceQueryService.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(axisBottom(x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        g.append("g")
            .attr("color", "grey")
            .call(axisLeft(y));
        return {
            g, x, y, height, width
        };
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotScale(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        let obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        let data = [];
        node.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.legend] = element.value;
            object[this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
}
AmexioD3BaseLineComponent.propDecorators = {
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    vScale: [{ type: Input, args: ['vertical-scale',] }],
    httpurl: [{ type: Input, args: ['data',] }, { type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioD3LineComponent extends AmexioD3BaseLineComponent {
    /**
     * @param {?} deviceQueryService
     * @param {?} myservice
     */
    constructor(deviceQueryService, myservice) {
        super(deviceQueryService);
        this.deviceQueryService = deviceQueryService;
        this.myservice = myservice;
        this.level = 0;
        this.labelflag = false;
        this.labelcolor = "black";
        this.drillabledatakey = [];
        this.drillableFlag = true;
        this.resizeflag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotD3Chart();
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const linechart = this.initChart();
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        for (let index = 0; index < this.multiseriesdata.length; index++) {
            this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
        }
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    plotLine(g, x, y, height, width, data, tooltip, i) {
        /** @type {?} */
        const line$$1 = line()
            .x(function (d) { return x(d.label); })
            .y(function (d) { return y(d.value); });
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", this.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line$$1);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (d) => { return x(d.label); })
            .attr("cy", (d) => { return y(d.value); })
            .attr('r', 2)
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.callTooltip(d)
            //  this.toolTipForLine(d)
            //  this.toolTipWithLegendandAxis(d.legend,d.label,d.value)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.lineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d, i) {
                return x(d.label);
            })
                .attr("y", function (d, i) {
                return y(d.value) - 10;
            })
                .text(function (d) {
                return d.value;
            });
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    lineChartClick(d) {
        /** @type {?} */
        let obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callTooltip(tooltipdata) {
        /** @type {?} */
        let obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    }
}
AmexioD3LineComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-line',
                template: `
<div *ngIf="drillableFlag" #divid (window:resize)="resize()"> 
<table style="width: 100%;" #chartId  >
        <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
        <tr>
            <td>
                <svg [attr.height]="height" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>            
            </td>
        </tr>
        <tr>
            <td style="display: block; padding: 5px;">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                        [data]="legends" style="height:100%;">
                    </amexio-d3-legend>
            </td>
        
        </tr>
</table>
</div>
    `
            },] },
];
AmexioD3LineComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: CommanDataService }
];
AmexioD3LineComponent.propDecorators = {
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class BarstackComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('barstack');
        this.myservice = myservice;
        this.device = device;
        this.maxYValue = 0;
        this.barwidth = 0;
        this.labelflag = false;
        this.title = "";
        this.legend = true;
        this.labelcolor = "black";
        this.color = [];
        this.svgwidth = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.svgheight = 300;
        this.onLegendClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    //this.data = response;
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.plotChart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(() => {
                    this.transformData(this.data1);
                    this.plotChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.plotChart();
        }, 0);
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj);
            }
        });
        this.data = [];
        tempinnerarray.forEach(element => {
            this.data.push(element);
        });
        /** @type {?} */
        let maxY = 0;
        /** @type {?} */
        let yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach((element) => {
            for (let [key, value] of Object.entries(element)) {
                this.keyArray.forEach(key1 => {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                }); //keyarray loop ends here
            } //for ends here
            yaxismaxArray.push(maxY);
            maxY = 0;
        }); // foreach ends
        // foreach ends
        /** @type {?} */
        let tempLarge = 0;
        /** @type {?} */
        let i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach((element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            if (this.color.length > 0) {
                /** @type {?} */
                let object = { 'label': element, 'color': this.color[index], 'data': legenddata.data };
                this.legends.push(object);
            }
            else {
                /** @type {?} */
                let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
                this.legends.push(object);
            }
        });
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let margin = { top: 20, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            for (let [key, value] of Object.entries(this.data[0])) {
                keysetarray.push(key);
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        let series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        let width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        let height;
        // height=this.chartId.nativeElement.offsetHeight-20;
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        let x = scaleBand()
            .domain(data.map((d) => {
            return d[Object.keys(d)[0]];
        }))
            .rangeRound([margin.left, width - margin.right])
            .padding(0.35);
        /** @type {?} */
        let y = scaleLinear()
            .domain([min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        // if (this.barwidth > 0) {
        //   this.barwidth = this.barwidth;
        // }
        // else {
        //   this.barwidth = x.bandwidth();
        // }
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(axisLeft(y));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        let svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", (d, index) => {
            if (this.color.length > 0) {
                if (this.color[index]) {
                    return this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        })
            .selectAll("rect")
            .data((d) => {
            return d;
        });
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', (d, i) => {
            return d.data[i];
        })
            .attr("x", (d) => {
            return x(+d.data[Object.keys(d.data)[0]]);
        })
            .attr("y", (d, index) => {
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", (d, index) => {
            return y(d[0]) - y(d[1]);
        })
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.setBarClickText(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", (d) => {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
                // +  margin.left;
            })
                .attr("y", (d, index) => {
                return y(d[1]) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
            });
        }
    }
    /**
     * @param {?} serie
     * @return {?}
     */
    stackMin(serie) {
        return min(serie, function (d) { return d[0]; });
    }
    // stackMax(serie) {
    //   return d3.max(serie, function (d) { return d[1]; });
    // }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotChart();
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    plotLine(svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                //  let object = { 'label': key, 'value': value , 'legend': d.data[Object.keys(d.data)[0]]};
                /** @type {?} */
                let object = {};
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                return (this.toolTipForBar(object));
            }
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setBarClickText(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        // let object = {};
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
}
BarstackComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-barstack',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId  (window:resize)="resize()">
  <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>            
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
              <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                  [data]="legends" style="height:100%;">
              </amexio-d3-legend>
      </td>
  
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
BarstackComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
BarstackComponent.propDecorators = {
    data1: [{ type: Input, args: ['data',] }],
    barwidth: [{ type: Input }],
    labelflag: [{ type: Input, args: ['label',] }],
    title: [{ type: Input }],
    legend: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    color: [{ type: Input }],
    svgwidth: [{ type: Input, args: ['width',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    onLegendClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class GroupbarComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('multibar');
        this.myservice = myservice;
        this.device = device;
        this.legend = true;
        this.barwidth = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.onLegendClick = new EventEmitter();
        this.svgwidth = 300;
        this.svgheight = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.groupbarchartArray = [];
        this.urllegendArray = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let res;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    res = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(res);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    }
    /**
     * @return {?}
     */
    plotGroupBarChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let colors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        const x1 = scaleBand().padding(0.1);
        /** @type {?} */
        const y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map(function (d) { return d.labels; });
        /** @type {?} */
        let label = this.groupbarchartArray[0].values.map(function (d) { return d.label; });
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, function (labels) { return max(labels.values, function (d) { return d.value; }); })]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(10));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        let slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", function (d) { return "translate(" + x0(d.labels) + ",0)"; });
        slice.selectAll("rect")
            .data(function (d) { return d.values; })
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", function (d) {
            return x1(d.label);
        })
            .style("fill", function (d, index) { return colors[index]; })
            .attr("y", function (d) { return y(0); })
            .attr("height", function (d) { return height - y(0); })
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.setKey(d)
            //  this.toolTipContent(d)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }).on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data(function (d) { return d.values; })
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", function (d) {
                return x1(d.label) + x1.bandwidth() / 2;
            })
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(0); })
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .text(function (d) {
                return d.value;
            });
        }
        slice.selectAll("rect")
            .attr("y", function (d) {
            return y(d.value);
        })
            .attr("height", function (d) { return height - y(d.value); });
    }
    /**
     * @param {?} d
     * @return {?}
     */
    groupbarClick(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    resize(event) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotGroupBarChart();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
    //2d array to json conversion
    /**
     * @return {?}
     */
    convertToJSON() {
        /** @type {?} */
        let groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        let firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (let i = 1; i < this.data.length; i++) {
            /** @type {?} */
            let multiSeriesArray = [];
            /** @type {?} */
            let valueOfJ;
            for (let j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                let singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                let newLabelsValues = valueOfJ;
                /** @type {?} */
                let newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    }
    /**
     * @return {?}
     */
    transformto2dArray() {
        /** @type {?} */
        let result = [];
        result.push("years");
        this.data.forEach((element, i) => {
            if (i == 0) {
                element.values.forEach(element2 => {
                    result.push(element2.label);
                });
            }
        });
        this.urllegendArray.push(result);
        /** @type {?} */
        let temparray = [];
        this.data.forEach(element => {
            temparray = [];
            /** @type {?} */
            let values;
            /** @type {?} */
            let year = element.labels;
            temparray.push(year);
            element.values.forEach(element2 => {
                values = element2.value;
                temparray.push(values);
            });
            this.urllegendArray.push(temparray);
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                });
            }
        });
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
            }
        });
        this.legends = [];
        this.keyArray.forEach((element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            /** @type {?} */
            let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
            this.legends.push(object);
        });
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
GroupbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiseries',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize($event)"> 
<table style="width: 100%;" #chartId>
    <tr>
        <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
    </tr>
    <tr>
        <td>
            <svg [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
            </svg>
        </td>
    </tr>
    <tr>
        <td style="display: block; padding: 5px;">
            <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
        </td>
    </tr>
</table>
</div>


`,
                styles: [``]
            },] },
];
GroupbarComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
GroupbarComponent.propDecorators = {
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    data: [{ type: Input, args: ['data',] }],
    legend: [{ type: Input }],
    barwidth: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    onLegendClick: [{ type: Output }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CombochartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('combochart');
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.lineColor = "black";
        this.horizontal = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                    this.httpresponse = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    // this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        let lineName = this.lineInput;
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        this.svg = select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 85, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        let height;
        console.log("offsetheight", this.offsetheight);
        if (this.device.IsDesktop() == true) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight - 20 - 90;
            height = this.offsetheight;
        }
        else {
            height = this.svgheight - margin.top - margin.bottom;
        }
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
            }));
            /** @type {?} */
            let barRange = max(this.data, (d) => {
                return d[Object.keys(d)[1]];
            });
            /** @type {?} */
            let lineRange = max(this.data, (d) => {
                return d[this.lineInput];
            });
            /** @type {?} */
            let range;
            if (barRange > lineRange) {
                range = barRange;
            }
            else {
                range = lineRange;
            }
            y.domain([0, range]);
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(65)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (d) => {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("y", (d) => {
                return y(d[Object.keys(d)[1]]);
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (d) => { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", (d) => {
                return d.color;
            })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code start
            /** @type {?} */
            let valueline = line()
                .x(function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .y(function (d) {
                return y(d[lineName]);
            });
            /** @type {?} */
            let shift = margin.left + x.bandwidth() / 2;
            this.svg.append("path")
                .data([this.data])
                .attr("fill", "none")
                .style("stroke", this.lineColor)
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + shift + ", 20 )")
                .attr("d", valueline);
            /** @type {?} */
            let points1 = this.svg.selectAll("circle.point1")
                .data(this.data);
            points1.enter().append("circle")
                .merge(points1)
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", this.lineColor)
                .style("fill", this.lineColor)
                .attr("cx", (d) => {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", (d) => {
                return y(d[lineName]);
            })
                .attr("r", (d) => { return 5; })
                .attr("transform", "translate( " + shift + ", 20 )")
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipLineData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.onComboLineClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code ends
        }
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onComboLineClick(data) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            if (key != "color") {
                object[key] = value;
            }
        }
        this.comboLineClick(object);
        //this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    formTooltipLineData(data) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            if (key == this.lineInput) {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        //  this.svgheight=this.offsetheight;
        this.plotD3Chart();
    }
}
CombochartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-combochart',
                template: `<div *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId >
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
CombochartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
CombochartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    lineColor: [{ type: Input, args: ['line-color',] }],
    horizontal: [{ type: Input }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    lineInput: [{ type: Input, args: ['line-data-index',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class HistogramComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('histogram');
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 400;
        this.color = "blue";
        this.labelflag = false;
        this.labelcolor = "black";
        this.hScale = true;
        this.level = 0;
        this.drillabledatakey = [];
        this.resizeflag = false;
        this.drillableFlag = true;
        this.values = [];
        this.array = [];
        this.xaxisArray = [];
        this.yaxisArray = [];
        this.yaxisData = [];
        this.histogramarray = [];
        this.histogramdata = [];
        this.lengtharray = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.finaldataarray = [];
        this.tooltipArray = [];
        this.index = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    res = response;
                    this.httpresponse = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.datahisto = [];
                        this.datahisto = this.getResponseData(res);
                        this.transformData();
                        this.plotXaxis();
                        this.plotYaxis();
                        this.tooltipData();
                        this.dataforChart();
                        this.transformData1(this.finaldataarray);
                        this.plotChart();
                    }, 0);
                });
            }
            else if (this.datahisto) {
                setTimeout(() => {
                    this.datahisto = this.getResponseData(this.datahisto);
                    this.transformData();
                    this.plotXaxis();
                    this.plotYaxis();
                    this.tooltipData();
                    this.dataforChart();
                    this.transformData1(this.finaldataarray);
                    this.plotChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.datahisto = this.getResponseData(this.httpresponse);
            this.transformData();
            this.plotXaxis();
            this.plotYaxis();
            this.tooltipData();
            this.dataforChart();
            this.transformData1(this.finaldataarray);
            this.plotChart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData1(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj);
            }
        });
        this.data = [];
        tempinnerarray.forEach(element => {
            this.data.push(element);
        });
        this.legends = [];
        /** @type {?} */
        let element = this.datahisto[0];
        /** @type {?} */
        let object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let series;
        series = [];
        series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach(element => {
            element.forEach(innerelement => {
                /** @type {?} */
                let singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            });
            i++;
        });
        /** @type {?} */
        let chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        let barWidth = (width / this.chartData.length);
        x = scalePoint()
            .domain(this.xaxisArray, function (d) { return d; })
            .rangeRound([0, width]);
        y = scaleLinear().rangeRound([height, 0]);
        y.domain([0, max(this.arrayofLength)]);
        /** @type {?} */
        let z = scaleOrdinal(schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        let horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        let histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data((d) => {
            return d;
        });
        /** @type {?} */
        let histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data((d) => {
            return d;
        });
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", (d, index) => {
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", (d, index) => {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        })
            .attr("transform", function (d, i) {
            /** @type {?} */
            var translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        })
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        }).on("mousemove", (d) => {
            /** @type {?} */
            let data = d[2];
            return tooltip.html(this.setKey(data[0]))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }).on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            /** @type {?} */
            let clickdata = d[2];
            this.histogramClick(clickdata[0]);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("y", function (d, i) {
                return y(d[1]);
            })
                .text(function (d) {
                /** @type {?} */
                let data;
                /** @type {?} */
                let data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            })
                .attr("transform", function (d, i) {
                /** @type {?} */
                var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            });
        }
        //  .append("label")
        // //  .attr("width", barWidth - 1)
        //  .attr("y", (d, index) => {
        //    return y(d[1]);
        //  })
        // ---------------------------------------------------------
        //   this.svg.append("g")
        //   .selectAll("g")
        //   .data( chartdata)
        //   .enter( ).append("g")
        //   // .attr("fill", this.color)
        //   // .selectAll("rect")
        //   .data((d) => {
        //     return d;
        //   })
        //   histogramBar.enter(  )
        //   .append("text")
        //   // .attr("width", barWidth - 1)
        //   .attr("y", (d, index) => {
        //     return y(d[1]);
        //   })
        //    .attr("height", (d, index) => {
        //     return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        //   })
        //   .attr("transform", function (d, i) {
        //     var translate = [barWidth * i, 0];
        //     return "translate(" + translate + ")";
        //   })
        //   .text(function(d){
        //     console.log("aksa");
        //       return "aksa";
        //   })
        //   .style("font-weight","bold")
        // .attr("text-anchor", "middle")
        // .attr("fill", (d)=>{
        //     return "black";
        // });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    histogramClick(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        this.onLegendClick.emit(this.datahisto);
    }
    /**
     * @return {?}
     */
    transformData() {
        this.array = [];
        this.values = [];
        this.datahisto.forEach(element => {
            this.values.push(element[1]);
        });
        for (let i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    }
    /**
     * @return {?}
     */
    plotXaxis() {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        let newvalue = 0;
        /** @type {?} */
        let value = Math.ceil(max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    }
    /**
     * @return {?}
     */
    plotYaxis() {
        /** @type {?} */
        let tempvalue = 0;
        /** @type {?} */
        let lengthofArray = 0;
        /** @type {?} */
        let lengthcount = 0;
        /** @type {?} */
        let templength = 0;
        /** @type {?} */
        let newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach(element1 => {
            this.yaxisArray = [];
            this.array.forEach(element2 => {
                if (tempvalue < element2 && element2 <= element1) {
                    this.yaxisArray.push(element2);
                }
                lengthofArray = this.yaxisArray.length;
            });
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            //this.histogramarray.push(this.yaxisArray);
            this.lengtharray.push(lengthofArray);
        });
        /** @type {?} */
        let value = Math.ceil(templength);
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (let i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (let i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    }
    /**
     * @return {?}
     */
    dataforChart() {
        this.finaldataarray = [] = [];
        /** @type {?} */
        let initialArray = [];
        /** @type {?} */
        let temparray = [];
        initialArray.push('level');
        /** @type {?} */
        let maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        let maxlength = maxElement;
        /** @type {?} */
        let n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        let length = this.arrayofLength.length;
        /** @type {?} */
        let number = 1;
        /** @type {?} */
        let j = 0;
        this.finaldataarray.push(initialArray);
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let value = this.arrayofLength[i];
            /** @type {?} */
            let tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    }
    /**
     * @return {?}
     */
    tooltipData() {
        /** @type {?} */
        let arrayofTooltip = [];
        /** @type {?} */
        let obj = { "label": "", "value": "" };
        this.datahisto.forEach(element => {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        });
        /** @type {?} */
        let value1 = this.xaxisArray[0];
        /** @type {?} */
        let tooltipdata = [];
        for (let j = 1; j < this.xaxisArray.length; j++) {
            tooltipdata = [];
            /** @type {?} */
            let value2 = this.xaxisArray[j];
            arrayofTooltip.forEach(element => {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    let tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            });
            this.tooltipArray.push(tooltipdata);
            value1 = value2;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setKey(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
HistogramComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-histogram',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize()" >
<table style="width: 100%;" #chartId >
        <tr>
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr>
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
</div>
`,
                styles: [`.bar{background-color:#3943cf;padding:.02px}`]
            },] },
];
HistogramComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
HistogramComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    datahisto: [{ type: Input, args: ['data',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ScatterchartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('scatter');
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.color = "blue";
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.vScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendarray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                    this.httpresponse = resp;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.dataFormatted = this.data;
                        this.transformData(this.dataFormatted);
                        this.colorGeneration();
                        this.legendCreation();
                        this.plotScatterChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.dataFormatted = this.data;
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.colorGeneration();
                    this.legendCreation();
                    this.plotScatterChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.dataFormatted = this.data;
            this.transformData(this.data);
            this.colorGeneration();
            this.legendCreation();
            this.plotScatterChart();
        }, 0);
    }
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                });
                this.transformeddata.push(DummyObject);
            }
        });
        this.data = this.transformeddata;
    }
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    plotScatterChart() {
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = axisBottom(x);
        /** @type {?} */
        let yAxis = axisLeft(y);
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, max(this.data, function (d) { return d[Object.keys(d)[0]]; })]);
        y.domain([0, max(this.data, function (d) { return d[Object.keys(d)[1]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                debugger;
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .attr("fill", function (d) { return d[Object.keys(d)[4]]; })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            }
        }
    }
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    scatterChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            object[key] = value;
        }
        this.chartClick(object);
    }
    // method to create Legend
    /**
     * @return {?}
     */
    legendCreation() {
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            let element = this.dataFormatted[0];
            /** @type {?} */
            let object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach(element => {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                this.legends.push(legendobject);
            });
        }
    }
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onScatterLegendClick(legendevent) {
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach(element => {
                if (legendevent.label == element.label) {
                    this.legendClick(element.value);
                }
            });
        }
    }
    // Method for responsiveness
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotScatterChart();
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.dataFormatted
            .map(e => e[2])
            .filter((e, i, a) => a.indexOf(e) === i);
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.transformeddata.forEach(element => {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        });
    }
}
ScatterchartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-scatter',
                template: `<div *ngIf="drillableFlag" #divid (window:resize)="resize()">
    <table style="width: 100%;" #chartId >
        <tr>
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr>
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onScatterLegendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
</div>`,
                styles: [``]
            },] },
];
ScatterchartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
ScatterchartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    vScale: [{ type: Input, args: ['vertical-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MultiareaComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super("areachart");
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 350;
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillabledatakey = [];
        this.drillableFlag = true;
        this.resizeflag = false;
        this.togglelabel = false;
        this.onLegendClick = new EventEmitter();
        this.onTooltipClick = new EventEmitter();
        this.hScale = true;
        this.margin = {};
        this.keyArray = [];
        this.transformeddata = [];
        this.data1 = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.togglelabel = false;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.initAreaChart();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(() => {
                    this.transformData(this.data);
                    this.initAreaChart();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initAreaChart();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    initAreaChart() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map((d) => { return d[Object.keys(d)[0]]; });
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            select("#" + this.componentId)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        /** @type {?} */
        let counter;
        /** @type {?} */
        let g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(axisLeft(this.y));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        let increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    }
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    PlotLineDot(g, i, thisa) {
        /** @type {?} */
        let flag = this.togglelabel;
        /** @type {?} */
        const line$$1 = line()
            .x((d) => { return thisa.x(d[Object.keys(d)[0]]); })
            .y((d) => { return thisa.y(d[Object.keys(d)[i]]); });
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", thisa.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line$$1)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", thisa.predefinedcolors[i])
            .attr("cx", (d) => { return thisa.x(d[Object.keys(d)[0]]); })
            .attr("cy", (d) => { return thisa.y(d[Object.keys(d)[i]]); })
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            this.formTooltipData(d, i);
            return this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return this.tooltip.html(this.formTooltipData(d, i))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return this.tooltip.style("visibility", "hidden");
        })
            .style("opacity", 1)
            .on("click", (d) => {
            this.onAreaTooltipClick(d, i);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        })
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            })
                .attr("y", function (d) {
                /** @type {?} */
                let key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            })
                .text(function (d) {
                return d[Object.keys(d)[i]];
            })
                .attr("transform", "translate(" + 0 + "," + 0 + ")");
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    }
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    plotAreaChart(g, i, thisa) {
        // calculate area and valueline
        // define the line
        /** @type {?} */
        const valueline = line()
            .x((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", this.predefinedColors[i])
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        let area$$1 = area()
            .x((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y0(this.height)
            .y1((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        g.append("path")
            .data([this.data])
            .attr("d", area$$1)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", this.predefinedColors[i])
            .style("opacity", 0.5);
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    onAreaTooltipClick(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    findMaxData(data) {
        /** @type {?} */
        let tempArray = [];
        /** @type {?} */
        let largeValues = [];
        /** @type {?} */
        let maxValue;
        //logic to search 3 largest values 
        data.forEach(element => {
            /** @type {?} */
            let value;
            for (let [key, value] of Object.entries(element)) {
                //exempts first column of data as it is treated as x-axis
                if (key != this.keyArray[0]) {
                    tempArray.push(value);
                }
            } //for loop end
            value = this.findLargestValue(tempArray);
            largeValues.push(value);
        });
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    }
    /**
     * @param {?} array
     * @return {?}
     */
    findLargestValue(array) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let max$$1 = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max$$1) {
                max$$1 = array[i];
            } //if ends 
        } //max ends
        return max$$1;
    }
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        let parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.keyArray.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element;
                legendobject['color'] = this.predefinedColors[index + 1];
                this.legendArray.push(legendobject);
            }
        });
    }
    /**
     * @param {?} legendData
     * @return {?}
     */
    onAreaLegendClick(legendData) {
        /** @type {?} */
        let obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        let data = [];
        this.data.forEach(element => {
            for (let [key, value] of Object.entries(this.data[0])) {
                if (key == legendData.label) {
                    /** @type {?} */
                    let object = {};
                    object[key] = value;
                    data.push(object);
                } //inner if ends
            } //inner forloop ends
        }); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initAreaChart();
        this.plotD3Chart();
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    formTooltipData(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
MultiareaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiarea',
                template: `
<div  *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId>
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onAreaLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
MultiareaComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
MultiareaComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }],
    onTooltipClick: [{ type: Output }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CandlestickComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super("candlestickwaterfallchart");
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.labelcolor = "black";
        this.labelflag = false;
        this.hScale = true;
        this.onLegendClick = new EventEmitter();
        this.drillableFlag = true;
        this.resizeflag = false;
        this.predefinedColor = [];
        this.keyArray = [];
        this.margin = {};
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    //this.data = response;
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotXYAxis();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotXYAxis();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initializeData();
            this.plotXYAxis();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    initializeData() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    }
    /**
     * @return {?}
     */
    plotXYAxis() {
        // set the ranges
        this.x = scaleBand().range([0, this.width]);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        let candlestickArray = this.data.map((d) => {
            return d[Object.keys(d)[0]];
        });
        this.x.domain(candlestickArray);
        /** @type {?} */
        let max$$1 = max(this.data, (d) => { return d.end; });
        this.y.domain([0, max$$1]);
        this.svg = select("#" + this.componentId)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(axisLeft(this.y));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        /** @type {?} */
        let bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", (d) => { return "bar " + d.class; })
            .attr("transform", (d) => {
            return "translate(" + this.x(d[Object.keys(d)[0]]) + ",0)";
        });
        bar.append("rect")
            .attr("y", (d) => { return this.y(Math.max(d.start, d.end)); })
            .attr("height", (d) => { return Math.abs(this.y(d.start) - this.y(d.end)); })
            .attr("width", this.x.bandwidth())
            .attr("fill", (d, i) => {
            return this.predefinedColor[i];
        })
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            this.formTooltipData(d);
            return this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return this.tooltip.html(this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return this.tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.onCandlestickClick(d);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", (d) => {
                return (this.x.bandwidth()) / 2;
            })
                .attr("y", (d, index) => {
                return this.y(Math.max(d.start, d.end)) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]];
            });
        }
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    }
    /**
     * @return {?}
     */
    addDataKeys() {
        /** @type {?} */
        let cumulative = 0;
        for (let i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickClick(chartData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((element, index) => {
            for (let [key, value] of Object.entries(element)) {
                if (key == this.keyArray[0]) {
                    /** @type {?} */
                    let object = {};
                    object["label"] = value;
                    object["color"] = this.predefinedColor[index];
                    this.legendArray.push(object);
                }
            }
        });
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickLegendClick(chartData) {
        /** @type {?} */
        let object = {};
        this.data.forEach(element => {
            for (let [key, value] of Object.entries(element)) {
                if (value == chartData.label) {
                    object[chartData.label] = element.value;
                }
            }
        });
        this.onLegendClick.emit(object);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    }
}
CandlestickComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-waterfall',
                template: `
<div   *ngIf="drillableFlag" #divid (window:resize)="resize()" >
<table style="width: 100%;" #chartId (window:resize)="resize()">
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onCandlestickLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
CandlestickComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
CandlestickComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    data: [{ type: Input }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class BubbleComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bubble');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.color = "blue";
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.vScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.colors = [];
        this.xaxisArray = [];
        this.xarray = [];
        this.legends = [];
        this.legendarray = [];
        this.legendData = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.bubblechartdata = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                    this.httpresponse = resp;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.data1 = this.data;
                        this.xaxisData();
                        this.transformData(this.data1);
                        this.transformdata();
                        this.colorGeneration();
                        this.formLegendData();
                        this.plotBubbleChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data1 = this.data;
                    this.data = this.getResponseData(this.data);
                    this.xaxisData();
                    this.transformData(this.data);
                    this.transformdata();
                    this.colorGeneration();
                    this.formLegendData();
                    this.plotBubbleChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.data1 = this.data;
            this.xaxisData();
            this.transformData(this.data1);
            this.transformdata();
            this.colorGeneration();
            this.formLegendData();
            this.plotBubbleChart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                });
                this.transformeddata.push(DummyObject);
            }
        });
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    }
    /**
     * @return {?}
     */
    plotBubbleChart() {
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = axisBottom(x);
        /** @type {?} */
        let yAxis = axisLeft(y);
        this.svg = select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]] })]);
        y.domain([0, max(this.data, function (d) { return d[Object.keys(d)[2]]; })]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        var rScale = scaleSqrt().rangeRound([6, 30]);
        rScale.domain([min(this.data, function (d) { return d[Object.keys(d)[4]]; }), max(this.data, function (d, i) { return d[Object.keys(d)[4]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        let node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", function (d) { return rScale(d[Object.keys(d)[4]]); })
            .attr("cursor", "pointer")
            .attr("cx", function (d) {
            return x(d[Object.keys(d)[1]]);
        })
            .attr("cy", function (d) { return y(d[Object.keys(d)[2]]); })
            .attr("fill", function (d) { return d[Object.keys(d)[5]]; })
            .attr('opacity', 0.7)
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.bubbleChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        });
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    bubbleChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            object[key] = value;
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resize(data) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotBubbleChart();
    }
    /**
     * @return {?}
     */
    xaxisData() {
        /** @type {?} */
        let array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach(element => {
            array.push(element[1]);
        });
        for (let i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        let minvalue = Math.floor(min(this.xaxisArray));
        /** @type {?} */
        let maxvalue = Math.ceil(max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.data1
            .map(e => e[3])
            .filter((e, i, a) => a.indexOf(e) === i);
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.colordata.forEach(element => {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBubbleLegendClick(legendevent) {
        this.legendarray.forEach(element => {
            if (legendevent.label == element.label) {
                this.legendClick(element.value);
            }
        });
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @return {?}
     */
    transformdata() {
        this.bubblechartdata = [];
        /** @type {?} */
        let buubledata = [];
        this.colordata.forEach((element, i) => {
            buubledata.push(element[Object.keys(element)[4]]);
        });
        /** @type {?} */
        let data = buubledata.sort(function (a, b) { return b - a; });
        for (let j = 0; j <= data.length; j++) {
            this.colordata.forEach(element => {
                if (data[j] == element[Object.keys(element)[4]])
                    this.bubblechartdata.push(element);
            });
        }
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bubble',
                template: `
<div   *ngIf="drillableFlag" #divid (window:resize)="resize($event)">
<table style="width: 100%;" #chartId >
  <tr>
      <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBubbleLegendClick($event)" [data]="legendData" style="height:100%;"></amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
BubbleComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
BubbleComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    vScale: [{ type: Input, args: ['vertical-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ViewDrillableComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        return this.getComponentData();
    }
    /**
     * @return {?}
     */
    getComponentData() {
        this.chartInputArray = [];
        this.barchartinput = this.queryBarchartinput.toArray();
        this.groupbarchartinput = this.QueryGroupbarchartinput.toArray();
        this.linechartinput = this.QueryLinechartinput.toArray();
        this.donutchartinput = this.QueryDonutchartinput.toArray();
        this.piechartinput = this.QueryPiechartinput.toArray();
        this.barstackchartinput = this.QueryBarStackchartinput.toArray();
        this.combochartinput = this.QueryCombochartinput.toArray();
        this.histogramchartinput = this.QueryHistogramchartinput.toArray();
        this.scatterchartinput = this.QuerySatterchartinput.toArray();
        this.multiareachartinput = this.QueryMultiareachartinput.toArray();
        this.candlestickchartinput = this.QueryCandlestickchartinput.toArray();
        this.bubblechartinput = this.QueryBubblechartinput.toArray();
        this.chartInputArray = this.chartInputArray.concat(this.barchartinput, this.groupbarchartinput, this.linechartinput, this.donutchartinput, this.piechartinput, this.barstackchartinput, this.combochartinput, this.histogramchartinput, this.scatterchartinput, this.multiareachartinput, this.candlestickchartinput, this.bubblechartinput);
        return this.chartInputArray;
    }
}
ViewDrillableComponent.propDecorators = {
    queryBarchartinput: [{ type: ContentChildren, args: [AmexioD3BarChartComponent, { descendants: true },] }],
    QueryGroupbarchartinput: [{ type: ContentChildren, args: [GroupbarComponent, { descendants: true },] }],
    QueryLinechartinput: [{ type: ContentChildren, args: [AmexioD3LineComponent, { descendants: true },] }],
    QueryPiechartinput: [{ type: ContentChildren, args: [AmexioD3PieChartComponent, { descendants: true },] }],
    QueryDonutchartinput: [{ type: ContentChildren, args: [AmexioD3DounutChartComponent, { descendants: true },] }],
    QueryBarStackchartinput: [{ type: ContentChildren, args: [BarstackComponent, { descendants: true },] }],
    QueryCombochartinput: [{ type: ContentChildren, args: [CombochartComponent, { descendants: true },] }],
    QueryHistogramchartinput: [{ type: ContentChildren, args: [HistogramComponent, { descendants: true },] }],
    QuerySatterchartinput: [{ type: ContentChildren, args: [ScatterchartComponent, { descendants: true },] }],
    QueryMultiareachartinput: [{ type: ContentChildren, args: [MultiareaComponent, { descendants: true },] }],
    QueryCandlestickchartinput: [{ type: ContentChildren, args: [CandlestickComponent, { descendants: true },] }],
    QueryBubblechartinput: [{ type: ContentChildren, args: [BubbleComponent, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DrillableComponent extends ViewDrillableComponent {
    constructor() {
        super();
        this.mouseLocation = { left: 0, top: 0 };
        this.componentcounter = 1;
        this.disableFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getData(data) {
        data.forEach(element => {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe((eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                });
            }
            else {
                this.disableFlag = false;
                element.drillableEvent.subscribe((eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                });
            }
        });
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    hideUI(eventRef) {
        this.ComponentDataArray.forEach(element => {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        });
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    ShowUI(eventRef) {
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach(element => {
            if (eventRef.ref.target == element.level) {
                if (this.arrayofsameLevel.length == 1) {
                    this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    this.componentcounter = element.level;
                }
                else {
                    this.contextmenuFlag = true;
                    this.mouseLocation.left = eventRef.event.clientX;
                    this.mouseLocation.top = eventRef.event.clientY;
                    this.contextStyle = this.getContextMenuStyle();
                }
            }
        });
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    previouschartClick(event) {
        /** @type {?} */
        let chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach(element => {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        });
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    sameLevelChart(eventRef) {
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach(element => {
            if (eventRef.ref.target == element.level) {
                this.arrayofsameLevel = this.arrayofsameLevel.concat(element);
            }
        });
    }
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    getContextMenuStyle() {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        /** @type {?} */
        const height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextNodeClick(event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.contextmenuFlag = false;
    }
}
DrillableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drillable',
                template: `
<div > 
    <ng-container *ngIf="disableFlag">
            <button type="button" class="button"
             (click)="previouschartClick($event)">
             <i class="fa fa-arrow-left"></i> 
             
            </button>
</ng-container>

<ng-content></ng-content>

</div>

<span [ngStyle]="contextStyle" >
  <ul *ngIf="contextmenuFlag" class="close-thik" class="context-menu-list"  >
    <span (click)="onCloseClick()" class="close"><i class="fa fa-close"></i></span>
  <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items" 
  *ngFor="let itemConfig of arrayofsameLevel">
  <em [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'19px'}"></em>
  <span style="white-space: nowrap;display: inline ; padding-left:5px">{{itemConfig.title}}
  </span>
  </li>
  </ul>
  </span>
  `,
                styles: [`.button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:"";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}`]
            },] },
];
DrillableComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const D3_COMPONENTS = [
    AmexioD3Legend,
    AmexioD3DounutChartComponent,
    AmexioD3BarChartComponent,
    AmexioD3PieChartComponent,
    AmexioD3LineComponent,
    BarstackComponent,
    GroupbarComponent,
    CombochartComponent,
    DrillableComponent,
    HistogramComponent,
    MultiareaComponent,
    ScatterchartComponent,
    CandlestickComponent,
    BubbleComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class AmexioChartD3Module {
}
AmexioChartD3Module.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    CommonModule
                ],
                declarations: D3_COMPONENTS,
                providers: [DeviceQueryService],
                exports: D3_COMPONENTS
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { AmexioChartD3Module, AmexioD3DounutChartComponent, AmexioD3PieChartComponent, AmexioD3BarChartComponent, AmexioD3LineComponent, BarstackComponent, GroupbarComponent, D3_COMPONENTS as ɵa, AmexioD3BaseChartComponent as ɵc, ViewDrillableComponent as ɵi, BubbleComponent as ɵn, CandlestickComponent as ɵm, CombochartComponent as ɵg, DrillableComponent as ɵh, HistogramComponent as ɵj, AmexioD3Legend as ɵb, AmexioD3BaseLineComponent as ɵf, MultiareaComponent as ɵl, ScatterchartComponent as ɵk, CommanDataService as ɵd, DeviceQueryService as ɵe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,