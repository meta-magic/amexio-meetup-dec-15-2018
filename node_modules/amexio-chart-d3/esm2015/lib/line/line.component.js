/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseLineComponent } from "./baseline.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from "../services/device.query.service";
export class AmexioD3LineComponent extends AmexioD3BaseLineComponent {
    /**
     * @param {?} deviceQueryService
     * @param {?} myservice
     */
    constructor(deviceQueryService, myservice) {
        super(deviceQueryService);
        this.deviceQueryService = deviceQueryService;
        this.myservice = myservice;
        this.level = 0;
        this.labelflag = false;
        this.labelcolor = "black";
        this.drillabledatakey = [];
        this.drillableFlag = true;
        this.resizeflag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotD3Chart();
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const linechart = this.initChart();
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        for (let index = 0; index < this.multiseriesdata.length; index++) {
            this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
        }
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    plotLine(g, x, y, height, width, data, tooltip, i) {
        /** @type {?} */
        const line = d3.line()
            .x(function (d) { return x(d.label); })
            .y(function (d) { return y(d.value); });
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", this.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (d) => { return x(d.label); })
            .attr("cy", (d) => { return y(d.value); })
            .attr('r', 2)
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.callTooltip(d)
            //  this.toolTipForLine(d)
            //  this.toolTipWithLegendandAxis(d.legend,d.label,d.value)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.lineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d, i) {
                return x(d.label);
            })
                .attr("y", function (d, i) {
                return y(d.value) - 10;
            })
                .text(function (d) {
                return d.value;
            });
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    lineChartClick(d) {
        /** @type {?} */
        let obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callTooltip(tooltipdata) {
        /** @type {?} */
        let obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    }
}
AmexioD3LineComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-line',
                template: `
<div *ngIf="drillableFlag" #divid (window:resize)="resize()"> 
<table style="width: 100%;" #chartId  >
        <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
        <tr>
            <td>
                <svg [attr.height]="height" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>            
            </td>
        </tr>
        <tr>
            <td style="display: block; padding: 5px;">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                        [data]="legends" style="height:100%;">
                    </amexio-d3-legend>
            </td>
        
        </tr>
</table>
</div>
    `
            },] },
];
AmexioD3LineComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: CommanDataService }
];
AmexioD3LineComponent.propDecorators = {
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3LineComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3LineComponent.prototype.divid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3LineComponent.prototype.level;
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3LineComponent.prototype.target;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.deviceQueryService;
    /** @type {?} */
    AmexioD3LineComponent.prototype.myservice;
}
//# sourceMappingURL=data:application/json;base64,