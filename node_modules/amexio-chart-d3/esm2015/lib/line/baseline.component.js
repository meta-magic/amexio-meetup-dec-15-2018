/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from "../base/base.component";
export class AmexioD3BaseLineComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} deviceQueryService
     */
    constructor(deviceQueryService) {
        super('line');
        this.deviceQueryService = deviceQueryService;
        this.svgheight = 300;
        this.hScale = true;
        this.vScale = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        this.createXYAxisData();
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    createXYAxisData() {
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        const msdarray = [];
        for (let index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            const legend = this._data[0][index];
            msdarray[index] = [];
            this.legenddata.push({ 'label': legend.label, 'color': this.predefinedcolors[index + 1] });
            if (index > 0)
                this.legends.push({ 'label': legend.label, 'color': this.predefinedcolors[index] });
        }
        /** @type {?} */
        let i = 0;
        this._data.forEach(object => {
            if (i > 0) {
                /** @type {?} */
                let j = 0;
                object.forEach(a => {
                    if (j === 0) {
                        this.xaxisdata.push({ 'label': a, 'value': a });
                    }
                    else {
                        this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    msdarray[j].push(a);
                    j++;
                });
            }
            i++;
        });
        for (let index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            const element = msdarray[index];
            if (index > 0) {
                /** @type {?} */
                let md = [];
                for (let j = 0; j < element.length; j++) {
                    /** @type {?} */
                    const v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].value, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    }
    /**
     * @return {?}
     */
    initChart() {
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 40, right: 20, bottom: 30, left: 40 };
        /** @type {?} */
        const width = +this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        const g = this.svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        const y = d3.scaleLinear()
            .rangeRound([height, 0]);
        x.domain(this.xaxisdata.map((d) => { return d.label; }));
        y.domain([0, d3.max(this.yaxisdata, (d) => { return d.value; })]);
        //add axis 
        if (this.deviceQueryService.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(d3.axisBottom(x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        g.append("g")
            .attr("color", "grey")
            .call(d3.axisLeft(y));
        return {
            g, x, y, height, width
        };
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotScale(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        let obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        let data = [];
        node.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.legend] = element.value;
            object[this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
}
AmexioD3BaseLineComponent.propDecorators = {
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    vScale: [{ type: Input, args: ['vertical-scale',] }],
    httpurl: [{ type: Input, args: ['data',] }, { type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype._data;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xaxisdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.yaxisdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legenddata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xaxisname;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.multiseriesdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.vScale;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.deviceQueryService;
}
//# sourceMappingURL=data:application/json;base64,