/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class GroupbarComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('multibar');
        this.myservice = myservice;
        this.device = device;
        this.legend = true;
        this.barwidth = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.onLegendClick = new EventEmitter();
        this.svgwidth = 300;
        this.svgheight = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.groupbarchartArray = [];
        this.urllegendArray = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let res;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    res = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(res);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    }
    /**
     * @return {?}
     */
    plotGroupBarChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let colors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        this.svg = d3.select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x0 = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        const x1 = d3.scaleBand().padding(0.1);
        /** @type {?} */
        const y = d3.scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map(function (d) { return d.labels; });
        /** @type {?} */
        let label = this.groupbarchartArray[0].values.map(function (d) { return d.label; });
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, d3.max(this.groupbarchartArray, function (labels) { return d3.max(labels.values, function (d) { return d.value; }); })]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y)
            .ticks(10));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        let slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", function (d) { return "translate(" + x0(d.labels) + ",0)"; });
        slice.selectAll("rect")
            .data(function (d) { return d.values; })
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", function (d) {
            return x1(d.label);
        })
            .style("fill", function (d, index) { return colors[index]; })
            .attr("y", function (d) { return y(0); })
            .attr("height", function (d) { return height - y(0); })
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.setKey(d)
            //  this.toolTipContent(d)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }).on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data(function (d) { return d.values; })
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", function (d) {
                return x1(d.label) + x1.bandwidth() / 2;
            })
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(0); })
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .text(function (d) {
                return d.value;
            });
        }
        slice.selectAll("rect")
            .attr("y", function (d) {
            return y(d.value);
        })
            .attr("height", function (d) { return height - y(d.value); });
    }
    /**
     * @param {?} d
     * @return {?}
     */
    groupbarClick(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    resize(event) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotGroupBarChart();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        // const legendNode = JSON.parse(JSON.stringify(event));
        // delete legendNode.color;
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
    //2d array to json conversion
    /**
     * @return {?}
     */
    convertToJSON() {
        /** @type {?} */
        let groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        let firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (let i = 1; i < this.data.length; i++) {
            /** @type {?} */
            let multiSeriesArray = [];
            /** @type {?} */
            let valueOfJ;
            for (let j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                let singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                let newLabelsValues = valueOfJ;
                /** @type {?} */
                let newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    }
    /**
     * @return {?}
     */
    transformto2dArray() {
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let result = [];
        result.push("years");
        this.data.forEach((element, i) => {
            if (i == 0) {
                element.values.forEach(element2 => {
                    result.push(element2.label);
                });
            }
        });
        this.urllegendArray.push(result);
        /** @type {?} */
        let temparray = [];
        this.data.forEach(element => {
            temparray = [];
            /** @type {?} */
            let values;
            /** @type {?} */
            let year = element.labels;
            temparray.push(year);
            element.values.forEach(element2 => {
                values = element2.value;
                temparray.push(values);
            });
            this.urllegendArray.push(temparray);
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                });
            }
        });
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
            }
        });
        this.legends = [];
        this.keyArray.forEach((element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            /** @type {?} */
            let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
            this.legends.push(object);
        });
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
GroupbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiseries',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize($event)"> 
<table style="width: 100%;" #chartId>
    <tr>
        <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
    </tr>
    <tr>
        <td>
            <svg [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
            </svg>
        </td>
    </tr>
    <tr>
        <td style="display: block; padding: 5px;">
            <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
        </td>
    </tr>
</table>
</div>


`,
                styles: [``]
            },] },
];
GroupbarComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
GroupbarComponent.propDecorators = {
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    data: [{ type: Input, args: ['data',] }],
    legend: [{ type: Input }],
    barwidth: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    onLegendClick: [{ type: Output }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};
if (false) {
    /** @type {?} */
    GroupbarComponent.prototype.chartId;
    /** @type {?} */
    GroupbarComponent.prototype.divid;
    /** @type {?} */
    GroupbarComponent.prototype.drillid;
    /** @type {?} */
    GroupbarComponent.prototype.data;
    /** @type {?} */
    GroupbarComponent.prototype.legend;
    /** @type {?} */
    GroupbarComponent.prototype.barwidth;
    /** @type {?} */
    GroupbarComponent.prototype.labelcolor;
    /** @type {?} */
    GroupbarComponent.prototype.labelflag;
    /** @type {?} */
    GroupbarComponent.prototype.onLegendClick;
    /** @type {?} */
    GroupbarComponent.prototype.svgwidth;
    /** @type {?} */
    GroupbarComponent.prototype.svgheight;
    /** @type {?} */
    GroupbarComponent.prototype.datareader;
    /** @type {?} */
    GroupbarComponent.prototype.level;
    /** @type {?} */
    GroupbarComponent.prototype.target;
    /** @type {?} */
    GroupbarComponent.prototype.drillabledatakey;
    /** @type {?} */
    GroupbarComponent.prototype.hScale;
    /** @type {?} */
    GroupbarComponent.prototype.drillableFlag;
    /** @type {?} */
    GroupbarComponent.prototype.resizeflag;
    /** @type {?} */
    GroupbarComponent.prototype.groupbarchartArray;
    /** @type {?} */
    GroupbarComponent.prototype.legendArray;
    /** @type {?} */
    GroupbarComponent.prototype.xaxisData;
    /** @type {?} */
    GroupbarComponent.prototype.keyArray;
    /** @type {?} */
    GroupbarComponent.prototype.legends;
    /** @type {?} */
    GroupbarComponent.prototype.years;
    /** @type {?} */
    GroupbarComponent.prototype.urllegendArray;
    /** @type {?} */
    GroupbarComponent.prototype.svg;
    /** @type {?} */
    GroupbarComponent.prototype.myservice;
    /** @type {?} */
    GroupbarComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1leGlvLWNoYXJ0LWQzLyIsInNvdXJjZXMiOlsibGliL2dyb3VwYmFyL2dyb3VwYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBUyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFBO0FBQ2pFLE9BQU0sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ25FLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBMEJ6QixNQUFNLHdCQUF5QixTQUFRLDBCQUEwQjs7Ozs7SUE4Qi9ELFlBQW9CLFNBQTRCLEVBQVMsTUFBeUI7UUFDaEYsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBREEsY0FBUyxHQUFULFNBQVMsQ0FBbUI7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQXZCekUsV0FBTSxHQUFZLElBQUksQ0FBQztRQUN2QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBQ1IsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUNuQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQ2pDLGtCQUFhLEdBQVEsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN2QyxhQUFRLEdBQVcsR0FBRyxDQUFDO1FBQ3RCLGNBQVMsR0FBVyxHQUFHLENBQUM7UUFFekIsVUFBSyxHQUFXLENBQUMsQ0FBQztRQUVULHFCQUFnQixHQUFVLEVBQUUsQ0FBQTtRQUMxQixXQUFNLEdBQVksSUFBSSxDQUFDO1FBRWxELGtCQUFhLEdBQVksSUFBSSxDQUFDO1FBQzlCLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFDNUIsdUJB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SUFDRyxzQ0FBb0M7O0lBQUMsbUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCxJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHtDb21tYW5EYXRhU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSdcbmltcG9ydHtEZXZpY2VRdWVyeVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2RldmljZS5xdWVyeS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtZXhpby1kMy1jaGFydC1tdWx0aXNlcmllcycsXG4gIHRlbXBsYXRlOiBgPGRpdiAgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiICNkaXZpZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoJGV2ZW50KVwiPiBcbjx0YWJsZSBzdHlsZT1cIndpZHRoOiAxMDAlO1wiICNjaGFydElkPlxuICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbHNwYW49XCIyXCIgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gICAgPC90cj5cbiAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxzdmcgW2F0dHIuaGVpZ2h0XT1cImhlaWdodFwiIFthdHRyLndpZHRoXT1cIndpZHRoXCIgW2F0dHIuaWRdPVwiY29tcG9uZW50SWRcIj5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwibGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZHNcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPjwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PlxuXG5cbmAsXG4gIHN0eWxlczogW2BgXVxufSlcbmV4cG9ydCBjbGFzcyBHcm91cGJhckNvbXBvbmVudCBleHRlbmRzIEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkaXZpZCcpIGRpdmlkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkcmlsbGlkJykgZHJpbGxpZDogYW55O1xuICAvL0BJbnB1dCgpIGRhdGE6IGFueTtcbiAgQElucHV0KCdkYXRhJykgZGF0YTogYW55XG4gIEBJbnB1dCgpIGxlZ2VuZDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGJhcndpZHRoOiBudW1iZXIgPSAwO1xuICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQElucHV0KCd3aWR0aCcpIHN2Z3dpZHRoOiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW11cbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcblxuICBkcmlsbGFibGVGbGFnOiBib29sZWFuID0gdHJ1ZTtcbiAgcmVzaXplZmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBncm91cGJhcmNoYXJ0QXJyYXk6IGFueVtdID0gW107XG4gIGxlZ2VuZEFycmF5OiBhbnk7XG4gIHhheGlzRGF0YTogYW55O1xuICBrZXlBcnJheTogYW55O1xuICBsZWdlbmRzOiBhbnk7XG4gIHllYXJzOiBhbnk7XG4gIHVybGxlZ2VuZEFycmF5ID0gW107XG4gIHN2ZzogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UscHJpdmF0ZSBkZXZpY2U6RGV2aWNlUXVlcnlTZXJ2aWNlKSB7XG4gICAgc3VwZXIoJ211bHRpYmFyJyk7XG4gICAgdGhpcy5wcmVkZWZpbmVkY29sb3JzID0gW1wiIzMzNjZjY1wiLCBcIiNkYzM5MTJcIiwgXCIjZmY5OTAwXCIsIFwiIzEwOTYxOFwiLCBcIiM5OTAwOTlcIiwgXCIjMDA5OWM2XCIsIFwiI2RkNDQ3N1wiLCBcIiM2NmFhMDBcIiwgXCIjYjgyZTJlXCIsIFwiIzMxNjM5NVwiLCBcIiM5OTQ0OTlcIiwgXCIjMjJhYTk5XCIsIFwiI2FhYWExMVwiLCBcIiM2NjMzY2NcIiwgXCIjZTY3MzAwXCIsIFwiIzhiMDcwN1wiLCBcIiM2NTEwNjdcIiwgXCIjMzI5MjYyXCIsIFwiIzU1NzRhNlwiLCBcIiMzYjNlYWNcIl07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICBsZXQgcmVzOiBhbnk7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICByZXMgPSByZXNwb25zZTtcblxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXMpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuXG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICB9LCAwKTtcblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcbiAgICBsZXQgcmVxdWVzdEpzb247XG4gICAgbGV0IGtleSA9IHRoaXMuZHJpbGxhYmxlZGF0YWtleTtcbiAgICBsZXQgcmVzcDogYW55O1xuICAgIGlmICh0aGlzLmRyaWxsYWJsZWRhdGFrZXkubGVuZ3RoKSB7XG4gICAgICBsZXQgZHJpbGxhYmxlZGF0YSA9IHRoaXMuZ2V0TXVsdGlwbGVEcmlsbGJsZUtleURhdGEoZGF0YSwga2V5KTtcbiAgICAgIHJlcXVlc3RKc29uID0gZHJpbGxhYmxlZGF0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIHRoaXMubXlzZXJ2aWNlLnBvc3RmZXRjaERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QsIHJlcXVlc3RKc29uKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9XG5cbiAgZHJhd0NoYXJ0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG5cbiAgICB9LCAwKTtcblxuICB9XG5cbiAgZ2V0UmVzcG9uc2VEYXRhKGh0dHBSZXNwb25zZTogYW55KSB7XG4gICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgfVxuXG4gIHBsb3REM0NoYXJ0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udmVydFRvSlNPTigpO1xuICAgIHRoaXMucGxvdEdyb3VwQmFyQ2hhcnQoKTtcbiAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgcGxvdEdyb3VwQmFyQ2hhcnQoKTogdm9pZCB7XG4gICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbFRpcChkMyk7XG4gICAgbGV0IGNvbG9ycyA9IHRoaXMucHJlZGVmaW5lZGNvbG9ycztcbiAgICAvLyB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgaWYgKHRoaXMucmVzaXplZmxhZyA9PSBmYWxzZSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnRJZCkge1xuICAgICAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA1MCwgbGVmdDogNDAgfTtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuc3Znd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnN2Z2hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gICAgdGhpcy5zdmcgPSBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmNvbXBvbmVudElkKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuXG4gICAgY29uc3QgeDAgPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgIC5wYWRkaW5nKDAuMik7XG5cbiAgICBjb25zdCB4MSA9IGQzLnNjYWxlQmFuZCgpLnBhZGRpbmcoMC4xKTtcblxuICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XG5cbiAgICAvL3NldHRpbmcgeCBhbmQgeSBkb21haW5zXG4gICAgdGhpcy55ZWFycyA9IHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5Lm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5sYWJlbHM7IH0pO1xuICAgIGxldCBsYWJlbCA9IHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5WzBdLnZhbHVlcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubGFiZWw7IH0pO1xuXG4gICAgeDAuZG9tYWluKHRoaXMueWVhcnMpO1xuICAgIHgxLmRvbWFpbihsYWJlbCkucmFuZ2VSb3VuZChbMCwgeDAuYmFuZHdpZHRoKCldKTtcbiAgICB5LmRvbWFpbihbMCwgZDMubWF4KHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5LCBmdW5jdGlvbiAobGFiZWxzKSB7IHJldHVybiBkMy5tYXgobGFiZWxzLnZhbHVlcywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWU7IH0pOyB9KV0pO1xuXG4gICAgLy9keW5hbWljIGJhcndpZHRoXG4gICAgaWYgKHRoaXMuYmFyd2lkdGggPiAwKSB7XG4gICAgICB0aGlzLmJhcndpZHRoID0gdGhpcy5iYXJ3aWR0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmJhcndpZHRoID0geDAuYmFuZHdpZHRoO1xuICAgIH1cblxuICAgIC8vIGFkZCB4IGF4aXMgdG8gc3ZnXG5cblxuXG4gICAgaWYodGhpcy5kZXZpY2UuSXNEZXNrdG9wKCk9PXRydWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeDApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4MCkpLlxuICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgOSlcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2MClcIilcbiAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xuICAgICBcbiAgICAgICAgICB9XG5cbiAgXG5cbiAgICAvL2FkZCB5IGF4aXMgdG8gc3ZnXG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgLnRpY2tzKDEwKSlcblxuICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHksIGhlaWdodCwgd2lkdGgpO1xuXG4gICAgLy8gc3ZnLnNlbGVjdCgnLnknKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5kZWxheSgxMzAwKS5zdHlsZSgnb3BhY2l0eScsICcxJyk7XG4gICAgIC8vYWRkaW5nIGJhcnNcbiAgICBsZXQgc2xpY2UgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuc2xpY2VcIilcbiAgICAgIC5kYXRhKHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5KVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgwKGQubGFiZWxzKSArIFwiLDApXCI7IH0pO1xuICAgIFxuICAgICAgc2xpY2Uuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgLmRhdGEoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudmFsdWVzOyB9KVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4MS5iYW5kd2lkdGgpXG4gICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgxKGQubGFiZWwpXG4gICAgICB9KVxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCwgaW5kZXgpIHsgcmV0dXJuIGNvbG9yc1tpbmRleF0gfSlcbiAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geSgwKTsgfSlcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBoZWlnaHQgLSB5KDApOyB9KVxuICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuaHRtbChcbiAgICAgICAgICB0aGlzLnNldEtleShkKVxuICAgICAgICAgIC8vICB0aGlzLnRvb2xUaXBDb250ZW50KGQpXG4gICAgICAgIClcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgIHRoaXMuZ3JvdXBiYXJDbGljayhkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgLy8gdGhpcy5jaGFydENsaWNrKGQpO1xuICAgICAgfSlcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgaWYodGhpcy5sYWJlbGZsYWcpIHtcbiAgICAgIHNsaWNlLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgIC5kYXRhKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnZhbHVlczsgfSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgeDEuYmFuZHdpZHRoKVxuICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiB4MShkLmxhYmVsKSArIHgxLmJhbmR3aWR0aCgpLzJcbiAgICAgIH0pXG4gICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB5KGQudmFsdWUpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoMCk7IH0pXG4gICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLFwiYm9sZFwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsXCIxdndcIilcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCk9PntcbiAgICAgICAgaWYodGhpcy5sYWJlbGNvbG9yLmxlbmd0aD4wKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbGNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgICAgIH0pO1xufVxuICAgIHNsaWNlLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkgeyBcbiAgICAgICAgIHJldHVybiB5KGQudmFsdWUpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoZC52YWx1ZSk7IH0pO1xuICB9XG5cbiAgZ3JvdXBiYXJDbGljayhkOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W2QubGFiZWxdID0gZC52YWx1ZTtcbiAgICBvYmplY3RbdGhpcy54YXhpc0RhdGFdID0gZC54YXhpcztcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG4gIHJlc2l6ZShldmVudDogYW55KSB7XG4gICAgdGhpcy5zdmd3aWR0aCA9IDA7XG4gICAgdGhpcy5zdmcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICB0aGlzLnJlc2l6ZWZsYWcgPSB0cnVlO1xuICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmRpdmlkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgdGhpcy5wbG90R3JvdXBCYXJDaGFydCgpO1xuICB9XG5cbiAgbGVnZW5kQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIC8vIGNvbnN0IGxlZ2VuZE5vZGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gICAgLy8gZGVsZXRlIGxlZ2VuZE5vZGUuY29sb3I7XG5cbiAgICBsZXQgb2JqID0ge307XG4gICAgb2JqW1wibGFiZWxcIl0gPSBldmVudC5sYWJlbDtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIGV2ZW50LmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgIG9iamVjdFtlbGVtZW50LmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICBkYXRhLnB1c2gob2JqZWN0KTtcbiAgICB9KTtcbiAgICBvYmpbXCJkYXRhXCJdID0gZGF0YTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmopO1xuXG4gICAgLy8gdGhpcy5vbkxlZ2VuZENsaWNrLmVtaXQobGVnZW5kTm9kZSk7XG4gIH1cblxuICAvLzJkIGFycmF5IHRvIGpzb24gY29udmVyc2lvblxuICBjb252ZXJ0VG9KU09OKCkge1xuICAgIGxldCBncm91cENoYXJ0T2JqID0geyBcImxhYmVsc1wiOiBcIlwiLCB2YWx1ZXM6IFtdIH07XG4gICAgbGV0IGZpcnN0Um93T2ZEYXRhID0gdGhpcy5kYXRhWzBdO1xuICAgIHRoaXMueGF4aXNEYXRhID0gdGhpcy5kYXRhWzBdWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtdWx0aVNlcmllc0FycmF5ID0gW107XG4gICAgICBsZXQgdmFsdWVPZko6IGFueTtcblxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCB0aGlzLmRhdGFbaV0ubGVuZ3RoOyBqKyspIHtcblxuICAgICAgICB2YWx1ZU9mSiA9IHRoaXMuZGF0YVtpXVswXTtcbiAgICAgICAgbGV0IHNpbmdsZUJhck9iaiA9IHt9O1xuICAgICAgICBzaW5nbGVCYXJPYmpbXCJ2YWx1ZVwiXSA9IHRoaXMuZGF0YVtpXVtqXTtcbiAgICAgICAgc2luZ2xlQmFyT2JqW1wibGFiZWxcIl0gPSBmaXJzdFJvd09mRGF0YVtqXTtcbiAgICAgICAgc2luZ2xlQmFyT2JqW1wieGF4aXNcIl0gPSB0aGlzLmRhdGFbaV1bMF07XG4gICAgICAgIG11bHRpU2VyaWVzQXJyYXkucHVzaChzaW5nbGVCYXJPYmopO1xuICAgICAgfVxuICAgICAgaWYgKG11bHRpU2VyaWVzQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGdyb3VwQ2hhcnRPYmpbXCJ2YWx1ZXNcIl0gPSBtdWx0aVNlcmllc0FycmF5O1xuICAgICAgICBsZXQgbmV3TGFiZWxzVmFsdWVzOiBhbnkgPSB2YWx1ZU9mSjtcbiAgICAgICAgbGV0IG5ld0dyb3VwRGF0YU9iaiA9IE9iamVjdC5hc3NpZ24oe30sIGdyb3VwQ2hhcnRPYmopO1xuICAgICAgICBuZXdHcm91cERhdGFPYmpbJ2xhYmVscyddID0gbmV3TGFiZWxzVmFsdWVzICsgJyc7XG4gICAgICAgIHRoaXMuZ3JvdXBiYXJjaGFydEFycmF5LnB1c2gobmV3R3JvdXBEYXRhT2JqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG5cbiAgdHJhbnNmb3JtdG8yZEFycmF5KCkge1xuICAgIGxldCBpID0gMFxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQucHVzaChcInllYXJzXCIpO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgIGVsZW1lbnQudmFsdWVzLmZvckVhY2goZWxlbWVudDIgPT4ge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQyLmxhYmVsKTtcblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHRoaXMudXJsbGVnZW5kQXJyYXkucHVzaChyZXN1bHQpO1xuXG4gICAgbGV0IHRlbXBhcnJheSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgdGVtcGFycmF5ID0gW107XG4gICAgICBsZXQgdmFsdWVzOiBhbnk7XG4gICAgICBsZXQgeWVhciA9IGVsZW1lbnQubGFiZWxzO1xuICAgICAgdGVtcGFycmF5LnB1c2goeWVhcik7XG4gICAgICBlbGVtZW50LnZhbHVlcy5mb3JFYWNoKGVsZW1lbnQyID0+IHtcbiAgICAgICAgdmFsdWVzID0gZWxlbWVudDIudmFsdWU7XG4gICAgICAgIHRlbXBhcnJheS5wdXNoKHZhbHVlcyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudXJsbGVnZW5kQXJyYXkucHVzaCh0ZW1wYXJyYXkpO1xuICAgIH0pXG4gIH1cblxuICB0cmFuc2Zvcm1EYXRhKGRhdGE6IGFueSkge1xuICAgIHRoaXMua2V5QXJyYXkgPSBbXTtcbiAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG4gICAgZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5uZXJlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQXJyYXlbaW5uZXJlbGVtZW50XSA9IHsgJ2RhdGEnOiBbXSB9O1xuICAgICAgICAgICAgdGhpcy5rZXlBcnJheS5wdXNoKGlubmVyZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBvYmo6IGFueSA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGlubmVyZWxlbWVudCwgaW5uZXJpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbm5lcmluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5QXJyYXlbaW5uZXJpbmRleCAtIDFdO1xuICAgICAgICAgICAgb2JqW2tleV0gPSBlbGVtZW50W2lubmVyaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbGVnZW5kZGF0YSA9IHRoaXMubGVnZW5kQXJyYXlba2V5XTtcbiAgICAgICAgICAgIGlmIChsZWdlbmRkYXRhKSB7XG4gICAgICAgICAgICAgIGxlZ2VuZGRhdGEuZGF0YS5wdXNoKHsgJ3ZhbHVlJzogZWxlbWVudFtpbm5lcmluZGV4XSwgJ2xhYmVsJzogZWxlbWVudFswXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmxlZ2VuZHMgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBsZWdlbmRkYXRhID0gdGhpcy5sZWdlbmRBcnJheVtlbGVtZW50XTtcbiAgICAgIGxldCBvYmplY3QgPSB7ICdsYWJlbCc6IGVsZW1lbnQsICdjb2xvcic6IHRoaXMucHJlZGVmaW5lZGNvbG9yc1tpbmRleF0sICdkYXRhJzogbGVnZW5kZGF0YS5kYXRhIH07XG4gICAgICB0aGlzLmxlZ2VuZHMucHVzaChvYmplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0S2V5KGQ6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbZC5sYWJlbF0gPSBkLnZhbHVlO1xuICAgIG9iamVjdFt0aGlzLnhheGlzRGF0YV0gPSBkLnhheGlzO1xuICAgIHJldHVybiAodGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCkpO1xuICB9XG5cbiAgcGxvdExpbmUoZywgeSwgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGlmICh0aGlzLmhTY2FsZSkge1xuICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpXG4gICAgICAgICAgLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdCgnJykpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=