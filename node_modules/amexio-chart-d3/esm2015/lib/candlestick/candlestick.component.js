/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class CandlestickComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super("candlestickwaterfallchart");
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.labelcolor = "black";
        this.labelflag = false;
        this.hScale = true;
        this.onLegendClick = new EventEmitter();
        this.drillableFlag = true;
        this.resizeflag = false;
        this.predefinedColor = [];
        this.keyArray = [];
        this.margin = {};
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            /** @type {?} */
            let res;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    //this.data = response;
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotXYAxis();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotXYAxis();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initializeData();
            this.plotXYAxis();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    initializeData() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    }
    /**
     * @return {?}
     */
    plotXYAxis() {
        // set the ranges
        this.x = d3.scaleBand().range([0, this.width]);
        this.y = d3.scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        let candlestickArray = this.data.map((d) => {
            return d[Object.keys(d)[0]];
        });
        this.x.domain(candlestickArray);
        /** @type {?} */
        let max = d3.max(this.data, (d) => { return d.end; });
        this.y.domain([0, max]);
        this.svg = d3.select("#" + this.componentId)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(d3.axisLeft(this.y));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        /** @type {?} */
        let bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", (d) => { return "bar " + d.class; })
            .attr("transform", (d) => {
            return "translate(" + this.x(d[Object.keys(d)[0]]) + ",0)";
        });
        bar.append("rect")
            .attr("y", (d) => { return this.y(Math.max(d.start, d.end)); })
            .attr("height", (d) => { return Math.abs(this.y(d.start) - this.y(d.end)); })
            .attr("width", this.x.bandwidth())
            .attr("fill", (d, i) => {
            return this.predefinedColor[i];
        })
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            this.formTooltipData(d);
            return this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return this.tooltip.html(this.formTooltipData(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return this.tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.onCandlestickClick(d);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", (d) => {
                return (this.x.bandwidth()) / 2;
            })
                .attr("y", (d, index) => {
                return this.y(Math.max(d.start, d.end)) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]];
            });
        }
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    }
    /**
     * @return {?}
     */
    addDataKeys() {
        /** @type {?} */
        let cumulative = 0;
        for (let i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickClick(chartData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((element, index) => {
            for (let [key, value] of Object.entries(element)) {
                if (key == this.keyArray[0]) {
                    /** @type {?} */
                    let object = {};
                    object["label"] = value;
                    object["color"] = this.predefinedColor[index];
                    this.legendArray.push(object);
                }
            }
        });
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickLegendClick(chartData) {
        /** @type {?} */
        let object = {};
        this.data.forEach(element => {
            for (let [key, value] of Object.entries(element)) {
                if (value == chartData.label) {
                    object[chartData.label] = element.value;
                }
            }
        });
        this.onLegendClick.emit(object);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    }
}
CandlestickComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-waterfall',
                template: `
<div   *ngIf="drillableFlag" #divid (window:resize)="resize()" >
<table style="width: 100%;" #chartId (window:resize)="resize()">
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onCandlestickLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
CandlestickComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
CandlestickComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    data: [{ type: Input }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CandlestickComponent.prototype.svgwidth;
    /** @type {?} */
    CandlestickComponent.prototype.svgheight;
    /** @type {?} */
    CandlestickComponent.prototype.datareader;
    /** @type {?} */
    CandlestickComponent.prototype.data;
    /** @type {?} */
    CandlestickComponent.prototype.level;
    /** @type {?} */
    CandlestickComponent.prototype.target;
    /** @type {?} */
    CandlestickComponent.prototype.drillabledatakey;
    /** @type {?} */
    CandlestickComponent.prototype.labelcolor;
    /** @type {?} */
    CandlestickComponent.prototype.labelflag;
    /** @type {?} */
    CandlestickComponent.prototype.hScale;
    /** @type {?} */
    CandlestickComponent.prototype.chartId;
    /** @type {?} */
    CandlestickComponent.prototype.divid;
    /** @type {?} */
    CandlestickComponent.prototype.onLegendClick;
    /** @type {?} */
    CandlestickComponent.prototype.drillableFlag;
    /** @type {?} */
    CandlestickComponent.prototype.resizeflag;
    /** @type {?} */
    CandlestickComponent.prototype.predefinedColor;
    /** @type {?} */
    CandlestickComponent.prototype.keyArray;
    /** @type {?} */
    CandlestickComponent.prototype.transformeddata;
    /** @type {?} */
    CandlestickComponent.prototype.height;
    /** @type {?} */
    CandlestickComponent.prototype.width;
    /** @type {?} */
    CandlestickComponent.prototype.margin;
    /** @type {?} */
    CandlestickComponent.prototype.x;
    /** @type {?} */
    CandlestickComponent.prototype.y;
    /** @type {?} */
    CandlestickComponent.prototype.svg;
    /** @type {?} */
    CandlestickComponent.prototype.tooltip;
    /** @type {?} */
    CandlestickComponent.prototype.legendArray;
    /** @type {?} */
    CandlestickComponent.prototype.httpresponse;
    /** @type {?} */
    CandlestickComponent.prototype.myservice;
    /** @type {?} */
    CandlestickComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlc3RpY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1leGlvLWNoYXJ0LWQzLyIsInNvdXJjZXMiOlsibGliL2NhbmRsZXN0aWNrL2NhbmRsZXN0aWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxHQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU0sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ25FLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBMEJ6QixNQUFNLDJCQUE0QixTQUFRLDBCQUEwQjs7Ozs7SUE0QmxFLFlBQW9CLFNBQTRCLEVBQVMsTUFBeUI7UUFDaEYsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFEakIsY0FBUyxHQUFULFNBQVMsQ0FBbUI7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQTNCbEUsYUFBUSxHQUFXLEdBQUcsQ0FBQztRQUN0QixjQUFTLEdBQVcsR0FBRyxDQUFDO1FBR3pCLFVBQUssR0FBVyxDQUFDLENBQUM7UUFFVCxxQkFBZ0IsR0FBVSxFQUFFLENBQUM7UUFDaEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUNuQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQ2hCLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFHeEMsa0JBQWEsR0FBUSxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3ZELGtCQUFhLEdBQVksSUFBSSxDQUFDO1FBQzlCLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFDNUIsb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsYUFBUSxHQUFVLEVBQUUs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NENBQWtCOztJQUNOLHlDQUFvQzs7SUFBQyxzQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEFtZXhpb0QzQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSBcIi4uL2Jhc2UvYmFzZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFBsb3RDYXJ0IH0gZnJvbSBcIi4uL2Jhc2UvY2hhcnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBDb21tYW5EYXRhU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbW1hbi5kYXRhLnNlcnZpY2UnO1xuaW1wb3J0e0RldmljZVF1ZXJ5U2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvZGV2aWNlLnF1ZXJ5LnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1leGlvLWQzLWNoYXJ0LXdhdGVyZmFsbCcsXG4gIHRlbXBsYXRlOiBgXG48ZGl2ICAgKm5nSWY9XCJkcmlsbGFibGVGbGFnXCIgI2RpdmlkICh3aW5kb3c6cmVzaXplKT1cInJlc2l6ZSgpXCIgPlxuPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCIgI2NoYXJ0SWQgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIj5cbiAgPHRyPlxuICAgICAgPHRkIHN0eWxlPVwiZm9udC1zaXplOiAxOHB4OyBmb250LXdlaWdodDogYm9sZDsgXCI+IHt7dGl0bGV9fSA8L3RkPlxuICA8L3RyPlxuICA8dHI+XG4gICAgICA8dGQ+XG4gICAgICAgICAgPHN2ZyBbYXR0ci5oZWlnaHRdPVwic3ZnaGVpZ2h0XCIgW2F0dHIud2lkdGhdPVwic3Znd2lkdGhcIiBbYXR0ci5pZF09XCJjb21wb25lbnRJZFwiPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgPC90ZD5cbiAgPC90cj5cbiAgPHRyPlxuICAgICAgPHRkIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7IHBhZGRpbmc6IDVweDtcIj5cbiAgICAgICAgICA8YW1leGlvLWQzLWxlZ2VuZCAqbmdJZj1cImxlZ2VuZFwiIFtob3Jpem9udGFsXT1cInRydWVcIiAob25DbGljayk9XCJvbkNhbmRsZXN0aWNrTGVnZW5kQ2xpY2soJGV2ZW50KVwiIFtkYXRhXT1cImxlZ2VuZEFycmF5XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgICA8L2FtZXhpby1kMy1sZWdlbmQ+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuPC90YWJsZT5cbjwvZGl2PmAsXG4gIHN0eWxlczogW2BgXVxufSlcblxuZXhwb3J0IGNsYXNzIENhbmRsZXN0aWNrQ29tcG9uZW50IGV4dGVuZHMgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBQbG90Q2FydCwgT25Jbml0IHtcbiAgQElucHV0KCd3aWR0aCcpIHN2Z3dpZHRoOiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnaGVpZ2h0Jykgc3ZnaGVpZ2h0OiBudW1iZXIgPSAzMDA7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBhbnk7XG4gIEBJbnB1dCgpIGRhdGE6IGFueVtdO1xuICBASW5wdXQoJ2xldmVsJykgbGV2ZWw6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgndGFyZ2V0JykgdGFyZ2V0OiBudW1iZXI7XG4gIEBJbnB1dCgnZHJpbGxhYmxlLWRhdGEnKSBkcmlsbGFibGVkYXRha2V5OiBhbnlbXSA9IFtdO1xuICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgnaG9yaXpvbnRhbC1zY2FsZScpIGhTY2FsZTogYm9vbGVhbiA9IHRydWU7XG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0SWQnKSBjaGFydElkOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdkaXZpZCcpIGRpdmlkOiBFbGVtZW50UmVmO1xuICBAT3V0cHV0KCkgb25MZWdlbmRDbGljazogYW55ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGRyaWxsYWJsZUZsYWc6IGJvb2xlYW4gPSB0cnVlO1xuICByZXNpemVmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gIHByZWRlZmluZWRDb2xvciA9IFtdO1xuICBrZXlBcnJheTogYW55W10gPSBbXTtcbiAgdHJhbnNmb3JtZWRkYXRhOiBhbnk7XG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xuICBtYXJnaW46IGFueSA9IHt9O1xuICB4OiBhbnk7XG4gIHk6IGFueTtcbiAgc3ZnOiBhbnk7XG4gIHRvb2x0aXA6IGFueTtcbiAgbGVnZW5kQXJyYXk6IGFueVtdID0gW107XG4gIGh0dHByZXNwb25zZTogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UscHJpdmF0ZSBkZXZpY2U6RGV2aWNlUXVlcnlTZXJ2aWNlKSB7XG4gICAgc3VwZXIoXCJjYW5kbGVzdGlja3dhdGVyZmFsbGNoYXJ0XCIpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wcmVkZWZpbmVkQ29sb3IgPSBbXCIjMzM2NmNjXCIsIFwiI2RjMzkxMlwiLCBcIiNmZjk5MDBcIiwgXCIjMTA5NjE4XCIsIFwiIzk5MDA5OVwiLCBcIiMwMDk5YzZcIiwgXCIjZGQ0NDc3XCIsIFwiIzY2YWEwMFwiLCBcIiNiODJlMmVcIiwgXCIjMzE2Mzk1XCIsIFwiIzk5NDQ5OVwiLCBcIiMyMmFhOTlcIiwgXCIjYWFhYTExXCIsIFwiIzY2MzNjY1wiLCBcIiNlNjczMDBcIiwgXCIjOGIwNzA3XCIsIFwiIzY1MTA2N1wiLCBcIiMzMjkyNjJcIiwgXCIjNTU3NGE2XCIsIFwiIzNiM2VhY1wiXTtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSAxKSB7XG4gICAgICBsZXQgcmVzO1xuICAgICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgICAgdGhpcy5teXNlcnZpY2UuZmV0Y2hVcmxEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgLy90aGlzLmRhdGEgPSByZXNwb25zZTtcbiAgICAgICAgICB0aGlzLmh0dHByZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgICAgIHRoaXMucGxvdFhZQXhpcygpO1xuICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmV0Y2hEYXRhKGRhdGE6IGFueSkge1xuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYgKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpIHtcbiAgICAgIGxldCBkcmlsbGFibGVkYXRhID0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLCBrZXkpO1xuICAgICAgcmVxdWVzdEpzb24gPSBkcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIHRoaXMubXlzZXJ2aWNlLnBvc3RmZXRjaERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QsIHJlcXVlc3RKc29uKS5zdWJzY3JpYmUoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJlc3AgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5odHRwcmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAvL3RoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHJlc3ApO1xuICAgICAgICAgIHRoaXMuZHJhd0NoYXJ0KCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSk7XG5cbiAgICB9XG4gIH1cblxuICBkcmF3Q2hhcnQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YSh0aGlzLmh0dHByZXNwb25zZSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICAgIHRoaXMucGxvdFhZQXhpcygpO1xuICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZURhdGEoKSB7XG4gICAgdGhpcy50b29sdGlwID0gdGhpcy50b29sVGlwKGQzKTtcbiAgICBpZiAodGhpcy5yZXNpemVmbGFnID09IGZhbHNlKSB7XG4gICAgICBpZiAodGhpcy5jaGFydElkKSB7XG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDMwLCBib3R0b206IDUwLCBsZWZ0OiA2MCB9LFxuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc3Znd2lkdGggLSB0aGlzLm1hcmdpbi5sZWZ0IC0gdGhpcy5tYXJnaW4ucmlnaHQsXG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc3ZnaGVpZ2h0IC0gdGhpcy5tYXJnaW4udG9wIC0gdGhpcy5tYXJnaW4uYm90dG9tO1xuICB9XG5cbiAgcGxvdFhZQXhpcygpIHtcbiAgICAvLyBzZXQgdGhlIHJhbmdlc1xuICAgIHRoaXMueCA9IGQzLnNjYWxlQmFuZCgpLnJhbmdlKFswLCB0aGlzLndpZHRoXSk7XG4gICAgdGhpcy55ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgLnJhbmdlUm91bmQoW3RoaXMuaGVpZ2h0LCAwXSk7XG4gICAgLy8gc2NhbGUgdGhlIHJhbmdlIG9mIHRoZSBkYXRhXG4gICAgbGV0IGNhbmRsZXN0aWNrQXJyYXkgPSB0aGlzLmRhdGEubWFwKChkKSA9PiB7XG4gICAgICByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVswXV07XG4gICAgIH0pO1xuICAgIHRoaXMueC5kb21haW4oY2FuZGxlc3RpY2tBcnJheSk7XG4gICAgbGV0IG1heCA9IGQzLm1heCh0aGlzLmRhdGEsIChkKSA9PiB7IHJldHVybiBkLmVuZDsgfSk7XG4gICAgdGhpcy55LmRvbWFpbihbMCwgbWF4XSk7XG5cbiAgICB0aGlzLnN2ZyA9IGQzLnNlbGVjdChcIiNcIiArIHRoaXMuY29tcG9uZW50SWQpXG4gICAgICAvLyBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLndpZHRoICsgdGhpcy5tYXJnaW4ubGVmdCArIHRoaXMubWFyZ2luLnJpZ2h0KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGhpcy5oZWlnaHQgKyB0aGlzLm1hcmdpbi50b3AgKyB0aGlzLm1hcmdpbi5ib3R0b20pXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLm1hcmdpbi5sZWZ0ICsgXCIsXCIgKyB0aGlzLm1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAvLyBhZGQgdGhlIFggQXhpc1xuXG4gICAgaWYodGhpcy5kZXZpY2UuSXNEZXNrdG9wKCk9PXRydWUpXG4gICAge1xuICAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB0aGlzLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy54KSlcbiAgICB9XG4gIGVsc2VcbiAgIHtcbiAgICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB0aGlzLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy54KSkuXG4gICAgICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgIC5hdHRyKFwieFwiLCA5KVxuICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoNjApXCIpXG4gICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG5cbiAgfVxuXG4gICAgLy8gdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC8vICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgLy8gICAuY2FsbChkMy5heGlzQm90dG9tKHRoaXMueCkpO1xuXG4gICAgLy8gYWRkIHRoZSBZIEF4aXNcbiAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuY2FsbChkMy5heGlzTGVmdCh0aGlzLnkpKTtcbiAgICB0aGlzLnBsb3RMaW5lKHRoaXMuc3ZnLCB0aGlzLngsIHRoaXMueSwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGgpO1xuICB9XG5cblxuICBwbG90RDNDaGFydCgpIHtcbiAgICBsZXQgYmFyID0gdGhpcy5zdmcuc2VsZWN0QWxsKFwiLmJhclwiKVxuICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCkgPT4geyByZXR1cm4gXCJiYXIgXCIgKyBkLmNsYXNzIH0pXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLngoXG4gICAgICAgICAgZFtPYmplY3Qua2V5cyhkKVswXV1cbiAgICAgICAgICkgKyBcIiwwKVwiO1xuICAgICAgfSk7XG5cbiAgICBiYXIuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB7IHJldHVybiB0aGlzLnkoTWF0aC5tYXgoZC5zdGFydCwgZC5lbmQpKTsgfSlcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiB7IHJldHVybiBNYXRoLmFicyh0aGlzLnkoZC5zdGFydCkgLSB0aGlzLnkoZC5lbmQpKTsgfSlcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy54LmJhbmR3aWR0aCgpKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIChkLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWRlZmluZWRDb2xvcltpXTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuXG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXAuaHRtbChcbiAgICAgICAgICB0aGlzLmZvcm1Ub29sdGlwRGF0YShkKVxuICAgICAgICApXG4gICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDEwKSArIFwicHhcIilcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChkMy5ldmVudC5wYWdlWCArIDEwKSArIFwicHhcIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdXRcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwiY2xpY2tcIiwgKGQpID0+IHtcbiAgICAgICAgdGhpcy5vbkNhbmRsZXN0aWNrQ2xpY2soZCk7XG4gICAgICAgIHRoaXMuZm9yZHJpbGxhYmxlQ2xpY2sodGhpcywgZCwgZXZlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pXG4gICAgXG4gICAgaWYodGhpcy5sYWJlbGZsYWcpIHtcbiAgICBiYXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgLnN0eWxlKFwiZm9udC13ZWlnaHRcIiwgXCJib2xkXCIpXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxdndcIilcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5sYWJlbGNvbG9yLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbGNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYXR0cihcInhcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnguYmFuZHdpZHRoKCkpIC8gMjtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInlcIiwgKGQsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnkoTWF0aC5tYXgoZC5zdGFydCwgZC5lbmQpKSArIDIwO1xuICAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMV1dXG4gICAgICAgfSk7XG4gICAgICB9XG4gIH1cblxuICBwbG90TGluZShzdmcsIHgsIHksIGhlaWdodCwgd2lkdGgpIHtcbiAgICBpZiAodGhpcy5oU2NhbGUpIHtcbiAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpXG4gICAgICAgICAgLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdCgnJykpO1xuICAgIH1cbiAgfVxuXG4gIHRyYW5zZm9ybURhdGEoZGF0YTogYW55KSB7XG4gICAgdGhpcy50cmFuc2Zvcm1lZGRhdGEgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5ID0gW107XG4gICAgdGhpcy5rZXlBcnJheSA9IGRhdGFbMF07XG4gICAgZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBsZXQgRHVtbXlPYmplY3Q6IGFueSA9IHt9O1xuICAgICAgICBlbGVtZW50LmZvckVhY2goKGluZGl2aWR1YWx2YWx1ZSwga2V5aW5kZXgpID0+IHtcbiAgICAgICAgICBEdW1teU9iamVjdFt0aGlzLmtleUFycmF5W2tleWluZGV4XV0gPSBpbmRpdmlkdWFsdmFsdWU7XG4gICAgICAgIH0pOy8vaW5uZXIgZm9yIGxvb3AgZW5kc1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YS5wdXNoKER1bW15T2JqZWN0KTtcbiAgICAgIH0vL2lmIGVuZHNcbiAgICB9KTsvL291dGVyIGZvciBsb29wIGVuZHMgXG4gICAgdGhpcy5kYXRhID0gdGhpcy50cmFuc2Zvcm1lZGRhdGE7XG4gICAgdGhpcy5hZGREYXRhS2V5cygpO1xuICAgIHRoaXMuZm9ybUxlZ2VuZERhdGEoKTtcbiAgfVxuXG4gIGFkZERhdGFLZXlzKCkge1xuICAgIGxldCBjdW11bGF0aXZlOiBhbnkgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmRhdGFbaV1bXCJzdGFydFwiXSA9IGN1bXVsYXRpdmU7XG4gICAgICBjdW11bGF0aXZlICs9IHRoaXMuZGF0YVtpXVt0aGlzLmtleUFycmF5WzFdXTtcbiAgICAgIHRoaXMuZGF0YVtpXVtcImVuZFwiXSA9IGN1bXVsYXRpdmU7XG4gICAgICB0aGlzLmRhdGFbaV1bXCJjbGFzc1wiXSA9ICh0aGlzLmRhdGFbaV1bdGhpcy5rZXlBcnJheVsxXV0gPj0gMCkgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ1xuICAgIH1cbiAgfVxuXG4gIGdldFJlc3BvbnNlRGF0YShodHRwUmVzcG9uc2U6IGFueSkge1xuICAgIGxldCByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgaWYgKHRoaXMuZGF0YXJlYWRlciAhPSBudWxsKSB7XG4gICAgICBjb25zdCBkciA9IHRoaXMuZGF0YXJlYWRlci5zcGxpdCgnLicpO1xuICAgICAgZm9yIChjb25zdCBpciBvZiBkcikge1xuICAgICAgICByZXNwb25zZWRhdGEgPSByZXNwb25zZWRhdGFbaXJdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZWRhdGE7XG4gIH1cblxuICBmb3JtVG9vbHRpcERhdGEodG9vbHRpcERhdGE6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbdGhpcy5rZXlBcnJheVswXV0gPSB0b29sdGlwRGF0YVtPYmplY3Qua2V5cyh0b29sdGlwRGF0YSlbMF1dO1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzFdXSA9IHRvb2x0aXBEYXRhW09iamVjdC5rZXlzKHRvb2x0aXBEYXRhKVsxXV07XG4gICAgcmV0dXJuIHRoaXMudG9vbFRpcEZvckJhcihvYmplY3QpO1xuICB9XG5cbiAgb25DYW5kbGVzdGlja0NsaWNrKGNoYXJ0RGF0YTogYW55KSB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzBdXSA9IGNoYXJ0RGF0YVtPYmplY3Qua2V5cyhjaGFydERhdGEpWzBdXTtcbiAgICBvYmplY3RbdGhpcy5rZXlBcnJheVsxXV0gPSBjaGFydERhdGFbT2JqZWN0LmtleXMoY2hhcnREYXRhKVsxXV07XG4gICAgdGhpcy5jaGFydENsaWNrKG9iamVjdCk7XG4gIH1cblxuICBmb3JtTGVnZW5kRGF0YSgpIHtcbiAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZWxlbWVudCkpIHtcbiAgICAgICAgaWYgKGtleSA9PSB0aGlzLmtleUFycmF5WzBdKSB7XG4gICAgICAgICAgbGV0IG9iamVjdCA9IHt9O1xuICAgICAgICAgIG9iamVjdFtcImxhYmVsXCJdID0gdmFsdWU7XG4gICAgICAgICAgb2JqZWN0W1wiY29sb3JcIl0gPSB0aGlzLnByZWRlZmluZWRDb2xvcltpbmRleF07XG4gICAgICAgICAgdGhpcy5sZWdlbmRBcnJheS5wdXNoKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2FuZGxlc3RpY2tMZWdlbmRDbGljayhjaGFydERhdGE6IGFueSkge1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhlbGVtZW50KSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gY2hhcnREYXRhLmxhYmVsKSB7XG4gICAgICAgICAgb2JqZWN0W2NoYXJ0RGF0YS5sYWJlbF0gPSBlbGVtZW50LnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5vbkxlZ2VuZENsaWNrLmVtaXQob2JqZWN0KTtcbiAgfVxuXG4gIHJlc2l6ZSgpIHtcbiAgICB0aGlzLnN2Z3dpZHRoID0gMDtcbiAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgIHRoaXMucmVzaXplZmxhZyA9IHRydWU7XG4gICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuZGl2aWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICB9XG5cbn1cbiJdfQ==