/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class CommanDataService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    fetchUrlData(serviceUrl, methodType) {
        /** @type {?} */
        const requestJson = {};
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    postfetchData(serviceUrl, methodType, requestJson) {
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
}
CommanDataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
CommanDataService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ CommanDataService.ngInjectableDef = i0.defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(i0.inject(i1.HttpClient)); }, token: CommanDataService, providedIn: "root" });
if (false) {
    /** @type {?} */
    CommanDataService.prototype.serviceUrl;
    /** @type {?} */
    CommanDataService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuLmRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FtZXhpby1jaGFydC1kMy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQWtCLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFNL0UsTUFBTTs7OztJQUVKLFlBQW9CLElBQWU7UUFBZixTQUFJLEdBQUosSUFBSSxDQUFXO0lBQUksQ0FBQzs7Ozs7O0lBR3hDLFlBQVksQ0FBQyxVQUFrQixFQUFFLFVBQWtCOztjQUMzQyxXQUFXLEdBQUcsRUFBRTs7Y0FDaEIsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7OztJQUdELGFBQWEsQ0FBQyxVQUFrQixFQUFFLFVBQWtCLEVBQUMsV0FBZTs7Y0FFNUQsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDO0lBQ0gsQ0FBQzs7O1lBM0JBLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBTFEsVUFBVTs7Ozs7SUFTakIsdUNBQW1COztJQURQLGlDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsSHR0cENsaWVudE1vZHVsZSxIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL2luZGV4JztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbW1hbkRhdGFTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6SHR0cENsaWVudCkgeyB9XG4gIHNlcnZpY2VVcmw6IHN0cmluZztcblxuICBmZXRjaFVybERhdGEoc2VydmljZVVybDogc3RyaW5nLCBtZXRob2RUeXBlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJlcXVlc3RKc29uID0ge307XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcpO1xuICAgIGlmIChtZXRob2RUeXBlID09PSAncG9zdCcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Qoc2VydmljZVVybCwgcmVxdWVzdEpzb24sIHtoZWFkZXJzfSk7XG4gICAgfWVsc2UgaWYgKG1ldGhvZFR5cGUgPT09ICdnZXQnKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoc2VydmljZVVybCwge2hlYWRlcnN9KTtcbiAgICB9XG59XG5cblxucG9zdGZldGNoRGF0YShzZXJ2aWNlVXJsOiBzdHJpbmcsIG1ldGhvZFR5cGU6IHN0cmluZyxyZXF1ZXN0SnNvbjphbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuIFxuICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG4gIGlmIChtZXRob2RUeXBlID09PSAncG9zdCcpIHtcbiAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHNlcnZpY2VVcmwsIHJlcXVlc3RKc29uLCB7aGVhZGVyc30pO1xuICB9ZWxzZSBpZiAobWV0aG9kVHlwZSA9PT0gJ2dldCcpIHtcbiAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoc2VydmljZVVybCwge2hlYWRlcnN9KTtcbiAgfVxufVxuXG5cblxuXG5cblxufSJdfQ==