/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class HistogramComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('histogram');
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 400;
        this.color = "blue";
        this.labelflag = false;
        this.labelcolor = "black";
        this.hScale = true;
        this.level = 0;
        this.drillabledatakey = [];
        this.resizeflag = false;
        this.drillableFlag = true;
        this.values = [];
        this.array = [];
        this.xaxisArray = [];
        this.yaxisArray = [];
        this.yaxisData = [];
        this.histogramarray = [];
        this.histogramdata = [];
        this.lengtharray = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.finaldataarray = [];
        this.tooltipArray = [];
        this.index = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    res = response;
                    this.httpresponse = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.datahisto = [];
                        this.datahisto = this.getResponseData(res);
                        this.transformData();
                        this.plotXaxis();
                        this.plotYaxis();
                        this.tooltipData();
                        this.dataforChart();
                        this.transformData1(this.finaldataarray);
                        this.plotChart();
                    }, 0);
                });
            }
            else if (this.datahisto) {
                setTimeout(() => {
                    this.datahisto = this.getResponseData(this.datahisto);
                    this.transformData();
                    this.plotXaxis();
                    this.plotYaxis();
                    this.tooltipData();
                    this.dataforChart();
                    this.transformData1(this.finaldataarray);
                    this.plotChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.datahisto = this.getResponseData(this.httpresponse);
            this.transformData();
            this.plotXaxis();
            this.plotYaxis();
            this.tooltipData();
            this.dataforChart();
            this.transformData1(this.finaldataarray);
            this.plotChart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData1(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj);
            }
        });
        this.data = [];
        tempinnerarray.forEach(element => {
            this.data.push(element);
        });
        this.legends = [];
        /** @type {?} */
        let element = this.datahisto[0];
        /** @type {?} */
        let object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let keysetarray = [];
        /** @type {?} */
        let series;
        series = [];
        series = d3.stack().keys(this.keyArray)
            .offset(d3.stackOffsetDiverging)(this.data);
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach(element => {
            element.forEach(innerelement => {
                /** @type {?} */
                let singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            });
            i++;
        });
        /** @type {?} */
        let chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        this.svg = d3.select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        let barWidth = (width / this.chartData.length);
        /** @type {?} */
        let inc = barWidth / 2;
        x = d3.scalePoint()
            .domain(this.xaxisArray, function (d) { return d; })
            .rangeRound([0, width]);
        y = d3.scaleLinear().rangeRound([height, 0]);
        y.domain([0, d3.max(this.arrayofLength)]);
        /** @type {?} */
        let z = d3.scaleOrdinal(d3.schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        let horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        let histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data((d) => {
            return d;
        });
        /** @type {?} */
        let histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data((d) => {
            return d;
        });
        /** @type {?} */
        let cnt = 0;
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", (d, index) => {
            cnt++;
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", (d, index) => {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        })
            .attr("transform", function (d, i) {
            /** @type {?} */
            var translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        })
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        }).on("mousemove", (d) => {
            /** @type {?} */
            let data = d[2];
            return tooltip.html(this.setKey(data[0]))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }).on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            /** @type {?} */
            let clickdata = d[2];
            this.histogramClick(clickdata[0]);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("y", function (d, i) {
                return y(d[1]);
            })
                .text(function (d) {
                /** @type {?} */
                let data;
                /** @type {?} */
                let data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            })
                .attr("transform", function (d, i) {
                /** @type {?} */
                var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            });
        }
        //  .append("label")
        // //  .attr("width", barWidth - 1)
        //  .attr("y", (d, index) => {
        //    return y(d[1]);
        //  })
        // ---------------------------------------------------------
        //   this.svg.append("g")
        //   .selectAll("g")
        //   .data( chartdata)
        //   .enter( ).append("g")
        //   // .attr("fill", this.color)
        //   // .selectAll("rect")
        //   .data((d) => {
        //     return d;
        //   })
        //   histogramBar.enter(  )
        //   .append("text")
        //   // .attr("width", barWidth - 1)
        //   .attr("y", (d, index) => {
        //     return y(d[1]);
        //   })
        //    .attr("height", (d, index) => {
        //     return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        //   })
        //   .attr("transform", function (d, i) {
        //     var translate = [barWidth * i, 0];
        //     return "translate(" + translate + ")";
        //   })
        //   .text(function(d){
        //     console.log("aksa");
        //       return "aksa";
        //   })
        //   .style("font-weight","bold")
        // .attr("text-anchor", "middle")
        // .attr("fill", (d)=>{
        //     return "black";
        // });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    histogramClick(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        this.onLegendClick.emit(this.datahisto);
    }
    /**
     * @return {?}
     */
    transformData() {
        this.array = [];
        this.values = [];
        this.datahisto.forEach(element => {
            this.values.push(element[1]);
        });
        for (let i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    }
    /**
     * @return {?}
     */
    plotXaxis() {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        let newvalue = 0;
        /** @type {?} */
        let value = Math.ceil(d3.max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    }
    /**
     * @return {?}
     */
    plotYaxis() {
        /** @type {?} */
        let tempvalue = 0;
        /** @type {?} */
        let lengthofArray = 0;
        /** @type {?} */
        let lengthcount = 0;
        /** @type {?} */
        let templength = 0;
        /** @type {?} */
        let newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach(element1 => {
            this.yaxisArray = [];
            this.array.forEach(element2 => {
                if (tempvalue < element2 && element2 <= element1) {
                    this.yaxisArray.push(element2);
                }
                lengthofArray = this.yaxisArray.length;
            });
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            //this.histogramarray.push(this.yaxisArray);
            this.lengtharray.push(lengthofArray);
        });
        /** @type {?} */
        let value = Math.ceil(templength);
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (let i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (let i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    }
    /**
     * @return {?}
     */
    dataforChart() {
        this.finaldataarray = [] = [];
        /** @type {?} */
        let initialArray = [];
        /** @type {?} */
        let temparray = [];
        initialArray.push('level');
        /** @type {?} */
        let maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        let maxlength = maxElement;
        /** @type {?} */
        let n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        let length = this.arrayofLength.length;
        /** @type {?} */
        let num = 1;
        /** @type {?} */
        let number = 1;
        /** @type {?} */
        let j = 0;
        this.finaldataarray.push(initialArray);
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let value = this.arrayofLength[i];
            /** @type {?} */
            let tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    }
    /**
     * @return {?}
     */
    tooltipData() {
        /** @type {?} */
        let arrayofTooltip = [];
        /** @type {?} */
        let obj = { "label": "", "value": "" };
        this.datahisto.forEach(element => {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        });
        /** @type {?} */
        let value1 = this.xaxisArray[0];
        /** @type {?} */
        let tooltipdata = [];
        for (let j = 1; j < this.xaxisArray.length; j++) {
            tooltipdata = [];
            /** @type {?} */
            let value2 = this.xaxisArray[j];
            arrayofTooltip.forEach(element => {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    let tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            });
            this.tooltipArray.push(tooltipdata);
            value1 = value2;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setKey(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
HistogramComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-histogram',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize()" >
<table style="width: 100%;" #chartId >
        <tr>
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr>
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
</div>
`,
                styles: [`.bar{background-color:#3943cf;padding:.02px}`]
            },] },
];
HistogramComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
HistogramComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    datahisto: [{ type: Input, args: ['data',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};
if (false) {
    /** @type {?} */
    HistogramComponent.prototype.svgwidth;
    /** @type {?} */
    HistogramComponent.prototype.svgheight;
    /** @type {?} */
    HistogramComponent.prototype.color;
    /** @type {?} */
    HistogramComponent.prototype.datahisto;
    /** @type {?} */
    HistogramComponent.prototype.labelflag;
    /** @type {?} */
    HistogramComponent.prototype.labelcolor;
    /** @type {?} */
    HistogramComponent.prototype.hScale;
    /** @type {?} */
    HistogramComponent.prototype.chartId;
    /** @type {?} */
    HistogramComponent.prototype.divid;
    /** @type {?} */
    HistogramComponent.prototype.datareader;
    /** @type {?} */
    HistogramComponent.prototype.level;
    /** @type {?} */
    HistogramComponent.prototype.target;
    /** @type {?} */
    HistogramComponent.prototype.drillabledatakey;
    /** @type {?} */
    HistogramComponent.prototype.httpresponse;
    /** @type {?} */
    HistogramComponent.prototype.svg;
    /** @type {?} */
    HistogramComponent.prototype.resizeflag;
    /** @type {?} */
    HistogramComponent.prototype.drillableFlag;
    /** @type {?} */
    HistogramComponent.prototype.data1;
    /** @type {?} */
    HistogramComponent.prototype.values;
    /** @type {?} */
    HistogramComponent.prototype.array;
    /** @type {?} */
    HistogramComponent.prototype.xaxisArray;
    /** @type {?} */
    HistogramComponent.prototype.yaxisArray;
    /** @type {?} */
    HistogramComponent.prototype.yaxisData;
    /** @type {?} */
    HistogramComponent.prototype.histogramarray;
    /** @type {?} */
    HistogramComponent.prototype.histogramdata;
    /** @type {?} */
    HistogramComponent.prototype.lengtharray;
    /** @type {?} */
    HistogramComponent.prototype.arrayofLength;
    /** @type {?} */
    HistogramComponent.prototype.chartData;
    /** @type {?} */
    HistogramComponent.prototype.finaldataarray;
    /** @type {?} */
    HistogramComponent.prototype.legendArray;
    /** @type {?} */
    HistogramComponent.prototype.keyArray;
    /** @type {?} */
    HistogramComponent.prototype.predefinedcolors;
    /** @type {?} */
    HistogramComponent.prototype.legends;
    /** @type {?} */
    HistogramComponent.prototype.charttype;
    /** @type {?} */
    HistogramComponent.prototype.data;
    /** @type {?} */
    HistogramComponent.prototype.datareaderdata;
    /** @type {?} */
    HistogramComponent.prototype.xaxis;
    /** @type {?} */
    HistogramComponent.prototype.tempp;
    /** @type {?} */
    HistogramComponent.prototype.tooltipArray;
    /** @type {?} */
    HistogramComponent.prototype.index;
    /** @type {?} */
    HistogramComponent.prototype.myservice;
    /** @type {?} */
    HistogramComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,