/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
export class AmexioD3DounutChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     */
    constructor(myservice, cdf) {
        super('DONUTCHART');
        this.myservice = myservice;
        this.cdf = cdf;
        this.pie = false;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillableFlag = true;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                        this.data = this.getResponseData(resp);
                        //this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.response = resp;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.drillableFlag = true;
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        let outerRadius = 0;
        /** @type {?} */
        let innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const arc = d3.arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        const pie = d3.pie()
            .value((d) => {
            return d[Object.keys(d)[1]];
            //  return d.value
        });
        this.svg = d3.select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie(this.data))
            .enter();
        /** @type {?} */
        const path = this.svg.append('path')
            .attr('d', arc)
            .attr('fill', function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        })
            .attr('cursor', 'pointer')
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.DonutChartClick(d.data);
            this.fordrillableClick(this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        });
        if (this.labelflag) {
            /** @type {?} */
            const text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", function (d) {
                return "translate(" + arc.centroid(d) + ")";
            })
                .attr("text-anchor", "middle")
                .text(function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            })
                .style('fill', function (d) {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            })
                .style('font-size', '12px');
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onDonutLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color' && key != 'textcolor') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
}
AmexioD3DounutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-donut',
                template: `<div *ngIf="drillableFlag" #chartId>


    <div colspan="2" style="font-size: 18px; font-weight: bold; ">
        {{title}}
    </div>
        <div style="display: flex;flex-direction: row">
            <svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 300 300" [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
            </svg>
            <div>

           <div style="display: block; padding: 1%;">
                    <amexio-d3-legend *ngIf="legend" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
          </div>
   </div>
    `
            },] },
];
AmexioD3DounutChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef }
];
AmexioD3DounutChartComponent.propDecorators = {
    pie: [{ type: Input, args: ['pie',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillData: [{ type: Input }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.pie;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillData;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.response;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.myservice;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.cdf;
}
//# sourceMappingURL=data:application/json;base64,