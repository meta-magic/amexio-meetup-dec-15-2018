/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter } from "@angular/core";
export class AmexioD3BaseChartComponent {
    /**
     * @param {?} charttype
     */
    constructor(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @return {?}
     */
    initializeData() {
        this.data.forEach(element => {
            element.color = this.getColor(element);
        });
    }
    /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    getMultipleDrillbleKeyData(data, drillablekeys) {
        /** @type {?} */
        let nodeObject = {};
        if (data) {
            for (let index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                let element = drillablekeys[index];
                for (let [key, value] of Object.entries(data)) {
                    if (key == element) {
                        nodeObject[key] = value;
                    }
                }
                ;
            }
            return nodeObject;
        }
    }
    /**
     * @return {?}
     */
    generateId() {
        /** @type {?} */
        let id = "";
        for (let i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    getColor(object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            const color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    comboLineClick(node) {
        this.onLineClick.emit(node);
    }
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    fordrillableClick(ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    }
    /**
     * @param {?} d3
     * @return {?}
     */
    toolTip(d3) {
        return d3.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("visibility", "hidden");
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    toolTipContent(tooltipdata) {
        /** @type {?} */
        let tooltiphtml = "<table>";
        for (const key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                const value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    }
    /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    toolTipWithLegendandAxis(legend, xaxis, yaxis) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    toolTipForBar(tooltipData) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        for (let [key, value] of Object.entries(tooltipData)) {
            /** @type {?} */
            let sideStyle = "float:left";
            tooltiphtml = tooltiphtml + "<div>";
            tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
            tooltiphtml = tooltiphtml + "</div>";
        }
        return tooltiphtml;
    }
}
AmexioD3BaseChartComponent.propDecorators = {
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    onLineClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    data: [{ type: Input, args: ['data',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    legend: [{ type: Input, args: ['legend',] }],
    colors: [{ type: Input, args: ['color',] }],
    height: [{ type: Input, args: ['height',] }],
    width: [{ type: Input, args: ['width',] }],
    title: [{ type: Input, args: ['title',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLegendClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onChartClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLineClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.drillableEvent;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.legend;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.height;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.width;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.title;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.predefinedcolors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.componentId;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.possible;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colorIndex;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.charttype;
}
//# sourceMappingURL=data:application/json;base64,