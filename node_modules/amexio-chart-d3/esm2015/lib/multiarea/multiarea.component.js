/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
export class MultiareaComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super("areachart");
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 350;
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillabledatakey = [];
        this.drillableFlag = true;
        this.resizeflag = false;
        this.togglelabel = false;
        this.onLegendClick = new EventEmitter();
        this.onTooltipClick = new EventEmitter();
        this.hScale = true;
        this.margin = {};
        this.keyArray = [];
        this.transformeddata = [];
        this.data1 = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.togglelabel = false;
        /** @type {?} */
        let res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.initAreaChart();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(() => {
                    this.transformData(this.data);
                    this.initAreaChart();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initAreaChart();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @return {?}
     */
    initAreaChart() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = d3.scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = d3.scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map((d) => { return d[Object.keys(d)[0]]; });
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            d3.select("#" + this.componentId)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        /** @type {?} */
        let counter;
        /** @type {?} */
        let g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(d3.axisLeft(this.y));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        let increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    }
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    PlotLineDot(g, i, thisa) {
        /** @type {?} */
        let flag = this.togglelabel;
        /** @type {?} */
        const line = d3.line()
            .x((d) => { return thisa.x(d[Object.keys(d)[0]]); })
            .y((d) => { return thisa.y(d[Object.keys(d)[i]]); });
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", thisa.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", thisa.predefinedcolors[i])
            .attr("cx", (d) => { return thisa.x(d[Object.keys(d)[0]]); })
            .attr("cy", (d) => { return thisa.y(d[Object.keys(d)[i]]); })
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", (d) => {
            this.formTooltipData(d, i);
            return this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return this.tooltip.html(this.formTooltipData(d, i))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return this.tooltip.style("visibility", "hidden");
        })
            .style("opacity", 1)
            .on("click", (d) => {
            this.onAreaTooltipClick(d, i);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        })
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            })
                .attr("y", function (d) {
                /** @type {?} */
                let key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            })
                .text(function (d) {
                return d[Object.keys(d)[i]];
            })
                .attr("transform", "translate(" + 0 + "," + 0 + ")");
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    }
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    plotAreaChart(g, i, thisa) {
        // calculate area and valueline
        // define the line
        /** @type {?} */
        const valueline = d3.line()
            .x((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", this.predefinedColors[i])
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        let area = d3.area()
            .x((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y0(this.height)
            .y1((d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        g.append("path")
            .data([this.data])
            .attr("d", area)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", this.predefinedColors[i])
            .style("opacity", 0.5);
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    onAreaTooltipClick(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    findMaxData(data) {
        /** @type {?} */
        let tempArray = [];
        /** @type {?} */
        let largeValues = [];
        /** @type {?} */
        let maxValue;
        //logic to search 3 largest values 
        data.forEach(element => {
            /** @type {?} */
            let temp = [];
            /** @type {?} */
            let value;
            for (let [key, value] of Object.entries(element)) {
                //exempts first column of data as it is treated as x-axis
                if (key != this.keyArray[0]) {
                    tempArray.push(value);
                }
            } //for loop end
            value = this.findLargestValue(tempArray);
            largeValues.push(value);
        });
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    }
    /**
     * @param {?} array
     * @return {?}
     */
    findLargestValue(array) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let max = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            } //if ends 
        } //max ends
        return max;
    }
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        let parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.keyArray.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element;
                legendobject['color'] = this.predefinedColors[index + 1];
                this.legendArray.push(legendobject);
            }
        });
    }
    /**
     * @param {?} legendData
     * @return {?}
     */
    onAreaLegendClick(legendData) {
        /** @type {?} */
        let obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        let data = [];
        this.data.forEach(element => {
            for (let [key, value] of Object.entries(this.data[0])) {
                if (key == legendData.label) {
                    /** @type {?} */
                    let object = {};
                    object[key] = value;
                    data.push(object);
                } //inner if ends
            } //inner forloop ends
        }); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initAreaChart();
        this.plotD3Chart();
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    formTooltipData(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
}
MultiareaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiarea',
                template: `
<div  *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId>
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onAreaLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
MultiareaComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
MultiareaComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }],
    onTooltipClick: [{ type: Output }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};
if (false) {
    /** @type {?} */
    MultiareaComponent.prototype.svgwidth;
    /** @type {?} */
    MultiareaComponent.prototype.svgheight;
    /** @type {?} */
    MultiareaComponent.prototype.datareader;
    /** @type {?} */
    MultiareaComponent.prototype.level;
    /** @type {?} */
    MultiareaComponent.prototype.labelcolor;
    /** @type {?} */
    MultiareaComponent.prototype.labelflag;
    /** @type {?} */
    MultiareaComponent.prototype.target;
    /** @type {?} */
    MultiareaComponent.prototype.drillabledatakey;
    /** @type {?} */
    MultiareaComponent.prototype.httpresponse;
    /** @type {?} */
    MultiareaComponent.prototype.drillableFlag;
    /** @type {?} */
    MultiareaComponent.prototype.resizeflag;
    /** @type {?} */
    MultiareaComponent.prototype.togglelabel;
    /** @type {?} */
    MultiareaComponent.prototype.chartId;
    /** @type {?} */
    MultiareaComponent.prototype.divid;
    /** @type {?} */
    MultiareaComponent.prototype.onLegendClick;
    /** @type {?} */
    MultiareaComponent.prototype.onTooltipClick;
    /** @type {?} */
    MultiareaComponent.prototype.hScale;
    /** @type {?} */
    MultiareaComponent.prototype.svg;
    /** @type {?} */
    MultiareaComponent.prototype.x;
    /** @type {?} */
    MultiareaComponent.prototype.y;
    /** @type {?} */
    MultiareaComponent.prototype.z;
    /** @type {?} */
    MultiareaComponent.prototype.height;
    /** @type {?} */
    MultiareaComponent.prototype.width;
    /** @type {?} */
    MultiareaComponent.prototype.margin;
    /** @type {?} */
    MultiareaComponent.prototype.i;
    /** @type {?} */
    MultiareaComponent.prototype.parseTime;
    /** @type {?} */
    MultiareaComponent.prototype.keyArray;
    /** @type {?} */
    MultiareaComponent.prototype.maximumValue;
    /** @type {?} */
    MultiareaComponent.prototype.predefinedColors;
    /** @type {?} */
    MultiareaComponent.prototype.areaArray;
    /** @type {?} */
    MultiareaComponent.prototype.transformeddata;
    /** @type {?} */
    MultiareaComponent.prototype.data1;
    /** @type {?} */
    MultiareaComponent.prototype.legendArray;
    /** @type {?} */
    MultiareaComponent.prototype.tooltip;
    /** @type {?} */
    MultiareaComponent.prototype.myservice;
    /** @type {?} */
    MultiareaComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,