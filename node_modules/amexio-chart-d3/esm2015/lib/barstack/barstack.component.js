/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Output, ViewChild, ElementRef, EventEmitter } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
export class BarstackComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('barstack');
        this.myservice = myservice;
        this.device = device;
        this.maxYValue = 0;
        this.barwidth = 0;
        this.labelflag = false;
        this.title = "";
        this.legend = true;
        this.labelcolor = "black";
        this.color = [];
        this.svgwidth = 300;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.svgheight = 300;
        this.onLegendClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let res;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    //this.data = response;
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.transformData(this.data);
                        this.plotChart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(() => {
                    this.transformData(this.data1);
                    this.plotChart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.plotChart();
        }, 0);
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((element, i) => {
            if (i == 0) {
                element.forEach((innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj);
            }
        });
        this.data = [];
        tempinnerarray.forEach(element => {
            this.data.push(element);
        });
        /** @type {?} */
        let maxY = 0;
        /** @type {?} */
        let yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach((element) => {
            for (let [key, value] of Object.entries(element)) {
                this.keyArray.forEach(key1 => {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                }); //keyarray loop ends here
            } //for ends here
            yaxismaxArray.push(maxY);
            maxY = 0;
        }); // foreach ends
        // foreach ends
        /** @type {?} */
        let tempLarge = 0;
        /** @type {?} */
        let i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach((element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            if (this.color.length > 0) {
                /** @type {?} */
                let object = { 'label': element, 'color': this.color[index], 'data': legenddata.data };
                this.legends.push(object);
            }
            else {
                /** @type {?} */
                let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
                this.legends.push(object);
            }
        });
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let margin = { top: 20, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            for (let [key, value] of Object.entries(this.data[0])) {
                keysetarray.push(key);
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        let series = d3.stack().keys(this.keyArray)
            .offset(d3.stackOffsetDiverging)(this.data);
        series;
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        let width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        let height;
        // height=this.chartId.nativeElement.offsetHeight-20;
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        let x = d3.scaleBand()
            .domain(data.map((d) => {
            return d[Object.keys(d)[0]];
        }))
            .rangeRound([margin.left, width - margin.right])
            .padding(0.35);
        /** @type {?} */
        let y = d3.scaleLinear()
            .domain([d3.min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        // if (this.barwidth > 0) {
        //   this.barwidth = this.barwidth;
        // }
        // else {
        //   this.barwidth = x.bandwidth();
        // }
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(d3.axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(d3.axisLeft(y));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        let svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", (d, index) => {
            if (this.color.length > 0) {
                if (this.color[index]) {
                    return this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        })
            .selectAll("rect")
            .data((d) => {
            return d;
        });
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', (d, i) => {
            return d.data[i];
        })
            .attr("x", (d) => {
            return x(+d.data[Object.keys(d.data)[0]]);
        })
            .attr("y", (d, index) => {
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", (d, index) => {
            return y(d[0]) - y(d[1]);
        })
            .on("mouseover", (d) => {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", (d) => {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", (d) => {
            this.setBarClickText(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        });
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", (d) => {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
                // +  margin.left;
            })
                .attr("y", (d, index) => {
                return y(d[1]) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
            });
        }
    }
    /**
     * @param {?} serie
     * @return {?}
     */
    stackMin(serie) {
        return d3.min(serie, function (d) { return d[0]; });
    }
    // stackMax(serie) {
    //   return d3.max(serie, function (d) { return d[1]; });
    // }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotChart();
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    plotLine(svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach(element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                //  let object = { 'label': key, 'value': value , 'legend': d.data[Object.keys(d.data)[0]]};
                /** @type {?} */
                let object = {};
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                return (this.toolTipForBar(object));
            }
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setBarClickText(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        // let object = {};
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
}
BarstackComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-barstack',
                template: `<div   *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId  (window:resize)="resize()">
  <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>            
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
              <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                  [data]="legends" style="height:100%;">
              </amexio-d3-legend>
      </td>
  
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
BarstackComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
BarstackComponent.propDecorators = {
    data1: [{ type: Input, args: ['data',] }],
    barwidth: [{ type: Input }],
    labelflag: [{ type: Input, args: ['label',] }],
    title: [{ type: Input }],
    legend: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    color: [{ type: Input }],
    svgwidth: [{ type: Input, args: ['width',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    onLegendClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BarstackComponent.prototype.legendArray;
    /** @type {?} */
    BarstackComponent.prototype.maxYValue;
    /** @type {?} */
    BarstackComponent.prototype.keyArray;
    /** @type {?} */
    BarstackComponent.prototype.predefinedcolors;
    /** @type {?} */
    BarstackComponent.prototype.legends;
    /** @type {?} */
    BarstackComponent.prototype.charttype;
    /** @type {?} */
    BarstackComponent.prototype.data;
    /** @type {?} */
    BarstackComponent.prototype.datareaderdata;
    /** @type {?} */
    BarstackComponent.prototype.xaxis;
    /** @type {?} */
    BarstackComponent.prototype.data1;
    /** @type {?} */
    BarstackComponent.prototype.barwidth;
    /** @type {?} */
    BarstackComponent.prototype.labelflag;
    /** @type {?} */
    BarstackComponent.prototype.title;
    /** @type {?} */
    BarstackComponent.prototype.legend;
    /** @type {?} */
    BarstackComponent.prototype.labelcolor;
    /** @type {?} */
    BarstackComponent.prototype.color;
    /** @type {?} */
    BarstackComponent.prototype.svgwidth;
    /** @type {?} */
    BarstackComponent.prototype.datareader;
    /** @type {?} */
    BarstackComponent.prototype.level;
    /** @type {?} */
    BarstackComponent.prototype.target;
    /** @type {?} */
    BarstackComponent.prototype.drillabledatakey;
    /** @type {?} */
    BarstackComponent.prototype.hScale;
    /** @type {?} */
    BarstackComponent.prototype.drillableFlag;
    /** @type {?} */
    BarstackComponent.prototype.resizeflag;
    /** @type {?} */
    BarstackComponent.prototype.svgheight;
    /** @type {?} */
    BarstackComponent.prototype.chartId;
    /** @type {?} */
    BarstackComponent.prototype.divid;
    /** @type {?} */
    BarstackComponent.prototype.drillid;
    /** @type {?} */
    BarstackComponent.prototype.onLegendClick;
    /** @type {?} */
    BarstackComponent.prototype.httpresponse;
    /** @type {?} */
    BarstackComponent.prototype.svg;
    /** @type {?} */
    BarstackComponent.prototype.offsetheight;
    /** @type {?} */
    BarstackComponent.prototype.myservice;
    /** @type {?} */
    BarstackComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyc3RhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1leGlvLWNoYXJ0LWQzLyIsInNvdXJjZXMiOlsibGliL2JhcnN0YWNrL2JhcnN0YWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFNLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQXlCbkUsTUFBTSx3QkFBeUIsU0FBUSwwQkFBMEI7Ozs7O0lBaUMvRCxZQUFvQixTQUE0QixFQUFTLE1BQXlCO1FBQ2hGLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQURBLGNBQVMsR0FBVCxTQUFTLENBQW1CO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUEvQmxGLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFTYixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBQ2QsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUNsQyxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFDVixlQUFVLEdBQVcsT0FBTyxDQUFDO1FBQzFDLFVBQUssR0FBYSxFQUFFLENBQUM7UUFDZCxhQUFRLEdBQVMsR0FBRyxDQUFDO1FBRXJCLFVBQUssR0FBVyxDQUFDLENBQUM7UUFFVCxxQkFBZ0IsR0FBVSxFQUFFLENBQUE7UUFDMUIsV0FBTSxHQUFZLElBQUksQ0FBQztRQUNsRCxrQkFBYSxHQUFZLElBQUksQ0FBQztRQUM5QixlQUFVLEdBQVksS0FBSyxD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d0JBR3hCLEtBQUssU0FBQyxRQUFRO3NCQUNkLFNBQVMsU0FBQyxTQUFTO29CQUNuQixTQUFTLFNBQUMsT0FBTztzQkFDakIsU0FBUyxTQUFDLFNBQVM7NEJBQ25CLE1BQU07Ozs7SUE1QlAsd0NBQW1COztJQUNuQixzQ0FBc0I7O0lBQ3RCLHFDQUFnQjs7SUFDaEIsNkNBQXdCOztJQUN4QixvQ0FBZTs7SUFDZixzQ0FBa0I7O0lBQ2xCLGlDQUFZOztJQUNaLDJDQUFzQjs7SUFDdEIsa0NBQVc7O0lBQ1gsa0NBQXlCOztJQUN6QixxQ0FBOEI7O0lBQzlCLHNDQUEyQzs7SUFDM0Msa0NBQTRCOztJQUM1QixtQ0FBZ0M7O0lBQ2hDLHVDQUFtRDs7SUFDbkQsa0NBQThCOztJQUM5QixxQ0FBcUM7O0lBQ3JDLHVDQUFzQzs7SUFDdEMsa0NBQWtDOztJQUNsQyxtQ0FBZ0M7O0lBQ2hDLDZDQUFxRDs7SUFDckQsbUNBQWtEOztJQUNsRCwwQ0FBOEI7O0lBQzlCLHVDQUE0Qjs7SUFDNUIsc0NBQXlDOztJQUN6QyxvQ0FBMEM7O0lBQzFDLGtDQUFzQzs7SUFDdEMsb0NBQW1DOztJQUNuQywwQ0FBdUQ7O0lBQ3ZELHlDQUFrQjs7SUFDbEIsZ0NBQVM7O0lBQ1QseUNBQWlCOztJQUNMLHNDQUFvQzs7SUFBQyxtQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2UvYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbWFuRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlJztcbmltcG9ydHtEZXZpY2VRdWVyeVNlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2RldmljZS5xdWVyeS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1leGlvLWQzLWNoYXJ0LWJhcnN0YWNrJyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICAgKm5nSWY9XCJkcmlsbGFibGVGbGFnXCIgI2RpdmlkICh3aW5kb3c6cmVzaXplKT1cInJlc2l6ZSgpXCI+XG48dGFibGUgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAjY2hhcnRJZCAgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIj5cbiAgPHRyPjx0ZCBzdHlsZT1cImZvbnQtc2l6ZTogMThweDsgZm9udC13ZWlnaHQ6IGJvbGQ7IFwiPiB7e3RpdGxlfX0gPC90ZD48L3RyPlxuICA8dHI+XG4gICAgICA8dGQ+XG4gICAgICAgICAgPHN2ZyBbYXR0ci5oZWlnaHRdPVwic3ZnaGVpZ2h0XCIgW2F0dHIud2lkdGhdPVwic3Znd2lkdGhcIiBbYXR0ci5pZF09XCJjb21wb25lbnRJZFwiPlxuICAgICAgICAgIDwvc3ZnPiAgICAgICAgICAgIFxuICAgICAgPC90ZD5cbiAgPC90cj5cbiAgPHRyPlxuICAgICAgPHRkIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7IHBhZGRpbmc6IDVweDtcIj5cbiAgICAgICAgICAgICAgPGFtZXhpby1kMy1sZWdlbmQgKm5nSWY9XCJsZWdlbmRcIiBbaG9yaXpvbnRhbF09XCJ0cnVlXCIgKG9uQ2xpY2spPVwibGVnZW5kQ2xpY2soJGV2ZW50KVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRhXT1cImxlZ2VuZHNcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlxuICAgICAgICAgICAgICA8L2FtZXhpby1kMy1sZWdlbmQ+XG4gICAgICA8L3RkPlxuICBcbiAgPC90cj5cbjwvdGFibGU+XG48L2Rpdj5gLFxuICBzdHlsZXM6IFtgYF1cbn0pXG5leHBvcnQgY2xhc3MgQmFyc3RhY2tDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGxlZ2VuZEFycmF5OiBhbnlbXTtcbiAgbWF4WVZhbHVlOiBudW1iZXIgPSAwO1xuICBrZXlBcnJheTogYW55W107XG4gIHByZWRlZmluZWRjb2xvcnM6IGFueVtdO1xuICBsZWdlbmRzOiBhbnlbXTtcbiAgY2hhcnR0eXBlOiBzdHJpbmc7XG4gIGRhdGE6IGFueVtdO1xuICBkYXRhcmVhZGVyZGF0YTogYW55W107XG4gIHhheGlzOiBhbnk7XG4gIEBJbnB1dCgnZGF0YScpIGRhdGExOiBhbnlcbiAgQElucHV0KCkgYmFyd2lkdGg6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgdGl0bGU6IFN0cmluZyA9IFwiXCI7XG4gIEBJbnB1dCgpIGxlZ2VuZDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmdbXSA9IFtdO1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlcj0zMDA7XG4gIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBhbnk7XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW11cbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcbiAgZHJpbGxhYmxlRmxhZzogYm9vbGVhbiA9IHRydWU7XG4gIHJlc2l6ZWZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDMwMDtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RyaWxsaWQnKSBkcmlsbGlkOiBhbnk7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgaHR0cHJlc3BvbnNlOiBhbnk7XG4gIHN2ZzogYW55O1xuICBvZmZzZXRoZWlnaHQ6YW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG15c2VydmljZTogQ29tbWFuRGF0YVNlcnZpY2UscHJpdmF0ZSBkZXZpY2U6RGV2aWNlUXVlcnlTZXJ2aWNlKSB7XG4gICAgc3VwZXIoJ2JhcnN0YWNrJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGxldCByZXM7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAvL3RoaXMuZGF0YSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcG9uc2UpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnBsb3RDaGFydCgpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhMSkge1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGExKTtcbiAgICAgICAgICB0aGlzLnBsb3RDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGZldGNoRGF0YShkYXRhOiBhbnkpIHtcblxuICAgIGxldCByZXF1ZXN0SnNvbjtcbiAgICBsZXQga2V5ID0gdGhpcy5kcmlsbGFibGVkYXRha2V5O1xuICAgIGxldCByZXNwOiBhbnk7XG4gICAgaWYgKHRoaXMuZHJpbGxhYmxlZGF0YWtleS5sZW5ndGgpIHtcbiAgICAgIGxldCBkcmlsbGFibGVkYXRhID0gdGhpcy5nZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhLCBrZXkpO1xuICAgICAgcmVxdWVzdEpzb24gPSBkcmlsbGFibGVkYXRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlcXVlc3RKc29uID0gZGF0YTtcbiAgICB9XG5cblxuICAgIGlmICh0aGlzLmh0dHBtZXRob2QgJiYgdGhpcy5odHRwdXJsKSB7XG4gICAgICB0aGlzLm15c2VydmljZS5wb3N0ZmV0Y2hEYXRhKHRoaXMuaHR0cHVybCwgdGhpcy5odHRwbWV0aG9kLCByZXF1ZXN0SnNvbikuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNwID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgLy90aGlzLmRhdGEgPSB0aGlzLmdldFJlc3BvbnNlRGF0YShyZXNwKTtcbiAgICAgICAgICB0aGlzLmRyYXdDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuaHR0cHJlc3BvbnNlKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgdGhpcy5wbG90Q2hhcnQoKTtcbiAgICB9LCAwKTtcblxuICB9XG5cblxuICB0cmFuc2Zvcm1EYXRhKGRhdGExOiBhbnkpIHtcblxuICAgIHRoaXMua2V5QXJyYXkgPSBbXTtcbiAgICB0aGlzLmxlZ2VuZEFycmF5ID0gW107XG5cbiAgICBkYXRhMS5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5uZXJlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQXJyYXlbaW5uZXJlbGVtZW50XSA9IHsgJ2RhdGEnOiBbXSB9O1xuICAgICAgICAgICAgdGhpcy5rZXlBcnJheS5wdXNoKGlubmVyZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09IDApIHtcbiAgICAgICAgICAgIHRoaXMueGF4aXMgPSBpbm5lcmVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCB0ZW1waW5uZXJhcnJheTogYW55W107XG4gICAgdGVtcGlubmVyYXJyYXkgPSBbXTtcbiAgICBkYXRhMS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICBsZXQgb2JqOiBhbnkgPSB7fTtcbiAgICAgICAgZWxlbWVudC5mb3JFYWNoKChpbm5lcmVsZW1lbnQsIGlubmVyaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoaW5uZXJpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleUFycmF5W2lubmVyaW5kZXggLSAxXTtcbiAgICAgICAgICAgIG9ialtrZXldID0gZWxlbWVudFtpbm5lcmluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2VuZGRhdGEgPSB0aGlzLmxlZ2VuZEFycmF5W2tleV07XG4gICAgICAgICAgICBpZiAobGVnZW5kZGF0YSkge1xuICAgICAgICAgICAgICBsZWdlbmRkYXRhLmRhdGEucHVzaCh7ICd2YWx1ZSc6IGVsZW1lbnRbaW5uZXJpbmRleF0sICdsYWJlbCc6IGVsZW1lbnRbMF0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGVtcGlubmVyYXJyYXkucHVzaChvYmopO1xuICAgICAgfVxuXG4gICAgfSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGVtcGlubmVyYXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKGVsZW1lbnQpO1xuICAgIH0pO1xubGV0IG1heFk6IGFueSA9IDA7XG5cbmxldCB5YXhpc21heEFycmF5ID0gIFtdOyBcbiAgIC8vZmluZCBtYXggZm9yIHlheGlzXG4gICAgdGhpcy5kYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVsZW1lbnQpICl7XG4gICAgIFxuICAgICB0aGlzLmtleUFycmF5LmZvckVhY2goa2V5MSA9PiB7XG4gICAgICAgaWYoa2V5ID09IGtleTEpe1xuICAgICAgbWF4WSA9IG1heFkgKyB2YWx1ZTtcbiAgICAgICB9XG4gICAgIH0pOy8va2V5YXJyYXkgbG9vcCBlbmRzIGhlcmVcblxuICAgICB9Ly9mb3IgZW5kcyBoZXJlXG55YXhpc21heEFycmF5LnB1c2gobWF4WSk7XG5tYXhZID0gMDtcbiAgICB9KTsvLyBmb3JlYWNoIGVuZHNcbmxldCB0ZW1wTGFyZ2UgPSAwLCBpO1xuZm9yKGkgPSAwOyBpIDwgeWF4aXNtYXhBcnJheS5sZW5ndGg7IGkrKykge1xuaWYoeWF4aXNtYXhBcnJheVtpXSA+IHRlbXBMYXJnZSkge1xuICB0aGlzLm1heFlWYWx1ZSA9IHlheGlzbWF4QXJyYXlbaV07XG59Ly9pZiBlbmRzXG59Ly8gZm9yIGVuZHNcblxuICAgICB0aGlzLmxlZ2VuZHMgPSBbXVxuICAgIHRoaXMua2V5QXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGxlZ2VuZGRhdGEgPSB0aGlzLmxlZ2VuZEFycmF5W2VsZW1lbnRdO1xuICAgICAgaWYgKHRoaXMuY29sb3IubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgb2JqZWN0ID0geyAnbGFiZWwnOiBlbGVtZW50LCAnY29sb3InOiB0aGlzLmNvbG9yW2luZGV4XSwgJ2RhdGEnOiBsZWdlbmRkYXRhLmRhdGEgfTtcbiAgICAgICAgdGhpcy5sZWdlbmRzLnB1c2gob2JqZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBvYmplY3QgPSB7ICdsYWJlbCc6IGVsZW1lbnQsICdjb2xvcic6IHRoaXMucHJlZGVmaW5lZGNvbG9yc1tpbmRleF0sICdkYXRhJzogbGVnZW5kZGF0YS5kYXRhIH07XG4gICAgICAgIHRoaXMubGVnZW5kcy5wdXNoKG9iamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwbG90Q2hhcnQoKSB7XG4gICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbFRpcChkMyk7XG4gICAgbGV0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDMwLCBib3R0b206OTAsIGxlZnQ6IDYwIH07XG4gICAgbGV0IGNvbG9ycyA9IHRoaXMucHJlZGVmaW5lZGNvbG9ycztcbiAgXG4gICAgaWYgKHRoaXMuZGV2aWNlLklzRGVza3RvcCgpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydElkKSB7XG4gICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLnN2Z3dpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICAvL3RoaXMuc3Znd2lkdGggPSB0aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICBsZXQgZGF0YTtcbiAgICAgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBsZXQga2V5c2V0YXJyYXk6IHN0cmluZ1tdID0gW107XG4gICAgaWYgKHRoaXMuaHR0cG1ldGhvZCAmJiB0aGlzLmh0dHB1cmwpIHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGFbMF0pKSB7XG4gICAgICAgIGtleXNldGFycmF5LnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHRoaXMua2V5QXJyYXkgPSBrZXlzZXRhcnJheTtcbiAgICAgIHRoaXMua2V5QXJyYXkuc3BsaWNlKDAsIDEpO1xuICAgIH1cblxuXG4gICAgbGV0IHNlcmllcyA9IGQzLnN0YWNrKCkua2V5cyh0aGlzLmtleUFycmF5KVxuICAgICAgLm9mZnNldChkMy5zdGFja09mZnNldERpdmVyZ2luZylcbiAgICAgICh0aGlzLmRhdGEpO1xuICAgIHNlcmllc1xuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZCk7XG5cbiAgICBsZXQgd2lkdGggPSB0aGlzLnN2Z3dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgbGV0IGhlaWdodDtcbiAgIC8vIGhlaWdodD10aGlzLmNoYXJ0SWQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQtMjA7XG4gICBcbiAgICBpZih0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICB0aGlzLm9mZnNldGhlaWdodCA9IHRoaXMuY2hhcnRJZC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgIGhlaWdodCA9ICB0aGlzLm9mZnNldGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICBoZWlnaHQ9dGhpcy5jaGFydElkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0LTEwO1xuICAgICAgICAgIH1cblxuICAgIGxldCB4ID0gZDMuc2NhbGVCYW5kKClcbiAgICAgIC5kb21haW4oZGF0YS5tYXAoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGRbT2JqZWN0LmtleXMoZClbMF1dO1xuICAgICAgfSkpXG4gICAgICAucmFuZ2VSb3VuZChbbWFyZ2luLmxlZnQsIHdpZHRoIC0gbWFyZ2luLnJpZ2h0XSlcbiAgICAgIC5wYWRkaW5nKDAuMzUpO1xuXG4gICAgbGV0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFtkMy5taW4odGhpcy5zdGFja01pbihzZXJpZXMpKSwgXG4gICAgICAgIHRoaXMubWF4WVZhbHVlXG4gICAgICAgIC8vIGQzLm1heCh0aGlzLnN0YWNrTWF4KHNlcmllcykpXG4gICAgXSlcbiAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQgLSBtYXJnaW4uYm90dG9tLCBtYXJnaW4udG9wXSk7XG5cbiAgIFxuICAgIC8vIGlmICh0aGlzLmJhcndpZHRoID4gMCkge1xuICAgIC8vICAgdGhpcy5iYXJ3aWR0aCA9IHRoaXMuYmFyd2lkdGg7XG4gICAgLy8gfVxuICAgIC8vIGVsc2Uge1xuICAgIC8vICAgdGhpcy5iYXJ3aWR0aCA9IHguYmFuZHdpZHRoKCk7XG4gICAgLy8gfVxuXG5cbiAgICBpZih0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKT09dHJ1ZSlcbiAgICB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgeSgwKSArIFwiKVwiKVxuICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSk7XG4gICAgfVxuICBlbHNlXG4gICB7XG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB5KDApICsgXCIpXCIpXG4gICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSkuXG4gICAgICAgICAgIHNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgIC5hdHRyKFwieFwiLCA5KVxuICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcbiAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoNjApXCIpXG4gICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XG5cbiAgfVxuICAgXG4gICAgdGhpcy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLDApXCIpXG4gICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSk7XG5cbiAgICB0aGlzLnBsb3RMaW5lKHRoaXMuc3ZnLCB4LCB5LCBoZWlnaHQsIHdpZHRoLCBtYXJnaW4ubGVmdClcblxuICAgbGV0IHN2Z1JlY3QgPSAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAuZGF0YShzZXJpZXMpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgKGQsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5jb2xvcltpbmRleF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3JzW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgLmRhdGEoKGQpID0+IHtcbiAgICAgICAgIHJldHVybiBkO1xuICAgICAgfSlcblxuICAgICAgc3ZnUmVjdC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgoKSkuYXR0cignaWQnLCAoZCwgaSkgPT4ge1xuICAgICAgICByZXR1cm4gZC5kYXRhW2ldO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4geCgrZC5kYXRhW09iamVjdC5rZXlzKGQuZGF0YSlbMF1dKTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInlcIiwgKGQsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB5KGRbMV0pO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgKGQsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB5KGRbMF0pIC0geShkWzFdKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQ6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5odG1sKHRoaXMuc2V0S2V5KGQpKVxuICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAxMCkgKyBcInB4XCIpXG4gICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxMCkgKyBcInB4XCIpO1xuICAgICAgfSlcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLnNldEJhckNsaWNrVGV4dChkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgLy8gdGhpcy5jaGFydENsaWNrKGQpO1xuICAgICAgfSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pZih0aGlzLmxhYmVsZmxhZykge1xuc3ZnUmVjdC5lbnRlcigpXG4uYXBwZW5kKFwidGV4dFwiKVxuLnN0eWxlKFwiZm9udC13ZWlnaHRcIixcImJvbGRcIilcbi5zdHlsZShcImZvbnQtc2l6ZVwiLFwiMXZ3XCIpXG4uYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4uYXR0cihcImZpbGxcIiwgKGQpPT57XG4gIGlmKHRoaXMubGFiZWxjb2xvci5sZW5ndGg+MCl7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxjb2xvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJibGFja1wiO1xuICB9XG59KVxuIC5hdHRyKFwieFwiLCAoZCkgPT4ge1xuICByZXR1cm4geCgrZC5kYXRhW09iamVjdC5rZXlzKGQuZGF0YSlbMF1dKSArIHguYmFuZHdpZHRoKCkvMjtcbiAgLy8gKyAgbWFyZ2luLmxlZnQ7XG59KVxuLmF0dHIoXCJ5XCIsIChkLCBpbmRleCkgPT4ge1xuICByZXR1cm4geShkWzFdKSArIDIwO1xufSlcbi50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICByZXR1cm4gIGRbT2JqZWN0LmtleXMoZClbMV1dIC0gZFtPYmplY3Qua2V5cyhkKVswXV07XG59KVxufVxuIFxuICB9XG5cbiAgc3RhY2tNaW4oc2VyaWUpIHtcbiAgICByZXR1cm4gZDMubWluKHNlcmllLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFswXTsgfSk7XG4gIH1cblxuICAvLyBzdGFja01heChzZXJpZSkge1xuICAvLyAgIHJldHVybiBkMy5tYXgoc2VyaWUsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWzFdOyB9KTtcbiAgLy8gfVxuXG4gIHJlc2l6ZSgpIHtcblxuICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICB0aGlzLnJlc2l6ZWZsYWcgPSB0cnVlO1xuICAgIHRoaXMuc3Znd2lkdGggPSB0aGlzLmRpdmlkLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgdGhpcy5wbG90Q2hhcnQoKTtcblxuICB9XG5cblxuICBwbG90TGluZShzdmcsIHgsIHksIGhlaWdodCwgd2lkdGgsIG0pIHtcbiAgICBpZiAodGhpcy5oU2NhbGUpIHtcbiAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG0gKyBcIiwwKVwiKVxuICAgICAgICAuYXR0cihcImNvbG9yXCIsIFwibGlnaHRncmV5XCIpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpXG4gICAgICAgICAgLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdCgnJykpO1xuICAgIH1cbiAgfVxuXG5cbiAgbGVnZW5kQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBvYmpbXCJsYWJlbFwiXSA9IGV2ZW50LmxhYmVsO1xuICAgIGxldCBkYXRhID0gW107XG4gICAgZXZlbnQuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgbGV0IG9iamVjdCA9IHt9O1xuICAgICAgb2JqZWN0W2VsZW1lbnQubGFiZWxdID0gZWxlbWVudC52YWx1ZTtcbiAgICAgIGRhdGEucHVzaChvYmplY3QpO1xuICAgIH0pO1xuICAgIG9ialtcImRhdGFcIl0gPSBkYXRhO1xuICAgIHRoaXMub25MZWdlbmRDbGljay5lbWl0KG9iaik7XG4gIH1cblxuICBzZXRLZXkoZDogYW55KSB7XG4gICAgbGV0IGRpZmYgPSBkWzBdIC0gZFsxXTtcbiAgICBpZiAoZGlmZiA8IDApIHtcbiAgICAgIGRpZmYgPSAoZGlmZiAqICgtMSkpO1xuICAgIH1cbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZC5kYXRhKSkge1xuICAgICAgaWYgKHZhbHVlID09IGRpZmYpIHtcbiAgICAgICAgLy8gIGxldCBvYmplY3QgPSB7ICdsYWJlbCc6IGtleSwgJ3ZhbHVlJzogdmFsdWUgLCAnbGVnZW5kJzogZC5kYXRhW09iamVjdC5rZXlzKGQuZGF0YSlbMF1dfTtcbiAgICAgICAgbGV0IG9iamVjdCA9IHt9O1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICBvYmplY3RbdGhpcy54YXhpc10gPSBkLmRhdGFbT2JqZWN0LmtleXMoZC5kYXRhKVswXV07XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnRvb2xUaXBGb3JCYXIob2JqZWN0KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0QmFyQ2xpY2tUZXh0KGQ6IGFueSkge1xuICAgIGxldCBkaWZmID0gZFswXSAtIGRbMV07XG4gICAgaWYgKGRpZmYgPCAwKSB7XG4gICAgICBkaWZmID0gKGRpZmYgKiAoLTEpKTtcbiAgICB9XG4gICAgLy8gbGV0IG9iamVjdCA9IHt9O1xuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZC5kYXRhKSkge1xuICAgICAgaWYgKHZhbHVlID09IGRpZmYpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgb2JqZWN0W3RoaXMueGF4aXNdID0gZC5kYXRhW09iamVjdC5rZXlzKGQuZGF0YSlbMF1dO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG4gIGdldFJlc3BvbnNlRGF0YShodHRwUmVzcG9uc2U6IGFueSkge1xuICAgIGxldCByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgaWYgKHRoaXMuZGF0YXJlYWRlciAhPSBudWxsKSB7XG4gICAgICBjb25zdCBkciA9IHRoaXMuZGF0YXJlYWRlci5zcGxpdCgnLicpO1xuICAgICAgZm9yIChjb25zdCBpciBvZiBkcikge1xuICAgICAgICByZXNwb25zZWRhdGEgPSByZXNwb25zZWRhdGFbaXJdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZWRhdGEgPSBodHRwUmVzcG9uc2U7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZWRhdGE7XG4gIH1cblxuXG59XG4iXX0=