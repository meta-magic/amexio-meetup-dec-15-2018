/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ViewDrillableComponent } from '../../base/view.component';
export class DrillableComponent extends ViewDrillableComponent {
    constructor() {
        super();
        this.mouseLocation = { left: 0, top: 0 };
        this.componentcounter = 1;
        this.disableFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getData(data) {
        data.forEach(element => {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe((eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                });
            }
            else {
                this.disableFlag = false;
                element.drillableEvent.subscribe((eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                });
            }
        });
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    hideUI(eventRef) {
        this.ComponentDataArray.forEach(element => {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        });
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    ShowUI(eventRef) {
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach(element => {
            if (eventRef.ref.target == element.level) {
                if (this.arrayofsameLevel.length == 1) {
                    this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    this.componentcounter = element.level;
                }
                else {
                    this.contextmenuFlag = true;
                    this.mouseLocation.left = eventRef.event.clientX;
                    this.mouseLocation.top = eventRef.event.clientY;
                    this.contextStyle = this.getContextMenuStyle();
                }
            }
        });
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    previouschartClick(event) {
        /** @type {?} */
        let chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach(element => {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        });
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    sameLevelChart(eventRef) {
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach(element => {
            if (eventRef.ref.target == element.level) {
                this.arrayofsameLevel = this.arrayofsameLevel.concat(element);
            }
        });
    }
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    getContextMenuStyle() {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        /** @type {?} */
        const height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextNodeClick(event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.contextmenuFlag = false;
    }
}
DrillableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drillable',
                template: `
<div > 
    <ng-container *ngIf="disableFlag">
            <button type="button" class="button"
             (click)="previouschartClick($event)">
             <i class="fa fa-arrow-left"></i> 
             
            </button>
</ng-container>

<ng-content></ng-content>

</div>

<span [ngStyle]="contextStyle" >
  <ul *ngIf="contextmenuFlag" class="close-thik" class="context-menu-list"  >
    <span (click)="onCloseClick()" class="close"><i class="fa fa-close"></i></span>
  <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items" 
  *ngFor="let itemConfig of arrayofsameLevel">
  <em [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'19px'}"></em>
  <span style="white-space: nowrap;display: inline ; padding-left:5px">{{itemConfig.title}}
  </span>
  </li>
  </ul>
  </span>
  `,
                styles: [`.button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:"";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}`]
            },] },
];
DrillableComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DrillableComponent.prototype.mouseLocation;
    /** @type {?} */
    DrillableComponent.prototype.contextmenuFlag;
    /** @type {?} */
    DrillableComponent.prototype.contextStyle;
    /** @type {?} */
    DrillableComponent.prototype.ComponentDataArray;
    /** @type {?} */
    DrillableComponent.prototype.componentcounter;
    /** @type {?} */
    DrillableComponent.prototype.disableFlag;
    /** @type {?} */
    DrillableComponent.prototype.arrayofsameLevel;
    /** @type {?} */
    DrillableComponent.prototype.eventData;
    /** @type {?} */
    DrillableComponent.prototype.rightClickNodeData;
    /** @type {?} */
    DrillableComponent.prototype.posixUp;
    /** @type {?} */
    DrillableComponent.prototype.levelArray;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpbGxhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FtZXhpby1jaGFydC1kMy8iLCJzb3VyY2VzIjpbImxpYi9kcmlsbGFibGUvZHJpbGxhYmxlL2RyaWxsYWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUF3Q25FLE1BQU0seUJBQTBCLFNBQVEsc0JBQXNCO0lBYTVEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFaVixrQkFBYSxHQUFrQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBSW5FLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUM3QixnQkFBVyxHQUFZLEtBQUssQ0FBQztJQVE3QixDQUFDOzs7O0lBRUQsUUFBUTtJQUdSLENBQUM7Ozs7SUFFRCxlQUFlO1FBRWIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFeEMsQ0FBQzs7Ozs7SUFDRCxPQUFPLENBQUMsSUFBUztRQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFckIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDOUIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFjLEVBQUUsRUFBRTtvQkFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FB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QUFRLEVBQUUsa0JBQWtCO2dCQUM1QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5QlQ7Z0JBQ0QsTUFBTSxFQUFFLENBQUMscTVCQUFxNUIsQ0FBQzthQUNoNkI7Ozs7O0lBS0MsMkNBQW1FOztJQUNuRSw2Q0FBeUI7O0lBQ3pCLDBDQUFrQjs7SUFDbEIsZ0RBQXVCOztJQUN2Qiw4Q0FBNkI7O0lBQzdCLHlDQUE2Qjs7SUFDN0IsOENBQXNCOztJQUN0Qix1Q0FBZTs7SUFDZixnREFBd0I7O0lBQ3hCLHFDQUFpQjs7SUFDakIsd0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld0RyaWxsYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Jhc2Uvdmlldy5jb21wb25lbnQnO1xuXG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1leGlvLWRyaWxsYWJsZScsXG4gIHRlbXBsYXRlOiBgXG48ZGl2ID4gXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRpc2FibGVGbGFnXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ1dHRvblwiXG4gICAgICAgICAgICAgKGNsaWNrKT1cInByZXZpb3VzY2hhcnRDbGljaygkZXZlbnQpXCI+XG4gICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hcnJvdy1sZWZ0XCI+PC9pPiBcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy1jb250ZW50PjwvbmctY29udGVudD5cblxuPC9kaXY+XG5cbjxzcGFuIFtuZ1N0eWxlXT1cImNvbnRleHRTdHlsZVwiID5cbiAgPHVsICpuZ0lmPVwiY29udGV4dG1lbnVGbGFnXCIgY2xhc3M9XCJjbG9zZS10aGlrXCIgY2xhc3M9XCJjb250ZXh0LW1lbnUtbGlzdFwiICA+XG4gICAgPHNwYW4gKGNsaWNrKT1cIm9uQ2xvc2VDbGljaygpXCIgY2xhc3M9XCJjbG9zZVwiPjxpIGNsYXNzPVwiZmEgZmEtY2xvc2VcIj48L2k+PC9zcGFuPlxuICA8bGkgKGNsaWNrKT1cIm9uQ29udGV4dE5vZGVDbGljayhpdGVtQ29uZmlnKVwiIGNsYXNzPVwiY29udGV4dC1tZW51LWxpc3QtaXRlbXNcIiBcbiAgKm5nRm9yPVwibGV0IGl0ZW1Db25maWcgb2YgYXJyYXlvZnNhbWVMZXZlbFwiPlxuICA8ZW0gW25nU3R5bGVdPVwieydwYWRkaW5nLWxlZnQnOiBpdGVtQ29uZmlnLmljb24gPyAnNXB4JzonMTlweCd9XCI+PC9lbT5cbiAgPHNwYW4gc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm93cmFwO2Rpc3BsYXk6IGlubGluZSA7IHBhZGRpbmctbGVmdDo1cHhcIj57e2l0ZW1Db25maWcudGl0bGV9fVxuICA8L3NwYW4+XG4gIDwvbGk+XG4gIDwvdWw+XG4gIDwvc3Bhbj5cbiAgYCxcbiAgc3R5bGVzOiBbYC5idXR0b257cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyOjFweCBzb2xpZCAjNTU1O2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjojMDAwO3BhZGRpbmc6LjVyZW0gMXJlbTt0ZXh0LWFsaWduOmNlbnRlcjt0cmFuc2l0aW9uLWR1cmF0aW9uOi40czt0ZXh0LWRlY29yYXRpb246bm9uZTtvdmVyZmxvdzpoaWRkZW47Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyLXJhZGl1czozcHh9LmJ1dHRvbjphZnRlcntjb250ZW50OlwiXCI7YmFja2dyb3VuZDojMDAwO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7cGFkZGluZy10b3A6MzAwJTtwYWRkaW5nLWxlZnQ6MzUwJTttYXJnaW4tbGVmdDotMjBweCFpbXBvcnRhbnQ7bWFyZ2luLXRvcDotMTIwJTtvcGFjaXR5OjA7dHJhbnNpdGlvbjouOHN9LmJ1dHRvbjphY3RpdmU6YWZ0ZXJ7cGFkZGluZzowO21hcmdpbjowO29wYWNpdHk6MTt0cmFuc2l0aW9uOm5vbmV9LmNvbnRleHQtbWVudS1saXN0e2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi13aWR0aDoxODBweDtjdXJzb3I6cG9pbnRlcjttYXgtaGVpZ2h0OjE1MHB4O3otaW5kZXg6MTtwYWRkaW5nOjEwcHggMDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjojZmZmIWltcG9ydGFudDtib3gtc2hhZG93OjAgNXB4IDVweCAtM3B4IHJnYmEoMCwwLDAsLjIpLDAgOHB4IDEwcHggMXB4IHJnYmEoMCwwLDAsLjE0KSwwIDNweCAxNHB4IDJweCByZ2JhKDAsMCwwLC4xMil9LmNvbnRleHQtbWVudS1saXN0IC5jb250ZXh0LW1lbnUtbGlzdC1pdGVtc3t0ZXh0LWRlY29yYXRpb246bm9uZTtmb250LXNpemU6MTRweCFpbXBvcnRhbnQ7cGFkZGluZzo1cHg7ZGlzcGxheTpibG9ja30uY2xvc2V7ZmxvYXQ6cmlnaHQ7cGFkZGluZy1yaWdodDo4cHg7Y3Vyc29yOnBvaW50ZXJ9YF1cbn0pXG5cblxuZXhwb3J0IGNsYXNzIERyaWxsYWJsZUNvbXBvbmVudCBleHRlbmRzIFZpZXdEcmlsbGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIG1vdXNlTG9jYXRpb246IHsgbGVmdDogbnVtYmVyOyB0b3A6IG51bWJlciB9ID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgY29udGV4dG1lbnVGbGFnOiBib29sZWFuO1xuICBjb250ZXh0U3R5bGU6IGFueTtcbiAgQ29tcG9uZW50RGF0YUFycmF5OiBhbnlcbiAgY29tcG9uZW50Y291bnRlcjogbnVtYmVyID0gMTtcbiAgZGlzYWJsZUZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgYXJyYXlvZnNhbWVMZXZlbDogYW55O1xuICBldmVudERhdGE6IGFueTtcbiAgcmlnaHRDbGlja05vZGVEYXRhOiBhbnk7XG4gIHBvc2l4VXA6IGJvb2xlYW47XG4gIGxldmVsQXJyYXk6IGFueTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuXG5cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblxuICAgIHRoaXMuQ29tcG9uZW50RGF0YUFycmF5ID0gdGhpcy5nZXRDb21wb25lbnREYXRhKCk7XG4gICAgdGhpcy5nZXREYXRhKHRoaXMuQ29tcG9uZW50RGF0YUFycmF5KTtcblxuICB9XG4gIGdldERhdGEoZGF0YTogYW55KSB7XG4gICAgZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXG4gICAgICBpZiAoZWxlbWVudC5sZXZlbCAhPT0gMSkge1xuICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUZsYWcgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC5kcmlsbGFibGVFdmVudC5zdWJzY3JpYmUoKGV2ZW50ZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5oaWRlVUkoZXZlbnRkYXRhKTtcbiAgICAgICAgICB0aGlzLnNhbWVMZXZlbENoYXJ0KGV2ZW50ZGF0YSk7XG4gICAgICAgICAgdGhpcy5TaG93VUkoZXZlbnRkYXRhKTtcblxuXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlRmxhZyA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUV2ZW50LnN1YnNjcmliZSgoZXZlbnRkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLmhpZGVVSShldmVudGRhdGEpO1xuICAgICAgICAgIHRoaXMuc2FtZUxldmVsQ2hhcnQoZXZlbnRkYXRhKTtcbiAgICAgICAgICB0aGlzLlNob3dVSShldmVudGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICBoaWRlVUkoZXZlbnRSZWY6IGFueSkge1xuICAgIHRoaXMuQ29tcG9uZW50RGF0YUFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5sZXZlbCA9PSBldmVudFJlZi5yZWYubGV2ZWwpIHtcbiAgICAgICAgZXZlbnRSZWYucmVmLmRyaWxsYWJsZUZsYWcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgU2hvd1VJKGV2ZW50UmVmOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50RGF0YSA9IFtdO1xuICAgIHRoaXMuZXZlbnREYXRhID0gZXZlbnRSZWY7XG4gICAgdGhpcy5Db21wb25lbnREYXRhQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChldmVudFJlZi5yZWYudGFyZ2V0ID09IGVsZW1lbnQubGV2ZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuYXJyYXlvZnNhbWVMZXZlbC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIHRoaXMuZGlzYWJsZUZsYWcgPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5mZXRjaERhdGEoZXZlbnRSZWYubm9kZSk7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnRjb3VudGVyID0gZWxlbWVudC5sZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRtZW51RmxhZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5tb3VzZUxvY2F0aW9uLmxlZnQgPSBldmVudFJlZi5ldmVudC5jbGllbnRYO1xuICAgICAgICAgIHRoaXMubW91c2VMb2NhdGlvbi50b3AgPSBldmVudFJlZi5ldmVudC5jbGllbnRZO1xuICAgICAgICAgIHRoaXMuY29udGV4dFN0eWxlID0gdGhpcy5nZXRDb250ZXh0TWVudVN0eWxlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgaWYgKHRoaXMuY29tcG9uZW50Y291bnRlciA9PSBldmVudFJlZi5yZWYubGV2ZWwpIHtcbiAgICAgIGV2ZW50UmVmLnJlZi5kcmlsbGFibGVGbGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgfVxuICBwcmV2aW91c2NoYXJ0Q2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGxldCBjaGFydExldmVsID0gdGhpcy5jb21wb25lbnRjb3VudGVyIC0gMTtcbiAgICB0aGlzLkNvbXBvbmVudERhdGFBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGNoYXJ0TGV2ZWwgPT0gZWxlbWVudC5sZXZlbCkge1xuICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUZsYWcgPSB0cnVlO1xuICAgICAgICBlbGVtZW50LmRyYXdDaGFydCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudGNvdW50ZXIgPT0gZWxlbWVudC5sZXZlbCkge1xuICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUZsYWcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGhpcy5jb21wb25lbnRjb3VudGVyID09IDIpIHtcbiAgICAgIHRoaXMuZGlzYWJsZUZsYWcgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRjb3VudGVyID0gY2hhcnRMZXZlbDtcbiAgfVxuXG5cbiAgc2FtZUxldmVsQ2hhcnQoZXZlbnRSZWY6IGFueSkge1xuICBcbiAgICB0aGlzLmFycmF5b2ZzYW1lTGV2ZWwgPSBbXTtcbiAgICB0aGlzLkNvbXBvbmVudERhdGFBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50UmVmLnJlZi50YXJnZXQgPT0gZWxlbWVudC5sZXZlbCkge1xuICAgICAgICB0aGlzLmFycmF5b2ZzYW1lTGV2ZWwgPSB0aGlzLmFycmF5b2ZzYW1lTGV2ZWwuY29uY2F0KGVsZW1lbnQpO1xuXG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8vTWV0aG9kIENyZWF0ZXMgc3R5bGUgaWYgdHdvIHNhbWUgdGFyZ2V0cyBmb3VuZC5cbiAgZ2V0Q29udGV4dE1lbnVTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ2N1cnNvcic6ICdkZWZhdWx0JyxcbiAgICAgICdwb3NpdGlvbic6ICdmaXhlZCcsXG4gICAgICAnZGlzcGxheSc6IHRoaXMuY29udGV4dG1lbnVGbGFnID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgICdsZWZ0JzogdGhpcy5tb3VzZUxvY2F0aW9uLmxlZnQgKyAncHgnLFxuICAgICAgJ3RvcCc6IHRoaXMubW91c2VMb2NhdGlvbi50b3AgKyAncHgnLFxuICAgICAgJ2JveC1zaGFkb3cnOiAnMXB4IDFweCAycHggIzAwMDAwMCcsXG4gICAgICAnd2lkdGgnOiAnMTUlJyxcbiAgICB9O1xuICB9XG5cblxuXG4gIGdldExpc3RQb3NpdGlvbihlbGVtZW50UmVmOiBhbnkpOiBib29sZWFuIHtcbiAgICBjb25zdCBoZWlnaHQgPSAyNDA7XG4gICAgaWYgKCh3aW5kb3cuc2NyZWVuLmhlaWdodCAtIGVsZW1lbnRSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tKSA8IGhlaWdodCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBvbkNvbnRleHROb2RlQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIHRoaXMuY29tcG9uZW50Y291bnRlciA9IDA7XG4gICAgdGhpcy5jb250ZXh0bWVudUZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLmV2ZW50RGF0YS5yZWYuZHJpbGxhYmxlRmxhZyA9IGZhbHNlO1xuICAgIHRoaXMuZGlzYWJsZUZsYWcgPSB0cnVlO1xuICAgIGV2ZW50LmRyaWxsYWJsZUZsYWcgPSB0cnVlO1xuICAgIGV2ZW50LmZldGNoRGF0YSh0aGlzLmV2ZW50RGF0YS5ub2RlKTtcbiAgICB0aGlzLmNvbXBvbmVudGNvdW50ZXIgPSBldmVudC5sZXZlbDtcblxuICAgIGlmICh0aGlzLmNvbXBvbmVudGNvdW50ZXIgPT0gdGhpcy5ldmVudERhdGEucmVmLmxldmVsKSB7XG4gICAgICB0aGlzLmV2ZW50RGF0YS5yZWYuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgb25DbG9zZUNsaWNrKCkge1xuICAgIHRoaXMuY29udGV4dG1lbnVGbGFnID0gZmFsc2U7XG4gIH1cblxufVxuIl19