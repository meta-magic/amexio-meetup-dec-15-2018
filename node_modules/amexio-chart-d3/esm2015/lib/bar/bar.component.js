/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class AmexioD3BarChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bar');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.horizontal = false;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.resizeflag = false;
        this.drillableFlag = true;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 30, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = d3.scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = d3.scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
                //    return d.label
            }));
            y.domain([0, d3.max(this.data, (d) => {
                    return d[Object.keys(d)[1]];
                    //return d.value;
                })]);
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (d) => {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            })
                .attr("y", (d) => {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (d) => { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", (d) => {
                // return "blue";
                return d.color;
            })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            x = d3.scaleLinear()
                .rangeRound([0, width]);
            y = d3.scaleBand()
                .rangeRound([height, 0]).padding(0.1);
            //setting content for x and y axis
            x.domain([0, d3.max(this.data, (d) => {
                    return parseInt(d[Object.keys(d)[1]]
                    // d.value
                    );
                })]);
            // d[Object.keys(d)[1]]
            y.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
                //return d.label;
            }));
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x).ticks(10));
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (d) => {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            })
                .attr("cursor", "pointer")
                .attr("width", (d) => {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            })
                .attr("height", y.bandwidth())
                .style("fill", (d) => { return d.color; })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            });
            if (this.labelflag) {
                /** @type {?} */
                let yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", (d, i) => {
                    return x(d[Object.keys(d)[1]]) + yTextPadding;
                })
                    .attr("y", (d, i) => {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                })
                    .text((d) => {
                    return d[Object.keys(d)[1]];
                });
            }
        } //else ends(horizontal bar logic ends)
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resize(data) {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
}
AmexioD3BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bar',
                template: `<div *ngIf="drillableFlag"  #divid (window:resize)="resize($event)" >
<table style="width: 100%;" position=" relative" #chartId >
    <tr>
        <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
    </tr>
    <tr>
        <td>
            <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId" 
          >
            </svg>
        </td>
    </tr>
    <tr>
        <td style="display: block; padding: 5px;">
            <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
            </amexio-d3-legend>
        </td>
    </tr>
</table>
</div>`
            },] },
];
AmexioD3BarChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3BarChartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    horizontal: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.horizontal;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.checkmob;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.xaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.yaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.colorflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.object;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.myservice;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.cdf;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,