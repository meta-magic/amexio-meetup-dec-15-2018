/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
export class CombochartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} device
     */
    constructor(myservice, device) {
        super('combochart');
        this.myservice = myservice;
        this.device = device;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.lineColor = "black";
        this.horizontal = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.drillableFlag = true;
        this.resizeflag = false;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((response) => {
                    resp = response;
                    this.httpresponse = response;
                }, (error) => {
                }, () => {
                    setTimeout(() => {
                        this.data = this.getResponseData(resp);
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(() => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }, 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((response) => {
                resp = response;
                this.httpresponse = response;
            }, (error) => {
            }, () => {
                setTimeout(() => {
                    // this.data = this.getResponseData(resp);
                    this.drawChart();
                }, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout(() => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initializeData();
            this.plotD3Chart();
        }, 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        let lineName = this.lineInput;
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 85, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        let height;
        console.log("offsetheight", this.offsetheight);
        if (this.device.IsDesktop() == true) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight - 20 - 90;
            height = this.offsetheight;
        }
        else {
            height = this.svgheight - margin.top - margin.bottom;
        }
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = d3.scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = d3.scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map((d) => {
                return d[Object.keys(d)[0]];
            }));
            /** @type {?} */
            let barRange = d3.max(this.data, (d) => {
                return d[Object.keys(d)[1]];
            });
            /** @type {?} */
            let lineRange = d3.max(this.data, (d) => {
                return d[this.lineInput];
            });
            /** @type {?} */
            let range;
            if (barRange > lineRange) {
                range = barRange;
            }
            else {
                range = lineRange;
            }
            y.domain([0, range]);
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(65)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (d) => {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("y", (d) => {
                return y(d[Object.keys(d)[1]]);
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (d) => { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", (d) => {
                return d.color;
            })
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code start
            /** @type {?} */
            let valueline = d3.line()
                .x(function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .y(function (d) {
                return y(d[lineName]);
            });
            /** @type {?} */
            let shift = margin.left + x.bandwidth() / 2;
            this.svg.append("path")
                .data([this.data])
                .attr("fill", "none")
                .style("stroke", this.lineColor)
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + shift + ", 20 )")
                .attr("d", valueline);
            /** @type {?} */
            let points1 = this.svg.selectAll("circle.point1")
                .data(this.data);
            points1.enter().append("circle")
                .merge(points1)
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", this.lineColor)
                .style("fill", this.lineColor)
                .attr("cx", (d) => {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", (d) => {
                return y(d[lineName]);
            })
                .attr("r", (d) => { return 5; })
                .attr("transform", "translate( " + shift + ", 20 )")
                .on("mouseover", (d) => {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", (d) => {
                return tooltip.html(this.formTooltipLineData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", (d) => {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", (d) => {
                this.onComboLineClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code ends
        }
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach(element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        });
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onComboLineClick(data) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            if (key != "color") {
                object[key] = value;
            }
        }
        this.comboLineClick(object);
        //this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    formTooltipLineData(data) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            if (key == this.lineInput) {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @return {?}
     */
    resize() {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        //  this.svgheight=this.offsetheight;
        this.plotD3Chart();
    }
}
CombochartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-combochart',
                template: `<div *ngIf="drillableFlag" #divid (window:resize)="resize()">
<table style="width: 100%;" #chartId >
  <tr>
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr>
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
</div>`,
                styles: [``]
            },] },
];
CombochartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: DeviceQueryService }
];
CombochartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    lineColor: [{ type: Input, args: ['line-color',] }],
    horizontal: [{ type: Input }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    lineInput: [{ type: Input, args: ['line-data-index',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }]
};
if (false) {
    /** @type {?} */
    CombochartComponent.prototype.svgwidth;
    /** @type {?} */
    CombochartComponent.prototype.svgheight;
    /** @type {?} */
    CombochartComponent.prototype.lineColor;
    /** @type {?} */
    CombochartComponent.prototype.horizontal;
    /** @type {?} */
    CombochartComponent.prototype.chartId;
    /** @type {?} */
    CombochartComponent.prototype.divid;
    /** @type {?} */
    CombochartComponent.prototype.datareader;
    /** @type {?} */
    CombochartComponent.prototype.level;
    /** @type {?} */
    CombochartComponent.prototype.target;
    /** @type {?} */
    CombochartComponent.prototype.drillabledatakey;
    /** @type {?} */
    CombochartComponent.prototype.lineInput;
    /** @type {?} */
    CombochartComponent.prototype.hScale;
    /** @type {?} */
    CombochartComponent.prototype.drillableFlag;
    /** @type {?} */
    CombochartComponent.prototype.resizeflag;
    /** @type {?} */
    CombochartComponent.prototype.data;
    /** @type {?} */
    CombochartComponent.prototype.svg;
    /** @type {?} */
    CombochartComponent.prototype.colorflag;
    /** @type {?} */
    CombochartComponent.prototype.keyArray;
    /** @type {?} */
    CombochartComponent.prototype.transformeddata;
    /** @type {?} */
    CombochartComponent.prototype.object;
    /** @type {?} */
    CombochartComponent.prototype.legendArray;
    /** @type {?} */
    CombochartComponent.prototype.httpresponse;
    /** @type {?} */
    CombochartComponent.prototype.offsetheight;
    /** @type {?} */
    CombochartComponent.prototype.myservice;
    /** @type {?} */
    CombochartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,