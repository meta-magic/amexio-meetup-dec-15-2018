/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
export class AmexioD3PieChartComponent {
    constructor() {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.colors = [];
        this.width = "300";
        this.height = "300";
        this.title = "";
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillableFlag = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    fordrillableClick(ref) {
        this.drillableEvent.emit(ref);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        this.drillData = data;
    }
    /**
     * @return {?}
     */
    drawChart() {
        this.donutref.drillableFlag = true;
        this.donutref.drawChart();
    }
}
AmexioD3PieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-pie',
                template: `<div   *ngIf="drillableFlag">
<amexio-d3-chart-donut #id (onLegendClick)="legendClick($event)" 
                       (onChartClick)="chartClick($event)" 
                       (drillableEvent)=" fordrillableClick($event)"
                        [height]="height"
                        [width]="width"
                        [title]="title"
                        [data] = "data"
                        [pie]  = "true"
                        [color]="colors"
                        [http-url]="httpurl"
                        [http-method]="httpmethod"
                        [data-reader]="datareader"
                        [label]="labelflag"
                        [label-color]="labelcolor"
                        [level]="level"
                        [target]="target"
                        [drillable-data]="drillabledatakey"
                        [drillData]="drillData">
</amexio-d3-chart-donut>
</div>
`
            },] },
];
AmexioD3PieChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    donutref: [{ type: ViewChild, args: ['id',] }],
    legend: [{ type: Input }],
    colors: [{ type: Input, args: ['color',] }],
    width: [{ type: Input, args: ['width',] }],
    height: [{ type: Input, args: ['height',] }],
    title: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.onLegendClick;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.onChartClick;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.drillableEvent;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.donutref;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.legend;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.colors;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.width;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.height;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.title;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3PieChartComponent.prototype.drillData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FtZXhpby1jaGFydC1kMy8iLCJzb3VyY2VzIjpbImxpYi9waWUvcGllLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBQyxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUE2Qm5HLE1BQU07SUF6Qk47UUE2Qlksa0JBQWEsR0FBUSxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRTdDLGlCQUFZLEdBQVEsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU1QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJckMsV0FBTSxHQUFZLElBQUksQ0FBRTtRQUVqQixXQUFNLEdBQVEsRUFBRSxDQUFDO1FBRWpCLFVBQUssR0FBUSxLQUFLLENBQUM7UUFFbEIsV0FBTSxHQUFRLEtBQUssQ0FBQztRQUU1QixVQUFLLEdBQVEsRUFBRSxDQUFDO1FBUVIsVUFBSyxHQUFHLENBQUMsQ0FBRTtRQU1MLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFFbkMsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUUzQyxrQkFBYSxHQUFXLElBQUksQ0FBQztJQW1DaEMsQ0FBQzs7OztJQTlCQyxRQUFRO0lBRVIsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsSUFBUTtRQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxJQUFRO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFHRCxpQkFBaUIsQ0FBQyxHQUFPO1FBRXRCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUYsU0FBUyxDQUFDLElBQVE7UUFFVCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDOzs7O0lBRUYsU0FBUztRQUdELElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRWxDLENBQUM7OztZQWpHRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQlg7YUFDQTs7O21CQUdFLEtBQUssU0FBQyxNQUFNOzRCQUVaLE1BQU07MkJBRU4sTUFBTTs2QkFFTixNQUFNO3VCQUVOLFNBQVMsU0FBQyxJQUFJO3FCQUVkLEtBQUs7cUJBRUwsS0FBSyxTQUFDLE9BQU87b0JBRWIsS0FBSyxTQUFDLE9BQU87cUJBRWIsS0FBSyxTQUFDLFFBQVE7b0JBRWQsS0FBSztzQkFFSixLQUFLLFNBQUMsVUFBVTt5QkFFaEIsS0FBSyxTQUFDLGFBQWE7eUJBRW5CLEtBQUssU0FBQyxhQUFhO29CQUVuQixLQUFLLFNBQUMsT0FBTztxQkFFYixLQUFLLFNBQUMsUUFBUTsrQkFFZCxLQUFLLFNBQUMsZ0JBQWdCO3lCQUV0QixLQUFLLFNBQUMsYUFBYTt3QkFFbkIsS0FBSyxTQUFDLE9BQU87Ozs7SUFsQ2YseUNBQXlCOztJQUV6QixrREFBdUQ7O0lBRXZELGlEQUFzRDs7SUFFdEQsbURBQThDOztJQUU5Qyw2Q0FBK0I7O0lBRS9CLDJDQUFpQzs7SUFFakMsMkNBQWlDOztJQUVqQywwQ0FBbUM7O0lBRW5DLDJDQUFxQzs7SUFFckMsMENBQXlCOztJQUV4Qiw0Q0FBZ0M7O0lBRWhDLCtDQUFzQzs7SUFFdEMsK0NBQXlDOztJQUV6QywwQ0FBMkI7O0lBRTNCLDJDQUErQjs7SUFFL0IscURBQTZDOztJQUU3QywrQ0FBbUQ7O0lBRW5ELDhDQUEyQzs7SUFFM0Msa0RBQTZCOztJQUU3Qiw4Q0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlcixWaWV3Q2hpbGQsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCxIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1leGlvLWQzLWNoYXJ0LXBpZScsXG4gIHRlbXBsYXRlOiBgPGRpdiAgICpuZ0lmPVwiZHJpbGxhYmxlRmxhZ1wiPlxuPGFtZXhpby1kMy1jaGFydC1kb251dCAjaWQgKG9uTGVnZW5kQ2xpY2spPVwibGVnZW5kQ2xpY2soJGV2ZW50KVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAob25DaGFydENsaWNrKT1cImNoYXJ0Q2xpY2soJGV2ZW50KVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAoZHJpbGxhYmxlRXZlbnQpPVwiIGZvcmRyaWxsYWJsZUNsaWNrKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2hlaWdodF09XCJoZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW3dpZHRoXT1cIndpZHRoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt0aXRsZV09XCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbZGF0YV0gPSBcImRhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW3BpZV0gID0gXCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtjb2xvcl09XCJjb2xvcnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2h0dHAtdXJsXT1cImh0dHB1cmxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2h0dHAtbWV0aG9kXT1cImh0dHBtZXRob2RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2RhdGEtcmVhZGVyXT1cImRhdGFyZWFkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhYmVsXT1cImxhYmVsZmxhZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFiZWwtY29sb3JdPVwibGFiZWxjb2xvclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGV2ZWxdPVwibGV2ZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW3RhcmdldF09XCJ0YXJnZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2RyaWxsYWJsZS1kYXRhXT1cImRyaWxsYWJsZWRhdGFrZXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2RyaWxsRGF0YV09XCJkcmlsbERhdGFcIj5cbjwvYW1leGlvLWQzLWNoYXJ0LWRvbnV0PlxuPC9kaXY+XG5gXG59KVxuZXhwb3J0IGNsYXNzIEFtZXhpb0QzUGllQ2hhcnRDb21wb25lbnQgIGltcGxlbWVudHMgIE9uSW5pdCB7XG5cbiAgQElucHV0KCdkYXRhJykgZGF0YTogYW55O1xuXG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KCkgb25DaGFydENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KCkgZHJpbGxhYmxlRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQFZpZXdDaGlsZCgnaWQnKSBkb251dHJlZjogYW55O1xuXG4gIEBJbnB1dCgpIGxlZ2VuZDogYm9vbGVhbiA9IHRydWUgO1xuXG4gIEBJbnB1dCgnY29sb3InKSBjb2xvcnM6IGFueSA9IFtdO1xuXG4gIEBJbnB1dCgnd2lkdGgnKSB3aWR0aDogYW55ID0gXCIzMDBcIjtcblxuICBASW5wdXQoJ2hlaWdodCcpIGhlaWdodDogYW55ID0gXCIzMDBcIjtcblxuICBASW5wdXQoKSB0aXRsZTogYW55ID0gXCJcIjtcblxuICAgQElucHV0KCdodHRwLXVybCcpIGh0dHB1cmw6IGFueTtcbiAgICBcbiAgIEBJbnB1dCgnaHR0cC1tZXRob2QnKSBodHRwbWV0aG9kOiBhbnk7XG5cbiAgIEBJbnB1dCgnZGF0YS1yZWFkZXInKSBkYXRhcmVhZGVyOiBzdHJpbmc7XG5cbiAgIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbCA9IDAgO1xuXG4gICBASW5wdXQoJ3RhcmdldCcpIHRhcmdldDpudW1iZXI7XG5cbiAgIEBJbnB1dCgnZHJpbGxhYmxlLWRhdGEnKSBkcmlsbGFibGVkYXRha2V5OmFueVxuXG4gICBASW5wdXQoJ2xhYmVsLWNvbG9yJykgbGFiZWxjb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xuXG4gICBASW5wdXQoJ2xhYmVsJykgbGFiZWxmbGFnOiBib29sZWFuID0gZmFsc2U7XG4gICBcbiAgIGRyaWxsYWJsZUZsYWc6Ym9vbGVhbiA9IHRydWU7XG5cbiAgIGRyaWxsRGF0YTogYW55O1xuICBcbiAgXG4gIG5nT25Jbml0KCl7XG4gIFxuICB9XG4gIFxuICBsZWdlbmRDbGljayhub2RlOmFueSl7XG4gICAgdGhpcy5vbkxlZ2VuZENsaWNrLmVtaXQobm9kZSk7XG4gIH1cblxuICBjaGFydENsaWNrKG5vZGU6YW55KXtcbiAgICAgICB0aGlzLm9uQ2hhcnRDbGljay5lbWl0KG5vZGUpO1xuICB9XG5cblxuICBmb3JkcmlsbGFibGVDbGljayhyZWY6YW55KVxuICB7XG4gICAgIHRoaXMuZHJpbGxhYmxlRXZlbnQuZW1pdChyZWYsKTtcbiAgfVxuXG4gZmV0Y2hEYXRhKGRhdGE6YW55KVxuICAge1xuICAgICAgICAgIHRoaXMuZHJpbGxEYXRhID0gZGF0YTsgICBcbiAgIH1cblxuICBkcmF3Q2hhcnQoKVxuICB7XG4gICAgXG4gICAgICAgICAgdGhpcy5kb251dHJlZi5kcmlsbGFibGVGbGFnPXRydWU7XG4gICAgICAgICAgdGhpcy5kb251dHJlZi5kcmF3Q2hhcnQoKTtcblxuICB9XG59XG4iXX0=