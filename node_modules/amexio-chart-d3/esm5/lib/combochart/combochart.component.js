/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
var CombochartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CombochartComponent, _super);
    function CombochartComponent(myservice, device) {
        var _this = _super.call(this, 'combochart') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.lineColor = "black";
        _this.horizontal = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CombochartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    // this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CombochartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var lineName = this.lineInput;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 85, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height;
        console.log("offsetheight", this.offsetheight);
        if (this.device.IsDesktop() == true) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight - 20 - 90;
            height = this.offsetheight;
        }
        else {
            height = this.svgheight - margin.top - margin.bottom;
        }
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (this.horizontal == false) {
            x = d3.scaleBand()
                .rangeRound([0, width])
                .padding(0.1);
            y = d3.scaleLinear()
                .rangeRound([height, 0]);
            //setting content for x and y axis
            x.domain(this.data.map(function (d) {
                return d[Object.keys(d)[0]];
            }));
            /** @type {?} */
            var barRange = d3.max(this.data, function (d) {
                return d[Object.keys(d)[1]];
            });
            /** @type {?} */
            var lineRange = d3.max(this.data, function (d) {
                return d[_this.lineInput];
            });
            /** @type {?} */
            var range = void 0;
            if (barRange > lineRange) {
                range = barRange;
            }
            else {
                range = lineRange;
            }
            y.domain([0, range]);
            if (this.device.IsDesktop() == true) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(65)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y)
                .ticks(10));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("y", function (d) {
                return y(d[Object.keys(d)[1]]);
            })
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d[Object.keys(d)[1]]); })
                .style("fill", function (d) {
                return d.color;
            })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code start
            /** @type {?} */
            var valueline = d3.line()
                .x(function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .y(function (d) {
                return y(d[lineName]);
            });
            /** @type {?} */
            var shift = margin.left + x.bandwidth() / 2;
            this.svg.append("path")
                .data([this.data])
                .attr("fill", "none")
                .style("stroke", this.lineColor)
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + shift + ", 20 )")
                .attr("d", valueline);
            /** @type {?} */
            var points1 = this.svg.selectAll("circle.point1")
                .data(this.data);
            points1.enter().append("circle")
                .merge(points1)
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", this.lineColor)
                .style("fill", this.lineColor)
                .attr("cx", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) {
                return y(d[lineName]);
            })
                .attr("r", function (d) { return 5; })
                .attr("transform", "translate( " + shift + ", 20 )")
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipLineData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.onComboLineClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            //line code ends
        }
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    CombochartComponent.prototype.onBarLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        this.legendClick(obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CombochartComponent.prototype.barChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.onComboLineClick = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != "color") {
                    object[key] = value;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.comboLineClick(object);
        var e_4, _d;
        //this.chartClick(object);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipLineData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key == this.lineInput) {
                    object[key] = value;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return this.toolTipForBar(object);
        var e_5, _d;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        //  this.svgheight=this.offsetheight;
        this.plotD3Chart();
    };
    CombochartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-combochart',
                    template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    CombochartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    CombochartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        lineColor: [{ type: Input, args: ['line-color',] }],
        horizontal: [{ type: Input }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        lineInput: [{ type: Input, args: ['line-data-index',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return CombochartComponent;
}(AmexioD3BaseChartComponent));
export { CombochartComponent };
if (false) {
    /** @type {?} */
    CombochartComponent.prototype.svgwidth;
    /** @type {?} */
    CombochartComponent.prototype.svgheight;
    /** @type {?} */
    CombochartComponent.prototype.lineColor;
    /** @type {?} */
    CombochartComponent.prototype.horizontal;
    /** @type {?} */
    CombochartComponent.prototype.chartId;
    /** @type {?} */
    CombochartComponent.prototype.divid;
    /** @type {?} */
    CombochartComponent.prototype.datareader;
    /** @type {?} */
    CombochartComponent.prototype.level;
    /** @type {?} */
    CombochartComponent.prototype.target;
    /** @type {?} */
    CombochartComponent.prototype.drillabledatakey;
    /** @type {?} */
    CombochartComponent.prototype.lineInput;
    /** @type {?} */
    CombochartComponent.prototype.hScale;
    /** @type {?} */
    CombochartComponent.prototype.drillableFlag;
    /** @type {?} */
    CombochartComponent.prototype.resizeflag;
    /** @type {?} */
    CombochartComponent.prototype.data;
    /** @type {?} */
    CombochartComponent.prototype.svg;
    /** @type {?} */
    CombochartComponent.prototype.colorflag;
    /** @type {?} */
    CombochartComponent.prototype.keyArray;
    /** @type {?} */
    CombochartComponent.prototype.transformeddata;
    /** @type {?} */
    CombochartComponent.prototype.object;
    /** @type {?} */
    CombochartComponent.prototype.legendArray;
    /** @type {?} */
    CombochartComponent.prototype.httpresponse;
    /** @type {?} */
    CombochartComponent.prototype.offsetheight;
    /** @type {?} */
    CombochartComponent.prototype.myservice;
    /** @type {?} */
    CombochartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,