/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, ViewChild, ChangeDetectorRef } from '@angular/core';
import { AmexioD3BaseChartComponent } from '../../base/base.component';
import { CommanDataService } from '../../services/comman.data.service';
import { DeviceQueryService } from '../../services/device.query.service';
import * as d3 from 'd3';
var BubbleComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BubbleComponent, _super);
    function BubbleComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bubble') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.vScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.colors = [];
        _this.xaxisArray = [];
        _this.xarray = [];
        _this.legends = [];
        _this.legendarray = [];
        _this.legendData = [];
        _this.minxvalue = 0;
        _this.maxxvalue = 0;
        _this.bubblechartdata = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    BubbleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.data1 = _this.data;
                        _this.xaxisData();
                        _this.transformData(_this.data1);
                        _this.transformdata();
                        _this.colorGeneration();
                        _this.formLegendData();
                        _this.plotBubbleChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data1 = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.xaxisData();
                    _this.transformData(_this.data);
                    _this.transformdata();
                    _this.colorGeneration();
                    _this.formLegendData();
                    _this.plotBubbleChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.data1 = _this.data;
            _this.xaxisData();
            _this.transformData(_this.data1);
            _this.transformdata();
            _this.colorGeneration();
            _this.formLegendData();
            _this.plotBubbleChart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BubbleComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                });
                _this.transformeddata.push(DummyObject_1);
            }
        });
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.plotBubbleChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = d3.scaleLinear()
            .rangeRound([0, width]);
        y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = d3.axisBottom(x);
        /** @type {?} */
        var yAxis = d3.axisLeft(y);
        this.svg = d3.select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]] })]);
        y.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[2]]; })]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        var rScale = d3.scaleSqrt().rangeRound([6, 30]);
        rScale.domain([d3.min(this.data, function (d) { return d[Object.keys(d)[4]]; }), d3.max(this.data, function (d, i) { return d[Object.keys(d)[4]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        var node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", function (d) { return rScale(d[Object.keys(d)[4]]); })
            .attr("cursor", "pointer")
            .attr("cx", function (d) {
            return x(d[Object.keys(d)[1]]);
        })
            .attr("cy", function (d) { return y(d[Object.keys(d)[2]]); })
            .attr("fill", function (d) { return d[Object.keys(d)[5]]; })
            .attr('opacity', 0.7)
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.formTooltipData(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.bubbleChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    BubbleComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    BubbleComponent.prototype.bubbleChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                object[key] = value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.resize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotBubbleChart();
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.xaxisData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach(function (element) {
            array.push(element[1]);
        });
        for (var i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        var minvalue = Math.floor(d3.min(this.xaxisArray));
        /** @type {?} */
        var maxvalue = Math.ceil(d3.max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.data1
            .map(function (e) { return e[3]; })
            .filter(function (e, i, a) { return a.indexOf(e) === i; });
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.colordata.forEach(function (element) {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    BubbleComponent.prototype.onBubbleLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        this.legendarray.forEach(function (element) {
            if (legendevent.label == element.label) {
                _this.legendClick(element.value);
            }
        });
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    BubbleComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.transformdata = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.bubblechartdata = [];
        /** @type {?} */
        var buubledata = [];
        this.colordata.forEach(function (element, i) {
            buubledata.push(element[Object.keys(element)[4]]);
        });
        /** @type {?} */
        var data = buubledata.sort(function (a, b) { return b - a; });
        var _loop_2 = function (j) {
            this_2.colordata.forEach(function (element) {
                if (data[j] == element[Object.keys(element)[4]])
                    _this.bubblechartdata.push(element);
            });
        };
        var this_2 = this;
        for (var j = 0; j <= data.length; j++) {
            _loop_2(j);
        }
    };
    BubbleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bubble',
                    template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize($event)\">\n<table style=\"width: 100%;\" #chartId >\n  <tr>\n      <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBubbleLegendClick($event)\" [data]=\"legendData\" style=\"height:100%;\"></amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    BubbleComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    BubbleComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return BubbleComponent;
}(AmexioD3BaseChartComponent));
export { BubbleComponent };
if (false) {
    /** @type {?} */
    BubbleComponent.prototype.svgwidth;
    /** @type {?} */
    BubbleComponent.prototype.svgheight;
    /** @type {?} */
    BubbleComponent.prototype.color;
    /** @type {?} */
    BubbleComponent.prototype.chartId;
    /** @type {?} */
    BubbleComponent.prototype.divid;
    /** @type {?} */
    BubbleComponent.prototype.datareader;
    /** @type {?} */
    BubbleComponent.prototype.level;
    /** @type {?} */
    BubbleComponent.prototype.target;
    /** @type {?} */
    BubbleComponent.prototype.drillabledatakey;
    /** @type {?} */
    BubbleComponent.prototype.hScale;
    /** @type {?} */
    BubbleComponent.prototype.vScale;
    /** @type {?} */
    BubbleComponent.prototype.drillableFlag;
    /** @type {?} */
    BubbleComponent.prototype.resizeflag;
    /** @type {?} */
    BubbleComponent.prototype.keyArray;
    /** @type {?} */
    BubbleComponent.prototype.transformeddata;
    /** @type {?} */
    BubbleComponent.prototype.colors;
    /** @type {?} */
    BubbleComponent.prototype.data1;
    /** @type {?} */
    BubbleComponent.prototype.xaxisArray;
    /** @type {?} */
    BubbleComponent.prototype.xarray;
    /** @type {?} */
    BubbleComponent.prototype.legends;
    /** @type {?} */
    BubbleComponent.prototype.legendarray;
    /** @type {?} */
    BubbleComponent.prototype.legendData;
    /** @type {?} */
    BubbleComponent.prototype.minxvalue;
    /** @type {?} */
    BubbleComponent.prototype.maxxvalue;
    /** @type {?} */
    BubbleComponent.prototype.colordata;
    /** @type {?} */
    BubbleComponent.prototype.bubblechartdata;
    /** @type {?} */
    BubbleComponent.prototype.httpresponse;
    /** @type {?} */
    BubbleComponent.prototype.svg;
    /** @type {?} */
    BubbleComponent.prototype.myservice;
    /** @type {?} */
    BubbleComponent.prototype.cdf;
    /** @type {?} */
    BubbleComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,