/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter } from "@angular/core";
var AmexioD3BaseChartComponent = /** @class */ (function () {
    function AmexioD3BaseChartComponent(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.initializeData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data.forEach(function (element) {
            element.color = _this.getColor(element);
        });
    };
    /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getMultipleDrillbleKeyData = /**
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    function (data, drillablekeys) {
        /** @type {?} */
        var nodeObject = {};
        if (data) {
            for (var index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                var element = drillablekeys[index];
                try {
                    for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key == element) {
                            nodeObject[key] = value;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                ;
            }
            return nodeObject;
        }
        var e_1, _d;
    };
    /**
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.generateId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "";
        for (var i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getColor = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            var color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.comboLineClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLineClick.emit(node);
    };
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    };
    /**
     * @param {?} d3
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTip = /**
     * @param {?} d3
     * @return {?}
     */
    function (d3) {
        return d3.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("visibility", "hidden");
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipContent = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var tooltiphtml = "<table>";
        for (var key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                var value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    };
    /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipWithLegendandAxis = /**
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    function (legend, xaxis, yaxis) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipForBar = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                /** @type {?} */
                var sideStyle = "float:left";
                tooltiphtml = tooltiphtml + "<div>";
                tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
                tooltiphtml = tooltiphtml + "</div>";
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tooltiphtml;
        var e_2, _d;
    };
    AmexioD3BaseChartComponent.propDecorators = {
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        onLineClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        data: [{ type: Input, args: ['data',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        legend: [{ type: Input, args: ['legend',] }],
        colors: [{ type: Input, args: ['color',] }],
        height: [{ type: Input, args: ['height',] }],
        width: [{ type: Input, args: ['width',] }],
        title: [{ type: Input, args: ['title',] }]
    };
    return AmexioD3BaseChartComponent;
}());
export { AmexioD3BaseChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLegendClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onChartClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLineClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.drillableEvent;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.legend;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.height;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.width;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.title;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.predefinedcolors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.componentId;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.possible;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colorIndex;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.charttype;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbWV4aW8tY2hhcnQtZDMvIiwic291cmNlcyI6WyJsaWIvYmFzZS9iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RDtJQXNDSSxvQ0FBWSxTQUFnQjtRQWxDbEIsa0JBQWEsR0FBUSxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRTdDLGlCQUFZLEdBQVEsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU1QyxnQkFBVyxHQUFRLElBQUksWUFBWSxFQUFPLENBQUM7UUFFM0MsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBUTdCLFdBQU0sR0FBWSxJQUFJLENBQUU7UUFJeEIsV0FBTSxHQUFRLEtBQUssQ0FBQztRQUVyQixVQUFLLEdBQVMsS0FBSyxDQUFDO1FBRXBCLFVBQUssR0FBUSxFQUFFLENBQUM7UUFNdkIsYUFBUSxHQUFZLHVEQUF1RCxDQUFDO1FBRXJGLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFLbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JQLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBSSxHQUFHLEdB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Q0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnR7XG5cbiAgIFxuXG4gICAgQE91dHB1dCgpIG9uTGVnZW5kQ2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgQE91dHB1dCgpIG9uQ2hhcnRDbGljazogYW55ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KCkgb25MaW5lQ2xpY2s6IGFueSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgXG4gICAgQE91dHB1dCgpIGRyaWxsYWJsZUV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIFxuICAgIEBJbnB1dCgnZGF0YScpIGRhdGE6IGFueTtcblxuICAgIEBJbnB1dCgnaHR0cC11cmwnKSBodHRwdXJsOiBhbnk7XG4gICAgXG4gICAgQElucHV0KCdodHRwLW1ldGhvZCcpIGh0dHBtZXRob2Q6IGFueTtcblxuICAgIEBJbnB1dCgnbGVnZW5kJykgbGVnZW5kOiBib29sZWFuID0gdHJ1ZSA7XG5cbiAgICBASW5wdXQoJ2NvbG9yJykgY29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoJ2hlaWdodCcpIGhlaWdodDogYW55ID0gXCIzMDBcIjtcblxuICAgIEBJbnB1dCgnd2lkdGgnKSB3aWR0aCA6IGFueSA9IFwiMzAwXCI7XG5cbiAgICBASW5wdXQoJ3RpdGxlJykgdGl0bGU6IGFueSA9IFwiXCI7XG5cbiAgICBwcmVkZWZpbmVkY29sb3JzOiBzdHJpbmdbXTtcbiAgICBcbiAgICBjb21wb25lbnRJZCA6IHN0cmluZztcblxuICAgIHByaXZhdGUgIHBvc3NpYmxlIDogc3RyaW5nID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RkZWZnaGlqa2xtb25wcXJzdHV2d3h5elwiO1xuXG4gICAgY29sb3JJbmRleDogbnVtYmVyID0gMDtcblxuICAgIGNoYXJ0dHlwZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGNoYXJ0dHlwZTpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jb2xvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5jaGFydHR5cGUgPSBjaGFydHR5cGU7XG4gICAgICAgIHRoaXMucHJlZGVmaW5lZGNvbG9ycyA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuICAgICAgICB0aGlzLmNvbXBvbmVudElkID0gdGhpcy5jaGFydHR5cGUgICsgXCItXCIgKyB0aGlzLmdlbmVyYXRlSWQoKTtcbiAgICB9XG4gIFxuICAgIHByb3RlY3RlZCBpbml0aWFsaXplRGF0YSgpIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgZWxlbWVudC5jb2xvciA9IHRoaXMuZ2V0Q29sb3IoZWxlbWVudCk7XG4gICAgICAgICAgIH0pO1xuICAgICB9XG5cbiAgICAgIHByb3RlY3RlZCBnZXRNdWx0aXBsZURyaWxsYmxlS2V5RGF0YShkYXRhOmFueSxkcmlsbGFibGVrZXlzOmFueSlcbiAgICAgIHtcbiAgICAgICBcbiAgICAgICAgICBsZXQgbm9kZU9iamVjdD17fTtcbiAgICAgICAgICBpZihkYXRhKVxuICAgICAgICAgIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkcmlsbGFibGVrZXlzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICBsZXQgZWxlbWVudCA9IGRyaWxsYWJsZWtleXNbaW5kZXhdO1xuICAgICAgICAgICBmb3IgKGxldCBba2V5LHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gZWxlbWVudCkgXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVPYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbm9kZU9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICBcbiB9XG4gICAgIFxuIHByaXZhdGUgZ2VuZXJhdGVJZCgpe1xuICAgICAgIGxldCBpZCA9IFwiXCI7XG4gICAgICAgZm9yKGxldCBpID0gMDsgaTw1OyBpKyspe1xuICAgICAgICBpZCA9IGlkICsgdGhpcy5wb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdGhpcy5wb3NzaWJsZS5sZW5ndGgpKTtcbiAgICAgICB9XG4gICAgICAgaWQgPSBpZCArIFwiLVwiK25ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICBwcml2YXRlICBnZXRDb2xvcihvYmplY3QgOiBhbnkpe1xuICAgICAgICBpZiAob2JqZWN0LmNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29sb3JzLmxlbmd0aCA+IHRoaXMuY29sb3JJbmRleCkge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmNvbG9yc1t0aGlzLmNvbG9ySW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5jb2xvckluZGV4Kys7XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHRoaXMuY29sb3JzLmxlbmd0aCA+IDApICYmICh0aGlzLmNvbG9ycy5sZW5ndGggPD0gdGhpcy5jb2xvckluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5jb2xvckluZGV4ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcnNbdGhpcy5jb2xvckluZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5wcmVkZWZpbmVkY29sb3JzW3RoaXMuY29sb3JJbmRleF07XG4gICAgICAgICAgICB0aGlzLmNvbG9ySW5kZXgrKztcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbGVnZW5kQ2xpY2sobm9kZTphbnkpe1xuICAgICAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChub2RlKTtcbiAgICB9XG5cbiAgICBjaGFydENsaWNrKG5vZGU6YW55KXtcbiAgICAgICAgdGhpcy5vbkNoYXJ0Q2xpY2suZW1pdChub2RlKTtcbiAgICB9XG4gICAgXG4gICAgY29tYm9MaW5lQ2xpY2sobm9kZTogYW55KXtcbiAgICAgICAgdGhpcy5vbkxpbmVDbGljay5lbWl0KG5vZGUpO1xuICAgIH1cbiAgICBmb3JkcmlsbGFibGVDbGljayhyZWY6IGFueSxub2RlOiBhbnksZXZlbnQ6IGFueSlcbiAgICAge1xuICAgICAgICB0aGlzLmRyaWxsYWJsZUV2ZW50LmVtaXQoe3JlZjogcmVmLG5vZGU6IG5vZGUsZXZlbnQ6IGV2ZW50fSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB0b29sVGlwIChkMzphbnkpIDphbnl7XG4gICAgICAgcmV0dXJuICBkMy5zZWxlY3QoXCJib2R5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsJ3Rvb2x0aXBpZCcpXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywnYW1leGlvZDN0b29sdGlwJylcbiAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwiei1pbmRleFwiLCBcIjEwXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcENvbnRlbnQodG9vbHRpcGRhdGE6YW55KSA6YW55e1xuICAgICAgIGxldCB0b29sdGlwaHRtbCA9IFwiPHRhYmxlPlwiO1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9vbHRpcGRhdGEpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRvb2x0aXBkYXRhW2tleV07XG4gICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHRyPlwiO1xuLy8tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8dGQ+XCI7XG4gICAgICAgIC8vICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIGtleSsnOic7XG4gICAgICAgIC8vICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC90ZD5cIjtcbi8vLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHRkPlwiO1xuICAgICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyB2YWx1ZTtcbiAgICAgICAgICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8L3RkPlwiO1xuICAgICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjwvdHI+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjwvdGFibGU+XCI7XG5cbiAgICAgIHJldHVybiB0b29sdGlwaHRtbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcFdpdGhMZWdlbmRhbmRBeGlzKGxlZ2VuZDogc3RyaW5nLCB4YXhpczpzdHJpbmcsIHlheGlzOiBzdHJpbmcpIDphbnl7XG4gICAgICAgIGxldCB0b29sdGlwaHRtbCA9IFwiPGRpdj5cIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPGI+XCIreGF4aXMrXCI8L2I+LCBcIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIGxlZ2VuZCtcIjwvYj4gXCI7XG4gICAgICAgIHRvb2x0aXBodG1sID0gdG9vbHRpcGh0bWwgKyBcIjxiPlwiK3lheGlzK1wiPC9iPiBcIjtcbiAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC9kaXY+XCI7XG4gICAgICAgIHJldHVybiB0b29sdGlwaHRtbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdG9vbFRpcEZvckJhcih0b29sdGlwRGF0YTogYW55KTogYW55e1xuICAgICAgICAgbGV0IHRvb2x0aXBodG1sPSBcIjxkaXY+XCI7XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0b29sdGlwRGF0YSkpIHtcbiAgICAgICAgICAgIGxldCBzaWRlU3R5bGU9XCJmbG9hdDpsZWZ0XCI7XG4gICAgICAgICAgICB0b29sdGlwaHRtbCA9IHRvb2x0aXBodG1sICsgXCI8ZGl2PlwiO1xuICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPHNwYW4gc3R5bGUgPVwiK3NpZGVTdHlsZStcIiA+PGI+XCIgKyBrZXkgK1wiIFwiKyBcIjwvYj5cIiArdmFsdWUgKyBcIjwvYnI+PC9zcGFuPlwiO1xuICAgICAgICAgdG9vbHRpcGh0bWwgPSB0b29sdGlwaHRtbCArIFwiPC9kaXY+XCI7XG4gICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHRvb2x0aXBodG1sO1xuICAgIH1cblxufSJdfQ==