/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var CommanDataService = /** @class */ (function () {
    function CommanDataService(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    CommanDataService.prototype.fetchUrlData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    function (serviceUrl, methodType) {
        /** @type {?} */
        var requestJson = {};
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    CommanDataService.prototype.postfetchData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    function (serviceUrl, methodType, requestJson) {
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    CommanDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    CommanDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ CommanDataService.ngInjectableDef = i0.defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(i0.inject(i1.HttpClient)); }, token: CommanDataService, providedIn: "root" });
    return CommanDataService;
}());
export { CommanDataService };
if (false) {
    /** @type {?} */
    CommanDataService.prototype.serviceUrl;
    /** @type {?} */
    CommanDataService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuLmRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FtZXhpby1jaGFydC1kMy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9jb21tYW4uZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQWtCLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFHL0U7SUFLRSwyQkFBb0IsSUFBZTtRQUFmLFNBQUksR0FBSixJQUFJLENBQVc7SUFBSSxDQUFDOzs7Ozs7SUFHeEMsd0NBQVk7Ozs7O0lBQVosVUFBYSxVQUFrQixFQUFFLFVBQWtCOztZQUMzQyxXQUFXLEdBQUcsRUFBRTs7WUFDaEIsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBQyxPQUFPLFNBQUEsRUFBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFHRCx5Q0FBYTs7Ozs7O0lBQWIsVUFBYyxVQUFrQixFQUFFLFVBQWtCLEVBQUMsV0FBZTs7WUFFNUQsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQztRQUMxRixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFDLE9BQU8sU0FBQSxFQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBQyxPQUFPLFNBQUEsRUFBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQztJQUNILENBQUM7O2dCQTNCQSxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Z0JBTFEsVUFBVTs7OzRCQURuQjtDQXNDQyxBQWxDRCxJQWtDQztTQS9CWSxpQkFBaUI7OztJQUc1Qix1Q0FBbUI7O0lBRFAsaUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCxIdHRwQ2xpZW50TW9kdWxlLEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMvaW5kZXgnO1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29tbWFuRGF0YVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDpIdHRwQ2xpZW50KSB7IH1cbiAgc2VydmljZVVybDogc3RyaW5nO1xuXG4gIGZldGNoVXJsRGF0YShzZXJ2aWNlVXJsOiBzdHJpbmcsIG1ldGhvZFR5cGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgcmVxdWVzdEpzb24gPSB7fTtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgaWYgKG1ldGhvZFR5cGUgPT09ICdwb3N0Jykge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChzZXJ2aWNlVXJsLCByZXF1ZXN0SnNvbiwge2hlYWRlcnN9KTtcbiAgICB9ZWxzZSBpZiAobWV0aG9kVHlwZSA9PT0gJ2dldCcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChzZXJ2aWNlVXJsLCB7aGVhZGVyc30pO1xuICAgIH1cbn1cblxuXG5wb3N0ZmV0Y2hEYXRhKHNlcnZpY2VVcmw6IHN0cmluZywgbWV0aG9kVHlwZTogc3RyaW5nLHJlcXVlc3RKc29uOmFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gXG4gIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnKTtcbiAgaWYgKG1ldGhvZFR5cGUgPT09ICdwb3N0Jykge1xuICByZXR1cm4gdGhpcy5odHRwLnBvc3Qoc2VydmljZVVybCwgcmVxdWVzdEpzb24sIHtoZWFkZXJzfSk7XG4gIH1lbHNlIGlmIChtZXRob2RUeXBlID09PSAnZ2V0Jykge1xuICByZXR1cm4gdGhpcy5odHRwLmdldChzZXJ2aWNlVXJsLCB7aGVhZGVyc30pO1xuICB9XG59XG5cblxuXG5cblxuXG59Il19