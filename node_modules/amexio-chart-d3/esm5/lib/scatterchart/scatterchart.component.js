/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
var ScatterchartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ScatterchartComponent, _super);
    function ScatterchartComponent(myservice, device) {
        var _this = _super.call(this, 'scatter') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.vScale = true;
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendarray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.dataFormatted = _this.data;
                        _this.transformData(_this.dataFormatted);
                        _this.colorGeneration();
                        _this.legendCreation();
                        _this.plotScatterChart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.dataFormatted = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.colorGeneration();
                    _this.legendCreation();
                    _this.plotScatterChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.dataFormatted = _this.data;
            _this.transformData(_this.data);
            _this.colorGeneration();
            _this.legendCreation();
            _this.plotScatterChart();
        }, 0);
    };
    // Method to transform data in key value pair 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.transformData = 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                });
                _this.transformeddata.push(DummyObject_1);
            }
        });
        this.data = this.transformeddata;
    };
    // Method get response data using data reader
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    ScatterchartComponent.prototype.getResponseData = 
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    // Method to plot d3 chart
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.plotScatterChart = 
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = d3.scaleLinear()
            .rangeRound([0, width]);
        y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = d3.axisBottom(x);
        /** @type {?} */
        var yAxis = d3.axisLeft(y);
        this.svg = d3.select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[0]]; })]);
        y.domain([0, d3.max(this.data, function (d) { return d[Object.keys(d)[1]]; })]);
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "start");
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                debugger;
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", function (d) {
                return x(d[Object.keys(d)[0]]);
            })
                .attr("cy", function (d) { return y(d[Object.keys(d)[1]]); })
                .attr("fill", function (d) { return d[Object.keys(d)[4]]; })
                .on("mouseover", function (d) {
                return tooltip.style("visibility", "visible");
            })
                .on("mousemove", function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })
                .on("mouseout", function (d) {
                return tooltip.style("visibility", "hidden");
            })
                .on("click", function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            });
            if (this.labelflag) {
                this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                })
                    .attr("x", function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                })
                    .attr("y", function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                })
                    .text(function (d) {
                    return d[Object.keys(d)[1]];
                });
            }
        }
    };
    // Method to form tooltip data
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    ScatterchartComponent.prototype.formTooltipData = 
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    ScatterchartComponent.prototype.scatterChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                object[key] = value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    // method to create Legend
    // method to create Legend
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.legendCreation = 
    // method to create Legend
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            var element = this.dataFormatted[0];
            /** @type {?} */
            var object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach(function (element) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                _this.legends.push(legendobject);
            });
        }
    };
    // Method on Legend Click
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    ScatterchartComponent.prototype.onScatterLegendClick = 
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach(function (element) {
                if (legendevent.label == element.label) {
                    _this.legendClick(element.value);
                }
            });
        }
    };
    // Method for responsiveness
    // Method for responsiveness
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.resize = 
    // Method for responsiveness
    /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotScatterChart();
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    ScatterchartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.dataFormatted
            .map(function (e) { return e[2]; })
            .filter(function (e, i, a) { return a.indexOf(e) === i; });
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.transformeddata.forEach(function (element) {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            });
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        });
    };
    ScatterchartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-scatter',
                    template: "<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n    <table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onScatterLegendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>",
                    styles: [""]
                },] },
    ];
    ScatterchartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    ScatterchartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return ScatterchartComponent;
}(AmexioD3BaseChartComponent));
export { ScatterchartComponent };
if (false) {
    /** @type {?} */
    ScatterchartComponent.prototype.svgwidth;
    /** @type {?} */
    ScatterchartComponent.prototype.svgheight;
    /** @type {?} */
    ScatterchartComponent.prototype.color;
    /** @type {?} */
    ScatterchartComponent.prototype.labelcolor;
    /** @type {?} */
    ScatterchartComponent.prototype.labelflag;
    /** @type {?} */
    ScatterchartComponent.prototype.chartId;
    /** @type {?} */
    ScatterchartComponent.prototype.divid;
    /** @type {?} */
    ScatterchartComponent.prototype.datareader;
    /** @type {?} */
    ScatterchartComponent.prototype.level;
    /** @type {?} */
    ScatterchartComponent.prototype.target;
    /** @type {?} */
    ScatterchartComponent.prototype.drillabledatakey;
    /** @type {?} */
    ScatterchartComponent.prototype.hScale;
    /** @type {?} */
    ScatterchartComponent.prototype.vScale;
    /** @type {?} */
    ScatterchartComponent.prototype.drillableFlag;
    /** @type {?} */
    ScatterchartComponent.prototype.resizeflag;
    /** @type {?} */
    ScatterchartComponent.prototype.svg;
    /** @type {?} */
    ScatterchartComponent.prototype.keyArray;
    /** @type {?} */
    ScatterchartComponent.prototype.transformeddata;
    /** @type {?} */
    ScatterchartComponent.prototype.data;
    /** @type {?} */
    ScatterchartComponent.prototype.dataFormatted;
    /** @type {?} */
    ScatterchartComponent.prototype.colordata;
    /** @type {?} */
    ScatterchartComponent.prototype.legends;
    /** @type {?} */
    ScatterchartComponent.prototype.legendarray;
    /** @type {?} */
    ScatterchartComponent.prototype.legendData;
    /** @type {?} */
    ScatterchartComponent.prototype.httpresponse;
    /** @type {?} */
    ScatterchartComponent.prototype.myservice;
    /** @type {?} */
    ScatterchartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,