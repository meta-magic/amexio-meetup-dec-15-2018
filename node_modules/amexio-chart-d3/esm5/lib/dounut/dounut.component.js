/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
var AmexioD3DounutChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3DounutChartComponent, _super);
    function AmexioD3DounutChartComponent(myservice, cdf) {
        var _this = _super.call(this, 'DONUTCHART') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.pie = false;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillableFlag = true;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.drawChart();
                        _this.data = _this.getResponseData(resp_1);
                        //this.transformData(this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }, 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.response = resp;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.drillableFlag = true;
            _this.initializeData();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        var outerRadius = 0;
        /** @type {?} */
        var innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var arc = d3.arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        var pie = d3.pie()
            .value(function (d) {
            return d[Object.keys(d)[1]];
            //  return d.value
        });
        this.svg = d3.select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie(this.data))
            .enter();
        /** @type {?} */
        var path = this.svg.append('path')
            .attr('d', arc)
            .attr('fill', function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        })
            .attr('cursor', 'pointer')
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.DonutChartClick(d.data);
            _this.fordrillableClick(_this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        });
        if (this.labelflag) {
            /** @type {?} */
            var text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", function (d) {
                return "translate(" + arc.centroid(d) + ")";
            })
                .attr("text-anchor", "middle")
                .text(function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            })
                .style('fill', function (d) {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            })
                .style('font-size', '12px');
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        });
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.onDonutLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color' && key != 'textcolor') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.DonutChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    AmexioD3DounutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-donut',
                    template: "<div *ngIf=\"drillableFlag\" #chartId>\n\n\n    <div colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \">\n        {{title}}\n    </div>\n        <div style=\"display: flex;flex-direction: row\">\n            <svg preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 300 300\" [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n            <div>\n\n           <div style=\"display: block; padding: 1%;\">\n                    <amexio-d3-legend *ngIf=\"legend\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n          </div>\n   </div>\n    "
                },] },
    ];
    AmexioD3DounutChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef }
    ]; };
    AmexioD3DounutChartComponent.propDecorators = {
        pie: [{ type: Input, args: ['pie',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillData: [{ type: Input }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return AmexioD3DounutChartComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3DounutChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.pie;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillData;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.response;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.myservice;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.cdf;
}
//# sourceMappingURL=data:application/json;base64,