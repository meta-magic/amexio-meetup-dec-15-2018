/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
var HistogramComponent = /** @class */ (function (_super) {
    tslib_1.__extends(HistogramComponent, _super);
    function HistogramComponent(myservice, device) {
        var _this = _super.call(this, 'histogram') || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 400;
        _this.color = "blue";
        _this.labelflag = false;
        _this.labelcolor = "black";
        _this.hScale = true;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.resizeflag = false;
        _this.drillableFlag = true;
        _this.values = [];
        _this.array = [];
        _this.xaxisArray = [];
        _this.yaxisArray = [];
        _this.yaxisData = [];
        _this.histogramarray = [];
        _this.histogramdata = [];
        _this.lengtharray = [];
        _this.arrayofLength = [];
        _this.chartData = [];
        _this.finaldataarray = [];
        _this.tooltipArray = [];
        _this.index = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    HistogramComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    res = response;
                    _this.httpresponse = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.datahisto = [];
                        _this.datahisto = _this.getResponseData(res);
                        _this.transformData();
                        _this.plotXaxis();
                        _this.plotYaxis();
                        _this.tooltipData();
                        _this.dataforChart();
                        _this.transformData1(_this.finaldataarray);
                        _this.plotChart();
                    }, 0);
                });
            }
            else if (this.datahisto) {
                setTimeout(function () {
                    _this.datahisto = _this.getResponseData(_this.datahisto);
                    _this.transformData();
                    _this.plotXaxis();
                    _this.plotYaxis();
                    _this.tooltipData();
                    _this.dataforChart();
                    _this.transformData1(_this.finaldataarray);
                    _this.plotChart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    HistogramComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.datahisto = _this.getResponseData(_this.httpresponse);
            _this.transformData();
            _this.plotXaxis();
            _this.plotYaxis();
            _this.tooltipData();
            _this.dataforChart();
            _this.transformData1(_this.finaldataarray);
            _this.plotChart();
        }, 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    HistogramComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    HistogramComponent.prototype.transformData1 = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach(function (element, i) {
            if (i == 0) {
                element.forEach(function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                });
            }
        });
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach(function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                });
                tempinnerarray.push(obj_1);
            }
        });
        this.data = [];
        tempinnerarray.forEach(function (element) {
            _this.data.push(element);
        });
        this.legends = [];
        /** @type {?} */
        var element = this.datahisto[0];
        /** @type {?} */
        var object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var keysetarray = [];
        /** @type {?} */
        var series;
        series = [];
        series = d3.stack().keys(this.keyArray)
            .offset(d3.stackOffsetDiverging)(this.data);
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach(function (element) {
            element.forEach(function (innerelement) {
                /** @type {?} */
                var singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            });
            i++;
        });
        /** @type {?} */
        var chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        this.svg = d3.select("#" + this.componentId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var barWidth = (width / this.chartData.length);
        /** @type {?} */
        var inc = barWidth / 2;
        x = d3.scalePoint()
            .domain(this.xaxisArray, function (d) { return d; })
            .rangeRound([0, width]);
        y = d3.scaleLinear().rangeRound([height, 0]);
        y.domain([0, d3.max(this.arrayofLength)]);
        /** @type {?} */
        var z = d3.scaleOrdinal(d3.schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        var horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        var histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data(function (d) {
            return d;
        });
        /** @type {?} */
        var histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data(function (d) {
            return d;
        });
        /** @type {?} */
        var cnt = 0;
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", function (d, index) {
            cnt++;
            return y(d[1]);
        })
            .attr("cursor", "pointer")
            .attr("height", function (d, index) {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        })
            .attr("transform", function (d, i) {
            /** @type {?} */
            var translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        })
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        }).on("mousemove", function (d) {
            /** @type {?} */
            var data = d[2];
            return tooltip.html(_this.setKey(data[0]))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }).on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            /** @type {?} */
            var clickdata = d[2];
            _this.histogramClick(clickdata[0]);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("y", function (d, i) {
                return y(d[1]);
            })
                .text(function (d) {
                /** @type {?} */
                var data;
                /** @type {?} */
                var data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            })
                .attr("transform", function (d, i) {
                /** @type {?} */
                var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            });
        }
        //  .append("label")
        // //  .attr("width", barWidth - 1)
        //  .attr("y", (d, index) => {
        //    return y(d[1]);
        //  })
        // ---------------------------------------------------------
        //   this.svg.append("g")
        //   .selectAll("g")
        //   .data( chartdata)
        //   .enter( ).append("g")
        //   // .attr("fill", this.color)
        //   // .selectAll("rect")
        //   .data((d) => {
        //     return d;
        //   })
        //   histogramBar.enter(  )
        //   .append("text")
        //   // .attr("width", barWidth - 1)
        //   .attr("y", (d, index) => {
        //     return y(d[1]);
        //   })
        //    .attr("height", (d, index) => {
        //     return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        //   })
        //   .attr("transform", function (d, i) {
        //     var translate = [barWidth * i, 0];
        //     return "translate(" + translate + ")";
        //   })
        //   .text(function(d){
        //     console.log("aksa");
        //       return "aksa";
        //   })
        //   .style("font-weight","bold")
        // .attr("text-anchor", "middle")
        // .attr("fill", (d)=>{
        //     return "black";
        // });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.histogramClick = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    HistogramComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLegendClick.emit(this.datahisto);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.transformData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.array = [];
        this.values = [];
        this.datahisto.forEach(function (element) {
            _this.values.push(element[1]);
        });
        for (var i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotXaxis = /**
     * @return {?}
     */
    function () {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        var newvalue = 0;
        /** @type {?} */
        var value = Math.ceil(d3.max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotYaxis = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tempvalue = 0;
        /** @type {?} */
        var lengthofArray = 0;
        /** @type {?} */
        var lengthcount = 0;
        /** @type {?} */
        var templength = 0;
        /** @type {?} */
        var newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach(function (element1) {
            _this.yaxisArray = [];
            _this.array.forEach(function (element2) {
                if (tempvalue < element2 && element2 <= element1) {
                    _this.yaxisArray.push(element2);
                }
                lengthofArray = _this.yaxisArray.length;
            });
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            //this.histogramarray.push(this.yaxisArray);
            _this.lengtharray.push(lengthofArray);
        });
        /** @type {?} */
        var value = Math.ceil(templength);
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (var i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (var i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.dataforChart = /**
     * @return {?}
     */
    function () {
        this.finaldataarray = [];
        /** @type {?} */
        var initialArray = [];
        /** @type {?} */
        var temparray = [];
        initialArray.push('level');
        /** @type {?} */
        var maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        var maxlength = maxElement;
        /** @type {?} */
        var n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        var length = this.arrayofLength.length;
        /** @type {?} */
        var num = 1;
        /** @type {?} */
        var number = 1;
        /** @type {?} */
        var j = 0;
        this.finaldataarray.push(initialArray);
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var value = this.arrayofLength[i];
            /** @type {?} */
            var tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.tooltipData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrayofTooltip = [];
        /** @type {?} */
        var obj = { "label": "", "value": "" };
        this.datahisto.forEach(function (element) {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        });
        /** @type {?} */
        var value1 = this.xaxisArray[0];
        /** @type {?} */
        var tooltipdata = [];
        var _loop_1 = function (j) {
            tooltipdata = [];
            /** @type {?} */
            var value2 = this_1.xaxisArray[j];
            arrayofTooltip.forEach(function (element) {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    var tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            });
            this_1.tooltipArray.push(tooltipdata);
            value1 = value2;
        };
        var this_1 = this;
        for (var j = 1; j < this.xaxisArray.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.setKey = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    HistogramComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    HistogramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-histogram',
                    template: "<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId >\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n</div>\n",
                    styles: [".bar{background-color:#3943cf;padding:.02px}"]
                },] },
    ];
    HistogramComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    HistogramComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        datahisto: [{ type: Input, args: ['data',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return HistogramComponent;
}(AmexioD3BaseChartComponent));
export { HistogramComponent };
if (false) {
    /** @type {?} */
    HistogramComponent.prototype.svgwidth;
    /** @type {?} */
    HistogramComponent.prototype.svgheight;
    /** @type {?} */
    HistogramComponent.prototype.color;
    /** @type {?} */
    HistogramComponent.prototype.datahisto;
    /** @type {?} */
    HistogramComponent.prototype.labelflag;
    /** @type {?} */
    HistogramComponent.prototype.labelcolor;
    /** @type {?} */
    HistogramComponent.prototype.hScale;
    /** @type {?} */
    HistogramComponent.prototype.chartId;
    /** @type {?} */
    HistogramComponent.prototype.divid;
    /** @type {?} */
    HistogramComponent.prototype.datareader;
    /** @type {?} */
    HistogramComponent.prototype.level;
    /** @type {?} */
    HistogramComponent.prototype.target;
    /** @type {?} */
    HistogramComponent.prototype.drillabledatakey;
    /** @type {?} */
    HistogramComponent.prototype.httpresponse;
    /** @type {?} */
    HistogramComponent.prototype.svg;
    /** @type {?} */
    HistogramComponent.prototype.resizeflag;
    /** @type {?} */
    HistogramComponent.prototype.drillableFlag;
    /** @type {?} */
    HistogramComponent.prototype.data1;
    /** @type {?} */
    HistogramComponent.prototype.values;
    /** @type {?} */
    HistogramComponent.prototype.array;
    /** @type {?} */
    HistogramComponent.prototype.xaxisArray;
    /** @type {?} */
    HistogramComponent.prototype.yaxisArray;
    /** @type {?} */
    HistogramComponent.prototype.yaxisData;
    /** @type {?} */
    HistogramComponent.prototype.histogramarray;
    /** @type {?} */
    HistogramComponent.prototype.histogramdata;
    /** @type {?} */
    HistogramComponent.prototype.lengtharray;
    /** @type {?} */
    HistogramComponent.prototype.arrayofLength;
    /** @type {?} */
    HistogramComponent.prototype.chartData;
    /** @type {?} */
    HistogramComponent.prototype.finaldataarray;
    /** @type {?} */
    HistogramComponent.prototype.legendArray;
    /** @type {?} */
    HistogramComponent.prototype.keyArray;
    /** @type {?} */
    HistogramComponent.prototype.predefinedcolors;
    /** @type {?} */
    HistogramComponent.prototype.legends;
    /** @type {?} */
    HistogramComponent.prototype.charttype;
    /** @type {?} */
    HistogramComponent.prototype.data;
    /** @type {?} */
    HistogramComponent.prototype.datareaderdata;
    /** @type {?} */
    HistogramComponent.prototype.xaxis;
    /** @type {?} */
    HistogramComponent.prototype.tempp;
    /** @type {?} */
    HistogramComponent.prototype.tooltipArray;
    /** @type {?} */
    HistogramComponent.prototype.index;
    /** @type {?} */
    HistogramComponent.prototype.myservice;
    /** @type {?} */
    HistogramComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,