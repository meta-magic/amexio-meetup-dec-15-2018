/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ViewDrillableComponent } from '../../base/view.component';
var DrillableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DrillableComponent, _super);
    function DrillableComponent() {
        var _this = _super.call(this) || this;
        _this.mouseLocation = { left: 0, top: 0 };
        _this.componentcounter = 1;
        _this.disableFlag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DrillableComponent.prototype.getData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        data.forEach(function (element) {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe(function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                });
            }
            else {
                _this.disableFlag = false;
                element.drillableEvent.subscribe(function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                });
            }
        });
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.hideUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        this.ComponentDataArray.forEach(function (element) {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        });
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.ShowUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach(function (element) {
            if (eventRef.ref.target == element.level) {
                if (_this.arrayofsameLevel.length == 1) {
                    _this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    _this.componentcounter = element.level;
                }
                else {
                    _this.contextmenuFlag = true;
                    _this.mouseLocation.left = eventRef.event.clientX;
                    _this.mouseLocation.top = eventRef.event.clientY;
                    _this.contextStyle = _this.getContextMenuStyle();
                }
            }
        });
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.previouschartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach(function (element) {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (_this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        });
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.sameLevelChart = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach(function (element) {
            if (eventRef.ref.target == element.level) {
                _this.arrayofsameLevel = _this.arrayofsameLevel.concat(element);
            }
        });
    };
    //Method Creates style if two same targets found.
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    DrillableComponent.prototype.getContextMenuStyle = 
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DrillableComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.onContextNodeClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.contextmenuFlag = false;
    };
    DrillableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-drillable',
                    template: "\n<div > \n    <ng-container *ngIf=\"disableFlag\">\n            <button type=\"button\" class=\"button\"\n             (click)=\"previouschartClick($event)\">\n             <i class=\"fa fa-arrow-left\"></i> \n             \n            </button>\n</ng-container>\n\n<ng-content></ng-content>\n\n</div>\n\n<span [ngStyle]=\"contextStyle\" >\n  <ul *ngIf=\"contextmenuFlag\" class=\"close-thik\" class=\"context-menu-list\"  >\n    <span (click)=\"onCloseClick()\" class=\"close\"><i class=\"fa fa-close\"></i></span>\n  <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" \n  *ngFor=\"let itemConfig of arrayofsameLevel\">\n  <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\"></em>\n  <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.title}}\n  </span>\n  </li>\n  </ul>\n  </span>\n  ",
                    styles: [".button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:\"\";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}"]
                },] },
    ];
    DrillableComponent.ctorParameters = function () { return []; };
    return DrillableComponent;
}(ViewDrillableComponent));
export { DrillableComponent };
if (false) {
    /** @type {?} */
    DrillableComponent.prototype.mouseLocation;
    /** @type {?} */
    DrillableComponent.prototype.contextmenuFlag;
    /** @type {?} */
    DrillableComponent.prototype.contextStyle;
    /** @type {?} */
    DrillableComponent.prototype.ComponentDataArray;
    /** @type {?} */
    DrillableComponent.prototype.componentcounter;
    /** @type {?} */
    DrillableComponent.prototype.disableFlag;
    /** @type {?} */
    DrillableComponent.prototype.arrayofsameLevel;
    /** @type {?} */
    DrillableComponent.prototype.eventData;
    /** @type {?} */
    DrillableComponent.prototype.rightClickNodeData;
    /** @type {?} */
    DrillableComponent.prototype.posixUp;
    /** @type {?} */
    DrillableComponent.prototype.levelArray;
}
//# sourceMappingURL=data:application/json;base64,