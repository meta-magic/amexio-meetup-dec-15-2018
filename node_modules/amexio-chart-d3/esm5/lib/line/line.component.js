/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseLineComponent } from "./baseline.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from "../services/device.query.service";
var AmexioD3LineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3LineComponent, _super);
    function AmexioD3LineComponent(deviceQueryService, myservice) {
        var _this = _super.call(this, deviceQueryService) || this;
        _this.deviceQueryService = deviceQueryService;
        _this.myservice = myservice;
        _this.level = 0;
        _this.labelflag = false;
        _this.labelcolor = "black";
        _this.drillabledatakey = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    resp_1 = response;
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3LineComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.plotD3Chart();
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3LineComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var linechart = this.initChart();
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        for (var index = 0; index < this.multiseriesdata.length; index++) {
            this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
        }
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    function (g, x, y, height, width, data, tooltip, i) {
        var _this = this;
        /** @type {?} */
        var line = d3.line()
            .x(function (d) { return x(d.label); })
            .y(function (d) { return y(d.value); });
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", this.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", function (d) { return x(d.label); })
            .attr("cy", function (d) { return y(d.value); })
            .attr('r', 2)
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            return tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return tooltip.html(_this.callTooltip(d)
            //  this.toolTipForLine(d)
            //  this.toolTipWithLegendandAxis(d.legend,d.label,d.value)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.lineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        });
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d, i) {
                return x(d.label);
            })
                .attr("y", function (d, i) {
                return y(d.value) - 10;
            })
                .text(function (d) {
                return d.value;
            });
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    AmexioD3LineComponent.prototype.lineChartClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3LineComponent.prototype.callTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    };
    AmexioD3LineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-line',
                    template: "\n<div *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\"> \n<table style=\"width: 100%;\" #chartId  >\n        <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"height\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>            \n            </td>\n        </tr>\n        <tr>\n            <td style=\"display: block; padding: 5px;\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                        [data]=\"legends\" style=\"height:100%;\">\n                    </amexio-d3-legend>\n            </td>\n        \n        </tr>\n</table>\n</div>\n    "
                },] },
    ];
    AmexioD3LineComponent.ctorParameters = function () { return [
        { type: DeviceQueryService },
        { type: CommanDataService }
    ]; };
    AmexioD3LineComponent.propDecorators = {
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }]
    };
    return AmexioD3LineComponent;
}(AmexioD3BaseLineComponent));
export { AmexioD3LineComponent };
if (false) {
    /** @type {?} */
    AmexioD3LineComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3LineComponent.prototype.divid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3LineComponent.prototype.level;
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3LineComponent.prototype.target;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3LineComponent.prototype.deviceQueryService;
    /** @type {?} */
    AmexioD3LineComponent.prototype.myservice;
}
//# sourceMappingURL=data:application/json;base64,