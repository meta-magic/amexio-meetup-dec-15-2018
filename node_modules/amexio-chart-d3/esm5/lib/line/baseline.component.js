/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from "../base/base.component";
var AmexioD3BaseLineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3BaseLineComponent, _super);
    function AmexioD3BaseLineComponent(deviceQueryService) {
        var _this = _super.call(this, 'line') || this;
        _this.deviceQueryService = deviceQueryService;
        _this.svgheight = 300;
        _this.hScale = true;
        _this.vScale = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BaseLineComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            this.createXYAxisData();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.createXYAxisData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        var msdarray = [];
        for (var index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            var legend = this._data[0][index];
            msdarray[index] = [];
            this.legenddata.push({ 'label': legend.label, 'color': this.predefinedcolors[index + 1] });
            if (index > 0)
                this.legends.push({ 'label': legend.label, 'color': this.predefinedcolors[index] });
        }
        /** @type {?} */
        var i = 0;
        this._data.forEach(function (object) {
            if (i > 0) {
                /** @type {?} */
                var j_1 = 0;
                object.forEach(function (a) {
                    if (j_1 === 0) {
                        _this.xaxisdata.push({ 'label': a, 'value': a });
                    }
                    else {
                        _this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    msdarray[j_1].push(a);
                    j_1++;
                });
            }
            i++;
        });
        for (var index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            var element = msdarray[index];
            if (index > 0) {
                /** @type {?} */
                var md = [];
                for (var j = 0; j < element.length; j++) {
                    /** @type {?} */
                    var v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].value, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.initChart = /**
     * @return {?}
     */
    function () {
        this.svg = d3.select("#" + this.componentId);
        /** @type {?} */
        var margin = { top: 40, right: 20, bottom: 30, left: 40 };
        /** @type {?} */
        var width = +this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var g = this.svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        var y = d3.scaleLinear()
            .rangeRound([height, 0]);
        x.domain(this.xaxisdata.map(function (d) { return d.label; }));
        y.domain([0, d3.max(this.yaxisdata, function (d) { return d.value; })]);
        //add axis 
        if (this.deviceQueryService.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(d3.axisBottom(x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("color", "grey")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        g.append("g")
            .attr("color", "grey")
            .call(d3.axisLeft(y));
        return {
            g: g, x: x, y: y, height: height, width: width
        };
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.plotScale = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        var _this = this;
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        var obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        var data = [];
        node.data.forEach(function (element) {
            /** @type {?} */
            var object = {};
            object[element.legend] = element.value;
            object[_this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        });
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    };
    AmexioD3BaseLineComponent.propDecorators = {
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }],
        httpurl: [{ type: Input, args: ['data',] }, { type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }]
    };
    return AmexioD3BaseLineComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3BaseLineComponent };
if (false) {
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype._data;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xaxisdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.yaxisdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legenddata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xaxisname;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.multiseriesdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.vScale;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.deviceQueryService;
}
//# sourceMappingURL=data:application/json;base64,