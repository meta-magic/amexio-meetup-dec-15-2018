/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
var MultiareaComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MultiareaComponent, _super);
    function MultiareaComponent(myservice, device) {
        var _this = _super.call(this, "areachart") || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 350;
        _this.level = 0;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.drillabledatakey = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.togglelabel = false;
        _this.onLegendClick = new EventEmitter();
        _this.onTooltipClick = new EventEmitter();
        _this.hScale = true;
        _this.margin = {};
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.data1 = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.togglelabel = false;
        /** @type {?} */
        var res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.transformData(_this.data);
                        _this.initAreaChart();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data1) {
                setTimeout(function () {
                    _this.transformData(_this.data);
                    _this.initAreaChart();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initAreaChart();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.initAreaChart = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = d3.scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = d3.scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map(function (d) { return d[Object.keys(d)[0]]; });
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            d3.select("#" + this.componentId)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.formLegendData();
        /** @type {?} */
        var counter;
        /** @type {?} */
        var g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x));
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(d3.axisLeft(this.y));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        var increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    };
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.PlotLineDot = /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        var _this = this;
        /** @type {?} */
        var flag = this.togglelabel;
        /** @type {?} */
        var line = d3.line()
            .x(function (d) { return thisa.x(d[Object.keys(d)[0]]); })
            .y(function (d) { return thisa.y(d[Object.keys(d)[i]]); });
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", thisa.predefinedcolors[i])
            .attr("stroke-width", 1.5)
            .attr("d", line)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", thisa.predefinedcolors[i])
            .attr("cx", function (d) { return thisa.x(d[Object.keys(d)[0]]); })
            .attr("cy", function (d) { return thisa.y(d[Object.keys(d)[i]]); })
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            _this.formTooltipData(d, i);
            return _this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return _this.tooltip.html(_this.formTooltipData(d, i))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return _this.tooltip.style("visibility", "hidden");
        })
            .style("opacity", 1)
            .on("click", function (d) {
            _this.onAreaTooltipClick(d, i);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        })
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            })
                .attr("y", function (d) {
                /** @type {?} */
                var key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            })
                .text(function (d) {
                return d[Object.keys(d)[i]];
            })
                .attr("transform", "translate(" + 0 + "," + 0 + ")");
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    };
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.plotAreaChart = /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        // calculate area and valueline
        // define the line
        /** @type {?} */
        var valueline = d3.line()
            .x(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", this.predefinedColors[i])
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        var area = d3.area()
            .x(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        })
            .y0(this.height)
            .y1(function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        });
        g.append("path")
            .data([this.data])
            .attr("d", area)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", this.predefinedColors[i])
            .style("opacity", 0.5);
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaTooltipClick = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.findMaxData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var tempArray = [];
        /** @type {?} */
        var largeValues = [];
        /** @type {?} */
        var maxValue;
        //logic to search 3 largest values 
        data.forEach(function (element) {
            /** @type {?} */
            var temp = [];
            /** @type {?} */
            var value;
            try {
                for (var _a = tslib_1.__values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value_1 = _c[1];
                    //exempts first column of data as it is treated as x-axis
                    if (key != _this.keyArray[0]) {
                        tempArray.push(value_1);
                    }
                } //for loop end
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            value = _this.findLargestValue(tempArray);
            largeValues.push(value);
            var e_1, _d;
        });
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    };
    /**
     * @param {?} array
     * @return {?}
     */
    MultiareaComponent.prototype.findLargestValue = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var max = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            } //if ends 
        } //max ends
        return max;
    };
    //covert data
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.transformData = 
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        var parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.keyArray.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element;
                legendobject['color'] = _this.predefinedColors[index + 1];
                _this.legendArray.push(legendobject);
            }
        });
    };
    /**
     * @param {?} legendData
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaLegendClick = /**
     * @param {?} legendData
     * @return {?}
     */
    function (legendData) {
        var _this = this;
        /** @type {?} */
        var obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        var data = [];
        this.data.forEach(function (element) {
            try {
                for (var _a = tslib_1.__values(Object.entries(_this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == legendData.label) {
                        /** @type {?} */
                        var object = {};
                        object[key] = value;
                        data.push(object);
                    } //inner if ends
                } //inner forloop ends
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        }); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    MultiareaComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_3, _a;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initAreaChart();
        this.plotD3Chart();
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    MultiareaComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    MultiareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiarea',
                    template: "\n<div  *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\">\n<table style=\"width: 100%;\" #chartId>\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onAreaLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    MultiareaComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    MultiareaComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }],
        onTooltipClick: [{ type: Output }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }]
    };
    return MultiareaComponent;
}(AmexioD3BaseChartComponent));
export { MultiareaComponent };
if (false) {
    /** @type {?} */
    MultiareaComponent.prototype.svgwidth;
    /** @type {?} */
    MultiareaComponent.prototype.svgheight;
    /** @type {?} */
    MultiareaComponent.prototype.datareader;
    /** @type {?} */
    MultiareaComponent.prototype.level;
    /** @type {?} */
    MultiareaComponent.prototype.labelcolor;
    /** @type {?} */
    MultiareaComponent.prototype.labelflag;
    /** @type {?} */
    MultiareaComponent.prototype.target;
    /** @type {?} */
    MultiareaComponent.prototype.drillabledatakey;
    /** @type {?} */
    MultiareaComponent.prototype.httpresponse;
    /** @type {?} */
    MultiareaComponent.prototype.drillableFlag;
    /** @type {?} */
    MultiareaComponent.prototype.resizeflag;
    /** @type {?} */
    MultiareaComponent.prototype.togglelabel;
    /** @type {?} */
    MultiareaComponent.prototype.chartId;
    /** @type {?} */
    MultiareaComponent.prototype.divid;
    /** @type {?} */
    MultiareaComponent.prototype.onLegendClick;
    /** @type {?} */
    MultiareaComponent.prototype.onTooltipClick;
    /** @type {?} */
    MultiareaComponent.prototype.hScale;
    /** @type {?} */
    MultiareaComponent.prototype.svg;
    /** @type {?} */
    MultiareaComponent.prototype.x;
    /** @type {?} */
    MultiareaComponent.prototype.y;
    /** @type {?} */
    MultiareaComponent.prototype.z;
    /** @type {?} */
    MultiareaComponent.prototype.height;
    /** @type {?} */
    MultiareaComponent.prototype.width;
    /** @type {?} */
    MultiareaComponent.prototype.margin;
    /** @type {?} */
    MultiareaComponent.prototype.i;
    /** @type {?} */
    MultiareaComponent.prototype.parseTime;
    /** @type {?} */
    MultiareaComponent.prototype.keyArray;
    /** @type {?} */
    MultiareaComponent.prototype.maximumValue;
    /** @type {?} */
    MultiareaComponent.prototype.predefinedColors;
    /** @type {?} */
    MultiareaComponent.prototype.areaArray;
    /** @type {?} */
    MultiareaComponent.prototype.transformeddata;
    /** @type {?} */
    MultiareaComponent.prototype.data1;
    /** @type {?} */
    MultiareaComponent.prototype.legendArray;
    /** @type {?} */
    MultiareaComponent.prototype.tooltip;
    /** @type {?} */
    MultiareaComponent.prototype.myservice;
    /** @type {?} */
    MultiareaComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,