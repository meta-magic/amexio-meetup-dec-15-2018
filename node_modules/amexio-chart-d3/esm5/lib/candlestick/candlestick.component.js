/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
var CandlestickComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CandlestickComponent, _super);
    function CandlestickComponent(myservice, device) {
        var _this = _super.call(this, "candlestickwaterfallchart") || this;
        _this.myservice = myservice;
        _this.device = device;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.hScale = true;
        _this.onLegendClick = new EventEmitter();
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.predefinedColor = [];
        _this.keyArray = [];
        _this.margin = {};
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            /** @type {?} */
            var res = void 0;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe(function (response) {
                    //this.data = response;
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }, function (error) {
                }, function () {
                    setTimeout(function () {
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotXYAxis();
                        _this.plotD3Chart();
                    }, 0);
                });
            }
            else if (this.data) {
                setTimeout(function () {
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotXYAxis();
                    _this.plotD3Chart();
                }, 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe(function (response) {
                resp = response;
                _this.httpresponse = response;
            }, function (error) {
            }, function () {
                setTimeout(function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }, 0);
            });
        }
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initializeData();
            _this.plotXYAxis();
            _this.plotD3Chart();
        }, 0);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.initializeData = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            else {
                this.svgwidth = this.svgwidth;
            }
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotXYAxis = /**
     * @return {?}
     */
    function () {
        // set the ranges
        this.x = d3.scaleBand().range([0, this.width]);
        this.y = d3.scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        var candlestickArray = this.data.map(function (d) {
            return d[Object.keys(d)[0]];
        });
        this.x.domain(candlestickArray);
        /** @type {?} */
        var max = d3.max(this.data, function (d) { return d.end; });
        this.y.domain([0, max]);
        this.svg = d3.select("#" + this.componentId)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x));
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(d3.axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(d3.axisLeft(this.y));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", function (d) { return "bar " + d.class; })
            .attr("transform", function (d) {
            return "translate(" + _this.x(d[Object.keys(d)[0]]) + ",0)";
        });
        bar.append("rect")
            .attr("y", function (d) { return _this.y(Math.max(d.start, d.end)); })
            .attr("height", function (d) { return Math.abs(_this.y(d.start) - _this.y(d.end)); })
            .attr("width", this.x.bandwidth())
            .attr("fill", function (d, i) {
            return _this.predefinedColor[i];
        })
            .attr("cursor", "pointer")
            .on("mouseover", function (d) {
            _this.formTooltipData(d);
            return _this.tooltip.style("visibility", "visible");
        })
            .on("mousemove", function (d) {
            return _this.tooltip.html(_this.formTooltipData(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })
            .on("mouseout", function (d) {
            return _this.tooltip.style("visibility", "hidden");
        })
            .on("click", function (d) {
            _this.onCandlestickClick(d);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
        });
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            })
                .attr("x", function (d) {
                return (_this.x.bandwidth()) / 2;
            })
                .attr("y", function (d, index) {
                return _this.y(Math.max(d.start, d.end)) + 20;
            })
                .text(function (d) {
                return d[Object.keys(d)[1]];
            });
        }
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CandlestickComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach(function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach(function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        }); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.addDataKeys = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cumulative = 0;
        for (var i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CandlestickComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    CandlestickComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach(function (element, index) {
            try {
                for (var _a = tslib_1.__values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == _this.keyArray[0]) {
                        /** @type {?} */
                        var object = {};
                        object["label"] = value;
                        object["color"] = _this.predefinedColor[index];
                        _this.legendArray.push(object);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        });
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickLegendClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        this.data.forEach(function (element) {
            try {
                for (var _a = tslib_1.__values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    if (value == chartData.label) {
                        object[chartData.label] = element.value;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var e_3, _d;
        });
        this.onLegendClick.emit(object);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svgwidth = 0;
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        this.svgwidth = this.divid.nativeElement.offsetWidth;
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    };
    CandlestickComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-waterfall',
                    template: "\n<div   *ngIf=\"drillableFlag\" #divid (window:resize)=\"resize()\" >\n<table style=\"width: 100%;\" #chartId (window:resize)=\"resize()\">\n  <tr>\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr>\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onCandlestickLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n</div>",
                    styles: [""]
                },] },
    ];
    CandlestickComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: DeviceQueryService }
    ]; };
    CandlestickComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        data: [{ type: Input }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }]
    };
    return CandlestickComponent;
}(AmexioD3BaseChartComponent));
export { CandlestickComponent };
if (false) {
    /** @type {?} */
    CandlestickComponent.prototype.svgwidth;
    /** @type {?} */
    CandlestickComponent.prototype.svgheight;
    /** @type {?} */
    CandlestickComponent.prototype.datareader;
    /** @type {?} */
    CandlestickComponent.prototype.data;
    /** @type {?} */
    CandlestickComponent.prototype.level;
    /** @type {?} */
    CandlestickComponent.prototype.target;
    /** @type {?} */
    CandlestickComponent.prototype.drillabledatakey;
    /** @type {?} */
    CandlestickComponent.prototype.labelcolor;
    /** @type {?} */
    CandlestickComponent.prototype.labelflag;
    /** @type {?} */
    CandlestickComponent.prototype.hScale;
    /** @type {?} */
    CandlestickComponent.prototype.chartId;
    /** @type {?} */
    CandlestickComponent.prototype.divid;
    /** @type {?} */
    CandlestickComponent.prototype.onLegendClick;
    /** @type {?} */
    CandlestickComponent.prototype.drillableFlag;
    /** @type {?} */
    CandlestickComponent.prototype.resizeflag;
    /** @type {?} */
    CandlestickComponent.prototype.predefinedColor;
    /** @type {?} */
    CandlestickComponent.prototype.keyArray;
    /** @type {?} */
    CandlestickComponent.prototype.transformeddata;
    /** @type {?} */
    CandlestickComponent.prototype.height;
    /** @type {?} */
    CandlestickComponent.prototype.width;
    /** @type {?} */
    CandlestickComponent.prototype.margin;
    /** @type {?} */
    CandlestickComponent.prototype.x;
    /** @type {?} */
    CandlestickComponent.prototype.y;
    /** @type {?} */
    CandlestickComponent.prototype.svg;
    /** @type {?} */
    CandlestickComponent.prototype.tooltip;
    /** @type {?} */
    CandlestickComponent.prototype.legendArray;
    /** @type {?} */
    CandlestickComponent.prototype.httpresponse;
    /** @type {?} */
    CandlestickComponent.prototype.myservice;
    /** @type {?} */
    CandlestickComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlc3RpY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1leGlvLWNoYXJ0LWQzLyIsInNvdXJjZXMiOlsibGliL2NhbmRsZXN0aWNrL2NhbmRsZXN0aWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksR0FBVyxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFNLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QjtJQXlCMEMsZ0RBQTBCO0lBNEJsRSw4QkFBb0IsU0FBNEIsRUFBUyxNQUF5QjtRQUFsRixZQUNFLGtCQUFNLDJCQUEyQixDQUFDLFNBQ25DO1FBRm1CLGVBQVMsR0FBVCxTQUFTLENBQW1CO1FBQVMsWUFBTSxHQUFOLE1BQU0sQ0FBbUI7UUEzQmxFLGNBQVEsR0FBVyxHQUFHLENBQUM7UUFDdEIsZUFBUyxHQUFXLEdBQUcsQ0FBQztRQUd6QixXQUFLLEdBQVcsQ0FBQyxDQUFDO1FBRVQsc0JBQWdCLEdBQVUsRUFBRSxDQUFDO1FBQ2hDLGdCQUFVLEdBQVcsT0FBTyxDQUFDO1FBQ25DLGVBQVMsR0FBWSxLQUFLLENBQUM7UUFDaEIsWUFBTSxHQUFZLElBQUksQ0FBQztRQUd4QyxtQkFBYSxHQUFRLElBQUksWUFBWSxFQUFPLENBQUM7UUFDdkQsbUJBQWEsR0FBWSxJQUFJLENBQUM7UUFDOUIsZ0JBQVUsR0FBWSxLQUFLLENBQUM7UUFDNUIscUJBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsY0FBUSxHQUFVLEVBQUUsQ0FBQztRQUly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O0lBQ1AsbUNBQVM7O0lBQ1QsdUNBQWE7O0lBQ2IsMkNBQXdCOztJQUN4Qiw0Q0FBa0I7O0lBQ04seUNBQW9DOztJQUFDLHNDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW1leGlvRDNCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tIFwiLi4vYmFzZS9iYXNlLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxvdENhcnQgfSBmcm9tIFwiLi4vYmFzZS9jaGFydC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbW1hbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWFuLmRhdGEuc2VydmljZSc7XG5pbXBvcnR7RGV2aWNlUXVlcnlTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9kZXZpY2UucXVlcnkuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZDMtY2hhcnQtd2F0ZXJmYWxsJyxcbiAgdGVtcGxhdGU6IGBcbjxkaXYgICAqbmdJZj1cImRyaWxsYWJsZUZsYWdcIiAjZGl2aWQgKHdpbmRvdzpyZXNpemUpPVwicmVzaXplKClcIiA+XG48dGFibGUgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIiAjY2hhcnRJZCAod2luZG93OnJlc2l6ZSk9XCJyZXNpemUoKVwiPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJmb250LXNpemU6IDE4cHg7IGZvbnQtd2VpZ2h0OiBib2xkOyBcIj4ge3t0aXRsZX19IDwvdGQ+XG4gIDwvdHI+XG4gIDx0cj5cbiAgICAgIDx0ZD5cbiAgICAgICAgICA8c3ZnIFthdHRyLmhlaWdodF09XCJzdmdoZWlnaHRcIiBbYXR0ci53aWR0aF09XCJzdmd3aWR0aFwiIFthdHRyLmlkXT1cImNvbXBvbmVudElkXCI+XG4gICAgICAgICAgPC9zdmc+XG4gICAgICA8L3RkPlxuICA8L3RyPlxuICA8dHI+XG4gICAgICA8dGQgc3R5bGU9XCJkaXNwbGF5OiBibG9jazsgcGFkZGluZzogNXB4O1wiPlxuICAgICAgICAgIDxhbWV4aW8tZDMtbGVnZW5kICpuZ0lmPVwibGVnZW5kXCIgW2hvcml6b250YWxdPVwidHJ1ZVwiIChvbkNsaWNrKT1cIm9uQ2FuZGxlc3RpY2tMZWdlbmRDbGljaygkZXZlbnQpXCIgW2RhdGFdPVwibGVnZW5kQXJyYXlcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlxuICAgICAgICAgIDwvYW1leGlvLWQzLWxlZ2VuZD5cbiAgICAgIDwvdGQ+XG4gIDwvdHI+XG48L3RhYmxlPlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbYGBdXG59KVxuXG5leHBvcnQgY2xhc3MgQ2FuZGxlc3RpY2tDb21wb25lbnQgZXh0ZW5kcyBBbWV4aW9EM0Jhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIFBsb3RDYXJ0LCBPbkluaXQge1xuICBASW5wdXQoJ3dpZHRoJykgc3Znd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdoZWlnaHQnKSBzdmdoZWlnaHQ6IG51bWJlciA9IDMwMDtcbiAgQElucHV0KCdkYXRhLXJlYWRlcicpIGRhdGFyZWFkZXI6IGFueTtcbiAgQElucHV0KCkgZGF0YTogYW55W107XG4gIEBJbnB1dCgnbGV2ZWwnKSBsZXZlbDogbnVtYmVyID0gMDtcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IG51bWJlcjtcbiAgQElucHV0KCdkcmlsbGFibGUtZGF0YScpIGRyaWxsYWJsZWRhdGFrZXk6IGFueVtdID0gW107XG4gIEBJbnB1dCgnbGFiZWwtY29sb3InKSBsYWJlbGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCI7XG4gIEBJbnB1dCgnbGFiZWwnKSBsYWJlbGZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCdob3Jpem9udGFsLXNjYWxlJykgaFNjYWxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQFZpZXdDaGlsZCgnY2hhcnRJZCcpIGNoYXJ0SWQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2RpdmlkJykgZGl2aWQ6IEVsZW1lbnRSZWY7XG4gIEBPdXRwdXQoKSBvbkxlZ2VuZENsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgZHJpbGxhYmxlRmxhZzogYm9vbGVhbiA9IHRydWU7XG4gIHJlc2l6ZWZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJlZGVmaW5lZENvbG9yID0gW107XG4gIGtleUFycmF5OiBhbnlbXSA9IFtdO1xuICB0cmFuc2Zvcm1lZGRhdGE6IGFueTtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIG1hcmdpbjogYW55ID0ge307XG4gIHg6IGFueTtcbiAgeTogYW55O1xuICBzdmc6IGFueTtcbiAgdG9vbHRpcDogYW55O1xuICBsZWdlbmRBcnJheTogYW55W10gPSBbXTtcbiAgaHR0cHJlc3BvbnNlOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbXlzZXJ2aWNlOiBDb21tYW5EYXRhU2VydmljZSxwcml2YXRlIGRldmljZTpEZXZpY2VRdWVyeVNlcnZpY2UpIHtcbiAgICBzdXBlcihcImNhbmRsZXN0aWNrd2F0ZXJmYWxsY2hhcnRcIik7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnByZWRlZmluZWRDb2xvciA9IFtcIiMzMzY2Y2NcIiwgXCIjZGMzOTEyXCIsIFwiI2ZmOTkwMFwiLCBcIiMxMDk2MThcIiwgXCIjOTkwMDk5XCIsIFwiIzAwOTljNlwiLCBcIiNkZDQ0NzdcIiwgXCIjNjZhYTAwXCIsIFwiI2I4MmUyZVwiLCBcIiMzMTYzOTVcIiwgXCIjOTk0NDk5XCIsIFwiIzIyYWE5OVwiLCBcIiNhYWFhMTFcIiwgXCIjNjYzM2NjXCIsIFwiI2U2NzMwMFwiLCBcIiM4YjA3MDdcIiwgXCIjNjUxMDY3XCIsIFwiIzMyOTI2MlwiLCBcIiM1NTc0YTZcIiwgXCIjM2IzZWFjXCJdO1xuICAgIGlmICh0aGlzLmxldmVsIDw9IDEpIHtcbiAgICAgIGxldCByZXM7XG4gICAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgICB0aGlzLm15c2VydmljZS5mZXRjaFVybERhdGEodGhpcy5odHRwdXJsLCB0aGlzLmh0dHBtZXRob2QpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAvL3RoaXMuZGF0YSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHRoaXMuaHR0cHJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcG9uc2UpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnBsb3RYWUF4aXMoKTtcbiAgICAgICAgICAgIHRoaXMucGxvdEQzQ2hhcnQoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgICAgICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgICAgICAgdGhpcy5wbG90RDNDaGFydCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmZXRjaERhdGEoZGF0YTogYW55KSB7XG4gICAgbGV0IHJlcXVlc3RKc29uO1xuICAgIGxldCBrZXkgPSB0aGlzLmRyaWxsYWJsZWRhdGFrZXk7XG4gICAgbGV0IHJlc3A6IGFueTtcbiAgICBpZiAodGhpcy5kcmlsbGFibGVkYXRha2V5Lmxlbmd0aCkge1xuICAgICAgbGV0IGRyaWxsYWJsZWRhdGEgPSB0aGlzLmdldE11bHRpcGxlRHJpbGxibGVLZXlEYXRhKGRhdGEsIGtleSk7XG4gICAgICByZXF1ZXN0SnNvbiA9IGRyaWxsYWJsZWRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVxdWVzdEpzb24gPSBkYXRhO1xuICAgIH1cbiAgICBpZiAodGhpcy5odHRwbWV0aG9kICYmIHRoaXMuaHR0cHVybCkge1xuICAgICAgdGhpcy5teXNlcnZpY2UucG9zdGZldGNoRGF0YSh0aGlzLmh0dHB1cmwsIHRoaXMuaHR0cG1ldGhvZCwgcmVxdWVzdEpzb24pLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmVzcCA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLmh0dHByZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZURhdGEocmVzcCk7XG4gICAgICAgICAgdGhpcy5kcmF3Q2hhcnQoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcblxuICAgIH1cbiAgfVxuXG4gIGRyYXdDaGFydCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0UmVzcG9uc2VEYXRhKHRoaXMuaHR0cHJlc3BvbnNlKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRGF0YSh0aGlzLmRhdGEpO1xuICAgICAgdGhpcy5pbml0aWFsaXplRGF0YSgpO1xuICAgICAgdGhpcy5wbG90WFlBeGlzKCk7XG4gICAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBpbml0aWFsaXplRGF0YSgpIHtcbiAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnRvb2xUaXAoZDMpO1xuICAgIGlmICh0aGlzLnJlc2l6ZWZsYWcgPT0gZmFsc2UpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0SWQpIHtcbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuY2hhcnRJZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdmd3aWR0aCA9IHRoaXMuc3Znd2lkdGg7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWFyZ2luID0geyB0b3A6IDIwLCByaWdodDogMzAsIGJvdHRvbTogNTAsIGxlZnQ6IDYwIH0sXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5zdmd3aWR0aCAtIHRoaXMubWFyZ2luLmxlZnQgLSB0aGlzLm1hcmdpbi5yaWdodCxcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zdmdoZWlnaHQgLSB0aGlzLm1hcmdpbi50b3AgLSB0aGlzLm1hcmdpbi5ib3R0b207XG4gIH1cblxuICBwbG90WFlBeGlzKCkge1xuICAgIC8vIHNldCB0aGUgcmFuZ2VzXG4gICAgdGhpcy54ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHRoaXMud2lkdGhdKTtcbiAgICB0aGlzLnkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbdGhpcy5oZWlnaHQsIDBdKTtcbiAgICAvLyBzY2FsZSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAgICBsZXQgY2FuZGxlc3RpY2tBcnJheSA9IHRoaXMuZGF0YS5tYXAoKGQpID0+IHtcbiAgICAgIHJldHVybiBkW09iamVjdC5rZXlzKGQpWzBdXTtcbiAgICAgfSk7XG4gICAgdGhpcy54LmRvbWFpbihjYW5kbGVzdGlja0FycmF5KTtcbiAgICBsZXQgbWF4ID0gZDMubWF4KHRoaXMuZGF0YSwgKGQpID0+IHsgcmV0dXJuIGQuZW5kOyB9KTtcbiAgICB0aGlzLnkuZG9tYWluKFswLCBtYXhdKTtcblxuICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5jb21wb25lbnRJZClcbiAgICAgIC8vIGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMud2lkdGggKyB0aGlzLm1hcmdpbi5sZWZ0ICsgdGhpcy5tYXJnaW4ucmlnaHQpXG4gICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLmhlaWdodCArIHRoaXMubWFyZ2luLnRvcCArIHRoaXMubWFyZ2luLmJvdHRvbSlcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZShcIiArIHRoaXMubWFyZ2luLmxlZnQgKyBcIixcIiArIHRoaXMubWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIC8vIGFkZCB0aGUgWCBBeGlzXG5cbiAgICBpZih0aGlzLmRldmljZS5Jc0Rlc2t0b3AoKT09dHJ1ZSlcbiAgICB7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLngpKVxuICAgIH1cbiAgZWxzZVxuICAge1xuICAgICB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLngpKS5cbiAgICAgICAgICAgc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDkpXG4gICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxuICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg2MClcIilcbiAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKTtcblxuICB9XG5cbiAgICAvLyB0aGlzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgdGhpcy5oZWlnaHQgKyBcIilcIilcbiAgICAvLyAgIC5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy54KSk7XG5cbiAgICAvLyBhZGQgdGhlIFkgQXhpc1xuICAgIHRoaXMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueSkpO1xuICAgIHRoaXMucGxvdExpbmUodGhpcy5zdmcsIHRoaXMueCwgdGhpcy55LCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCk7XG4gIH1cblxuXG4gIHBsb3REM0NoYXJ0KCkge1xuICAgIGxldCBiYXIgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoXCIuYmFyXCIpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIChkKSA9PiB7IHJldHVybiBcImJhciBcIiArIGQuY2xhc3MgfSlcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueChcbiAgICAgICAgICBkW09iamVjdC5rZXlzKGQpWzBdXVxuICAgICAgICAgKSArIFwiLDApXCI7XG4gICAgICB9KTtcblxuICAgIGJhci5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAuYXR0cihcInlcIiwgKGQpID0+IHsgcmV0dXJuIHRoaXMueShNYXRoLm1heChkLnN0YXJ0LCBkLmVuZCkpOyB9KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IHsgcmV0dXJuIE1hdGguYWJzKHRoaXMueShkLnN0YXJ0KSAtIHRoaXMueShkLmVuZCkpOyB9KVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnguYmFuZHdpZHRoKCkpXG4gICAgICAuYXR0cihcImZpbGxcIiwgKGQsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZGVmaW5lZENvbG9yW2ldO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChkKSA9PiB7XG4gICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XG5cbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5odG1sKFxuICAgICAgICAgIHRoaXMuZm9ybVRvb2x0aXBEYXRhKGQpXG4gICAgICAgIClcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGQzLmV2ZW50LnBhZ2VZIC0gMTApICsgXCJweFwiKVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgMTApICsgXCJweFwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW91dFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLCAoZCkgPT4ge1xuICAgICAgICB0aGlzLm9uQ2FuZGxlc3RpY2tDbGljayhkKTtcbiAgICAgICAgdGhpcy5mb3JkcmlsbGFibGVDbGljayh0aGlzLCBkLCBldmVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICAgICAgfSlcbiAgICBcbiAgICBpZih0aGlzLmxhYmVsZmxhZykge1xuICAgIGJhci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLCBcImJvbGRcIilcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjF2d1wiKVxuICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsY29sb3IubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsY29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMueC5iYW5kd2lkdGgoKSkgLyAyO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwieVwiLCAoZCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMueShNYXRoLm1heChkLnN0YXJ0LCBkLmVuZCkpICsgMjA7XG4gICAgICAgfSlcbiAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICByZXR1cm4gZFtPYmplY3Qua2V5cyhkKVsxXV1cbiAgICAgICB9KTtcbiAgICAgIH1cbiAgfVxuXG4gIHBsb3RMaW5lKHN2ZywgeCwgeSwgaGVpZ2h0LCB3aWR0aCkge1xuICAgIGlmICh0aGlzLmhTY2FsZSkge1xuICAgICAgc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKFwiY29sb3JcIiwgXCJsaWdodGdyZXlcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSlcbiAgICAgICAgICAudGlja1NpemUoLXdpZHRoKS50aWNrRm9ybWF0KCcnKSk7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNmb3JtRGF0YShkYXRhOiBhbnkpIHtcbiAgICB0aGlzLnRyYW5zZm9ybWVkZGF0YSA9IFtdO1xuICAgIHRoaXMua2V5QXJyYXkgPSBbXTtcbiAgICB0aGlzLmtleUFycmF5ID0gZGF0YVswXTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBEdW1teU9iamVjdDogYW55ID0ge307XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaCgoaW5kaXZpZHVhbHZhbHVlLCBrZXlpbmRleCkgPT4ge1xuICAgICAgICAgIER1bW15T2JqZWN0W3RoaXMua2V5QXJyYXlba2V5aW5kZXhdXSA9IGluZGl2aWR1YWx2YWx1ZTtcbiAgICAgICAgfSk7Ly9pbm5lciBmb3IgbG9vcCBlbmRzXG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRkYXRhLnB1c2goRHVtbXlPYmplY3QpO1xuICAgICAgfS8vaWYgZW5kc1xuICAgIH0pOy8vb3V0ZXIgZm9yIGxvb3AgZW5kcyBcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnRyYW5zZm9ybWVkZGF0YTtcbiAgICB0aGlzLmFkZERhdGFLZXlzKCk7XG4gICAgdGhpcy5mb3JtTGVnZW5kRGF0YSgpO1xuICB9XG5cbiAgYWRkRGF0YUtleXMoKSB7XG4gICAgbGV0IGN1bXVsYXRpdmU6IGFueSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZGF0YVtpXVtcInN0YXJ0XCJdID0gY3VtdWxhdGl2ZTtcbiAgICAgIGN1bXVsYXRpdmUgKz0gdGhpcy5kYXRhW2ldW3RoaXMua2V5QXJyYXlbMV1dO1xuICAgICAgdGhpcy5kYXRhW2ldW1wiZW5kXCJdID0gY3VtdWxhdGl2ZTtcbiAgICAgIHRoaXMuZGF0YVtpXVtcImNsYXNzXCJdID0gKHRoaXMuZGF0YVtpXVt0aGlzLmtleUFycmF5WzFdXSA+PSAwKSA/ICdwb3NpdGl2ZScgOiAnbmVnYXRpdmUnXG4gICAgfVxuICB9XG5cbiAgZ2V0UmVzcG9uc2VEYXRhKGh0dHBSZXNwb25zZTogYW55KSB7XG4gICAgbGV0IHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICBpZiAodGhpcy5kYXRhcmVhZGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRyID0gdGhpcy5kYXRhcmVhZGVyLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGNvbnN0IGlyIG9mIGRyKSB7XG4gICAgICAgIHJlc3BvbnNlZGF0YSA9IHJlc3BvbnNlZGF0YVtpcl07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlZGF0YSA9IGh0dHBSZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlZGF0YTtcbiAgfVxuXG4gIGZvcm1Ub29sdGlwRGF0YSh0b29sdGlwRGF0YTogYW55KSB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzBdXSA9IHRvb2x0aXBEYXRhW09iamVjdC5rZXlzKHRvb2x0aXBEYXRhKVswXV07XG4gICAgb2JqZWN0W3RoaXMua2V5QXJyYXlbMV1dID0gdG9vbHRpcERhdGFbT2JqZWN0LmtleXModG9vbHRpcERhdGEpWzFdXTtcbiAgICByZXR1cm4gdGhpcy50b29sVGlwRm9yQmFyKG9iamVjdCk7XG4gIH1cblxuICBvbkNhbmRsZXN0aWNrQ2xpY2soY2hhcnREYXRhOiBhbnkpIHtcbiAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W3RoaXMua2V5QXJyYXlbMF1dID0gY2hhcnREYXRhW09iamVjdC5rZXlzKGNoYXJ0RGF0YSlbMF1dO1xuICAgIG9iamVjdFt0aGlzLmtleUFycmF5WzFdXSA9IGNoYXJ0RGF0YVtPYmplY3Qua2V5cyhjaGFydERhdGEpWzFdXTtcbiAgICB0aGlzLmNoYXJ0Q2xpY2sob2JqZWN0KTtcbiAgfVxuXG4gIGZvcm1MZWdlbmREYXRhKCkge1xuICAgIHRoaXMubGVnZW5kQXJyYXkgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhlbGVtZW50KSkge1xuICAgICAgICBpZiAoa2V5ID09IHRoaXMua2V5QXJyYXlbMF0pIHtcbiAgICAgICAgICBsZXQgb2JqZWN0ID0ge307XG4gICAgICAgICAgb2JqZWN0W1wibGFiZWxcIl0gPSB2YWx1ZTtcbiAgICAgICAgICBvYmplY3RbXCJjb2xvclwiXSA9IHRoaXMucHJlZGVmaW5lZENvbG9yW2luZGV4XTtcbiAgICAgICAgICB0aGlzLmxlZ2VuZEFycmF5LnB1c2gob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25DYW5kbGVzdGlja0xlZ2VuZENsaWNrKGNoYXJ0RGF0YTogYW55KSB7XG4gICAgbGV0IG9iamVjdCA9IHt9O1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGVsZW1lbnQpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBjaGFydERhdGEubGFiZWwpIHtcbiAgICAgICAgICBvYmplY3RbY2hhcnREYXRhLmxhYmVsXSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm9uTGVnZW5kQ2xpY2suZW1pdChvYmplY3QpO1xuICB9XG5cbiAgcmVzaXplKCkge1xuICAgIHRoaXMuc3Znd2lkdGggPSAwO1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgdGhpcy5yZXNpemVmbGFnID0gdHJ1ZTtcbiAgICB0aGlzLnN2Z3dpZHRoID0gdGhpcy5kaXZpZC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHRoaXMuaW5pdGlhbGl6ZURhdGEoKTtcbiAgICB0aGlzLnBsb3RYWUF4aXMoKTtcbiAgICB0aGlzLnBsb3REM0NoYXJ0KCk7XG4gIH1cblxufVxuIl19