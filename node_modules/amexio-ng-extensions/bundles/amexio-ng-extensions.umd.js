(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/platform-browser'], factory) :
	(factory((global['amexio-ng-extensions'] = {}),global.ng.common,global.ng.core,global.ng.forms,global.ng['platform-browser']));
}(this, (function (exports,common,core,forms,platformBrowser) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}



















function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}

/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError(err);
        }
    },
    complete: function () { }
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x != null && typeof x === 'object';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var errorObject = { e: {} };

/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.e = e;
        return errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ?
        errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
}
UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var UnsubscriptionError = UnsubscriptionErrorImpl;

/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
var Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        while (_parent) {
            _parent.remove(this);
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction(_unsubscribe)) {
            var trial = tryCatch(_unsubscribe).call(this);
            if (trial === errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.e instanceof UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
            }
        }
        if (isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject(sub)) {
                    var trial = tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.e;
                        if (err instanceof UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function') {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            this._parent = parent;
        }
        else if (!_parents) {
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = typeof Symbol === 'function'
    ? /*@__PURE__*/ Symbol('rxSubscriber')
    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();

/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
var Subscriber = /*@__PURE__*/ (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        _this._parentSubscription = null;
        switch (arguments.length) {
            case 0:
                _this.destination = empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        this._parentSubscription = null;
        return this;
    };
    return Subscriber;
}(Subscription));
var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== empty) {
                context = Object.create(observerOrNext);
                if (isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof Subscriber) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}

/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber]) {
            return nextOrObserver[rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber(empty);
    }
    return new Subscriber(nextOrObserver, error, complete);
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }

/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */

function pipeFromArray(fns) {
    if (!fns) {
        return noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}

/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
var Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable$$1 = new Observable();
        observable$$1.source = this;
        observable$$1.operator = operator;
        return observable$$1;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
}
ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber));
var Subject = /*@__PURE__*/ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable));
var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator$1(source));
    };
}
var RefCountOperator$1 = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber$1(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount()(this);
    };
    return ConnectableObservable;
}(Observable));

var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(SubjectSubscriber));
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount$$1 = connectable._refCount;
        if (refCount$$1 <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount$$1 - 1;
        if (refCount$$1 > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */

var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber));
var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber));
var GroupedObservable = /*@__PURE__*/ (function (_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable));
var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
var Action = /*@__PURE__*/ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
var AsyncAction = /*@__PURE__*/ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action));

/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
var QueueAction = /*@__PURE__*/ (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction));

var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());

/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var QueueScheduler = /*@__PURE__*/ (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
function empty$1(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        if (!subscriber.closed) {
            subscriber.complete();
        }
    };
};

/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToArray(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
function scalar(value) {
    var result = new Observable(function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}

/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */
function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return empty$1(scheduler);
        case 1:
            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);
        default:
            return fromArray(args, scheduler);
    }
}

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}

/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of(this.value);
            case 'E':
                return throwError(this.error);
            case 'C':
                return empty$1();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification.createError(err));
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification.createComplete());
        this.unsubscribe();
    };
    return ObserveOnSubscriber;
}(Subscriber));
var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
var ReplaySubject = /*@__PURE__*/ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject));
var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());

/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
var AsyncSubject = /*@__PURE__*/ (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};

/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
var AsapAction = /*@__PURE__*/ (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var AsapScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);

/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);

/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler));
var VirtualAction = /*@__PURE__*/ (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
}
ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
}
EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var EmptyError = EmptyErrorImpl;

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
var MapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError);
        return subscriber;
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator$$1 = iterable[iterator]();
        do {
            var item = iterator$$1.next();
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator$$1.return === 'function') {
            subscriber.add(function () {
                if (iterator$$1.return) {
                    iterator$$1.return();
                }
            });
        }
        return subscriber;
    };
};

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[observable]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
var subscribeTo = function (result) {
    if (result instanceof Observable) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (result && typeof result[observable] === 'function') {
        return subscribeToObservable(result);
    }
    else if (isArrayLike(result)) {
        return subscribeToArray(result);
    }
    else if (isPromise(result)) {
        return subscribeToPromise(result);
    }
    else if (result && typeof result[iterator] === 'function') {
        return subscribeToIterable(result);
    }
    else {
        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
    if (destination === void 0) {
        destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    }
    if (destination.closed) {
        return;
    }
    return subscribeTo(result)(destination);
}

/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
var NONE = {};

var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());
var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
function isInteropObservable(input) {
    return input && typeof input[observable] === 'function';
}

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
function isIterable(input) {
    return input && typeof input[iterator] === 'function';
}

/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */
function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToPromise(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */
function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new Observable(subscribeToIterable(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var iterator$$1;
            sub.add(function () {
                if (iterator$$1 && typeof iterator$$1.return === 'function') {
                    iterator$$1.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator$$1 = input[iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator$$1.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */
function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToObservable(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                var observable$$1 = input[observable]();
                sub.add(observable$$1.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */
function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable) {
            return input;
        }
        return new Observable(subscribeTo(input));
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromObservable(input, scheduler);
        }
        else if (isPromise(input)) {
            return fromPromise(input, scheduler);
        }
        else if (isArrayLike(input)) {
            return fromArray(input, scheduler);
        }
        else if (isIterable(input) || typeof input === 'string') {
            return fromIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}

/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        subscribeToResult(this, ish, value, index, innerSubscriber);
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */

/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */

var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
function isNumeric(val) {
    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
}

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
var NEVER = /*@__PURE__*/ new Observable(noop);

/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */

var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());
var ZipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        this.unsubscribe();
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            if (iterator$$1.stillUnsubscribed) {
                var destination = this.destination;
                destination.add(iterator$$1.subscribe(iterator$$1, i));
            }
            else {
                this.active--;
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            var result = iterator$$1.next();
            if (iterator$$1.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber));
var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator$$1) {
        this.iterator = iterator$$1;
        this.nextResult = iterator$$1.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator] = function () {
        return this;
    };
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var AuditOperator = /*@__PURE__*/ (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
var AuditSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch(this.durationSelector)(value);
            if (duration === errorObject) {
                this.destination.error(errorObject.e);
            }
            else {
                var innerSubscription = subscribeToResult(this, duration);
                if (!innerSubscription || innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var BufferOperator = /*@__PURE__*/ (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
var BufferSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        var _this = _super.call(this, destination) || this;
        _this.buffer = [];
        _this.add(subscribeToResult(_this, closingNotifier));
        return _this;
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var BufferCountOperator = /*@__PURE__*/ (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.buffer = [];
        return _this;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber));
var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.startBufferEvery = startBufferEvery;
        _this.buffers = [];
        _this.count = 0;
        return _this;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */

var BufferTimeOperator = /*@__PURE__*/ (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = /*@__PURE__*/ (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.bufferTimeSpan = bufferTimeSpan;
        _this.bufferCreationInterval = bufferCreationInterval;
        _this.maxBufferSize = maxBufferSize;
        _this.scheduler = scheduler;
        _this.contexts = [];
        var context = _this.openContext();
        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (_this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: _this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
        return _this;
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context_1;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}

/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */

var BufferToggleOperator = /*@__PURE__*/ (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(subscribeToResult(_this, openings));
        return _this;
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var BufferWhenOperator = /*@__PURE__*/ (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject) {
            this.error(errorObject.e);
        }
        else {
            closingSubscription = new Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var CatchOperator = /*@__PURE__*/ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
var CatchSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            this.add(innerSubscriber);
            subscribeToResult(this, result, undefined, undefined, innerSubscriber);
        }
    };
    return CatchSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */

/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
function concatMap(project, resultSelector) {
    return mergeMap(project, resultSelector, 1);
}

/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var CountOperator = /*@__PURE__*/ (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
var CountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var DebounceOperator = /*@__PURE__*/ (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        _this.durationSubscription = null;
        return _this;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult(this, duration);
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */

var DebounceTimeOperator = /*@__PURE__*/ (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            var lastValue = this.lastValue;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber));
function dispatchNext$2(subscriber) {
    subscriber.debouncedNext();
}

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this = _super.call(this, destination) || this;
        _this.defaultValue = defaultValue;
        _this.isEmpty = true;
        return _this;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */

var DelayOperator = /*@__PURE__*/ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
var DelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        var destination = this.destination;
        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
        this.unsubscribe();
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification.createComplete());
        this.unsubscribe();
    };
    return DelaySubscriber;
}(Subscriber));
var DelayMessage = /*@__PURE__*/ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());

/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var DelayWhenOperator = /*@__PURE__*/ (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.index = 0;
        return _this;
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        var index = this.index++;
        try {
            var delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
        this.unsubscribe();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        if (subscriptionIdx !== -1) {
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        }
        return subscription.outerValue;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            var destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber));
var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    }
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable));
var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.unsubscribe();
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var DeMaterializeOperator = /*@__PURE__*/ (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var DistinctOperator = /*@__PURE__*/ (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.values = new Set();
        if (flushes) {
            _this.add(subscribeToResult(_this, flushes));
        }
        return _this;
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */

var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch(this.keySelector)(value);
            if (key === errorObject) {
                return this.destination.error(errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch(this.compare)(this.key, key);
            if (result === errorObject) {
                return this.destination.error(errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
var FilterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */

var DoOperator = /*@__PURE__*/ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
var TapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = noop;
        _this._tapError = noop;
        _this._tapComplete = noop;
        _this._tapError = error || noop;
        _this._tapComplete = complete || noop;
        if (isFunction(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || noop;
            _this._tapError = observerOrNext.error || noop;
            _this._tapComplete = observerOrNext.complete || noop;
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */

var TakeOperator = /*@__PURE__*/ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
var TakeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */

/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var EveryOperator = /*@__PURE__*/ (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
var EverySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.source = source;
        _this.index = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var SwitchFirstOperator = /*@__PURE__*/ (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */

var ExhauseMapOperator = /*@__PURE__*/ (function () {
    function ExhauseMapOperator(project) {
        this.project = project;
    }
    ExhauseMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhauseMapOperator;
}());
var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.hasSubscription = true;
        this._innerSub(result, value, index);
    };
    ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        subscribeToResult(this, result, value, index, innerSubscriber);
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var destination = this.destination;
        destination.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var ExpandOperator = /*@__PURE__*/ (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());
var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
        }
        return _this;
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch(this.project)(value, index);
            if (result === errorObject) {
                destination.error(errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                var destination_1 = this.destination;
                destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        var destination = this.destination;
        destination.add(subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        var destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */

var FinallyOperator = /*@__PURE__*/ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
var FinallySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new Subscription(callback));
        return _this;
    }
    return FinallySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var FindValueOperator = /*@__PURE__*/ (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());
var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.yieldIndex = yieldIndex;
        _this.thisArg = thisArg;
        _this.index = 0;
        return _this;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
        this.unsubscribe();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var IgnoreElementsOperator = /*@__PURE__*/ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
    };
    return IgnoreElementsSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var IsEmptyOperator = /*@__PURE__*/ (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */

var TakeLastOperator = /*@__PURE__*/ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
var MapToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

var MaterializeOperator = /*@__PURE__*/ (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
var ScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */

var MergeScanOperator = /*@__PURE__*/ (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());
var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = tryCatch(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject) {
                destination.error(errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        subscribeToResult(this, ish, value, index, innerSubscriber);
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        var destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

var MulticastOperator = /*@__PURE__*/ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());

/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */


var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
        this.unsubscribe();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
        this.unsubscribe();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, next, undefined, undefined, innerSubscriber);
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var PairwiseOperator = /*@__PURE__*/ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */

/** PURE_IMPORTS_START _map PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */

/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */

/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */

var RepeatOperator = /*@__PURE__*/ (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var RepeatWhenOperator = /*@__PURE__*/ (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject();
        var retries = tryCatch(this.notifier)(this.notifications);
        if (retries === errorObject) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = subscribeToResult(this, retries);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var RetryOperator = /*@__PURE__*/ (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
var RetrySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var RetryWhenOperator = /*@__PURE__*/ (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject();
                retries = tryCatch(this.notifier)(errors);
                if (retries === errorObject) {
                    return _super.prototype.error.call(this, errorObject.e);
                }
                retriesSubscription = subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var SampleOperator = /*@__PURE__*/ (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
var SampleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasValue = false;
        return _this;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */

var SampleTimeOperator = /*@__PURE__*/ (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
        return _this;
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}

/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */

var SequenceEqualOperator = /*@__PURE__*/ (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());
var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        var _this = _super.call(this, destination) || this;
        _this.compareTo = compareTo;
        _this.comparor = comparor;
        _this._a = [];
        _this._b = [];
        _this._oneComplete = false;
        _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
        return _this;
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
        this.unsubscribe();
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch(comparor)(a, b);
                if (areEqual === errorObject) {
                    this.destination.error(errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype.completeB = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber));
var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        return _this;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
        this.unsubscribe();
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent.completeB();
        this.unsubscribe();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */

/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */

var SingleOperator = /*@__PURE__*/ (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
var SingleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.seenValue = false;
        _this.index = 0;
        return _this;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var SkipOperator = /*@__PURE__*/ (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
var SkipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */

var SkipLastOperator = /*@__PURE__*/ (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            return source.subscribe(new Subscriber(subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var SkipUntilOperator = /*@__PURE__*/ (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (destination, source) {
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    };
    return SkipUntilOperator;
}());
var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
        _this.add(innerSubscriber);
        _this.innerSubscription = innerSubscriber;
        subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
        return _this;
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
    };
    return SkipUntilSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var SkipWhileOperator = /*@__PURE__*/ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) {
            delayTime = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!isNumeric(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap;
        }
        return _this;
    }
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) {
            delay = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable));

/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

var SubscribeOnOperator = /*@__PURE__*/ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */

var SwitchMapOperator = /*@__PURE__*/ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
        this.unsubscribe();
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var destination = this.destination;
        destination.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var TakeUntilOperator = /*@__PURE__*/ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.seenValue = false;
        return _this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.seenValue = true;
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
    };
    return TakeUntilSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var TakeWhileOperator = /*@__PURE__*/ (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */


var ThrottleOperator = /*@__PURE__*/ (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = null;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (duration) {
            this.add(this._throttled = subscribeToResult(this, duration));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = null;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */

var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber));
function dispatchNext$3(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}

/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var TimeoutWithOperator = /*@__PURE__*/ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.action = null;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */

/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
var WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.window = new Subject();
        destination.next(_this.window);
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */

var WindowCountOperator = /*@__PURE__*/ (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new Subject()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

var WindowTimeOperator = /*@__PURE__*/ (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var CountedSubject = /*@__PURE__*/ (function (_super) {
    __extends(CountedSubject, _super);
    function CountedSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject));
var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: _this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
        return _this;
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}

/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var WindowToggleOperator = /*@__PURE__*/ (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
        return _this;
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject) {
                return this.error(errorObject.e);
            }
            else {
                var window_1 = new Subject();
                var subscription = new Subscription();
                var context_4 = { window: window_1, subscription: subscription };
                this.contexts.push(context_4);
                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context_4;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var WindowOperator$1 = /*@__PURE__*/ (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber$1(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.closingSelector = closingSelector;
        _this.openWindow();
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) {
            innerSub = null;
        }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject) {
            var err = errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var WithLatestFromOperator = /*@__PURE__*/ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add(subscribeToResult(_this, observable, observable, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/**
 * @license Angular v6.0.4
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 *
 */
var HttpHandler = /** @class */ (function () {
    function HttpHandler() {
    }
    return HttpHandler;
}());
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 *
 */
var HttpBackend = /** @class */ (function () {
    function HttpBackend() {
    }
    return HttpBackend;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Immutable set of Http headers, with lazy parsing.
 *
 */
var HttpHeaders = /** @class */ (function () {
    function HttpHeaders(headers) {
        var _this = this;
        /**
         * Internal map of lowercased header names to the normalized
         * form of the name (the form seen first).
         */
        this.normalizedNames = new Map();
        /**
         * Queued updates to be materialized the next initialization.
         */
        this.lazyUpdate = null;
        if (!headers) {
            this.headers = new Map();
        }
        else if (typeof headers === 'string') {
            this.lazyInit = function () {
                _this.headers = new Map();
                headers.split('\n').forEach(function (line) {
                    var index = line.indexOf(':');
                    if (index > 0) {
                        var name_1 = line.slice(0, index);
                        var key = name_1.toLowerCase();
                        var value = line.slice(index + 1).trim();
                        _this.maybeSetNormalizedName(name_1, key);
                        if (_this.headers.has(key)) {
                            _this.headers.get(key).push(value);
                        }
                        else {
                            _this.headers.set(key, [value]);
                        }
                    }
                });
            };
        }
        else {
            this.lazyInit = function () {
                _this.headers = new Map();
                Object.keys(headers).forEach(function (name) {
                    var values = headers[name];
                    var key = name.toLowerCase();
                    if (typeof values === 'string') {
                        values = [values];
                    }
                    if (values.length > 0) {
                        _this.headers.set(key, values);
                        _this.maybeSetNormalizedName(name, key);
                    }
                });
            };
        }
    }
    /**
     * Checks for existence of header by given name.
     */
    HttpHeaders.prototype.has = function (name) {
        this.init();
        return this.headers.has(name.toLowerCase());
    };
    /**
     * Returns first header that matches given name.
     */
    HttpHeaders.prototype.get = function (name) {
        this.init();
        var values = this.headers.get(name.toLowerCase());
        return values && values.length > 0 ? values[0] : null;
    };
    /**
     * Returns the names of the headers
     */
    HttpHeaders.prototype.keys = function () {
        this.init();
        return Array.from(this.normalizedNames.values());
    };
    /**
     * Returns list of header values for a given name.
     */
    HttpHeaders.prototype.getAll = function (name) {
        this.init();
        return this.headers.get(name.toLowerCase()) || null;
    };
    HttpHeaders.prototype.append = function (name, value) {
        return this.clone({ name: name, value: value, op: 'a' });
    };
    HttpHeaders.prototype.set = function (name, value) {
        return this.clone({ name: name, value: value, op: 's' });
    };
    HttpHeaders.prototype.delete = function (name, value) {
        return this.clone({ name: name, value: value, op: 'd' });
    };
    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {
        if (!this.normalizedNames.has(lcName)) {
            this.normalizedNames.set(lcName, name);
        }
    };
    HttpHeaders.prototype.init = function () {
        var _this = this;
        if (!!this.lazyInit) {
            if (this.lazyInit instanceof HttpHeaders) {
                this.copyFrom(this.lazyInit);
            }
            else {
                this.lazyInit();
            }
            this.lazyInit = null;
            if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });
                this.lazyUpdate = null;
            }
        }
    };
    HttpHeaders.prototype.copyFrom = function (other) {
        var _this = this;
        other.init();
        Array.from(other.headers.keys()).forEach(function (key) {
            _this.headers.set(key, other.headers.get(key));
            _this.normalizedNames.set(key, other.normalizedNames.get(key));
        });
    };
    HttpHeaders.prototype.clone = function (update) {
        var clone = new HttpHeaders();
        clone.lazyInit =
            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
        return clone;
    };
    HttpHeaders.prototype.applyUpdate = function (update) {
        var key = update.name.toLowerCase();
        switch (update.op) {
            case 'a':
            case 's':
                var value = update.value;
                if (typeof value === 'string') {
                    value = [value];
                }
                if (value.length === 0) {
                    return;
                }
                this.maybeSetNormalizedName(update.name, key);
                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push.apply(base, __spread(value));
                this.headers.set(key, base);
                break;
            case 'd':
                var toDelete_1 = update.value;
                if (!toDelete_1) {
                    this.headers.delete(key);
                    this.normalizedNames.delete(key);
                }
                else {
                    var existing = this.headers.get(key);
                    if (!existing) {
                        return;
                    }
                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });
                    if (existing.length === 0) {
                        this.headers.delete(key);
                        this.normalizedNames.delete(key);
                    }
                    else {
                        this.headers.set(key, existing);
                    }
                }
                break;
        }
    };
    /**
     * @internal
     */
    HttpHeaders.prototype.forEach = function (fn) {
        var _this = this;
        this.init();
        Array.from(this.normalizedNames.keys())
            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });
    };
    return HttpHeaders;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to
 * serialize and parse URL parameter keys and values.
 *
 *
 */
var HttpUrlEncodingCodec = /** @class */ (function () {
    function HttpUrlEncodingCodec() {
    }
    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };
    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };
    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };
    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };
    return HttpUrlEncodingCodec;
}());
function paramParser(rawParams, codec) {
    var map$$1 = new Map();
    if (rawParams.length > 0) {
        var params = rawParams.split('&');
        params.forEach(function (param) {
            var eqIdx = param.indexOf('=');
            var _a = __read(eqIdx == -1 ?
                [codec.decodeKey(param), ''] :
                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];
            var list = map$$1.get(key) || [];
            list.push(val);
            map$$1.set(key, list);
        });
    }
    return map$$1;
}
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable - all mutation operations return a new instance.
 *
 *
 */
var HttpParams = /** @class */ (function () {
    function HttpParams(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.updates = null;
        this.cloneFrom = null;
        this.encoder = options.encoder || new HttpUrlEncodingCodec();
        if (!!options.fromString) {
            if (!!options.fromObject) {
                throw new Error("Cannot specify both fromString and fromObject.");
            }
            this.map = paramParser(options.fromString, this.encoder);
        }
        else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach(function (key) {
                var value = options.fromObject[key];
                _this.map.set(key, Array.isArray(value) ? value : [value]);
            });
        }
        else {
            this.map = null;
        }
    }
    /**
     * Check whether the body has one or more values for the given parameter name.
     */
    HttpParams.prototype.has = function (param) {
        this.init();
        return this.map.has(param);
    };
    /**
     * Get the first value for the given parameter name, or `null` if it's not present.
     */
    HttpParams.prototype.get = function (param) {
        this.init();
        var res = this.map.get(param);
        return !!res ? res[0] : null;
    };
    /**
     * Get all values for the given parameter name, or `null` if it's not present.
     */
    HttpParams.prototype.getAll = function (param) {
        this.init();
        return this.map.get(param) || null;
    };
    /**
     * Get all the parameter names for this body.
     */
    HttpParams.prototype.keys = function () {
        this.init();
        return Array.from(this.map.keys());
    };
    /**
     * Construct a new body with an appended value for the given parameter name.
     */
    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };
    /**
     * Construct a new body with a new value for the given parameter name.
     */
    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };
    /**
     * Construct a new body with either the given value for the given parameter
     * removed, if a value is given, or all values for the given parameter removed
     * if not.
     */
    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };
    /**
     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     */
    HttpParams.prototype.toString = function () {
        var _this = this;
        this.init();
        return this.keys()
            .map(function (key) {
            var eKey = _this.encoder.encodeKey(key);
            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })
                .join('&');
        })
            .join('&');
    };
    HttpParams.prototype.clone = function (update) {
        var clone = new HttpParams({ encoder: this.encoder });
        clone.cloneFrom = this.cloneFrom || this;
        clone.updates = (this.updates || []).concat([update]);
        return clone;
    };
    HttpParams.prototype.init = function () {
        var _this = this;
        if (this.map === null) {
            this.map = new Map();
        }
        if (this.cloneFrom !== null) {
            this.cloneFrom.init();
            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });
            this.updates.forEach(function (update) {
                switch (update.op) {
                    case 'a':
                    case 's':
                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];
                        base.push(update.value);
                        _this.map.set(update.param, base);
                        break;
                    case 'd':
                        if (update.value !== undefined) {
                            var base_1 = _this.map.get(update.param) || [];
                            var idx = base_1.indexOf(update.value);
                            if (idx !== -1) {
                                base_1.splice(idx, 1);
                            }
                            if (base_1.length > 0) {
                                _this.map.set(update.param, base_1);
                            }
                            else {
                                _this.map.delete(update.param);
                            }
                        }
                        else {
                            _this.map.delete(update.param);
                            break;
                        }
                }
            });
            this.cloneFrom = null;
        }
    };
    return HttpParams;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine whether the given HTTP method may include a body.
 */
function mightHaveBody(method) {
    switch (method) {
        case 'DELETE':
        case 'GET':
        case 'HEAD':
        case 'OPTIONS':
        case 'JSONP':
            return false;
        default:
            return true;
    }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 */
function isArrayBuffer(value) {
    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 */
function isBlob(value) {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 */
function isFormData(value) {
    return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 *
 */
var HttpRequest = /** @class */ (function () {
    function HttpRequest(method, url, third, fourth) {
        this.url = url;
        /**
         * The request body, or `null` if one isn't set.
         *
         * Bodies are not enforced to be immutable, as they can include a reference to any
         * user-defined data type. However, interceptors should take care to preserve
         * idempotence by treating them as such.
         */
        this.body = null;
        /**
         * Whether this request should be made in a way that exposes progress events.
         *
         * Progress events are expensive (change detection runs on each event) and so
         * they should only be requested if the consumer intends to monitor them.
         */
        this.reportProgress = false;
        /**
         * Whether this request should be sent with outgoing credentials (cookies).
         */
        this.withCredentials = false;
        /**
         * The expected response type of the server.
         *
         * This is used to parse the response appropriately before returning it to
         * the requestee.
         */
        this.responseType = 'json';
        this.method = method.toUpperCase();
        // Next, need to figure out which argument holds the HttpRequestInit
        // options, if any.
        var options;
        // Check whether a body argument is expected. The only valid way to omit
        // the body argument is to use a known no-body method like GET.
        if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = (third !== undefined) ? third : null;
            options = fourth;
        }
        else {
            // No body required, options are the third argument. The body stays null.
            options = third;
        }
        // If options have been passed, interpret them.
        if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials;
            // Override default response type of 'json' if one is provided.
            if (!!options.responseType) {
                this.responseType = options.responseType;
            }
            // Override headers if they're provided.
            if (!!options.headers) {
                this.headers = options.headers;
            }
            if (!!options.params) {
                this.params = options.params;
            }
        }
        // If no headers have been passed in, construct a new HttpHeaders instance.
        if (!this.headers) {
            this.headers = new HttpHeaders();
        }
        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
        if (!this.params) {
            this.params = new HttpParams();
            this.urlWithParams = url;
        }
        else {
            // Encode the parameters to a string in preparation for inclusion in the URL.
            var params = this.params.toString();
            if (params.length === 0) {
                // No parameters, the visible URL is just the URL given at creation time.
                this.urlWithParams = url;
            }
            else {
                // Does the URL already have query parameters? Look for '?'.
                var qIdx = url.indexOf('?');
                // There are 3 cases to handle:
                // 1) No existing parameters -> append '?' followed by params.
                // 2) '?' exists and is followed by existing query string ->
                //    append '&' followed by params.
                // 3) '?' exists at the end of the url -> append params directly.
                // This basically amounts to determining the character, if any, with
                // which to join the URL and parameters.
                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
                this.urlWithParams = url + sep + params;
            }
        }
    }
    /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     */
    HttpRequest.prototype.serializeBody = function () {
        // If no body is present, no need to serialize it.
        if (this.body === null) {
            return null;
        }
        // Check whether the body is already in a serialized form. If so,
        // it can just be returned directly.
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        // Check whether the body is an instance of HttpUrlEncodedParams.
        if (this.body instanceof HttpParams) {
            return this.body.toString();
        }
        // Check whether the body is an object or array, and serialize with JSON if so.
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        // Fall back on toString() for everything else.
        return this.body.toString();
    };
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     */
    HttpRequest.prototype.detectContentTypeHeader = function () {
        // An empty body has no content type.
        if (this.body === null) {
            return null;
        }
        // FormData bodies rely on the browser's content type assignment.
        if (isFormData(this.body)) {
            return null;
        }
        // Blobs usually have their own content type. If it doesn't, then
        // no type can be inferred.
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        // Array buffers have unknown contents and thus no type can be inferred.
        if (isArrayBuffer(this.body)) {
            return null;
        }
        // Technically, strings could be a form of JSON data, but it's safe enough
        // to assume they're plain strings.
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        // `HttpUrlEncodedParams` has its own content-type.
        if (this.body instanceof HttpParams) {
            return 'application/x-www-form-urlencoded;charset=UTF-8';
        }
        // Arrays, objects, and numbers will be encoded as JSON.
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        // No type could be inferred.
        return null;
    };
    HttpRequest.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        // For method, url, and responseType, take the current value unless
        // it is overridden in the update hash.
        var method = update.method || this.method;
        var url = update.url || this.url;
        var responseType = update.responseType || this.responseType;
        // The body is somewhat special - a `null` value in update.body means
        // whatever current body is present is being overridden with an empty
        // body, whereas an `undefined` value in update.body implies no
        // override.
        var body = (update.body !== undefined) ? update.body : this.body;
        // Carefully handle the boolean options to differentiate between
        // `false` and `undefined` in the update args.
        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
        // Headers and params may be appended to if `setHeaders` or
        // `setParams` are used.
        var headers = update.headers || this.headers;
        var params = update.params || this.params;
        // Check whether the caller has asked to add headers.
        if (update.setHeaders !== undefined) {
            // Set every requested header.
            headers =
                Object.keys(update.setHeaders)
                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);
        }
        // Check whether the caller has asked to set params.
        if (update.setParams) {
            // Set every requested param.
            params = Object.keys(update.setParams)
                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);
        }
        // Finally, construct the new HttpRequest using the pieces from above.
        return new HttpRequest(method, url, body, {
            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,
        });
    };
    return HttpRequest;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Type enumeration for the different kinds of `HttpEvent`.
 *
 *
 */
var HttpEventType;
(function (HttpEventType) {
    /**
     * The request was sent out over the wire.
     */
    HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
    /**
     * An upload progress event was received.
     */
    HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
    /**
     * The response status code and headers were received.
     */
    HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
    /**
     * A download progress event was received.
     */
    HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
    /**
     * The full response including the body was received.
     */
    HttpEventType[HttpEventType["Response"] = 4] = "Response";
    /**
     * A custom event from an interceptor or a backend.
     */
    HttpEventType[HttpEventType["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 *
 */
var HttpResponseBase = /** @class */ (function () {
    /**
     * Super-constructor for all responses.
     *
     * The single parameter accepted is an initialization hash. Any properties
     * of the response passed there will override the default values.
     */
    function HttpResponseBase(init, defaultStatus, defaultStatusText) {
        if (defaultStatus === void 0) { defaultStatus = 200; }
        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }
        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null;
        // Cache the ok value to avoid defining a getter.
        this.ok = this.status >= 200 && this.status < 300;
    }
    return HttpResponseBase;
}());
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 *
 */
var HttpHeaderResponse = /** @class */ (function (_super) {
    __extends(HttpHeaderResponse, _super);
    /**
     * Create a new `HttpHeaderResponse` with the given parameters.
     */
    function HttpHeaderResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.ResponseHeader;
        return _this;
    }
    /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     */
    HttpHeaderResponse.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        // Perform a straightforward initialization of the new HttpHeaderResponse,
        // overriding the current parameters with new ones if given.
        return new HttpHeaderResponse({
            headers: update.headers || this.headers,
            status: update.status !== undefined ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpHeaderResponse;
}(HttpResponseBase));
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 *
 */
var HttpResponse = /** @class */ (function (_super) {
    __extends(HttpResponse, _super);
    /**
     * Construct a new `HttpResponse`.
     */
    function HttpResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.Response;
        _this.body = init.body !== undefined ? init.body : null;
        return _this;
    }
    HttpResponse.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        return new HttpResponse({
            body: (update.body !== undefined) ? update.body : this.body,
            headers: update.headers || this.headers,
            status: (update.status !== undefined) ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpResponse;
}(HttpResponseBase));
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 *
 */
var HttpErrorResponse = /** @class */ (function (_super) {
    __extends(HttpErrorResponse, _super);
    function HttpErrorResponse(init) {
        var _this = 
        // Initialize with a default status of 0 / Unknown Error.
        _super.call(this, init, 0, 'Unknown Error') || this;
        _this.name = 'HttpErrorResponse';
        /**
         * Errors are never okay, even when the status code is in the 2xx success range.
         */
        _this.ok = false;
        // If the response was successful, then this was a parse error. Otherwise, it was
        // a protocol-level failure of some sort. Either the request failed in transit
        // or the server returned an unsuccessful status code.
        if (_this.status >= 200 && _this.status < 300) {
            _this.message = "Http failure during parsing for " + (init.url || '(unknown url)');
        }
        else {
            _this.message =
                "Http failure response for " + (init.url || '(unknown url)') + ": " + init.status + " " + init.statusText;
        }
        _this.error = init.error || null;
        return _this;
    }
    return HttpErrorResponse;
}(HttpResponseBase));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. Basically, this clones the object and adds the body.
 */
function addBody(options, body) {
    return {
        body: body,
        headers: options.headers,
        observe: options.observe,
        params: options.params,
        reportProgress: options.reportProgress,
        responseType: options.responseType,
        withCredentials: options.withCredentials,
    };
}
/**
 * Perform HTTP requests.
 *
 * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies according to which
 * signature is called (mainly the values of `observe` and `responseType`).
 *
 *
 */
var HttpClient = /** @class */ (function () {
    function HttpClient(handler) {
        this.handler = handler;
    }
    /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     */
    HttpClient.prototype.request = function (first, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var req;
        // Firstly, check whether the primary argument is an instance of `HttpRequest`.
        if (first instanceof HttpRequest) {
            // It is. The other arguments must be undefined (per the signatures) and can be
            // ignored.
            req = first;
        }
        else {
            // It's a string, so it represents a URL. Construct a request based on it,
            // and incorporate the remaining arguments (assuming GET unless a method is
            // provided.
            // Figure out the headers.
            var headers = undefined;
            if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
            }
            else {
                headers = new HttpHeaders(options.headers);
            }
            // Sort out parameters.
            var params = undefined;
            if (!!options.params) {
                if (options.params instanceof HttpParams) {
                    params = options.params;
                }
                else {
                    params = new HttpParams({ fromObject: options.params });
                }
            }
            // Construct the request.
            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {
                headers: headers,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials,
            });
        }
        // Start with an Observable.of() the initial request, and run the handler (which
        // includes all interceptors) inside a concatMap(). This way, the handler runs
        // inside an Observable chain, which causes interceptors to be re-run on every
        // subscription (this also makes retries re-run the handler, including interceptors).
        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));
        // If coming via the API signature which accepts a previously constructed HttpRequest,
        // the only option is to get the event stream. Otherwise, return the event stream if
        // that is what was requested.
        if (first instanceof HttpRequest || options.observe === 'events') {
            return events$;
        }
        // The requested stream contains either the full response or the body. In either
        // case, the first step is to filter the event stream to extract a stream of
        // responses(s).
        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));
        // Decide which stream to return.
        switch (options.observe || 'body') {
            case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                    case 'arraybuffer':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is an ArrayBuffer.
                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                throw new Error('Response is not an ArrayBuffer.');
                            }
                            return res.body;
                        }));
                    case 'blob':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a Blob.
                            if (res.body !== null && !(res.body instanceof Blob)) {
                                throw new Error('Response is not a Blob.');
                            }
                            return res.body;
                        }));
                    case 'text':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a string.
                            if (res.body !== null && typeof res.body !== 'string') {
                                throw new Error('Response is not a string.');
                            }
                            return res.body;
                        }));
                    case 'json':
                    default:
                        // No validation needed for JSON responses, as they can be of any type.
                        return res$.pipe(map(function (res) { return res.body; }));
                }
            case 'response':
                // The response stream was requested directly, so return it.
                return res$;
            default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
        }
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     */
    HttpClient.prototype.delete = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('DELETE', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     */
    HttpClient.prototype.get = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('GET', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     */
    HttpClient.prototype.head = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('HEAD', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     */
    HttpClient.prototype.jsonp = function (url, callbackParam) {
        return this.request('JSONP', url, {
            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
            observe: 'body',
            responseType: 'json',
        });
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     */
    HttpClient.prototype.options = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('OPTIONS', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     */
    HttpClient.prototype.patch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PATCH', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    HttpClient.prototype.post = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('POST', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    HttpClient.prototype.put = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PUT', url, addBody(options, body));
    };
    HttpClient.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    HttpClient.ctorParameters = function () { return [
        { type: HttpHandler }
    ]; };
    return HttpClient;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 *
 */
var HttpInterceptorHandler = /** @class */ (function () {
    function HttpInterceptorHandler(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    HttpInterceptorHandler.prototype.handle = function (req) {
        return this.interceptor.intercept(req, this.next);
    };
    return HttpInterceptorHandler;
}());
/**
 * A multi-provider token which represents the array of `HttpInterceptor`s that
 * are registered.
 *
 *
 */
var HTTP_INTERCEPTORS = new core.InjectionToken('HTTP_INTERCEPTORS');
var NoopInterceptor = /** @class */ (function () {
    function NoopInterceptor() {
    }
    NoopInterceptor.prototype.intercept = function (req, next) {
        return next.handle(req);
    };
    NoopInterceptor.decorators = [
        { type: core.Injectable }
    ];
    return NoopInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.
var nextRequestId = 0;
// Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.
var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
// Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 */
var JsonpCallbackContext = /** @class */ (function () {
    function JsonpCallbackContext() {
    }
    return JsonpCallbackContext;
}());
/**
 * `HttpBackend` that only processes `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 *
 *
 */
var JsonpClientBackend = /** @class */ (function () {
    function JsonpClientBackend(callbackMap, document) {
        this.callbackMap = callbackMap;
        this.document = document;
    }
    /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     */
    JsonpClientBackend.prototype.nextCallback = function () { return "ng_jsonp_callback_" + nextRequestId++; };
    /**
     * Process a JSONP request and return an event stream of the results.
     */
    JsonpClientBackend.prototype.handle = function (req) {
        var _this = this;
        // Firstly, check both the method and response type. If either doesn't match
        // then the request was improperly routed here and cannot be handled.
        if (req.method !== 'JSONP') {
            throw new Error(JSONP_ERR_WRONG_METHOD);
        }
        else if (req.responseType !== 'json') {
            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
        }
        // Everything else happens inside the Observable boundary.
        return new Observable(function (observer) {
            // The first step to make a request is to generate the callback name, and replace the
            // callback placeholder in the URL with the name. Care has to be taken here to ensure
            // a trailing &, if matched, gets inserted back into the URL in the correct place.
            var callback = _this.nextCallback();
            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=" + callback + "$1");
            // Construct the <script> tag and point it at the URL.
            var node = _this.document.createElement('script');
            node.src = url;
            // A JSONP request requires waiting for multiple callbacks. These variables
            // are closed over and track state across those callbacks.
            // The response object, if one has been received, or null otherwise.
            var body = null;
            // Whether the response callback has been called.
            var finished = false;
            // Whether the request has been cancelled (and thus any other callbacks)
            // should be ignored.
            var cancelled = false;
            // Set the response callback in this.callbackMap (which will be the window
            // object in the browser. The script being loaded via the <script> tag will
            // eventually call this callback.
            _this.callbackMap[callback] = function (data) {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete _this.callbackMap[callback];
                // Next, make sure the request wasn't cancelled in the meantime.
                if (cancelled) {
                    return;
                }
                // Set state to indicate data was received.
                body = data;
                finished = true;
            };
            // cleanup() is a utility closure that removes the <script> from the page and
            // the response callback from the window. This logic is used in both the
            // success, error, and cancellation paths, so it's extracted out for convenience.
            var cleanup = function () {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
                // Remove the response callback from the callbackMap (window object in the
                // browser).
                delete _this.callbackMap[callback];
            };
            // onLoad() is the success callback which runs after the response callback
            // if the JSONP script loads successfully. The event itself is unimportant.
            // If something went wrong, onLoad() may run without the response callback
            // having been invoked.
            var onLoad = function (event) {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                    return;
                }
                // Cleanup the page.
                cleanup();
                // Check whether the response callback has run.
                if (!finished) {
                    // It hasn't, something went wrong with the request. Return an error via
                    // the Observable error path. All JSONP errors have status 0.
                    observer.error(new HttpErrorResponse({
                        url: url,
                        status: 0,
                        statusText: 'JSONP Error',
                        error: new Error(JSONP_ERR_NO_CALLBACK),
                    }));
                    return;
                }
                // Success. body either contains the response body or null if none was
                // returned.
                observer.next(new HttpResponse({
                    body: body,
                    status: 200,
                    statusText: 'OK', url: url,
                }));
                // Complete the stream, the response is over.
                observer.complete();
            };
            // onError() is the error callback, which runs if the script returned generates
            // a Javascript error. It emits the error via the Observable error channel as
            // a HttpErrorResponse.
            var onError = function (error) {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                    return;
                }
                cleanup();
                // Wrap the error in a HttpErrorResponse.
                observer.error(new HttpErrorResponse({
                    error: error,
                    status: 0,
                    statusText: 'JSONP Error', url: url,
                }));
            };
            // Subscribe to both the success (load) and error events on the <script> tag,
            // and add it to the page.
            node.addEventListener('load', onLoad);
            node.addEventListener('error', onError);
            _this.document.body.appendChild(node);
            // The request has now been successfully sent.
            observer.next({ type: HttpEventType.Sent });
            // Cancellation handler.
            return function () {
                // Track the cancellation so event listeners won't do anything even if already scheduled.
                cancelled = true;
                // Remove the event listeners so they won't run if the events later fire.
                node.removeEventListener('load', onLoad);
                node.removeEventListener('error', onError);
                // And finally, clean up the page.
                cleanup();
            };
        });
    };
    JsonpClientBackend.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    JsonpClientBackend.ctorParameters = function () { return [
        { type: JsonpCallbackContext },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    return JsonpClientBackend;
}());
/**
 * An `HttpInterceptor` which identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 *
 */
var JsonpInterceptor = /** @class */ (function () {
    function JsonpInterceptor(jsonp) {
        this.jsonp = jsonp;
    }
    JsonpInterceptor.prototype.intercept = function (req, next) {
        if (req.method === 'JSONP') {
            return this.jsonp.handle(req);
        }
        // Fall through for normal HTTP requests.
        return next.handle(req);
    };
    JsonpInterceptor.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    JsonpInterceptor.ctorParameters = function () { return [
        { type: JsonpClientBackend }
    ]; };
    return JsonpInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 */
function getResponseUrl(xhr) {
    if ('responseURL' in xhr && xhr.responseURL) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return null;
}
/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 *
 */
var XhrFactory = /** @class */ (function () {
    function XhrFactory() {
    }
    return XhrFactory;
}());
/**
 * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.
 *
 *
 */
var BrowserXhr = /** @class */ (function () {
    function BrowserXhr() {
    }
    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
    BrowserXhr.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    BrowserXhr.ctorParameters = function () { return []; };
    return BrowserXhr;
}());
/**
 * An `HttpBackend` which uses the XMLHttpRequest API to send
 * requests to a backend server.
 *
 *
 */
var HttpXhrBackend = /** @class */ (function () {
    function HttpXhrBackend(xhrFactory) {
        this.xhrFactory = xhrFactory;
    }
    /**
     * Process a request and return a stream of response events.
     */
    HttpXhrBackend.prototype.handle = function (req) {
        var _this = this;
        // Quick check to give a better error message when a user attempts to use
        // HttpClient.jsonp() without installing the JsonpClientModule
        if (req.method === 'JSONP') {
            throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
        }
        // Everything happens on Observable subscription.
        return new Observable(function (observer) {
            // Start by setting up the XHR object with request method, URL, and withCredentials flag.
            var xhr = _this.xhrFactory.build();
            xhr.open(req.method, req.urlWithParams);
            if (!!req.withCredentials) {
                xhr.withCredentials = true;
            }
            // Add all the requested headers.
            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });
            // Add an Accept header if one isn't present already.
            if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
            }
            // Auto-detect the Content-Type header if one isn't present already.
            if (!req.headers.has('Content-Type')) {
                var detectedType = req.detectContentTypeHeader();
                // Sometimes Content-Type detection fails.
                if (detectedType !== null) {
                    xhr.setRequestHeader('Content-Type', detectedType);
                }
            }
            // Set the responseType if one was requested.
            if (req.responseType) {
                var responseType = req.responseType.toLowerCase();
                // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.
                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');
            }
            // Serialize the request body if one is present. If not, this will be set to null.
            var reqBody = req.serializeBody();
            // If progress events are enabled, response headers will be delivered
            // in two events - the HttpHeaderResponse event and the full HttpResponse
            // event. However, since response headers don't change in between these
            // two events, it doesn't make sense to parse them twice. So headerResponse
            // caches the data extracted from the response whenever it's first parsed,
            // to ensure parsing isn't duplicated.
            var headerResponse = null;
            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
            // state, and memoizes it into headerResponse.
            var partialFromXhr = function () {
                if (headerResponse !== null) {
                    return headerResponse;
                }
                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
                var status = xhr.status === 1223 ? 204 : xhr.status;
                var statusText = xhr.statusText || 'OK';
                // Parse headers from XMLHttpRequest - this step is lazy.
                var headers = new HttpHeaders(xhr.getAllResponseHeaders());
                // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.
                var url = getResponseUrl(xhr) || req.url;
                // Construct the HttpHeaderResponse and memoize it.
                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });
                return headerResponse;
            };
            // Next, a few closures are defined for the various events which XMLHttpRequest can
            // emit. This allows them to be unregistered as event listeners later.
            // First up is the load event, which represents a response being fully available.
            var onLoad = function () {
                // Read response state from the memoized partial data.
                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;
                // The body will be read out if present.
                var body = null;
                if (status !== 204) {
                    // Use XMLHttpRequest.response if set, responseText otherwise.
                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
                }
                // Normalize another potential bug (this one comes from CORS).
                if (status === 0) {
                    status = !!body ? 200 : 0;
                }
                // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.
                var ok = status >= 200 && status < 300;
                // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).
                if (req.responseType === 'json' && typeof body === 'string') {
                    // Save the original body, before attempting XSSI prefix stripping.
                    var originalBody = body;
                    body = body.replace(XSSI_PREFIX, '');
                    try {
                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
                        body = body !== '' ? JSON.parse(body) : null;
                    }
                    catch (error) {
                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                        // JSON response. Restore the original body (including any XSSI prefix) to deliver
                        // a better error response.
                        body = originalBody;
                        // If this was an error request to begin with, leave it as a string, it probably
                        // just isn't JSON. Otherwise, deliver the parsing error to the user.
                        if (ok) {
                            // Even though the response status was 2xx, this is still an error.
                            ok = false;
                            // The parse error contains the text of the body that failed to parse.
                            body = { error: error, text: body };
                        }
                    }
                }
                if (ok) {
                    // A successful response is delivered on the event stream.
                    observer.next(new HttpResponse({
                        body: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                    // The full body has been received and delivered, no further events
                    // are possible. This request is complete.
                    observer.complete();
                }
                else {
                    // An unsuccessful request is delivered on the error channel.
                    observer.error(new HttpErrorResponse({
                        // The error in this case is the response body (error from the server).
                        error: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                }
            };
            // The onError callback is called when something goes wrong at the network level.
            // Connection timeout, DNS error, offline, etc. These are actual errors, and are
            // transmitted on the error channel.
            var onError = function (error) {
                var res = new HttpErrorResponse({
                    error: error,
                    status: xhr.status || 0,
                    statusText: xhr.statusText || 'Unknown Error',
                });
                observer.error(res);
            };
            // The sentHeaders flag tracks whether the HttpResponseHeaders event
            // has been sent on the stream. This is necessary to track if progress
            // is enabled since the event will be sent on only the first download
            // progerss event.
            var sentHeaders = false;
            // The download progress event handler, which is only registered if
            // progress events are enabled.
            var onDownProgress = function (event) {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                    observer.next(partialFromXhr());
                    sentHeaders = true;
                }
                // Start building the download progress event to deliver on the response
                // event stream.
                var progressEvent = {
                    type: HttpEventType.DownloadProgress,
                    loaded: event.loaded,
                };
                // Set the total number of bytes in the event if it's available.
                if (event.lengthComputable) {
                    progressEvent.total = event.total;
                }
                // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.
                if (req.responseType === 'text' && !!xhr.responseText) {
                    progressEvent.partialText = xhr.responseText;
                }
                // Finally, fire the event.
                observer.next(progressEvent);
            };
            // The upload progress event handler, which is only registered if
            // progress events are enabled.
            var onUpProgress = function (event) {
                // Upload progress events are simpler. Begin building the progress
                // event.
                var progress = {
                    type: HttpEventType.UploadProgress,
                    loaded: event.loaded,
                };
                // If the total number of bytes being uploaded is available, include
                // it.
                if (event.lengthComputable) {
                    progress.total = event.total;
                }
                // Send the event.
                observer.next(progress);
            };
            // By default, register for load and error events.
            xhr.addEventListener('load', onLoad);
            xhr.addEventListener('error', onError);
            // Progress events are only enabled if requested.
            if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress);
                // Upload progress depends on whether there is a body to upload.
                if (reqBody !== null && xhr.upload) {
                    xhr.upload.addEventListener('progress', onUpProgress);
                }
            }
            // Fire the request, and notify the event stream that it was fired.
            xhr.send(reqBody);
            observer.next({ type: HttpEventType.Sent });
            // This is the return from the Observable function, which is the
            // request cancellation handler.
            return function () {
                // On a cancellation, remove all registered event listeners.
                xhr.removeEventListener('error', onError);
                xhr.removeEventListener('load', onLoad);
                if (req.reportProgress) {
                    xhr.removeEventListener('progress', onDownProgress);
                    if (reqBody !== null && xhr.upload) {
                        xhr.upload.removeEventListener('progress', onUpProgress);
                    }
                }
                // Finally, abort the in-flight request.
                xhr.abort();
            };
        });
    };
    HttpXhrBackend.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    HttpXhrBackend.ctorParameters = function () { return [
        { type: XhrFactory }
    ]; };
    return HttpXhrBackend;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSRF_COOKIE_NAME = new core.InjectionToken('XSRF_COOKIE_NAME');
var XSRF_HEADER_NAME = new core.InjectionToken('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 *
 */
var HttpXsrfTokenExtractor = /** @class */ (function () {
    function HttpXsrfTokenExtractor() {
    }
    return HttpXsrfTokenExtractor;
}());
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */
var HttpXsrfCookieExtractor = /** @class */ (function () {
    function HttpXsrfCookieExtractor(doc, platform, cookieName) {
        this.doc = doc;
        this.platform = platform;
        this.cookieName = cookieName;
        this.lastCookieString = '';
        this.lastToken = null;
        /**
         * @internal for testing
         */
        this.parseCount = 0;
    }
    HttpXsrfCookieExtractor.prototype.getToken = function () {
        if (this.platform === 'server') {
            return null;
        }
        var cookieString = this.doc.cookie || '';
        if (cookieString !== this.lastCookieString) {
            this.parseCount++;
            this.lastToken = common.ɵparseCookieValue(cookieString, this.cookieName);
            this.lastCookieString = cookieString;
        }
        return this.lastToken;
    };
    HttpXsrfCookieExtractor.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    HttpXsrfCookieExtractor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: core.Inject, args: [XSRF_COOKIE_NAME,] }] }
    ]; };
    return HttpXsrfCookieExtractor;
}());
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */
var HttpXsrfInterceptor = /** @class */ (function () {
    function HttpXsrfInterceptor(tokenService, headerName) {
        this.tokenService = tokenService;
        this.headerName = headerName;
    }
    HttpXsrfInterceptor.prototype.intercept = function (req, next) {
        var lcUrl = req.url.toLowerCase();
        // Skip both non-mutating requests and absolute URLs.
        // Non-mutating requests don't require a token, and absolute URLs require special handling
        // anyway as the cookie set
        // on our origin is not the same as the token expected by another origin.
        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
            lcUrl.startsWith('https://')) {
            return next.handle(req);
        }
        var token = this.tokenService.getToken();
        // Be careful not to overwrite an existing header of the same name.
        if (token !== null && !req.headers.has(this.headerName)) {
            req = req.clone({ headers: req.headers.set(this.headerName, token) });
        }
        return next.handle(req);
    };
    HttpXsrfInterceptor.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    HttpXsrfInterceptor.ctorParameters = function () { return [
        { type: HttpXsrfTokenExtractor },
        { type: String, decorators: [{ type: core.Inject, args: [XSRF_HEADER_NAME,] }] }
    ]; };
    return HttpXsrfInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An `HttpHandler` that applies a bunch of `HttpInterceptor`s
 * to a request before passing it to the given `HttpBackend`.
 *
 * The interceptors are loaded lazily from the injector, to allow
 * interceptors to themselves inject classes depending indirectly
 * on `HttpInterceptingHandler` itself.
 */
var HttpInterceptingHandler = /** @class */ (function () {
    function HttpInterceptingHandler(backend, injector) {
        this.backend = backend;
        this.injector = injector;
        this.chain = null;
    }
    HttpInterceptingHandler.prototype.handle = function (req) {
        if (this.chain === null) {
            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);
        }
        return this.chain.handle(req);
    };
    HttpInterceptingHandler.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    HttpInterceptingHandler.ctorParameters = function () { return [
        { type: HttpBackend },
        { type: core.Injector }
    ]; };
    return HttpInterceptingHandler;
}());
/**
 * `NgModule` which adds XSRF protection support to outgoing requests.
 *
 * Provided the server supports a cookie-based XSRF protection system, this
 * module can be used directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no such names are provided, the default is to use `X-XSRF-TOKEN` for
 * the header name and `XSRF-TOKEN` for the cookie name.
 *
 *
 */
var HttpClientXsrfModule = /** @class */ (function () {
    function HttpClientXsrfModule() {
    }
    /**
     * Disable the default XSRF protection.
     */
    HttpClientXsrfModule.disable = function () {
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
            ],
        };
    };
    /**
     * Configure XSRF protection to use the given cookie name or header name,
     * or the default names (as described above) if not provided.
     */
    HttpClientXsrfModule.withOptions = function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
            ],
        };
    };
    HttpClientXsrfModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        HttpXsrfInterceptor,
                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
                    ],
                },] }
    ];
    return HttpClientXsrfModule;
}());
/**
 * `NgModule` which provides the `HttpClient` and associated services.
 *
 * Interceptors can be added to the chain behind `HttpClient` by binding them
 * to the multiprovider for `HTTP_INTERCEPTORS`.
 *
 *
 */
var HttpClientModule = /** @class */ (function () {
    function HttpClientModule() {
    }
    HttpClientModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        HttpClientXsrfModule.withOptions({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'X-XSRF-TOKEN',
                        }),
                    ],
                    providers: [
                        HttpClient,
                        { provide: HttpHandler, useClass: HttpInterceptingHandler },
                        HttpXhrBackend,
                        { provide: HttpBackend, useExisting: HttpXhrBackend },
                        BrowserXhr,
                        { provide: XhrFactory, useExisting: BrowserXhr },
                    ],
                },] }
    ];
    return HttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 10/1/18.
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas, Rashmi Thakkar
 *
 */
var AmexioGridColumnComponent = /** @class */ (function () {
    function AmexioGridColumnComponent() {
        /*
           Properties
           name : sort
           datatype : boolean
           version : 4.2.6 onwards
           default : true
           description : Set column Sortable.
           */
        this.sort = true;
        /*
        Properties
        name : hidden
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : Hide column
        */
        this.hidden = false;
    }
    AmexioGridColumnComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-data-table-column', template: "",
                },] },
    ];
    AmexioGridColumnComponent.propDecorators = {
        text: [{ type: core.Input }],
        sort: [{ type: core.Input }],
        dataindex: [{ type: core.Input, args: ['data-index',] }],
        hidden: [{ type: core.Input }],
        datatype: [{ type: core.Input, args: ['data-type',] }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        summarytype: [{ type: core.Input, args: ['summary-type',] }],
        summarycaption: [{ type: core.Input, args: ['summary-caption',] }],
        width: [{ type: core.Input }],
        headerTemplate: [{ type: core.ContentChild, args: ['amexioHeaderTmpl',] }],
        bodyTemplate: [{ type: core.ContentChild, args: ['amexioBodyTmpl',] }]
    };
    return AmexioGridColumnComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CommonDataService = /** @class */ (function () {
    function CommonDataService(_http) {
        this._http = _http;
        this.filteredObject = [];
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    CommonDataService.prototype.fetchData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    function (serviceUrl, methodType) {
        var /** @type {?} */ requestJson = {};
        var /** @type {?} */ headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this._http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this._http.get(serviceUrl, { headers: headers });
        }
    };
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestData
     * @return {?}
     */
    CommonDataService.prototype.uploadFile = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestData
     * @return {?}
     */
    function (serviceUrl, methodType, requestData) {
        var /** @type {?} */ requestJson = requestData;
        var /** @type {?} */ headers = new HttpHeaders().append('Access-Control-Allow-Origin', '*');
        if (methodType.toUpperCase() === 'POST') {
            return this._http.post(serviceUrl, requestJson, { headers: headers });
        }
    };
    CommonDataService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    CommonDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CommonDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioDatagridComponent = /** @class */ (function () {
    function AmexioDatagridComponent(element, dataTableService, cd, renderer) {
        this.element = element;
        this.dataTableService = dataTableService;
        this.cd = cd;
        this.renderer = renderer;
        /*
           Events
           name : rowSelect
           datatype : none
           version : none
           default : none
           description : It will gives you row clicked data.
           */
        this.rowSelect = new core.EventEmitter();
        /*
           Events
           name : selectedRowData
           datatype : none
           version : none
           default : none
           description : It will fire only on selection of checkbox and gives you selected record data.
           */
        this.selectedRowData = new core.EventEmitter();
        /*
           Events
           name : onHeaderClick
           datatype : none
           version : none
           default : none
           description : It will gives you click event and column info.
           */
        this.onHeaderClick = new core.EventEmitter();
        /*
           Properties
           name : groupby
           datatype :
           version : 4.0 onwards
           default : none
           description : Set True for Enable group by functionality.
           */
        this.groupby = false;
        this.rightClick = new core.EventEmitter();
        this.columns = [];
        this.viewRows = [];
        this.selectAll = false;
        this.tempContextMenu = [];
        this.mouseLocation = { left: 0, top: 0 };
        this.isExpanded = false;
        this.mask = true;
        this.checkIcon = 'fa fa-check';
        this.plusIcon = 'fa fa-plus';
        this.checkDefaultIcon = 'checkbox default';
        this.checkBoxSelectClass = '';
        this.selectedRows = [];
        this.sortBy = -1;
        this.globalFilterOptions = [{
                key: 'Start With', value: '1', checkedStatus: this.checkIcon,
            }, {
                key: 'Ends With', value: '2', checkedStatus: '',
            }, {
                key: 'Contains', value: '3', checkedStatus: '',
            }];
    }
    Object.defineProperty(AmexioDatagridComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioDatagridComponent.prototype, "columndefintion", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columndefintion;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columndefintion = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.enablecolumnfiter) {
            this.enablecolumnfilter = this.enablecolumnfiter;
        }
        this.isExpanded = true;
        this.iconclassKey = this.plusIcon;
        if (this.enabledatafilter === true) {
            this.globalfilter = false;
        }
        if (this.selectedrowcolor == null || this.selectedrowcolor === '') {
            this.selectedrowcolor = '#dcecf7';
        }
        if (this.httpmethod && this.httpurl) {
            this.dataTableService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
            this.previousData = JSON.parse(JSON.stringify(this.data));
        }
        this.componentLoaded = true;
        this.checkBoxSelectClass = this.setCheckBoxSelectClass();
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (this.previousData != null && JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setChangeData(this.data);
        }
        if (this.columnPreviewData != null && this.columndefintion != null &&
            JSON.stringify(this.columnPreviewData) !== JSON.stringify(this.columndefintion)) {
            this.columnPreviewData = JSON.parse(JSON.stringify(this.columndefintion));
            this.columns = this.columndefintion;
        }
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.columndefintion) {
            this.columns = this.columndefintion;
            this.columnPreviewData = JSON.parse(JSON.stringify(this.columndefintion));
        }
        else {
            this.createConfig();
        }
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.createConfig = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ columnRefArray = [];
        columnRefArray = this.columnRef.toArray();
        for (var _i = 0, columnRefArray_1 = columnRefArray; _i < columnRefArray_1.length; _i++) {
            var cr = columnRefArray_1[_i];
            var /** @type {?} */ columnConfig = cr;
            var /** @type {?} */ columnData = void 0;
            if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate != null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    headerTemplate: columnConfig.headerTemplate,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    bodyTemplate: columnConfig.bodyTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    headerTemplate: columnConfig.headerTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.bodyTemplate != null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    bodyTemplate: columnConfig.bodyTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.bodyTemplate == null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    datatype: columnConfig.datatype,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            if (columnConfig.summarytype) {
                columnData['summarytype'] = columnConfig.summarytype;
            }
            if (columnConfig.summarycaption) {
                columnData['summarycaption'] = columnConfig.summarycaption;
            }
            this.columns.push(columnData);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setChangeData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        this.setSelectedFlag(httpResponse);
        if (!this.groupby) {
            this.renderData();
        }
        this.totalPages = this.pageNumbers.length;
        this.mask = false;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        this.viewRows = this.getResponseData(httpResponse);
        this.setSelectedFlag(this.viewRows);
        this.data = this.viewRows;
        if (this.groupby) {
            this.cloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.enabledatafilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.globalfilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        this.renderData();
        if (this.groupby) {
            this.setColumnData();
        }
        this.totalPages = this.pageNumbers.length;
        this.mask = false;
    };
    /**
     * @param {?} viewRows
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setSelectedFlag = /**
     * @param {?} viewRows
     * @return {?}
     */
    function (viewRows) {
        viewRows.forEach(function (row) {
            if (!row.hasOwnProperty('isSelected')) {
                row['isSelected'] = false;
            }
        });
    };
    /**
     * @param {?} col
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setGroupByColumn = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        this.groupbydataindex = col.dataindex;
        this.selectAll = false;
        this.setColumnData();
    };
    // Method required for global filter
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.keyUpSearch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.filterValue == null || this.filterValue === '') {
            this.removeGlobalFilter();
        }
        var /** @type {?} */ filter = {
            value: this.filterValue,
        };
        this.globalFilterOptions.forEach(function (opt) {
            if (opt.checkedStatus === _this.checkIcon) {
                filter['filter'] = opt.value;
            }
        });
        this.getGlobalFilteredData(filter);
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.checkStatus = /**
     * @return {?}
     */
    function () {
        this.globalFilterOptions.forEach(function (opt) {
            opt.checkedStatus = '';
        });
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    AmexioDatagridComponent.prototype.selectedOption = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        this.checkStatus();
        var /** @type {?} */ filter = {
            value: this.filterValue,
            filter: opt.value,
        };
        opt.checkedStatus = this.checkIcon;
        if (this.filterValue) {
            this.getGlobalFilteredData(filter);
        }
        this.showToolTip = false;
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.removeGlobalFilter = /**
     * @return {?}
     */
    function () {
        this.filterValue = '';
    };
    /**
     * @param {?} filteredObj
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getGlobalFilteredData = /**
     * @param {?} filteredObj
     * @return {?}
     */
    function (filteredObj) {
        var _this = this;
        this.data = [];
        this.filterCloneData.forEach(function (option) {
            _this.columns.forEach(function (opt) {
                var /** @type {?} */ status = false;
                var /** @type {?} */ optvalue = option[opt.dataindex].toLowerCase();
                var /** @type {?} */ filtervalue = filteredObj.value.toLowerCase();
                if (filteredObj.filter === '1') {
                    status = optvalue.startsWith(filtervalue);
                }
                else if (filteredObj.filter === '2') {
                    status = optvalue.endsWith(filtervalue);
                }
                else if (filteredObj.filter === '3') {
                    status = optvalue.includes(filtervalue);
                }
                if (status) {
                    _this.data.push(option);
                }
            });
        });
        if (this.data.length > (1 * this.pagesize)) {
            this.pagingRegenration();
            this.renderData();
        }
        else {
            this.viewRows = this.data;
            this.currentPage = 1;
            this.maxPage = 1;
        }
    };
    /**
     * @param {?} filteredObj
     * @param {?} option
     * @param {?} opt
     * @return {?}
     */
    AmexioDatagridComponent.prototype.filterConditionMethod = /**
     * @param {?} filteredObj
     * @param {?} option
     * @param {?} opt
     * @return {?}
     */
    function (filteredObj, option, opt) {
        this.data = [];
        var /** @type {?} */ condition;
        if (filteredObj.filter === '1') {
            condition = option[opt.dataindex].toLowerCase().startsWith(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
        if (filteredObj.filter === '2') {
            condition = option[opt.dataindex].toLowerCase().endsWith(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
        if (filteredObj.filter === '3') {
            condition = option[opt.dataindex].toLowerCase().includes(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
    };
    // Refactored code to avoid duplication: for filter grid
    /**
     * @param {?} condition
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setstatus = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        if (condition) {
            status = condition;
        }
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setColumnData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data = this.cloneData;
        var /** @type {?} */ groups = {};
        this.data.forEach(function (option) {
            var /** @type {?} */ groupName = option[_this.groupbydataindex];
            if (!groups[groupName]) {
                groups[groupName] = [];
            }
            groups[groupName].push(option);
        });
        this.data = [];
        for (var /** @type {?} */ groupName in groups) {
            if (groups.hasOwnProperty(groupName)) {
                this.data.push({ expanded: false, isSelected: false, group: groupName, groupData: groups[groupName] });
            }
        }
        /*-------Aggregation---------*/
        this.renderData();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.renderData = /**
     * @return {?}
     */
    function () {
        // calculate page no for pagination
        if (this.data) {
            this.maxPage = 0;
            this.pageNumbers = [];
            if (this.data.length > (1 * this.pagesize)) {
                this.maxPage = Math.floor((this.data.length / this.pagesize));
                if ((this.data.length % this.pagesize) > 0) {
                    this.maxPage++;
                }
            }
            for (var /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
                this.pageNumbers.push(pageNo);
            }
        }
        if (this.pagesize >= 1) {
            this.getPageSize();
        }
        else {
            this.viewRows = this.data;
        }
        this.selectedRowNo = -1;
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getPageSize = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ rowsTemp = this.data;
        var /** @type {?} */ newRows = [];
        var /** @type {?} */ startIndex = 0;
        var /** @type {?} */ endIndex = this.pagesize;
        if (this.currentPage > 1) {
            startIndex = (this.currentPage - 1) * this.pagesize;
            endIndex = startIndex + this.pagesize;
        }
        while (startIndex <= endIndex - 1) {
            if (rowsTemp[startIndex]) {
                newRows.push(rowsTemp[startIndex]);
            }
            startIndex++;
        }
        this.viewRows = newRows;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.selectAllRecord = /**
     * @return {?}
     */
    function () {
        this.selectAll = !this.selectAll;
        if (this.selectAll) {
            for (var _i = 0, _a = this.viewRows; _i < _a.length; _i++) {
                var vr = _a[_i];
                this.selectedRows.push(vr);
            }
        }
        else {
            this.selectedRows = [];
        }
        this.emitSelectedRows();
        if (this.groupby) {
            if (!this.selectAll) {
                this.viewRows.forEach(function (row) {
                    row.isSelected = false;
                    row.groupData.forEach(function (node) {
                        node.isSelected = false;
                    });
                });
            }
            else {
                this.viewRows.forEach(function (row) {
                    row.isSelected = true;
                    row.groupData.forEach(function (node) {
                        node.isSelected = true;
                    });
                });
            }
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    AmexioDatagridComponent.prototype.onColumnCheck = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        column.hidden = !column.hidden;
    };
    /**
     * @param {?} rowData
     * @param {?} rowIndex
     * @return {?}
     */
    AmexioDatagridComponent.prototype.onRowClick = /**
     * @param {?} rowData
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowData, rowIndex) {
        this.data.forEach(function (opt) {
            opt.isSelected = false;
            if (opt.hasOwnProperty('groupData')) {
                opt.groupData.forEach(function (optChild) {
                    optChild.isSelected = false;
                });
            }
        });
        rowData.isSelected = !rowData.isSelected;
        rowIndex = 'row' + rowIndex;
        this.rowId = rowIndex;
        this.rowSelect.emit(rowData);
        this.selectedRowNo = rowIndex;
    };
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    AmexioDatagridComponent.prototype.loadPageData = /**
     * @param {?} pageNumber
     * @return {?}
     */
    function (pageNumber) {
        this.currentPage = pageNumber;
        this.renderData();
    };
    /**
     * @param {?} filteredObj
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getFilteredData = /**
     * @param {?} filteredObj
     * @return {?}
     */
    function (filteredObj) {
        var _this = this;
        var /** @type {?} */ status = false;
        if (filteredObj.length > 0) {
            this.data = [];
            this.filterCloneData.forEach(function (option) {
                status = _this.filterOpertion(option, filteredObj);
                if (status) {
                    _this.data.push(option);
                    status = false;
                }
            });
            if (this.data.length > (1 * this.pagesize)) {
                this.pagingRegenration();
                this.renderData();
            }
            else {
                this.viewRows = this.data;
                this.currentPage = 1;
                this.maxPage = 1;
            }
        }
        else {
            this.data = this.filterCloneData;
            this.pagingRegenration();
            this.renderData();
        }
    };
    /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AmexioDatagridComponent.prototype.checkNumberFilter = /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (filter, key, value) {
        if (filter === '<') {
            return key > value;
        }
        else if (filter === '>') {
            return key < value;
        }
        else if (filter === '>=') {
            return key <= value;
        }
        else if (filter === '=<') {
            return key >= value;
        }
        else if (filter === '==') {
            return key === value;
        }
        else if (filter === '!=') {
            return key !== value;
        }
        else {
            return key !== value;
        }
    };
    /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AmexioDatagridComponent.prototype.checkStringFilter = /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (filter, key, value) {
        if (filter === '3') {
            return key.includes(value);
        }
        else if (filter === '1') {
            return key.startsWith(value);
        }
        else if (filter === '2') {
            return key.endsWith(value);
        }
        else {
            return key !== value;
        }
    };
    /**
     * @param {?} data
     * @param {?} filteredObj
     * @return {?}
     */
    AmexioDatagridComponent.prototype.filterOpertion = /**
     * @param {?} data
     * @param {?} filteredObj
     * @return {?}
     */
    function (data, filteredObj) {
        var _this = this;
        var /** @type {?} */ statusArray = [];
        var /** @type {?} */ condition;
        filteredObj.forEach(function (filterOpt) {
            if (filterOpt.type === 'string') {
                condition = _this.checkStringFilter(filterOpt.filter, data[filterOpt.key].toLowerCase(), filterOpt.value.toLowerCase());
            }
            else if (filterOpt.type === 'number') {
                condition = _this.checkNumberFilter(filterOpt.filter, data[filterOpt.key], filterOpt.value);
            }
            statusArray.push(condition);
        });
        statusArray.forEach(function (opt) {
            if (opt === false) {
                condition = false;
            }
        });
        return condition;
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.pagingRegenration = /**
     * @return {?}
     */
    function () {
        this.maxPage = Math.floor((this.data.length / this.pagesize));
        if ((this.data.length % this.pagesize) > 0) {
            this.maxPage++;
        }
        for (var /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
            this.pageNumbers.push(pageNo);
        }
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setSelectedRow = /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    function (rowData, event) {
        if (event.classList.value === this.checkDefaultIcon) {
            this.selectedRows.push(rowData);
            event.classList.value = 'checkbox active';
        }
        else {
            var /** @type {?} */ indexOf = this.selectedRows.indexOf(rowData);
            this.selectedRows.splice(indexOf, 0);
            event.classList.value = this.checkDefaultIcon;
        }
        this.emitSelectedRows();
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.emitSelectedRows = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ sRows = [];
        for (var _i = 0, _a = this.selectedRows; _i < _a.length; _i++) {
            var sr = _a[_i];
            if (sr) {
                sRows.push(sr);
            }
        }
        this.selectedRowData.emit(sRows);
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setCheckBoxSelectClass = /**
     * @return {?}
     */
    function () {
        if (this.selectAll) {
            return 'checkbox active';
        }
        else if (!this.selectAll) {
            return this.checkDefaultIcon;
        }
    };
    /**
     * @param {?} sortCol
     * @param {?} clickEvent
     * @return {?}
     */
    AmexioDatagridComponent.prototype.sortOnColHeaderClick = /**
     * @param {?} sortCol
     * @param {?} clickEvent
     * @return {?}
     */
    function (sortCol, clickEvent) {
        this.onHeaderClick.emit({ event: clickEvent, data: sortCol });
        if (sortCol.sort) {
            if (this.sortBy === -1) {
                this.sortBy = 1;
            }
            else if (this.sortBy === 1) {
                this.sortBy = 2;
            }
            else if (this.sortBy === 2) {
                this.sortBy = 1;
            }
            this.setSortColumn(sortCol, this.sortBy);
        }
    };
    /**
     * @param {?} sortCol
     * @param {?} _sortBy
     * @return {?}
     */
    AmexioDatagridComponent.prototype.setSortColumn = /**
     * @param {?} sortCol
     * @param {?} _sortBy
     * @return {?}
     */
    function (sortCol, _sortBy) {
        /*------set column sort false for other column--------*/
        this.columns.forEach(function (opt) {
            opt['isColumnSort'] = false;
        });
        this.sortBy = _sortBy;
        this.sortColumn = sortCol;
        this.sortColumn.sort = true;
        this.sortColumn.isColumnSort = true;
        this.sortData();
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.sortData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.sortColumn) {
            var /** @type {?} */ sortColDataIndex_1;
            var /** @type {?} */ sortOrder_1 = this.sortBy;
            if (this.sortColumn.dataindex && this.sortColumn.datatype) {
                var /** @type {?} */ dataindex = this.sortColumn.dataindex;
                sortColDataIndex_1 = dataindex;
                if (this.sortColumn.datatype === 'string') {
                    if (this.groupby) {
                        this.sortOrderGrpBy(sortOrder_1);
                    }
                    else {
                        this.data.sort(function (a, b) {
                            var /** @type {?} */ x = a[sortColDataIndex_1].toLowerCase();
                            var /** @type {?} */ y = b[sortColDataIndex_1].toLowerCase();
                            return _this.noGrpBySortOrder(sortOrder_1, x, y);
                        });
                    }
                }
                else if (this.sortColumn.datatype === 'number') {
                    this.sortOrderByNumber(sortOrder_1, sortColDataIndex_1);
                }
            }
        }
        this.renderData();
    };
    // Sort Order for number field
    /**
     * @param {?} sortOrder
     * @param {?} sortColDataIndex
     * @return {?}
     */
    AmexioDatagridComponent.prototype.sortOrderByNumber = /**
     * @param {?} sortOrder
     * @param {?} sortColDataIndex
     * @return {?}
     */
    function (sortOrder, sortColDataIndex) {
        if (this.groupby) {
            this.data.sort(function (a, b) {
                var /** @type {?} */ x = a.group;
                var /** @type {?} */ y = b.group;
                if (sortOrder === 2) {
                    return y - x;
                }
                else {
                    return x - y;
                }
            });
        }
        else {
            this.data.sort(function (a, b) {
                var /** @type {?} */ x = a[sortColDataIndex];
                var /** @type {?} */ y = b[sortColDataIndex];
                if (sortOrder === 2) {
                    return y - x;
                }
                else {
                    return x - y;
                }
            });
        }
    };
    // Sort order if group by is false
    /**
     * @param {?} sortOrder
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    AmexioDatagridComponent.prototype.noGrpBySortOrder = /**
     * @param {?} sortOrder
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (sortOrder, x, y) {
        if (sortOrder === 2) {
            if (x < y) {
                return 1;
            }
            if (x > y) {
                return -1;
            }
        }
        else {
            if (x < y) {
                return -1;
            }
            if (x > y) {
                return 1;
            }
        }
        return 0;
    };
    // Sort Order if group by is true
    /**
     * @param {?} sortOrder
     * @return {?}
     */
    AmexioDatagridComponent.prototype.sortOrderGrpBy = /**
     * @param {?} sortOrder
     * @return {?}
     */
    function (sortOrder) {
        this.data.sort(function (a, b) {
            var /** @type {?} */ x = a.group.toLowerCase();
            var /** @type {?} */ y = b.group.toLowerCase();
            if (sortOrder === 2) {
                if (x < y) {
                    return 1;
                }
                if (x > y) {
                    return -1;
                }
            }
            else {
                if (x < y) {
                    return -1;
                }
                if (x > y) {
                    return 1;
                }
            }
            return 0;
        });
    };
    /* grouby column methods*/
    /**
     * @param {?} btn
     * @return {?}
     */
    AmexioDatagridComponent.prototype.onTabClick = /**
     * @param {?} btn
     * @return {?}
     */
    function (btn) {
        btn.classList.toggle('active-accordion');
        var /** @type {?} */ panel = btn.nextElementSibling;
        if (this.iconclassKey === this.plusIcon) {
            this.iconclassKey = 'fa fa-minus';
        }
        else if (this.iconclassKey === 'fa fa-minus') {
            this.iconclassKey = this.plusIcon;
        }
        if (panel.style.maxHeight) {
            panel.style.maxHeight = null;
        }
        else {
            panel.style.maxHeight = panel.scrollHeight + 'px';
        }
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    AmexioDatagridComponent.prototype.toogle = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        row.expanded = !row.expanded;
        if (row.expanded) {
            if (row.hasOwnProperty('groupData')) {
                this.addRows(row, index);
            }
        }
        else {
            if (row.hasOwnProperty('groupData')) {
                this.removeRows(row);
            }
        }
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    AmexioDatagridComponent.prototype.addRows = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        var _this = this;
        row.level = Math.floor(Math.random() * 900) + 100;
        row.groupData.forEach(function (node, index1) {
            node.level = row.level;
            _this.viewRows.splice(index + (index1 + 1), 0, node);
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    AmexioDatagridComponent.prototype.removeRows = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var _this = this;
        var /** @type {?} */ count = 0;
        this.viewRows.forEach(function (node) {
            if (!node.hasOwnProperty('group') && node.level === row.level) {
                count++;
            }
        });
        this.viewRows.forEach(function (node, index) {
            if (!node.hasOwnProperty('group') && node.level === row.level) {
                _this.viewRows.splice(index, count);
            }
        });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    AmexioDatagridComponent.prototype.isGroupChecking = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (row.hasOwnProperty('group')) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    AmexioDatagridComponent.prototype.selectParent = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var _this = this;
        if (this.groupby) {
            row.isSelected = !row.isSelected;
            row.groupData.forEach(function (node) {
                node.isSelected = !node.isSelected;
            });
            this.selectedRows = [];
            this.viewRows.forEach(function (rows) {
                if (rows.isSelected) {
                    _this.selectedRows.push(rows);
                }
            });
            this.emitSelectedRows();
        }
    };
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} ref
     * @return {?}
     */
    AmexioDatagridComponent.prototype.loadContextMenu = /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} ref
     * @return {?}
     */
    function (event, row, col, ref) {
        this.tempContextMenu = [];
        this.tempSelectedFlag(this.viewRows);
        this.mouseLocation.left = event.clientX;
        this.mouseLocation.top = event.clientY;
        row.isSelected = true;
        if (col.contextmenu && col.contextmenu.length > 0) {
            this.flag = true;
            this.tempContextMenu = col.contextmenu;
            this.addListner();
        }
        else if (this.contextmenu && this.contextmenu.length > 0) {
            this.tempContextMenu = this.contextmenu;
            this.flag = true;
            this.addListner();
        }
        this.posixUp = this.getListPosition(ref);
        event.preventDefault();
        event.stopPropagation();
        this.rightClickRowData = row;
        this.contextStyle = this.getContextMenuStyle();
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioDatagridComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                rowData: this.rightClickRowData,
            };
            this.flag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.flag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioDatagridComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} viewRows
     * @return {?}
     */
    AmexioDatagridComponent.prototype.tempSelectedFlag = /**
     * @param {?} viewRows
     * @return {?}
     */
    function (viewRows) {
        viewRows.forEach(function (row) {
            if (row.isSelected) {
                row.isSelected = false;
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.flag = false;
            if (!_this.flag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioDatagridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioDatagridComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-datagrid',
                    template: "\n    <div class=\"datagrid\">\n      <div class=\"datatabletitle\">\n        <span> {{title}} </span>\n        <span class=\"dataheaderFilter\" class=\"float-right\"  style=\"padding-bottom:1.1%\">\n          <ng-content select=\"amexio-datagrid-header\"></ng-content>\n          <span *ngIf=\"enablecolumnfilter ? true:false\" class=\"float-right\"\n          (click)=\"showToolTip = !showToolTip ; showGroupByColumn = false\"\n            style=\" cursor: pointer;\">\n            &nbsp;\n            <span *ngIf=\"!show\">&#9776;</span>\n            <span *ngIf=\"show\">&#9747;</span>\n          </span>\n        </span>\n        <span *ngIf=\"groupby ? true : false\" class=\"float-right\" (click)=\"showGroupByColumn = !showGroupByColumn; showToolTip = false\"\n              style=\" cursor: pointer;\">\n          <!--<span class=\"fa fa-th-list\"></span>-->\n          <amexio-data-icon key=\"datagrid_list\"></amexio-data-icon>\n      </span>\n      </div>\n      <!--Filter with Checkbox datagrid start-->\n      <ng-container *ngIf=\"enabledatafilter ? true : false\">\n        <div class=\"datatable datatable-row\">\n          <ng-container *ngIf=\"enablecheckbox\">\n            <div class=\"datatable-col col-group datatable-checkbox-width\">\n              <div class=\"inputgroup\">\n                <div class=\"input-box\">\n                  <div *ngIf=\"!selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox default\"></div>\n                  <div *ngIf=\"selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox active\">&#10004;</div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n\n          <!--Filter datagrid start-->\n          <ng-container *ngIf=\"enabledatafilter ? true : false\">\n            <ng-container *ngFor=\"let cols of columns\">\n              <ng-container *ngIf=\"!cols.hidden\">\n                <div class=\"datatable-col col-group\" [style.width.%]=\"cols.width\">\n                  <data-grid-filter [column]=\"cols\" (filterObject)=\"getFilteredData($event)\">\n                  </data-grid-filter>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n        </div>\n      </ng-container>\n\n      <!--Filter datagrid start-->\n      <ng-container *ngIf=\"globalfilter ? true : false\">\n        <div class=\"datatable datatable-row\">\n          <ng-container class=\"datatable datatable-column\">\n            <div class=\"inputgroup\" style=\"padding-left: 1%; padding-right: 1%\">\n              <input type=\"text\"  [(ngModel)]=\"filterValue\"\n                     (keyup)=\"keyUpSearch($event)\" type=\"text\"\n                     class=\"input-control\" aria-label=\"Text input with dropdown button\">\n              <!--<i class=\"fa fa-filter\" aria-hidden=\"true\"\n              (click)=\"showToolTip = !showToolTip\"></i>-->\n              <span class=\"datatable-filter-icon\">\n                      <amexio-data-icon key=\"datagrid_filter\" (click)=\"showToolTip = !showToolTip\"></amexio-data-icon>\n                  </span>\n              <span *ngIf=\"showToolTip\" class=\"dropdown\" style=\"width: 250px; right: 10px\">\n                      <ul class=\"dropdown-list\" *ngFor=\"let opt of globalFilterOptions\">\n                          <li class=\"list-items\">\n                              <div (click)=\"selectedOption(opt)\">\n                                  {{opt.key}}&nbsp;\n                                  <i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i>\n                              </div>\n                          </li>\n                      </ul>\n                  </span>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n\n      <div>\n        <ng-container *ngIf=\"enablecolumnfilter ? true : false\">\n          <span *ngIf=\"showToolTip\" class=\"dropdown dropdown-right\" style=\"width: 250px;\">\n              <ul class=\"dropdown-list\">\n                  <li class=\"list-items\" *ngFor=\"let cols of columns;let i = index;\" (click)=\"showToolTip = !showToolTip\">\n                      <div>\n                          <input type=\"checkbox\" [attr.checked]=\"!cols.hidden ? true: null\" (click)=\"onColumnCheck(cols)\" />\n                          <label>{{cols.text}}</label>\n                      </div>\n                  </li>\n              </ul>\n          </span>\n        </ng-container>\n\n        <ng-container *ngIf=\"groupby ? true : false\">\n          <span *ngIf=\"showGroupByColumn\" class=\"dropdown dropdown-right\" style=\"width: 250px;\">\n              <ul class=\"dropdown-list\">\n                  <li class=\"list-items\" *ngFor=\"let cols of columns;let i = index;\" (click)=\"showGroupByColumn = !showGroupByColumn\">\n                      <div (click)=\"setGroupByColumn(cols)\">\n                          <label>{{cols.text}}</label>\n                      </div>\n                  </li>\n              </ul>\n          </span>\n        </ng-container>\n      </div>\n    </div>\n\n    <!--Checkbox datagrid with datatypes condition start-->\n    <div class=\"datatable\">\n      <div class=\"datatable-header\">\n        <ng-container *ngIf=\"enablecheckbox\">\n          <div class=\"datatable-col datatable-checkbox-width checkbox-col\">\n            <div class=\"inputgroup\">\n              <div class=\"input-box\">\n                <div *ngIf=\"!selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox default\"></div>\n                <div *ngIf=\"selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox active\">&#10004;</div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n        <!--datagrid start unhidden-->\n        <ng-container *ngFor=\"let cols of columns\">\n          <ng-container *ngIf=\"!cols.hidden\">\n            <ng-container *ngIf=\"cols.datatype=='string'\">\n              <!-- -------------------- -->\n              <div class=\"datatable-col\" [style.width.%]=\"cols.width\" (click)=\"sortOnColHeaderClick(cols, $event)\">\n\n                <ng-container *ngIf=\"cols.headerTemplate\">\n                  <ng-template  [ngTemplateOutlet]=\"cols.headerTemplate\"\n                                [ngTemplateOutletContext]=\"{column:cols ,index: i}\"></ng-template>\n                </ng-container>\n                <ng-container *ngIf=\"!cols.headerTemplate\">\n                  {{cols.text}} &nbsp;\n\n                </ng-container>\n                <ng-container *ngIf=\"this.sortBy==1   && cols.isColumnSort\">\n                  <amexio-data-icon key=\"datagrid_arrowup\"></amexio-data-icon>\n                  <!--&nbsp; <i class=\"fa fa-arrow-up\"></i>-->\n                </ng-container>\n                <ng-container *ngIf=\"this.sortBy==2  && cols.isColumnSort\">\n                  <!--&nbsp;<i class=\"fa fa-arrow-down\"></i>-->\n                  <amexio-data-icon key=\"datagrid_arrowdown\"></amexio-data-icon>\n                </ng-container>\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"cols.datatype=='number'\">\n              <div class=\"datatable-col\" [style.width.%]=\"cols.width\" (click)=\"sortOnColHeaderClick(cols, $event)\">\n                <ng-container *ngIf=\"cols.headerTemplate\">\n                  <ng-template  [ngTemplateOutlet]=\"cols.headerTemplate\"\n                                [ngTemplateOutletContext]=\"{column:cols ,index: i}\"></ng-template>\n                </ng-container>\n                <ng-container *ngIf=\"!cols.headerTemplate\">\n                      <span class=\"float-right\">\n                          {{cols.text}} &nbsp;\n                          <ng-container *ngIf=\"this.sortBy==1 && cols.isColumnSort\">\n                              <amexio-data-icon key=\"datagrid_arrowup\"></amexio-data-icon>\n                            <!--&nbsp; <i class=\"fa fa-arrow-up\"></i>-->\n                          </ng-container>\n                          <ng-container *ngIf=\"this.sortBy==2 && cols.isColumnSort\">\n                              <!--&nbsp;<i class=\"fa fa-arrow-down\"></i>-->\n                              <amexio-data-icon key=\"datagrid_arrowdown\"></amexio-data-icon>\n                          </ng-container>\n                      </span>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n\n    <!--Group BY datagrid start-->\n    <ng-container *ngIf=\"!groupby\">\n      <div class=\"datatable-height\" [style.height.px]=\"height\">\n        <div class=\"datatable\">\n          <div style=\"height: 300px;\" *ngIf=\"mask\">\n            <div class=\"spinner\"></div>\n          </div>\n          <ng-container *ngIf=\"!mask\">\n            <div #id class=\"datatable-row\"\n                 *ngFor=\"let row of viewRows;let i=index\" id=\"{{'row'+i}}\"\n                 [ngClass]=\"{'datatable-row-active':row.isSelected}\"\n                 (click)=\"onRowClick(row, i)\">\n\n              <ng-container *ngIf=\"enablecheckbox\">\n                <div class=\"datatable-col datatable-checkbox-width checkbox-col\">\n                  <div class=\"inputgroup\">\n                    <div class=\"input-box\">\n                      <div (click)=\"setSelectedRow(row, check)\" [class]=\"checkBoxSelectClass\" #check>\n                        {{((checkBoxSelectClass == 'checkbox active') &&\n                      (check.classList.value == 'checkbox active')) ||\n                      ((checkBoxSelectClass\n                      == 'checkbox default') && (check.classList.value == 'checkbox active')) ? '&#10004;'\n                        : ''}}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </ng-container>\n\n              <ng-container *ngFor=\"let cols of columns;let colIndex = index\">\n                <ng-container *ngIf=\"!cols.hidden\">\n                  <ng-container *ngIf=\"cols.datatype=='number'\">\n                    <div class=\"datatable-col\" [style.width.%]=\"cols.width\" scope=\"row\" [attr.data-label]=\"cols.text\">\n                                  <span class=\"float-right\">\n                                      <ng-container *ngIf=\"row[cols.dataindex]!= null;else elseBlock\">\n                                      <div (contextmenu)=\"loadContextMenu($event,row, cols, id)\">\n                                      {{row[cols.dataindex]}}\n                                      </div>\n                                      </ng-container>\n                                      <ng-template #elseBlock>\n                                          &nbsp;\n                                      </ng-template>\n\n                                  </span>\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"!cols?.bodyTemplate && cols.datatype=='string'\">\n                    <div class=\"datatable-col\" [style.width.%]=\"cols.width\" scope=\"row\" [attr.data-label]=\"cols.text\">\n                      <ng-container *ngIf=\"row[cols.dataindex]!= null ;else elseBlock\">\n                        <div (contextmenu)=\"loadContextMenu($event,row, cols, id)\">\n                          {{row[cols.dataindex]}}\n                        </div>\n                      </ng-container>\n                      <ng-template #elseBlock>\n                        &nbsp;\n                      </ng-template>\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"cols.bodyTemplate\">\n                    <div class=\"datatable-col\" [style.width.%]=\"cols.width\" scope=\"row\" [attr.data-label]=\"cols.text\">\n                      <ng-template [ngTemplateOutlet]=\"cols.bodyTemplate\"\n                                   [ngTemplateOutletContext]=\"{ $implicit: { text : row[cols.dataindex] }, row: row }\"></ng-template>\n                    </div>\n                  </ng-container>\n                </ng-container>\n\n              </ng-container>\n            </div>\n          </ng-container>\n\n        </div>\n      </div>\n\n    </ng-container>\n\n    <!--Group BY datagrid end-->\n\n    <!--Group BY and Filter Data datagrid start-->\n    <ng-container *ngIf=\"groupby && !enabledatafilter\">\n      <div class=\"datatable-height\" [style.height.px]=\"height\">\n        <div class=\"datatable\" style=\"table-layout: inherit !important;\">\n          <div style=\"height: 300px;\" *ngIf=\"mask\">\n            <div class=\"spinner\"></div>\n          </div>\n          <ng-container *ngIf=\"!mask\">\n            <div class=\"datatable-row\"\n                 *ngFor=\"let row of viewRows;let i=index\"\n                 id=\"{{'row'+i}}\" [ngClass]=\"{'datatable-row-active':row.isSelected}\"\n                 (click)=\"toogle(row, i)\">\n              <ng-container *ngIf=\"enablecheckbox\">\n                <div class=\"datatable-col datatable-checkbox-width checkbox-col\">\n                  <div class=\"inputgroup\">\n                    <div class=\"input-box\">\n                      <div (click)=\"selectParent(row)\" [class]=\"row.isSelected ?'checkbox active':'checkbox default'\">\n                        {{row.isSelected ? '&#10004;' : ''}}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </ng-container>\n              <ng-container *ngFor=\"let cols of columns;let colIndex = index\">\n                <ng-container *ngIf=\"isGroupChecking(row)\">\n\n                  <ng-container *ngIf=\"colIndex == 0\">\n                    <div class=\"datatable-col col-group\">\n                      <!--<i *ngIf=\"!row.expanded\" class=\"fa fa-caret-right\" aria-hidden=\"true\" (click)=\"toogle(row,i)\"></i>-->\n                      <ng-container *ngIf=\"!row.expanded\">\n                        <amexio-data-icon key=\"datagrid_expand\"></amexio-data-icon>\n                      </ng-container>\n                      <ng-container *ngIf=\"row.expanded\">\n                        <amexio-data-icon key=\"datagrid_collapse\"></amexio-data-icon>\n                      </ng-container>\n                      {{row.group}}\n                    </div>\n                  </ng-container>\n\n                  <ng-container *ngIf=\"colIndex != 0\">\n                    <div class=\"datatable-col col-hidden\">\n                    </div>\n                  </ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"!isGroupChecking(row)\">\n                  <ng-container *ngIf=\"cols.datatype=='string'\">\n                    <div class=\"datatable-col\" [style.width.%]=\"cols.width\" [attr.data-label]=\"cols.text\">\n                      <ng-container *ngIf=\"colIndex == 0\">\n                                      <span style=\"padding-left: 20px\">\n                                          {{row[cols.dataindex]}}\n                                      </span>\n                      </ng-container>\n                      <ng-container *ngIf=\"colIndex != 0\">\n                        {{row[cols.dataindex]}}\n                      </ng-container>\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"cols.datatype=='number'\">\n\n                    <div class=\"datatable-col\" [style.width.%]=\"cols.width\" [attr.data-label]=\"cols.text\">\n\n                      <ng-container *ngIf=\"colIndex == 0\">\n                                      <span style=\"padding-left: 20px\">\n                                          <ng-container *ngIf=\"row[cols.dataindex]!= null ;else elseBlock\">\n                                              {{row[cols.dataindex]}}\n                                          </ng-container>\n                                          <ng-template #elseBlock>\n                                              &nbsp;\n                                          </ng-template>\n\n                                      </span>\n                      </ng-container>\n                      <ng-container *ngIf=\"colIndex != 0\">\n                                      <span class=\"float-right\">\n                                          <ng-container *ngIf=\"row[cols.dataindex]!= null ;else elseBlock\">\n                                              {{row[cols.dataindex]}}\n                                          </ng-container>\n                                          <ng-template #elseBlock>\n                                              &nbsp;\n                                          </ng-template>\n                                      </span>\n                      </ng-container>\n\n                    </div>\n\n                  </ng-container>\n\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n\n        </div>\n      </div>\n    </ng-container>\n    <!--Group BY and Filter Data datagrid end-->\n\n    <!-- Context Menu  -->\n    <span [ngStyle]=\"contextStyle\">\n    <ul *ngIf=\"flag\" class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n        <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\"\n            [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\"\n            [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\"\n            *ngFor=\"let itemConfig of tempContextMenu\">\n            <i [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'22px'}\"\n               [ngClass]=\"itemConfig.icon\"></i>\n            <span style=\"white-space: nowrap;display: inline ; padding-left:10px\">\n            {{itemConfig.text}}\n            </span>\n        </li>\n    </ul>\n</span>\n\n    <!-- Footer of the grid -->\n    <div class=\"footer\">\n      <ng-container *ngIf=\"pagesize && (data && data.length > pagesize)\">\n        <ng-container *ngIf=\"totalPages!=null\">\n          <amexio-paginator [pages]=\"totalPages\" [rows]=\"pagesize\" (onPageChange)=\"loadPageData($event)\"></amexio-paginator>\n        </ng-container>\n      </ng-container>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioDatagridComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: CommonDataService },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 }
    ]; };
    AmexioDatagridComponent.propDecorators = {
        title: [{ type: core.Input }],
        pagesize: [{ type: core.Input, args: ['page-size',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        enablecheckbox: [{ type: core.Input, args: ['enable-checkbox',] }],
        data: [{ type: core.Input, args: ['data',] }],
        rowSelect: [{ type: core.Output }],
        selectedRowData: [{ type: core.Output }],
        onHeaderClick: [{ type: core.Output }],
        height: [{ type: core.Input }],
        groupby: [{ type: core.Input }],
        groupbydataindex: [{ type: core.Input, args: ['groupby-data-index',] }],
        enabledatafilter: [{ type: core.Input, args: ['enable-data-filter',] }],
        cclass: [{ type: core.Input, args: ['c-class',] }],
        tableHeadercclass: [{ type: core.Input }],
        tableTitlecclass: [{ type: core.Input }],
        tableDatacclass: [{ type: core.Input }],
        selectedrowcolor: [{ type: core.Input, args: ['selected-row-color',] }],
        columndefintion: [{ type: core.Input, args: ['column-defintion',] }],
        enablecolumnfiter: [{ type: core.Input, args: ['enable-column-fiter',] }],
        enablecolumnfilter: [{ type: core.Input, args: ['enable-column-filter',] }],
        globalfilter: [{ type: core.Input, args: ['global-filter',] }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        rightClick: [{ type: core.Output }],
        columnRef: [{ type: core.ContentChildren, args: [AmexioGridColumnComponent,] }]
    };
    return AmexioDatagridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 2/1/18.
 */
var DataGridFilterComponent = /** @class */ (function () {
    function DataGridFilterComponent(dataTableService) {
        this.dataTableService = dataTableService;
        /*
         for internal use
        */
        this.filterObject = new core.EventEmitter();
        this.checkIcon = 'fa fa-check';
        this.filterOptions = [{
                key: 'Is Equal To', value: '==', type: 'string', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: '!=', type: 'string', checkedStatus: '',
            }, {
                key: 'Start With', value: '1', type: 'string', checkedStatus: this.checkIcon,
            },
            {
                key: 'Ends With', value: '2', type: 'string', checkedStatus: '',
            }, {
                key: 'Contains', value: '3', type: 'string', checkedStatus: '',
            }, {
                key: 'Is Equal To', value: '==', type: 'number', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: '!=', type: 'number', checkedStatus: '',
            }, {
                key: 'Is greater Than', value: '<', type: 'number', checkedStatus: '',
            }, {
                key: 'Is less Than', value: '>', type: 'number', checkedStatus: '',
            },
            {
                key: 'Is less Than or equal to', value: '>=', type: 'number', checkedStatus: '',
            }, {
                key: 'Is greater Than or equal to', value: '=<', type: 'number', checkedStatus: this.checkIcon,
            }];
    }
    /**
     * @return {?}
     */
    DataGridFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} col
     * @param {?} opt
     * @return {?}
     */
    DataGridFilterComponent.prototype.selectedOption = /**
     * @param {?} col
     * @param {?} opt
     * @return {?}
     */
    function (col, opt) {
        this.checkStatus();
        var /** @type {?} */ filter = {
            key: col.dataindex,
            value: this.filterValue,
            filter: opt.value,
            type: col.datatype,
        };
        opt.checkedStatus = this.checkIcon;
        if (this.filterValue) {
            col.filterIcon = true;
            this.filterDataObject(filter, col);
        }
        this.showToolTip = false;
    };
    /**
     * @param {?} col
     * @return {?}
     */
    DataGridFilterComponent.prototype.keyUpSearch = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        var _this = this;
        this.showToolTip = false;
        if (this.filterValue == null || this.filterValue === '') {
            this.removeFilter(col);
        }
        else {
            col.filterIcon = true;
            var /** @type {?} */ filter_1 = {
                key: col.dataindex,
                value: this.filterValue,
                type: col.datatype,
            };
            this.filterOptions.forEach(function (opt) {
                if (opt.checkedStatus === _this.checkIcon && col.datatype === opt.type) {
                    filter_1['filter'] = opt.value;
                }
            });
            this.filterDataObject(filter_1, col);
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DataGridFilterComponent.prototype.removeFilter = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        var _this = this;
        this.filterValue = '';
        column.filterIcon = false;
        this.dataTableService.filteredObject.forEach(function (option, index) {
            if (option.key === column.dataindex) {
                _this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.filterObject.emit(this.dataTableService.filteredObject);
    };
    /**
     * @return {?}
     */
    DataGridFilterComponent.prototype.checkStatus = /**
     * @return {?}
     */
    function () {
        this.filterOptions.forEach(function (opt) {
            opt.checkedStatus = '';
        });
    };
    /**
     * @param {?} filter
     * @param {?} col
     * @return {?}
     */
    DataGridFilterComponent.prototype.filterDataObject = /**
     * @param {?} filter
     * @param {?} col
     * @return {?}
     */
    function (filter, col) {
        var _this = this;
        this.dataTableService.filteredObject.forEach(function (option, index) {
            if (option.key === col.dataindex) {
                _this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.dataTableService.filteredObject.push(filter);
        this.filterObject.emit(this.dataTableService.filteredObject);
    };
    DataGridFilterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'data-grid-filter', template: "\n    <ng-container *ngIf=\"column.datatype==='string'\">\n      <div class=\"inputgroup\">\n      <input type=\"text\" [(ngModel)]=\"filterValue\" [attr.placeholder]=\"column.text\" (keyup)=\"keyUpSearch(column)\"\n             type=\"text\" class=\"input-control\"\n             aria-label=\"Text input with dropdown button\">\n      <!--<i class=\"fa fa-filter\" aria-hidden=\"true\" (click)=\"showToolTip = !showToolTip\"></i>-->\n      <span class=\"datatable-filter-icon\">\n        <amexio-data-icon key=\"datagrid_filter\" (click)=\"showToolTip = !showToolTip\"></amexio-data-icon>\n      </span>\n      <span *ngIf=\"showToolTip\" class=\"dropdown\" style=\"width: 250px;\">\n        <ul class=\"dropdown-list\" *ngFor=\"let opt of filterOptions\">\n          <ng-container *ngIf=\"opt.type===column.datatype\">\n          <li class=\"list-items\">\n              <div (click)=\"selectedOption(column,opt)\">\n              {{opt.key}}&nbsp;<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i>\n            </div>\n          </li>\n          </ng-container>\n         </ul>\n      </span>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"column.datatype==='number'\">\n              <div class=\"inputgroup float-right\">\n\n        <input type=\"text\" [(ngModel)]=\"filterValue\" [attr.placeholder]=\"column.text\" (keyup)=\"keyUpSearch(column)\"\n               type=\"number\" class=\"input-control\"\n               aria-label=\"Text input with dropdown button\">\n        <!--<i class=\"fa fa-filter\" aria-hidden=\"true\" (click)=\"showToolTip = !showToolTip\"></i>-->\n     <span class=\"datatable-filter-icon\">\n      <amexio-data-icon key=\"datagrid_filter\" (click)=\"showToolTip = !showToolTip\"></amexio-data-icon>\n     </span>\n       <span *ngIf=\"showToolTip\" class=\"dropdown\" style=\"width: 250px;\">\n        <ul class=\"dropdown-list\" *ngFor=\"let opt of filterOptions\">\n          <ng-container *ngIf=\"opt.type===column.datatype\">\n          <li class=\"list-items\">\n              <div (click)=\"selectedOption(column,opt)\">\n              {{opt.key}}&nbsp;<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i>\n            </div>\n          </li>\n          </ng-container>\n         </ul>\n      </span>\n              </div>\n    </ng-container>\n\n  ",
                },] },
    ];
    /** @nocollapse */
    DataGridFilterComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    DataGridFilterComponent.propDecorators = {
        column: [{ type: core.Input }],
        filterObject: [{ type: core.Output }]
    };
    return DataGridFilterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioDataGridHeaderComponent = /** @class */ (function () {
    function AmexioDataGridHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AmexioDataGridHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioDataGridHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-datagrid-header', template: "\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioDataGridHeaderComponent.ctorParameters = function () { return []; };
    AmexioDataGridHeaderComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioDataGridHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var faFaCaretIcon = 'fa fa-caret-down';
var faFaTimesIcon = 'fa fa-times';
var ICON_MAPPING = [
    {
        component: 'datepicker_previous',
        fa: 'fa fa-chevron-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'datepicker_calendar',
        fa: 'fa fa-calendar',
        mat: 'date_range',
    },
    {
        component: 'datepicker_next',
        fa: 'fa fa-chevron-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'datepicker_previous_fast',
        fa: 'fa fa-step-backward',
        mat: 'fast_rewind',
    },
    {
        component: 'datepicker_next_fast',
        fa: 'fa fa-step-forward',
        mat: 'fast_forward',
    },
    {
        component: 'accordion_expand',
        fa: 'fa fa-plus',
        mat: 'add',
    },
    {
        component: 'accordion_collapse',
        fa: 'fa fa-minus',
        mat: 'remove',
    },
    {
        component: 'tree_expand',
        fa: 'fa fa-chevron-down',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'tree_collapse',
        fa: 'fa fa-chevron-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'dropdown_caret',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'tab_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'window_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'window_maximize',
        fa: 'fa fa-window-maximize',
        mat: 'open_with',
    },
    {
        component: 'window_restore',
        fa: 'fa fa-window-restore',
        mat: 'indeterminate_check_box',
    },
    {
        component: 'paginator_previous',
        fa: 'fa fa-angle-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'paginator_next',
        fa: 'fa fa-angle-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'paginator_first',
        fa: 'fa fa-angle-double-left',
        mat: 'first_page',
    },
    {
        component: 'paginator_last',
        fa: 'fa fa-angle-double-right',
        mat: 'last_page',
    },
    {
        component: 'itemselector_caretup',
        fa: 'fa fa-caret-up',
        mat: 'arrow_drop_up',
    },
    {
        component: 'itemselector_caretdown',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'itemselector_arrowup',
        fa: 'fa fa-arrow-up',
        mat: 'arrow_upward',
    },
    {
        component: 'itemselector_arrowdown',
        fa: 'fa fa-arrow-down',
        mat: 'arrow_downward',
    },
    {
        component: 'itemselector_arrowleft',
        fa: 'fa fa-arrow-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'itemselector_arrowright',
        fa: 'fa fa-arrow-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'tab_previous',
        fa: 'fa fa-angle-left fa-2x',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'tab_next',
        fa: 'fa fa-angle-right  fa-2x',
    },
    {
        component: 'tab_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'fieldset_expand',
        fa: 'fa fa-plus',
        mat: 'add',
    },
    {
        component: 'fieldset_collpase',
        fa: 'fa fa-minus',
        mat: 'remove',
    },
    {
        component: 'carousel_previous',
        fa: 'fa fa-angle-left fa-2x',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'carousel_next',
        fa: 'fa fa-angle-right  fa-2x',
    },
    {
        component: 'dockbar_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'notify_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'sidenav_bar',
        fa: 'fa fa-bars fa-2x',
        mat: 'menu',
    },
    {
        component: 'sidenav_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'datagrid_arrowdown',
        fa: 'fa fa-arrow-down',
        mat: 'arrow_downward',
    },
    {
        component: 'datagrid_arrowup',
        fa: 'fa fa-arrow-up',
        mat: 'arrow_upward',
    },
    {
        component: 'datagrid_list',
        fa: 'fa fa-th-list',
        mat: 'view_list',
    },
    {
        component: 'datagrid_expand',
        fa: 'fa fa-caret-right',
        mat: '',
    },
    {
        component: 'datagrid_collapse',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'datagrid_collapse',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'datagrid_filter',
        fa: 'fa fa-filter',
        mat: 'filter_list',
    },
    {
        component: 'tree_filter',
        fa: 'fa fa-filter',
        mat: 'filter_list',
    },
    {
        component: 'data_check',
        fa: 'fa fa-check',
        mat: 'check',
    },
    {
        component: 'button_caret-down',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'button_angle-right',
        fa: 'fa fa-angle-right',
        mat: 'arrow_drop_right',
    },
    {
        component: 'button_angle-down',
        fa: 'fa fa-angle-down',
        mat: 'arrow_drop_down',
    },
    {
        component: 'menubar_ravelry',
        fa: 'fa fa-ravelry',
        mat: 'done',
    },
    {
        component: 'sidenav-angle-up',
        fa: 'fa fa-angle-up',
        mat: 'keyboard_arrow_up',
    },
    {
        component: 'sidenav-angle-down',
        fa: 'fa fa-angle-down',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-error',
        fa: 'fa fa-exclamation-triangle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-warning',
        fa: 'fa fa-exclamation-triangle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-help',
        fa: 'fa fa-question-circle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-confirm',
        fa: 'fa fa-check-circle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'horizontal-tree-expanded',
        fa: 'fa fa-caret-right fa-fw',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'horizontal-tree-collapse',
        fa: 'fa fa-caret-left fa-fw',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'button-loading-icon',
        fa: 'fa fa-refresh fa-spin',
        mat: 'cached',
    },
    {
        component: 'datepicker-clock-icon',
        fa: 'fa fa-clock-o',
        mat: 'access_time',
    },
];
var IconLoaderService = /** @class */ (function () {
    function IconLoaderService() {
        this.iconMappings = ICON_MAPPING;
    }
    Object.defineProperty(IconLoaderService.prototype, "iconToUse", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._iconToUse == null) {
                return 'fa';
            }
            else {
                return this._iconToUse;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._iconToUse = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} componentKey
     * @param {?} newValue
     * @return {?}
     */
    IconLoaderService.prototype.modifyIconClass = /**
     * @param {?} componentKey
     * @param {?} newValue
     * @return {?}
     */
    function (componentKey, newValue) {
        var _this = this;
        if (this.iconMappings != null) {
            this.iconMappings.forEach(function (icon) {
                if (icon.component === componentKey) {
                    icon[_this._iconToUse.toString()] = newValue;
                }
            });
        }
    };
    IconLoaderService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    IconLoaderService.ctorParameters = function () { return []; };
    return IconLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioDataIconComponent = /** @class */ (function () {
    function AmexioDataIconComponent(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioDataIconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconClass = this.getIconClass();
    };
    /**
     * @return {?}
     */
    AmexioDataIconComponent.prototype.getIconClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.iconLoaderService.iconMappings != null) {
            var /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find(function (obj) { return obj.component === _this.key; });
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioDataIconComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    };
    AmexioDataIconComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-data-icon', template: "\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'fa'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"{{customclass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"{{iconClass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'mat'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{customclass}}</i>\n      </ng-container>\n\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{iconClass}}</i>\n      </ng-container>\n\n\n    </ng-container>\n\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioDataIconComponent.ctorParameters = function () { return [
        { type: IconLoaderService }
    ]; };
    AmexioDataIconComponent.propDecorators = {
        key: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        customclass: [{ type: core.Input }]
    };
    return AmexioDataIconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioItemSelectorComponent = /** @class */ (function () {
    function AmexioItemSelectorComponent(itemSelectorService) {
        this.itemSelectorService = itemSelectorService;
        this.mask = true;
        /*
           Properties
           name : enable-drop
           datatype : boolean
           version : 5.0.0 onwards
           default : false
           description : any node can be dropped in the selector structure
           */
        this.enabledrop = false;
        /*
           Properties
           name : across-itemselector
           datatype : boolean
           version : 5.0.0 onwards
           default : false
           description : Dragging and dropping is possible across list.
           */
        this.acrossitemselector = false;
        /*
           Events
           name : availableRecords
           datatype : none
           version : none
           default : none
           description :  Get available values objects.
           */
        this.availableRecords = new core.EventEmitter();
        /*
           Events
           name : selectedRecords
           datatype : none
           version : none
           default : none
           description :  Get selected value Object.
           */
        this.selectedRecords = new core.EventEmitter();
        this.onDrag = new core.EventEmitter();
        this.dragover = new core.EventEmitter();
        this.selectedData = [];
        this.leftactive = true;
        this.rightactive = true;
    }
    Object.defineProperty(AmexioItemSelectorComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.itemSelectorService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.response = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.response);
            });
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data)) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
            responsedata.forEach(function (option, index) {
                if (!option['isSelected']) {
                    option['isSelected'] = false;
                }
            });
        }
        else {
            responsedata = httpResponse;
        }
        this.availableData = responsedata;
        this.mask = false;
    };
    /**
     * @param {?} data
     * @param {?} index
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.itemClick = /**
     * @param {?} data
     * @param {?} index
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    function (data, index, left, right) {
        this.leftactive = left;
        this.rightactive = right;
        this.switchingObject = data;
        this.objectIndex = index;
        for (var _i = 0, _a = this.availableData; _i < _a.length; _i++) {
            var ir = _a[_i];
            if ((ir)[this.valuefield] === data[this.valuefield]) {
                ir['isSelected'] = true;
            }
            else {
                ir['isSelected'] = false;
            }
        }
        if (right) {
            for (var _b = 0, _c = this.selectedData; _b < _c.length; _b++) {
                var ir = _c[_b];
                if ((ir)[this.valuefield] === data[this.valuefield]) {
                    ir['selectedClick'] = true;
                }
                else {
                    ir['selectedClick'] = false;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.rightSwitch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectedData.forEach(function (element) {
            _this.dragDropValidation(element);
        });
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.push(this.switchingObject);
            this.switchingObject['isSelected'] = true;
            this.availableData.forEach(function (option, index) {
                if (option['isSelected']) {
                    _this.availableData.splice(index, 1);
                    option['selectedClick'] = false;
                }
            });
            this.switchingObject = null;
            this.dataEmitter();
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.dragDropValidation = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (this.switchingObject === element) {
            this.switchingObject.isSelected = false;
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.leftSwitch = /**
     * @return {?}
     */
    function () {
        this.setLeftSwitch();
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.setLeftSwitch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ flag = false;
        this.availableData.forEach(function (element) {
            _this.dragDropValidation(element);
        });
        if (!flag && this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.availableData.push(this.switchingObject);
            this.switchingObject['isSelected'] = false;
            this.selectedData.forEach(function (option, index) {
                if (!option['isSelected']) {
                    _this.selectedData.splice(index, 1);
                }
            });
            this.switchingObject = null;
            this.dataEmitter();
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.upSwitch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.forEach(function (opt, i) {
                _this.getIndexObject(opt, i);
            });
            if (this.objectIndex !== 0) {
                var /** @type {?} */ index = this.selectedData[this.objectIndex];
                this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex - 1];
                this.selectedData[this.objectIndex - 1] = index;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.downSwitch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.forEach(function (opt, i) {
                _this.getIndexObject(opt, i);
            });
            if (this.selectedData.length - 1 !== this.objectIndex) {
                var /** @type {?} */ index = this.selectedData[this.objectIndex];
                this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex + 1];
                this.selectedData[this.objectIndex + 1] = index;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.moveTop = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ tempArray = [];
        if (this.switchingObject != null && this.switchingObject['isSelected']) {
            this.selectedData.forEach(function (opt, i) {
                _this.getIndexObject(opt, i);
            });
            if (this.selectedData.length > 1) {
                tempArray[0] = this.selectedData[this.objectIndex];
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData.forEach(function (option) {
                    tempArray.push(option);
                });
                this.selectedData = tempArray;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.moveBottom = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected')) {
            this.selectedData.forEach(function (opt, i) {
                _this.getIndexObject(opt, i);
            });
            if (this.switchingObject['isSelected'] && this.selectedData.length > 1) {
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData[this.selectedData.length] = this.switchingObject;
            }
        }
        this.dataEmitter();
    };
    /**
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.dataEmitter = /**
     * @return {?}
     */
    function () {
        this.availableRecords.emit(this.availableData);
        this.selectedRecords.emit(this.selectedData);
    };
    /**
     * @param {?} opt
     * @param {?} i
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.getIndexObject = /**
     * @param {?} opt
     * @param {?} i
     * @return {?}
     */
    function (opt, i) {
        if (opt[this.valuefield] === this.switchingObject[this.valuefield]) {
            this.objectIndex = i;
        }
    };
    // Method to drag parent with node
    /**
     * @param {?} dragData
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.onDragStartLeft = /**
     * @param {?} dragData
     * @return {?}
     */
    function (dragData) {
        if (!this.acrossitemselector) {
            this.itemClick(dragData.data, dragData.index, true, false);
        }
        else {
            dragData.event.dataTransfer.setData('itemnodedata', JSON.stringify(dragData.data));
            this.onDrag.emit(dragData);
        }
    };
    /**
     * @param {?} dragData
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.onDragStartRight = /**
     * @param {?} dragData
     * @return {?}
     */
    function (dragData) {
        if (!this.acrossitemselector) {
            this.itemClick(dragData.data, dragData.index, false, true);
        }
        else {
            dragData.event.dataTransfer.setData('itemnodedata', JSON.stringify(dragData.data));
            this.onDrag.emit(dragData);
        }
    };
    /**
     * @param {?} dragOverData
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.allowDrop = /**
     * @param {?} dragOverData
     * @return {?}
     */
    function (dragOverData) {
        dragOverData.event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.dropRight = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabledrop) {
            this.rightSwitch();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioItemSelectorComponent.prototype.dropLeft = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabledrop) {
            this.leftSwitch();
        }
    };
    AmexioItemSelectorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-item-selector', template: "\n    <amexio-row>\n      <amexio-column [size]=\"'45pt'\">\n        <amexio-card [header]=\"true\">\n          <amexio-header>Available</amexio-header>\n          <amexio-body>\n            <div style=\"height: 220px;\" *ngIf=\"mask\">\n              <div class=\"spinner\"></div>\n            </div>\n            <div [style.height.px]=\"height\" (dragover)=\"allowDrop({event:$event,data:data})\" (drop)=\"dropLeft($event)\" *ngIf=\"!mask\" style=\"overflow: auto\">\n              <div class=\"itemselector-list\" [ngClass]=\"data['isSelected'] ? 'itemselector-list-active':''\" *ngFor=\"let data of availableData; let i = index\"\n                (click)=\"itemClick(data,i, true,false)\" [attr.draggable]=\"enabledrag\" (dragstart)=\"onDragStartLeft({event:$event,data:data,index:i})\">\n                {{data[displayfield]}}\n              </div>\n            </div>\n          </amexio-body>\n        </amexio-card>\n      </amexio-column>\n\n\n      <amexio-column [size]=\"'10pt'\">\n\n        <div class=\"item-selector-action-panel\">\n\n          <amexio-card [header]=\"true\">\n            <amexio-header>&nbsp;</amexio-header>\n            <amexio-body>\n\n              <div class=\"actionbar\">\n                <div [style.height.px]=\"height\" class=\"actionbarinner\">\n                  <div [ngClass]=\"{'actiondisable':!rightactive}\" (click)=\"moveTop()\" class=\"action movetop \">\n                    <amexio-data-icon key=\"itemselector_caretup\"></amexio-data-icon>\n                  </div>\n                  <div [ngClass]=\"{'actiondisable':!rightactive}\" (click)=\"upSwitch()\" class=\"action moveup\">\n                    <amexio-data-icon key=\"itemselector_arrowup\"></amexio-data-icon>\n                  </div>\n                  <div [ngClass]=\"{'actiondisable':!rightactive}\" (click)=\"leftSwitch()\" class=\"action moveleft\">\n                    <amexio-data-icon key=\"itemselector_arrowleft\"></amexio-data-icon>\n                  </div>\n                  <div [ngClass]=\"{'actiondisable':!leftactive}\" (click)=\"rightSwitch()\" class=\"action moveright\">\n                    <amexio-data-icon key=\"itemselector_arrowright\"></amexio-data-icon>\n                  </div>\n                  <div [ngClass]=\"{'actiondisable':!rightactive}\" (click)=\"downSwitch()\" class=\"action movedown\">\n                    <amexio-data-icon key=\"itemselector_arrowdown\"></amexio-data-icon>\n                  </div>\n                  <div [ngClass]=\"{'actiondisable':!rightactive}\" (click)=\"moveBottom()\" class=\"action movebottom\">\n                    <amexio-data-icon key=\"itemselector_caretdown\"></amexio-data-icon>\n                  </div>\n                </div>\n              </div>\n            </amexio-body>\n          </amexio-card>\n        </div>\n\n      </amexio-column>\n\n      <amexio-column [size]=\"'45pt'\">\n        <amexio-card [header]=\"true\">\n          <amexio-header>Selected</amexio-header>\n          <amexio-body>\n            <div [style.height.px]=\"height\" style=\"overflow: auto\" (dragover)=\"allowDrop({event:$event,data:data})\" (drop)=\"dropRight($event)\">\n              <div  [attr.draggable]=\"enabledrag\" class=\"itemselector-list\" *ngFor=\"let data of selectedData; let i = index\" (click)=\"itemClick(data,i, false,true)\"\n               [ngClass]=\"data['selectedClick'] ? 'itemselector-list-active':''\" (dragstart)=\"onDragStartRight({event:$event,data:data,index:i})\">\n                {{data[displayfield]}}\n              </div>\n            </div>\n          </amexio-body>\n        </amexio-card>\n      </amexio-column>\n    </amexio-row>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioItemSelectorComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    AmexioItemSelectorComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        height: [{ type: core.Input }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        enabledrag: [{ type: core.Input, args: ['enable-drag',] }],
        enabledrop: [{ type: core.Input, args: ['enable-drop',] }],
        acrossitemselector: [{ type: core.Input, args: ['across-itemselector',] }],
        availableRecords: [{ type: core.Output }],
        selectedRecords: [{ type: core.Output }],
        onDrag: [{ type: core.Output }],
        dragover: [{ type: core.Output }],
        dragData: [{ type: core.Input }],
        parentRef: [{ type: core.Input }]
    };
    return AmexioItemSelectorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/22/17.
 */
var AmexioListBoxComponent = /** @class */ (function () {
    function AmexioListBoxComponent(dataService, renderer) {
        this.dataService = dataService;
        this.renderer = renderer;
        /*
        Properties
        name : enable-header
        datatype : boolean
        version : 4.2.4 onwards
        default : true
        description : User can disabled header of listbox to false..
        */
        this.enableHeader = true;
        /*
        Events
        name : selectedRows
        datatype : none
        version : none
        default : none
        description : It will fire only on selection of checkbox and gives you selected record data.
        */
        this.selectedRows = new core.EventEmitter();
        /*
        Events
        name : onRowClick
        datatype : none
        version : none
        default : none
        description : It will gives you row clicked data.
        */
        this.onRowClick = new core.EventEmitter();
        /*
        Events
        name : rightClick
        datatype : none
        version : 5.0.1
        default : none
        description : It will gives you row clicked data.
        */
        this.rightClick = new core.EventEmitter();
        this.selectAll = false;
        this.maskloader = true;
        this.mouseLocation = { left: 0, top: 0 };
        this.filter = false;
        this.enablecheckbox = false;
        this.selectedData = [];
        this.searchplaceholder = 'Search';
    }
    Object.defineProperty(AmexioListBoxComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.response = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.response);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioListBoxComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.setSelectedFlag(this.viewData);
        this.orgData = JSON.parse(JSON.stringify(this.viewData));
    };
    /**
     * @param {?} viewRows
     * @return {?}
     */
    AmexioListBoxComponent.prototype.setSelectedFlag = /**
     * @param {?} viewRows
     * @return {?}
     */
    function (viewRows) {
        viewRows.forEach(function (row) {
            if (!row.hasOwnProperty('isSelected')) {
                row['isSelected'] = false;
            }
        });
        this.maskloader = false;
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.filterData = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgData));
        var /** @type {?} */ nodes = this.searchTree(tData, this.filterText);
        this.viewData = nodes;
    };
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    AmexioListBoxComponent.prototype.searchTree = /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    function (data, matchingTitle) {
        var /** @type {?} */ disp = this.displayfield;
        return data.filter(function f(node) {
            if (node[disp] && node[disp].toLowerCase().startsWith(matchingTitle.toLowerCase())) {
                return true;
            }
            if (node.children) {
                return (node.children = node.children.filter(f)).length;
            }
        });
        // return res;
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    AmexioListBoxComponent.prototype.selectedCheckBox = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        rowData.isSelected = !rowData.isSelected;
        this.selectedData = [];
        this.viewData.forEach(function (node) {
            if (node.isSelected) {
                _this.selectedData.push(node);
            }
        });
        this.selectedRows.emit(this.selectedData);
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.selectAllRecord = /**
     * @return {?}
     */
    function () {
        this.selectedData = [];
        this.selectAll = !this.selectAll;
        if (this.selectAll) {
            this.viewData.forEach(function (node) {
                node.isSelected = true;
            });
            this.selectedData = this.viewData;
        }
        else {
            this.viewData.forEach(function (node) {
                node.isSelected = false;
            });
        }
        this.selectedRows.emit(this.selectedData);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioListBoxComponent.prototype.onClick = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onRowClick.emit(data);
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    AmexioListBoxComponent.prototype.loadContextMenu = /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    function (event, row, id) {
        this.tempSelectedFlag(this.viewData);
        this.mouseLocation.left = event.clientX;
        this.mouseLocation.top = event.clientY;
        row.isSelected = true;
        this.getContextMenu();
        this.posixUp = this.getListPosition(id);
        event.preventDefault();
        event.stopPropagation();
        this.rightClickRowData = row;
        this.contextMenuStyle = this.getContextMenuStyle();
    };
    // getcontextmenu
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.contextMenuFlag = true;
            this.addListner();
        }
    };
    /**
     * @param {?} rows
     * @return {?}
     */
    AmexioListBoxComponent.prototype.tempSelectedFlag = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        rows.forEach(function (row) {
            if (row.isSelected) {
                row.isSelected = false;
            }
        });
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioListBoxComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextMenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioListBoxComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                rowData: this.rightClickRowData,
            };
            this.contextMenuFlag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.contextMenuFlag = false;
            if (!_this.contextMenuFlag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioListBoxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioListBoxComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-listbox', template: "\n\n    <div class=\"listbox\" [style.border]=\"border\">\n\n      <div *ngIf=\"enableHeader\" class=\"header\" style=\"display: flex; justify-content: space-between\">\n        <div style=\"display: flex;justify-content: flex-start;\">\n          <div *ngIf=\"enablecheckbox\"  class=\"input-box\">\n            <div *ngIf=\"!selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox default\"></div>\n            <div *ngIf=\"selectAll\" (click)=\"selectAllRecord()\" class=\"checkbox active\">&#10004;</div>\n          </div>\n          <div class=\"title\">&nbsp;&nbsp;{{header}}</div>\n        </div>\n\n        <div *ngIf=\"(filter == true)\">\n          <input type=\"text\" [(ngModel)]=\"filterText\" [placeholder]=\"searchplaceholder\" (keyup)=\"filterData()\" class=\"search \"/>\n        </div>\n      </div>\n\n      <div class=\"listbox-height\" [style.height.px]=\"height\">\n        <ul class=\"list\" [ngClass]=\"{'loading-mask' : maskloader}\">\n          <li #id class=\"list-items\" *ngFor=\"let row of viewData let rowno = index \" [ngClass]=\"{'tree-node-label-selected':row.isSelected ,'tree-node-label-not-selected':row.isSelected=='false'}\">\n\n            <div (click)=\"onClick(row)\" (contextmenu)=\"loadContextMenu($event,row, id)\">\n              <ng-container *ngIf=\"enablecheckbox\">\n                <div class=\"inputgroup\" style=\"float: left; height: 100%;\">\n                  <div class=\"input-box\">\n                    <div (click)=\"selectedCheckBox(row)\" [class]=\"row.isSelected ?'checkbox active':'checkbox default'\">\n                      {{row.isSelected ? '&#10004;' : ''}}\n                    </div>\n                  </div>\n                </div>&nbsp;\n              </ng-container>\n              <ng-container *ngIf=\"!bodyTemplate\"> {{row[displayfield]}}</ng-container>\n              <ng-template *ngIf=\"bodyTemplate\" [ngTemplateOutlet]=\"bodyTemplate\" [ngTemplateOutletContext]=\"{ row: row }\"></ng-template>\n            </div>\n\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <span [ngStyle]=\"contextMenuStyle\">\n      <ul *ngIf=\"contextMenuFlag\" class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n        <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\" [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\"\n          *ngFor=\"let itemConfig of contextmenu\">\n          <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n          <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n          </span>\n        </li>\n      </ul>\n    </span>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioListBoxComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: core.Renderer2 }
    ]; };
    AmexioListBoxComponent.propDecorators = {
        enablecheckbox: [{ type: core.Input, args: ['enable-checkbox',] }],
        header: [{ type: core.Input }],
        enableHeader: [{ type: core.Input, args: ['enable-header',] }],
        searchplaceholder: [{ type: core.Input, args: ['search-placeholder',] }],
        filter: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        height: [{ type: core.Input }],
        selectedRows: [{ type: core.Output }],
        onRowClick: [{ type: core.Output }],
        border: [{ type: core.Input }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        rightClick: [{ type: core.Output }],
        bodyTemplate: [{ type: core.ContentChild, args: ['amexioBodyTmpl',] }]
    };
    return AmexioListBoxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/23/17.
 */
var AmexioPaginatorComponent = /** @class */ (function () {
    function AmexioPaginatorComponent() {
        /*
        Events
        name : onRowChange
        datatype : none
        version : none
        default : none
        description : if you click on '<<' will get 1st record and if you click on '>>' will get last record.
        */
        this.onRowChange = new core.EventEmitter();
        /*
        Events
        name : onPageChange
        datatype : none
        version : none
        default : none
        description : It will gives you current page number
        */
        this.onPageChange = new core.EventEmitter();
        this.fullPageSet = [];
        this.activePages = [];
        this.pageIndex = [];
    }
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.size == null || this.size === '') {
            this.size = 'medium';
        }
        this.initializePages();
    };
    /**
     * @param {?} change
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.ngOnChanges = /**
     * @param {?} change
     * @return {?}
     */
    function (change) {
        if (change["pages"] && !change["pages"].isFirstChange()) {
            this.initializePages();
        }
        if (change["rows"] && !change["rows"].isFirstChange()) {
            this.initializePages();
        }
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.initializePages = /**
     * @return {?}
     */
    function () {
        if (this.rows > this.pages) {
            this.rows = this.pages;
        }
        this.fullPageSet.length = 0;
        this.activePages.length = 0;
        this.pageIndex.length = 0;
        if (this.rows != null) {
            for (var /** @type {?} */ i = 0; i < this.pages; i++) {
                this.fullPageSet.push(i + 1);
            }
            this.calculateRows();
            this.setRows(this.rows);
        }
        else {
            for (var /** @type {?} */ i = 0; i < this.pages; i++) {
                this.fullPageSet.push(i + 1);
                this.activePages.push(i + 1);
            }
        }
        this.setBoundaries();
        this.activePageIndex = 0;
        this.currentRowIndex = 0;
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onFirstClick = /**
     * @return {?}
     */
    function () {
        this.activePageIndex = 0;
        this.changeRows(this.pageIndex[0], 0, null);
        this.onPageChange.emit(this.activePage);
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onLastClick = /**
     * @return {?}
     */
    function () {
        this.activePageIndex = this.activePages.length - 1;
        this.changeRows(this.pageIndex[this.pageIndex.length - 1], this.pageIndex.length - 1, null);
        this.activePageIndex = this.activePages.length - 1;
        this.activePage = this.activePages[this.activePages.length - 1];
        this.onPageChange.emit(this.activePage);
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onPrevious = /**
     * @return {?}
     */
    function () {
        if (this.activePageIndex !== 0) {
            // within row bounds
            this.activePageIndex -= 1;
            this.activePage = this.activePages[this.activePageIndex];
            this.onPageChange.emit(this.activePage);
        }
        else {
            // load prev rows
            var /** @type {?} */ sIndx = void 0;
            if (this.fullPageSet.indexOf(this.activePage) === 1) {
                sIndx = this.fullPageSet.indexOf(this.activePage);
            }
            else {
                sIndx = this.fullPageSet.indexOf(this.activePage) - 1;
            }
            if (sIndx > 0) {
                this.changeRows(this.pageIndex[this.currentRowIndex - 1], this.currentRowIndex - 1, null);
                this.activePageIndex = this.activePages.length - 2;
                this.activePage = this.activePages[this.activePages.length - 2];
                this.onPageChange.emit(this.activePage);
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onNext = /**
     * @return {?}
     */
    function () {
        if (this.activePageIndex !== this.activePages.length - 1) {
            // within row bounds
            this.activePageIndex += 1;
            this.activePage = this.activePages[this.activePageIndex];
            this.onPageChange.emit(this.activePage);
        }
        else {
            // load next rows
            var /** @type {?} */ sIndx = this.fullPageSet.indexOf(this.activePage) + 1;
            if (sIndx <= this.fullPageSet.length - 1) {
                this.changeRows(this.pageIndex[this.currentRowIndex + 1], this.currentRowIndex + 1, null);
                this.activePageIndex = 1;
                this.activePage = this.activePages[1];
                this.onPageChange.emit(this.activePage);
            }
        }
    };
    /* If page size is less then row*/
    /**
     * @param {?} rowNumber
     * @param {?} inDx
     * @param {?} event
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.changeRows = /**
     * @param {?} rowNumber
     * @param {?} inDx
     * @param {?} event
     * @return {?}
     */
    function (rowNumber, inDx, event) {
        if (rowNumber != null) {
            this.activePages = [];
            if (this.pages < rowNumber) {
                this.currentRow = this.pages;
                for (var /** @type {?} */ i = this.currentRow - this.rows + 1; i <= this.currentRow; i++) {
                    if (i !== 0) {
                        this.activePages.push(i);
                    }
                }
            }
            else {
                this.getCurrentRow(rowNumber);
            }
            this.onPageChangeMethod(inDx);
            if (event) {
                this.show = !this.show;
            }
        }
    };
    /**
     * @param {?} rowNumber
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.getCurrentRow = /**
     * @param {?} rowNumber
     * @return {?}
     */
    function (rowNumber) {
        this.currentRow = rowNumber;
        for (var /** @type {?} */ i = this.currentRow - this.rows; i <= this.currentRow; i++) {
            if (i !== 0) {
                this.activePages.push(i);
            }
        }
    };
    /**
     * @param {?} inDx
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onPageChangeMethod = /**
     * @param {?} inDx
     * @return {?}
     */
    function (inDx) {
        this.currentRowIndex = inDx;
        this.onRowChange.emit(this.currentRow);
        this.setBoundaries();
        this.activePageIndex = 0;
        this.activePage = this.activePages[0];
        this.onPageChange.emit(this.activePage);
    };
    /**
     * @param {?} page
     * @param {?} index
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.onPageClick = /**
     * @param {?} page
     * @param {?} index
     * @return {?}
     */
    function (page, index) {
        this.activePageIndex = index;
        this.activePage = page;
        this.onPageChange.emit(this.activePage);
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.calculateRows = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = 0; i < this.rows; i++) {
            this.activePages.push(i + 1);
        }
        this.currentRow = this.rows;
        // calc rows
        var /** @type {?} */ loopI = Math.round(this.pages / this.rows);
        for (var /** @type {?} */ i = 1; i <= loopI; i++) {
            this.pageIndex.push(this.rows * i);
        }
    };
    /**
     * @param {?} rowNumber
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.setRows = /**
     * @param {?} rowNumber
     * @return {?}
     */
    function (rowNumber) {
        this.activePages = [];
        if (rowNumber > this.pages) {
            this.currentRow = this.pages;
        }
        else {
            this.currentRow = rowNumber;
        }
        for (var /** @type {?} */ i = 0; i < this.currentRow; i++) {
            this.activePages.push(i + 1);
        }
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.setBoundaries = /**
     * @return {?}
     */
    function () {
        this.bFirst = this.activePages[0];
        this.bLast = this.activePages[this.activePages.length - 1];
    };
    /**
     * @return {?}
     */
    AmexioPaginatorComponent.prototype.showColumnOptions = /**
     * @return {?}
     */
    function () {
        this.show = !this.show;
    };
    AmexioPaginatorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-paginator', template: "\n    <div class=\"paginator\">\n          <span class=\"paginator-pages\">\n            <a class=\"paginator-page\" (click)=\"onPrevious()\">&lt;</a>\n            <a class=\"paginator-page\" (click)=\"onFirstClick()\">&lt;&lt;</a>\n          </span>\n      <span class=\"paginator-pages\" *ngFor=\"let page of activePages;let i = index\">\n            <a class=\"paginator-page\" [ngClass]=\"{'active' : activePageIndex == i  }\" (click)=\"onPageClick(page,i)\">{{page}}</a>\n          </span>\n      <span class=\"paginator-pages\">\n            <a class=\"paginator-page\" (click)=\"onLastClick()\">&gt;&gt;</a>\n            <a class=\"paginator-page\" (click)=\"onNext()\">&gt;</a>\n          </span>\n      <ng-container *ngIf=\"pages > rows\">\n      <span class=\"paginator-pages\">\n            <a class=\"paginator-page\" (click)=\"showColumnOptions()\" style=\" cursor: pointer;\">{{currentRow}} &nbsp;  &#9660;</a>\n            <span *ngIf=\"show\" class=\"dropdown\" style=\"width: 50px;\">\n                <ul class=\"dropdown-list\">\n                  <li class=\"list-items\" *ngFor=\"let row of pageIndex;let i = index\" (click)=\"changeRows(row,i, $event)\"><div>{{row}}</div></li>\n                </ul>\n            </span>\n          </span>\n      </ng-container>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioPaginatorComponent.ctorParameters = function () { return []; };
    AmexioPaginatorComponent.propDecorators = {
        pages: [{ type: core.Input }],
        rows: [{ type: core.Input }],
        size: [{ type: core.Input }],
        onRowChange: [{ type: core.Output }],
        onPageChange: [{ type: core.Output }]
    };
    return AmexioPaginatorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioProgressMultiBarComponent = /** @class */ (function () {
    function AmexioProgressMultiBarComponent() {
    }
    /**
     * @return {?}
     */
    AmexioProgressMultiBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioProgressMultiBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-multi-bar', template: "\n\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioProgressMultiBarComponent.ctorParameters = function () { return []; };
    return AmexioProgressMultiBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 27/12/17.
 */
var AmexioProgressBarComponent = /** @class */ (function () {
    function AmexioProgressBarComponent() {
        /*
        Properties
        name : show
        datatype : boolean
        version : 4.0 onwards
        default : true
        description :  Shows / Hides the progress bar.
        */
        this.showProgress = true;
        this.progressclass = '';
        this.strippedCss = 'stripped ';
    }
    /**
     * @return {?}
     */
    AmexioProgressBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.height) {
            this.height = this.height + 'px';
        }
        else {
            this.height = '20px';
        }
        if (this.stripped) {
            this.progressclass = this.progressclass + this.strippedCss;
        }
        if (this.type && !this.amexiocolor) {
            this.progressclass = this.progressclass + this.type.toLocaleLowerCase();
        }
        else if (this.amexiocolor && !this.type) {
            this.progressclass = this.progressclass + this.amexiocolor.toLocaleLowerCase();
        }
    };
    AmexioProgressBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-progress-bar', template: "\n    <div *ngIf=\"showProgress\" class=\"progress\" [ngStyle]=\"{'height':height}\">\n      <span [ngClass]=\"progressclass\" *ngIf=\"infinite\" style=\"width: 100%;\">{{label != null ? label : 'Loading...'}}</span>\n      <span [ngClass]=\"progressclass\" *ngIf=\"!infinite\" [ngStyle]=\"{'width.%' : currentvalue}\"></span>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioProgressBarComponent.ctorParameters = function () { return []; };
    AmexioProgressBarComponent.propDecorators = {
        showProgress: [{ type: core.Input, args: ['show',] }],
        infinite: [{ type: core.Input }],
        type: [{ type: core.Input }],
        amexiocolor: [{ type: core.Input, args: ['amexio-color',] }],
        currentvalue: [{ type: core.Input, args: ['current-value',] }],
        label: [{ type: core.Input }],
        height: [{ type: core.Input }],
        stripped: [{ type: core.Input }],
        multi: [{ type: core.Input }]
    };
    return AmexioProgressBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 11/12/17.
 */
var AmexioFilterTreeComponent = /** @class */ (function () {
    function AmexioFilterTreeComponent(_http, cdf, treeViewFilterService) {
        this._http = _http;
        this.cdf = cdf;
        this.treeViewFilterService = treeViewFilterService;
        /*
        Properties
        name : enable-checkbox
        datatype : false
        version : 4.0 onwards
        default : false
        description : Enables checkbox for each row, this allows user for multi selection.
        */
        this.enablecheckbox = false;
        /*
        Events
        name : nodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.nodeClick = new core.EventEmitter();
        /*
        Events
        name : onTreeNodeChecked
        datatype : none
        version : none
        default : none
        description : It will gives whole tree data with checked flag status.
        */
        this.onTreeNodeChecked = new core.EventEmitter();
        this.isDataFound = true;
        this.onClickSearch = false;
        this.mask = true;
        this.filterIndex = 3;
        this.triggerchar = 1;
        this.filterOptionData = [{
                key: 'Is Equal To', value: '1', type: 'string', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: '2', type: 'string', checkedStatus: '',
            }, {
                key: 'Start With', value: '3', type: 'string', checkedStatus: 'fa fa-check',
            }, {
                key: 'Ends With', value: '4', type: 'string', checkedStatus: '',
            }, {
                key: 'Contains', value: '5', type: 'string', checkedStatus: '',
            }];
    }
    Object.defineProperty(AmexioFilterTreeComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
        }
    };
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
        }
        if (this.httpmethod && this.httpurl) {
            this.callService();
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data)) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.filterData = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        if (this.filterText.length >= this.triggerchar) {
            var /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            var /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            if (this.treeData.length === 0) {
                this.isDataFound = false;
            }
            else {
                this.isDataFound = true;
            }
        }
        else if (this.onClickSearch) {
            var /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            var /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            this.onClickSearch = false;
            if (this.treeData.length === 0) {
                this.isDataFound = false;
            }
            else {
                this.isDataFound = true;
            }
        }
        else {
            this.isDataFound = true;
            this.treeData = this.orgTreeData;
        }
    };
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.searchTree = /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    function (data, matchingTitle) {
        var /** @type {?} */ fi = this.filterIndex;
        return this.filterActualData(data, fi, matchingTitle);
    };
    /**
     * @param {?} data
     * @param {?} fi
     * @param {?} matchingTitle
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.filterActualData = /**
     * @param {?} data
     * @param {?} fi
     * @param {?} matchingTitle
     * @return {?}
     */
    function (data, fi, matchingTitle) {
        return data.filter(function f(node) {
            if ((fi === 5 && node.text.toLowerCase().includes(matchingTitle.toLowerCase())) ||
                (fi === 3 && node.text.toLowerCase().startsWith(matchingTitle.toLowerCase())) ||
                (fi === 1 && node.text.toLowerCase() === matchingTitle.toLowerCase()) ||
                (fi === 2 && node.text.toLowerCase() !== matchingTitle.toLowerCase()) ||
                (fi === 4 && node.text.toLowerCase().endsWith(matchingTitle.toLowerCase()))) {
                return true;
            }
            if (node.children) {
                return (node.children = node.children.filter(f)).length;
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.filterOption = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onClickSearch = true;
        this.filterIndex = data.value;
        this.filterOptionData.forEach(function (opt) {
            if (opt.value !== data.value) {
                opt.checkedStatus = '';
            }
            else {
                opt.checkedStatus = 'fa fa-check';
            }
        });
        this.filterData();
        this.showToolTip = false;
    };
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.renderServiceData = /**
     * @return {?}
     */
    function () {
        this.setData(this.data);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ tdata = this.getData(httpResponse);
        if (tdata) {
            this.orgTreeData = JSON.parse(JSON.stringify(tdata));
            this.treeData = tdata;
        }
        this.mask = false;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.getData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.callService = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeViewFilterService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
            _this.data = response;
        }, function () {
            _this.renderServiceData();
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.onRowSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.nodeClick.emit(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioFilterTreeComponent.prototype.onCheckSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onTreeNodeChecked.emit(data);
    };
    AmexioFilterTreeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tree-filter-view', template: "\n    <div>\n      <div>\n        <div class=\"inputgroup\">\n          <input type=\"text\" class=\"input-control text-input-width\" aria-label=\"Text input with dropdown button\" [(ngModel)]=\"filterText\"\n                 placeholder=\"Search\" (keyup)=\"filterData()\">\n          <!--<i class=\"fa fa-filter\" aria-hidden=\"true\" (click)=\"showToolTip = !showToolTip\"></i>-->\n          <span class=\"datatable-filter-icon\">\n          <amexio-data-icon key=\"tree_filter\" (click)=\"showToolTip = !showToolTip\"></amexio-data-icon>\n          </span>\n          <!--  <div class=\"input-group-btn\">-->\n          <!-- <button type=\"button\"\n          class=\"btn\" data-toggle=\"dropdown\"\n          (click)=\"showToolTip = !showToolTip\"\n          aria-haspopup=\"true\" aria-expanded=\"false\">\n           </button>-->\n          <span *ngIf=\"showToolTip\" class=\"dropdown\">\n              <ul class=\"dropdown-list\">\n                <li class=\"list-items\" *ngFor=\"let opt of filterOptionData\" (click)=\"filterOption(opt)\">{{opt.key}}&nbsp;\n                  <!--<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i>-->\n                  <amexio-data-icon key=\"opt.checkedStatus\"></amexio-data-icon>\n                </li>\n              </ul>\n            </span>\n          <!-- </div>-->\n        </div>\n        <ng-container *ngIf=\"isDataFound\">\n          <amexio-treeview\n            [data]=\"treeData\"\n            [enable-checkbox]=\"enablecheckbox\"\n            (onTreeNodeChecked)=\"onCheckSelect($event)\"\n            (nodeClick)=\"onRowSelect($event)\" [templates]=\"templates\">\n          </amexio-treeview>\n        </ng-container>\n        <ng-container *ngIf=\"!isDataFound\">\n          <p>No Data Found.</p>\n        </ng-container>\n\n      </div>\n    </div>\n\n\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFilterTreeComponent.ctorParameters = function () { return [
        { type: HttpClient },
        { type: core.ChangeDetectorRef },
        { type: CommonDataService }
    ]; };
    AmexioFilterTreeComponent.propDecorators = {
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        data: [{ type: core.Input, args: ['data',] }],
        enablecheckbox: [{ type: core.Input, args: ['enable-checkbox',] }],
        nodeClick: [{ type: core.Output }],
        onTreeNodeChecked: [{ type: core.Output }],
        triggerchar: [{ type: core.Input, args: ['trigger-char',] }],
        parentTmp: [{ type: core.ContentChild, args: ['amexioTreeTemplate',] }]
    };
    return AmexioFilterTreeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var HorizontalTreeViewNodeComponent = /** @class */ (function () {
    function HorizontalTreeViewNodeComponent() {
        /*
        Events
        name : onNodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.onNodeClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    HorizontalTreeViewNodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} node
     * @return {?}
     */
    HorizontalTreeViewNodeComponent.prototype.onClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        node.expand = !node.expand;
        this.onNodeClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    HorizontalTreeViewNodeComponent.prototype.onInnerClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onNodeClick.emit(node);
    };
    HorizontalTreeViewNodeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-horizontal-treeviewnode', template: "\n    <div class=\"horizontaltreeview-node\">\n      <div class=\"horizontaltreeview-node-entry\" [ngClass]=\"{'sole':data.length==1}\" *ngFor=\"let node of data\">\n        <span class=\"horizontaltreeview-node-label\" (click)=\"onClick(node)\">\n          {{node.text}}\n          <span  *ngIf=\"node.children && (node.children.length>0)\" class=\"float-right\" (click)=\"onClick(node)\">\n            <amexio-data-icon *ngIf=\"node.expand\" key=\"horizontal-tree-collapse\"></amexio-data-icon>\n            <amexio-data-icon *ngIf=\"!node.expand\" key=\"horizontal-tree-expanded\"></amexio-data-icon>\n          </span>\n        </span>\n        <amexio-horizontal-treeviewnode *ngIf=\"node.expand && node.children && (node.children.length>0)\"\n                                        [data]=\"node.children\"\n                                        (onNodeClick)=\"onInnerClick($event)\"></amexio-horizontal-treeviewnode>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    HorizontalTreeViewNodeComponent.ctorParameters = function () { return []; };
    HorizontalTreeViewNodeComponent.propDecorators = {
        data: [{ type: core.Input }],
        onNodeClick: [{ type: core.Output }]
    };
    return HorizontalTreeViewNodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var HorizontalTreeViewComponent = /** @class */ (function () {
    function HorizontalTreeViewComponent(dataService) {
        this.dataService = dataService;
        /*
        Events
        name : nodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.nodeClick = new core.EventEmitter();
        this.mask = true;
    }
    /**
     * @return {?}
     */
    HorizontalTreeViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    HorizontalTreeViewComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        // Check if key is added?
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.mask = false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    HorizontalTreeViewComponent.prototype.nodeclick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClick.emit(node);
    };
    HorizontalTreeViewComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-horizontal-treeview', template: "\n\n    <div class=\"horizontaltreeview\">\n      <span class=\"horizontaltreeview-node-label\">{{label}}</span>\n      <div style=\"height: 300px;\" *ngIf=\"mask\">\n        <div class=\"spinner\"></div>\n      </div>\n      <amexio-horizontal-treeviewnode *ngIf=\"!mask\" [data]=\"data\" (onNodeClick)=\"nodeclick($event)\"></amexio-horizontal-treeviewnode>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    HorizontalTreeViewComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    HorizontalTreeViewComponent.propDecorators = {
        label: [{ type: core.Input }],
        data: [{ type: core.Input }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        nodeClick: [{ type: core.Output }]
    };
    return HorizontalTreeViewComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/23/17.
 */
var AmexioTreeViewComponent = /** @class */ (function () {
    function AmexioTreeViewComponent(element, dataService, cdf, renderer) {
        this.element = element;
        this.dataService = dataService;
        this.cdf = cdf;
        this.renderer = renderer;
        /*
          Events
          name : nodeClick
          datatype : none
          version : none
          default : none
          description : It will gives you clicked node data.
          */
        this.nodeClick = new core.EventEmitter();
        /*
        Properties
        name : enable-checkbox
        datatype : false
        version : 4.0 onwards
        default : none
        description : Enables checkbox for each row, this allows user for multi selection.
        */
        this.enablecheckbox = false;
        /*
          Properties
          name : enable-drop
          datatype : boolean
          version : 5.0.0 onwards
          default : false
          description : any node can be dropped in the tree structure
          */
        this.enabledrop = false;
        /*
        Properties
        name : across-tree
        datatype : boolean
        version : 5.0.0 onwards
        default : false
        description : Dragging and dropping is possible across tree.
        */
        this.acrosstree = false;
        /*
          Events
          name : onTreeNodeChecked
          datatype : any
          version : 4.0 onwards
          default : none
          description : It will gives whole tree data with checked flag status.
          */
        this.onTreeNodeChecked = new core.EventEmitter();
        this.onDrag = new core.EventEmitter();
        this.onDrop = new core.EventEmitter();
        this.dragover = new core.EventEmitter();
        this.nodeRightClick = new core.EventEmitter();
        this.rightClick = new core.EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.isNode = true;
        this.acrosstree = false;
        this.displaykey = 'text';
        this.childarraykey = 'children';
    }
    Object.defineProperty(AmexioTreeViewComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.datareader && this.data) {
            this.setData(this.data);
        }
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.parentTmp != null) {
                _this.templates = { treeNodeTemplate: _this.parentTmp };
            }
            else if (_this.templates != null) {
                _this.parentTmp = _this.templates.treeNodeTemplate;
            }
        });
        this.cdf.detectChanges();
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data) && this.previousValue != null && this.data != null) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.expandAll = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.expandAllCall(this.parentRef);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.expandAllCall = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        node.forEach(function (childCheck) {
            if (!childCheck.expand) {
                childCheck.expand = true;
            }
            if (childCheck.hasOwnProperty(_this.childarraykey)) {
                _this.expandAllCall(childCheck[_this.childarraykey]);
            }
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.collapseAll = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.collapseAllCall(this.parentRef);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.collapseAllCall = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        node.forEach(function (childCheck) {
            if (childCheck.expand) {
                childCheck.expand = false;
            }
            if (childCheck.hasOwnProperty(_this.childarraykey)) {
                _this.collapseAllCall(childCheck[_this.childarraykey]);
            }
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.onClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        node.expand = !node.expand;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.onNodeClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClick.emit(node);
        this.activateNode(this.data, node);
    };
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.activateNode = /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    function (data, node) {
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var i = data_1[_i];
            if (node === data[i] && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        // Check if key is added?
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.parentRef = this.data;
        this.setSelectedFlag();
        this.activateNode(this.data, null);
    };
    // To add isSelected flag explicitily in tree Data
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setSelectedFlag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.parentRef.forEach(function (node) {
            if (node.hasOwnProperty('isSelected')) {
                node.isSelected = false;
            }
            else {
                node['isSelected'] = false;
            }
            if (node.hasOwnProperty(_this.childarraykey) && node[_this.childarraykey].length > 0) {
                _this.setSelectedFlagInChild(node);
            }
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setSelectedFlagInChild = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        node[this.childarraykey].forEach(function (childcom) {
            if (childcom.hasOwnProperty('isSelected')) {
                childcom.isSelected = false;
            }
            else {
                childcom['isSelected'] = false;
            }
            if (childcom.hasOwnProperty(_this.childarraykey) && childcom[_this.childarraykey].length > 0) {
                _this.setSelectedFlagInChild(childcom);
            }
        });
    };
    /**
     * @param {?} checkedData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.emitCheckedData = /**
     * @param {?} checkedData
     * @return {?}
     */
    function (checkedData) {
        var _this = this;
        checkedData.checked = !checkedData.checked;
        if (checkedData.checked) {
            if (checkedData.hasOwnProperty(this.childarraykey)) {
                checkedData[this.childarraykey].forEach(function (option) {
                    option.checked = true;
                    if (option.hasOwnProperty(_this.childarraykey)) {
                        _this.setCheckedStatusFromParent(option);
                    }
                });
            }
            this.onTreeNodeChecked.emit(this.data);
        }
        else {
            if (checkedData.hasOwnProperty(this.childarraykey)) {
                checkedData[this.childarraykey].forEach(function (option) {
                    option.checked = false;
                    if (option.hasOwnProperty(_this.childarraykey)) {
                        _this.searchObject(option);
                    }
                });
            }
            this.onTreeNodeChecked.emit(this.data);
        }
    };
    /**
     * @param {?} object
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.searchObject = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var _this = this;
        object[this.childarraykey].forEach(function (childOption) {
            childOption.checked = false;
            if (childOption.hasOwnProperty(_this.childarraykey)) {
                _this.searchObject(childOption);
            }
        });
    };
    /**
     * @param {?} object
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setCheckedStatusFromParent = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var _this = this;
        object[this.childarraykey].forEach(function (childOption) {
            childOption.checked = true;
            if (childOption.hasOwnProperty(_this.childarraykey)) {
                _this.setCheckedStatusFromParent(childOption);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.onTreeNodeCheck = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onTreeNodeChecked.emit(this.data);
    };
    // Method to drag parent with node
    /**
     * @param {?} dragData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.onDragStart = /**
     * @param {?} dragData
     * @return {?}
     */
    function (dragData) {
        dragData.event.dataTransfer.setData('treenodedata', JSON.stringify(dragData.data));
        dragData.event.dataTransfer.effectAllowed = 'copy';
        this.dragData = dragData;
        this.onDrag.emit(dragData);
    };
    /**
     * @param {?} dragOverData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.allowDrop = /**
     * @param {?} dragOverData
     * @return {?}
     */
    function (dragOverData) {
        dragOverData.event.preventDefault();
        if (!this.enabledrop) {
            dragOverData.event.dataTransfer.dropEffect = 'none';
        }
        this.noDragMethod(this.dragData, dragOverData.data, dragOverData.event);
        this.dragover.emit(dragOverData);
    };
    /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.noDragMethod = /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (dragData, node, event) {
        if (!this.acrosstree) {
            if (dragData.data === node || node.leaf === true) {
                event.dataTransfer.dropEffect = 'none';
            }
            else {
                event.target.style.border = '3px dotted green';
            }
        }
        else {
            if (node.leaf === true) {
                event.dataTransfer.dropEffect = 'none';
            }
            else {
                event.target.style.border = '3px dotted green';
            }
        }
        if (dragData.data.hasOwnProperty(this.childarraykey)) {
            this.getDropNode(dragData, node, event);
        }
    };
    /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.getDropNode = /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (dragData, node, event) {
        var _this = this;
        dragData.data[this.childarraykey].forEach(function (child) {
            if (JSON.stringify(child) === JSON.stringify(node) || node.leaf === true) {
                event.dataTransfer.dropEffect = 'none';
            }
            else if (child.hasOwnProperty(_this.childarraykey)) {
                _this.getDropNode(child[_this.childarraykey], node, event);
            }
        });
    };
    /**
     * @param {?} dropData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.drop = /**
     * @param {?} dropData
     * @return {?}
     */
    function (dropData) {
        if (this.enabledrop) {
            dropData.event.target.style.border = '';
            dropData.event.preventDefault();
            if (this.acrosstree === false) {
                this.setDropAcrosstree(dropData);
                if (this.isNode === true) {
                    this.setDropNodeTree(dropData);
                }
            }
            else {
                if (dropData.data.hasOwnProperty(this.childarraykey)) {
                    this.removeNode(dropData);
                    dropData.data[this.childarraykey].push(JSON.parse(dropData.event.dataTransfer.getData('treenodedata')));
                    this.onDrop.emit(dropData);
                }
            }
        }
    };
    // drop method split into 2 other method setDropAcrosstree, setDropNodeTree
    // first method of drop
    /**
     * @param {?} dropData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setDropAcrosstree = /**
     * @param {?} dropData
     * @return {?}
     */
    function (dropData) {
        if (this.dragData.data === dropData.data) {
            this.isNode = false;
        }
        else if (this.dragData.data.hasOwnProperty(this.childarraykey)) {
            this.checkNode(this.dragData, dropData);
        }
    };
    // second method pf drop
    /**
     * @param {?} dropData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.setDropNodeTree = /**
     * @param {?} dropData
     * @return {?}
     */
    function (dropData) {
        if (dropData.data.hasOwnProperty(this.childarraykey)) {
            this.removeNode(dropData);
            dropData.data[this.childarraykey].push(JSON.parse(dropData.event.dataTransfer.getData('treenodedata')));
            this.onDrop.emit(dropData);
        }
    };
    /**
     * @param {?} dragData
     * @param {?} dropData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.checkNode = /**
     * @param {?} dragData
     * @param {?} dropData
     * @return {?}
     */
    function (dragData, dropData) {
        var _this = this;
        this.dragData.data[this.childarraykey].forEach(function (child) {
            if (JSON.stringify(child) === JSON.stringify(dropData.data)) {
                _this.isNode = false;
            }
            else if (child.hasOwnProperty(_this.childarraykey)) {
                _this.checkNode(child, dropData);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.removeNode = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.removeDragNode(this.parentRef, JSON.parse(data.event.dataTransfer.getData('treenodedata')));
    };
    /**
     * @param {?} treeData
     * @param {?} dragNode
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.removeDragNode = /**
     * @param {?} treeData
     * @param {?} dragNode
     * @return {?}
     */
    function (treeData, dragNode) {
        var _this = this;
        treeData.forEach(function (childNode, index) {
            if (JSON.stringify(childNode) === JSON.stringify(dragNode)) {
                treeData.splice(index, 1);
            }
            else if (childNode.hasOwnProperty(_this.childarraykey)) {
                _this.removeDragNode(childNode[_this.childarraykey], dragNode);
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.dragleave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.target.style.border = '';
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.resetFlag = /**
     * @return {?}
     */
    function () {
        if (this.flag) {
            this.flag = false;
            this.setSelectedFlag();
        }
    };
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.loadContextMenu = /**
     * @param {?} rightClickData
     * @return {?}
     */
    function (rightClickData) {
        this.setSelectedFlag();
        this.mouseLocation.left = rightClickData.event.clientX;
        this.mouseLocation.top = rightClickData.event.clientY;
        rightClickData.data['isSelected'] = true;
        this.getContextMenu();
        this.posixUp = this.getListPosition(rightClickData.ref);
        rightClickData.event.preventDefault();
        rightClickData.event.stopPropagation();
        this.rightClickNodeData = rightClickData.data;
        this.contextStyle = this.getContextMenuStyle();
        this.nodeRightClick.emit(rightClickData);
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                NodeData: this.rightClickNodeData,
            };
            this.resetFlag();
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240; // must be same in dropdown.scss
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.flag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.resetFlag();
            if (!_this.flag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioTreeViewComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioTreeViewComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-treeview', template: "\n    <div *ngIf=\"data == null\" style=\"height: 300px;width: 300px;\">\n      <div class=\"spinner\"></div>\n    </div>\n\n    <div class=\"treenode\" *ngFor=\"let node of data\"  >\n      <div #id class=\"treenode-content\" (click)=\"onClick(node)\">\n        <div style=\"white-space:nowrap\">\n          <div class=\"tree-node-label\" *ngIf=\"node[childarraykey] && (node[childarraykey].length>0)\">\n            <em class=\"fa \" [ngClass]=\"{'fa-angle-down':node.expand,'fa-angle-right':!node.expand}\"></em>\n          </div> &nbsp;\n\n          <div class=\"tree-node-label tree-node-label-hover\" [ngClass]=\"{'tree-node-label-selected':node.isSelected ,'tree-node-label-not-selected':node.isSelected=='false'}\"\n            [attr.draggable]=\"enabledrag\" (dragleave)=\"dragleave($event)\" (drop)=\"drop({event:$event,data:node})\" (dragover)=\"allowDrop({event:$event,data:node})\"\n            (dragstart)=\"onDragStart({event:$event,data:node})\" (contextmenu)=\"loadContextMenu({event:$event,data:node,ref:id})\">\n            <div class=\"tree-node-label\" *ngIf=\"enablecheckbox\">\n              <input type=\"checkbox\" [checked]=\"'checked'?node.checked:null\" (click)=\"emitCheckedData(node)\" />\n            </div>\n            <div class=\"tree-node-label\" (click)=\"onNodeClick(node)\">\n              <div class=\"tree-node-label\" *ngIf=\"templates == null\">\n                <div class=\"tree-node-label\" *ngIf=\"node.icon\" [ngClass]=\"node.icon\" aria-hidden=\"true\">\n                </div>\n                <div class=\"tree-node-label\">\n                  {{node[displaykey]}}\n                  <ng-container *ngIf=\"badge && node.badge\">\n                    <span class=\"tree-badge\">{{node.badge}}</span>\n                  </ng-container>\n                </div>\n              </div>\n              <div class=\"tree-node-label\" *ngIf=\"templates != null\">\n                <ng-template [ngTemplateOutlet]=\"templates.treeNodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: { text: node.text } , icon: node.icon,node : node }\">\n                </ng-template>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n      <div class=\"treenode-children\" style=\"display: block;\" *ngIf=\"node.expand && node[childarraykey] && (node[childarraykey].length>0)\">\n        <amexio-treeview [child-array-key]=\"childarraykey\"  [display-key]=\"displaykey\" [enable-drag]=\"enabledrag\" [enable-drop]=\"enabledrop\" [data]=\"node[childarraykey]\" [dragData]=\"dragData\" [parentRef]=\"parentRef\"\n          (onDrag)=onDragStart($event) (onDrop)=drop($event) (nodeClick)=\"onNodeClick($event)\" (dragleave)=\"($event)\" (nodeRightClick)=\"loadContextMenu($event)\"\n          [across-tree]=\"acrosstree\" [templates]=\"templates\" [enable-checkbox]=\"enablecheckbox\" [badge]=\"badge\" (onTreeNodeChecked)=\"this.onTreeNodeCheck($event)\">\n        </amexio-treeview>\n\n      </div>\n    </div>\n\n    <span [ngStyle]=\"contextStyle\">\n      <ul *ngIf=\"flag\" class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n        <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\" [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\"\n          *ngFor=\"let itemConfig of contextmenu\">\n          <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n          <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n          </span>\n        </li>\n      </ul>\n    </span>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioTreeViewComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: CommonDataService },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 }
    ]; };
    AmexioTreeViewComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        displaykey: [{ type: core.Input, args: ['display-key',] }],
        childarraykey: [{ type: core.Input, args: ['child-array-key',] }],
        nodeClick: [{ type: core.Output }],
        enablecheckbox: [{ type: core.Input, args: ['enable-checkbox',] }],
        templates: [{ type: core.Input }],
        enabledrag: [{ type: core.Input, args: ['enable-drag',] }],
        enabledrop: [{ type: core.Input, args: ['enable-drop',] }],
        acrosstree: [{ type: core.Input, args: ['across-tree',] }],
        badge: [{ type: core.Input, args: ['badge',] }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        parentRef: [{ type: core.Input }],
        parentTmp: [{ type: core.ContentChild, args: ['amexioTreeTemplate',] }],
        onTreeNodeChecked: [{ type: core.Output }],
        onDrag: [{ type: core.Output }],
        onDrop: [{ type: core.Output }],
        dragover: [{ type: core.Output }],
        dragData: [{ type: core.Input }],
        nodeRightClick: [{ type: core.Output }],
        rightClick: [{ type: core.Output }]
    };
    return AmexioTreeViewComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TreeDataTableComponent = /** @class */ (function () {
    function TreeDataTableComponent(treeDataTableService) {
        this.treeDataTableService = treeDataTableService;
        /*
           Events
           name : selectedRecord
           datatype : none
           version : none
           default : none
           description : Get selected value Object.
           */
        this.selectedRecord = new core.EventEmitter();
        this.rowSelect = new core.EventEmitter();
        this.columns = [];
        this.mask = true;
    }
    Object.defineProperty(TreeDataTableComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.treeDataTableService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.onResize();
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.createConfig();
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.createConfig = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ columnRefArray = this.columnRef.toArray();
        for (var _i = 0, columnRefArray_1 = columnRefArray; _i < columnRefArray_1.length; _i++) {
            var cr = columnRefArray_1[_i];
            var /** @type {?} */ columnConfig = cr;
            var /** @type {?} */ columnData = void 0;
            if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate != null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    headerTemplate: columnConfig.headerTemplate,
                    width: columnConfig.width,
                    bodyTemplate: columnConfig.bodyTemplate,
                };
            }
            else if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    headerTemplate: columnConfig.headerTemplate,
                };
            }
            else if (columnConfig.bodyTemplate != null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    bodyTemplate: columnConfig.bodyTemplate,
                };
            }
            else if (columnConfig.bodyTemplate == null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    width: columnConfig.width,
                    datatype: columnConfig.datatype,
                };
            }
            this.columns.push(columnData);
        }
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.viewRows = this.getResponseData(this.data);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeDataTableComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var _this = this;
        if (httpResponse) {
            var /** @type {?} */ treedata = this.getResponseData(httpResponse);
            this.viewRows = treedata;
            this.viewRows.forEach(function (row, index) {
                _this.viewRows[index].level = 1;
                _this.viewRows[index].expanded = false;
            });
            this.mask = false;
        }
        else {
            this.viewRows = [];
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeDataTableComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    TreeDataTableComponent.prototype.toogle = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        row.expanded = !row.expanded;
        if (row.expanded) {
            this.addRows(row, index);
        }
        else {
            this.removeRows(row);
        }
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    TreeDataTableComponent.prototype.addRows = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (row.children) {
            for (var /** @type {?} */ i = 0; i < row.children.length; i++) {
                var /** @type {?} */ node = row.children[i];
                if (!row.level) {
                    row.level = 1;
                }
                if (node.children) {
                    node.expanded = false;
                }
                node.level = (row.level + 1);
                this.viewRows.splice(index + (i + 1), 0, node);
            }
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeDataTableComponent.prototype.removeRows = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.children) {
            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                var nc = _a[_i];
                if (this.viewRows) {
                    this.setRemovedRows(nc);
                }
            }
        }
    };
    /**
     * @param {?} nc
     * @return {?}
     */
    TreeDataTableComponent.prototype.setRemovedRows = /**
     * @param {?} nc
     * @return {?}
     */
    function (nc) {
        for (var _i = 0, _a = this.viewRows; _i < _a.length; _i++) {
            var vr = _a[_i];
            if (vr === nc) {
                if (nc.children) {
                    this.removeRows(nc);
                }
                this.viewRows.splice(this.viewRows.indexOf(nc), 1);
            }
        }
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    TreeDataTableComponent.prototype.setSelectedRow = /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    function (rowData, event) {
        this.selectedRecord.emit(rowData);
        this.rowSelect.emit(rowData);
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.height) {
            var /** @type {?} */ h = (window.innerHeight / 100) * this.height;
            if (this.gridHeader && this.gridHeader.nativeElement && this.gridHeader.nativeElement.offsetHeight) {
                h = h - this.gridHeader.nativeElement.offsetHeight;
            }
            if (this.height === 100) {
                h = h - 40;
            }
            this.height = h;
        }
    };
    TreeDataTableComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tree-data-table', template: "\n    <div (window:resize)=\"onResize()\">\n      <div #header class=\"datatable\">\n        <div class=\"datatable-header\">\n          <ng-container *ngFor=\"let cols of columns;let i = index\">\n            <ng-container *ngIf=\"cols.datatype=='string'\">\n              <div class=\"datatable-col\" [ngClass]=\"{'header' : i == 0}\">\n                <ng-container *ngIf=\"cols.headerTemplate\">\n                  <ng-template  [ngTemplateOutlet]=\"cols.headerTemplate\"\n                                [ngTemplateOutletContext]=\"{column:cols ,index: i}\"></ng-template>\n                </ng-container>\n                <ng-container *ngIf=\"!cols.headerTemplate\">\n                  {{cols.text}}\n                </ng-container>\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"cols.datatype=='number'\">\n              <ng-container *ngIf=\"cols.headerTemplate\">\n                <ng-template  [ngTemplateOutlet]=\"cols.headerTemplate\"\n                              [ngTemplateOutletContext]=\"{column:cols ,index: i}\"></ng-template>\n              </ng-container>\n              <ng-container *ngIf=\"!cols.headerTemplate\">\n               <span class=\"float-right\">\n               <div class=\"datatable-col\" [ngClass]=\"{'header' : i == 0}\"> {{cols.text}}</div>\n            </span>\n              </ng-container>\n\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n\n      <div class=\"datatable-height\" [style.height.px]=\"height\">\n        <div class=\"datatable\">\n          <div style=\"height: 300px;\" *ngIf=\"mask\">\n            <div class=\"spinner\"></div>\n          </div>\n          <ng-container *ngIf=\"!mask\">\n            <div class=\"datatable-row\" (click)=\"toogle(row,i)\" *ngFor=\"let row of viewRows;let i=index\"\n            (click)=\"setSelectedRow(row, $event)\">\n              <ng-container *ngFor=\"let cols of columns;let colIndex = index\">\n                <ng-container *ngIf=\"cols.datatype=='string' && !cols?.bodyTemplate\">\n                  <div class=\"datatable-col\" [attr.data-label]=\"cols.text\">\n                    <ng-container *ngIf=\"colIndex == 0\">\n              <span [ngStyle]=\"{'padding-left':(20*row.level)+'px'}\">\n                <ng-container *ngIf=\"!row.expanded && row.children\">\n                  <amexio-data-icon key=\"tree_collapse\"></amexio-data-icon>\n                </ng-container>\n                <ng-container *ngIf=\"row.expanded && row.children\">\n                  <amexio-data-icon key=\"tree_expand\"></amexio-data-icon>\n                </ng-container>\n                 <ng-container *ngIf=\"row[cols.dataindex]!= null && row[cols.dataindex]!= '' ;else elseBlock\">\n                      {{row[cols.dataindex]}}\n                    </ng-container>\n                    <ng-template #elseBlock>\n                      &nbsp;\n                    </ng-template>\n               </span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"colIndex > 0\">\n                      <ng-container *ngIf=\"row[cols.dataindex]!= null && row[cols.dataindex]!= '' ;else elseBlock\">\n                        {{row[cols.dataindex]}}\n                      </ng-container>\n                      <ng-template #elseBlock>\n                        &nbsp;\n                      </ng-template>\n                    </ng-container>\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"cols.datatype=='number' && !cols?.bodyTemplate\">\n                  <div class=\"datatable-col\" [attr.data-label]=\"cols.text\" >\n                    <ng-container *ngIf=\"colIndex == 0\">\n              <span [ngStyle]=\"{'padding-left':(20*row.level)+'px'}\">\n                <ng-container *ngIf=\"!row.expanded && row.children\">\n                  <amexio-data-icon key=\"tree_collapse\"></amexio-data-icon>\n                </ng-container>\n                <ng-container *ngIf=\"row.expanded && row.children\">\n                  <amexio-data-icon key=\"tree_expand\"></amexio-data-icon>\n                </ng-container>\n                 <span class=\"float-right\">\n                    <ng-container *ngIf=\"row[cols.dataindex]!= null;else elseBlock\">\n                      {{row[cols.dataindex]}}\n                    </ng-container>\n                    <ng-template #elseBlock>\n                      &nbsp;\n                    </ng-template>\n                 </span>\n               </span>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"colIndex > 0\">\n               <span class=\"float-right\">\n               <ng-container *ngIf=\"row[cols.dataindex]!= null;else elseBlock\">\n                      {{row[cols.dataindex]}}\n               </ng-container>\n                 <ng-template #elseBlock>\n                      &nbsp;\n                 </ng-template>\n               </span>\n                    </ng-container>\n                  </div>\n\n\n                </ng-container>\n\n                <ng-container *ngIf=\"cols.bodyTemplate\">\n                  <div class=\"datatable-col\" [attr.data-label]=\"cols.text\">\n                    <ng-template  [ngTemplateOutlet]=\"cols.bodyTemplate\"\n                                  [ngTemplateOutletContext]=\"{ $implicit: { text : row[cols.dataindex] }, row: row }\"></ng-template>\n                  </div>\n                </ng-container>\n\n\n\n              </ng-container>\n\n\n            </div>\n          </ng-container>\n\n        </div>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    TreeDataTableComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    TreeDataTableComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        selectedRecord: [{ type: core.Output }],
        height: [{ type: core.Input }],
        gridHeader: [{ type: core.ViewChild, args: ['header', { read: core.ElementRef },] }],
        rowSelect: [{ type: core.Output }],
        columnRef: [{ type: core.ContentChildren, args: [AmexioGridColumnComponent,] }]
    };
    return TreeDataTableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio Accordion
 Component Selector : <amexio-accordion-tab>
 Component Description : Amexio Accordion provides an easy way to organize big forms by grouping the fields in accordion tabs.
*/
var AmexioAccordionTabComponent = /** @class */ (function () {
    function AmexioAccordionTabComponent() {
        /*
        Events
        name : emittedEvent
        datatype :none
        version : none
        default : none
        description : Fires the on accordion pane click event.
        */
        this.emittedEvent = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioAccordionTabComponent.prototype.emitEvent = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.active = !this.active;
            this.emittedEvent.emit(this);
        }
    };
    AmexioAccordionTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-accordion-tab',
                    template: "\n    <button (click)=\"emitEvent()\" class=\"{{isTransparent ? 'accordion-transparent' : 'accordion'}} {{active ? 'active-accordion' : ''}} {{disabled ? 'accordion-disable' : ''}}\">\n      <div style=\"float: left;\" *ngIf=\"leftIcon\">\n        <em class=\"fa {{leftIcon}}\"></em>\n      </div>\n      <ng-container>\n      {{header}}\n        <div style=\"float: right\">\n            <ng-content select=\"amexio-accordion-header\">&nbsp;</ng-content> &nbsp;  \n          <em *ngIf=\"!angleIcon\" class=\"fa\" [ngClass]=\"{'fa-plus' : !active,'fa-minus' : active}\" aria-hidden=\"true\"></em>\n          <em *ngIf=\"angleIcon\" class=\"fa\" [ngClass]=\"{'fa-angle-down' : !active,'fa-angle-up' : active}\" aria-hidden=\"true\"></em>\n        </div>\n      </ng-container>\n\n    </button>\n    <div *ngIf=\"active\" class=\"panel\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioAccordionTabComponent.ctorParameters = function () { return []; };
    AmexioAccordionTabComponent.propDecorators = {
        header: [{ type: core.Input }],
        active: [{ type: core.Input }],
        emittedEvent: [{ type: core.Output }],
        leftIcon: [{ type: core.Input, args: ['left-icon',] }],
        angleIcon: [{ type: core.Input, args: ['angle-icon',] }],
        disabled: [{ type: core.Input, args: ['disabled',] }]
    };
    return AmexioAccordionTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioAccordionComponent = /** @class */ (function () {
    function AmexioAccordionComponent() {
    }
    /**
     * @return {?}
     */
    AmexioAccordionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    AmexioAccordionComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.accordionCollections = this.queryTabs.toArray();
        this.accordionCollections.forEach(function (node) { return node.emittedEvent.subscribe(function (eventdata) { return _this.activateAccordionPane(eventdata); }); });
        this.accordionCollections.forEach(function (node) {
            if (_this.expandAll) {
                node.active = true;
            }
            else if (node.active) {
                node.active = true;
            }
            else {
                node.active = false;
            }
            if (_this.isTransparent) {
                node.isTransparent = true;
            }
            if (_this.angleIcon) {
                node.angleIcon = true;
            }
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioAccordionComponent.prototype.activateAccordionPane = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.accordionCollections.forEach(function (tab) {
            if (tab === node) {
                tab.active = node.active;
            }
            else {
                tab.active = false;
            }
        });
    };
    AmexioAccordionComponent.decorators = [
        { type: core.Component, args: [{ selector: 'amexio-accordion', template: "\n\n  <ng-content></ng-content>\n" },] },
    ];
    /** @nocollapse */
    AmexioAccordionComponent.ctorParameters = function () { return []; };
    AmexioAccordionComponent.propDecorators = {
        expandAll: [{ type: core.Input, args: ['expand-all',] }],
        isTransparent: [{ type: core.Input, args: ['transparent',] }],
        angleIcon: [{ type: core.Input, args: ['angle-icon',] }],
        queryTabs: [{ type: core.ContentChildren, args: [AmexioAccordionTabComponent,] }]
    };
    return AmexioAccordionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioAccordionHeaderComponent = /** @class */ (function () {
    function AmexioAccordionHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AmexioAccordionHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioAccordionHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-accordion-header', template: "\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioAccordionHeaderComponent.ctorParameters = function () { return []; };
    AmexioAccordionHeaderComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioAccordionHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LayoutConstant = {
    'start': 'flex-start',
    'end': 'flex-end',
    'center': 'center',
    'space-between': 'space-between',
    'space-around': 'space-around',
    'space-evenly': 'space-evenly',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioLayoutComponent = /** @class */ (function () {
    function AmexioLayoutComponent() {
        this.orientation = 'horizontal';
        this.border = true;
        this.fit = true;
    }
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setLayoutDefination();
    };
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.setLayoutDefination = /**
     * @return {?}
     */
    function () {
        this.setorientation();
        this.setAlignment();
        this.setBorder();
        this.setFit();
    };
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.setorientation = /**
     * @return {?}
     */
    function () {
        if (this.orientation && this.orientation.toLowerCase() === 'vertical') {
            this.orientationDirection = 'column';
        }
        else {
            this.orientationDirection = 'row';
        }
    };
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.setAlignment = /**
     * @return {?}
     */
    function () {
        if (this.alignment && LayoutConstant[this.alignment.toLowerCase()]) {
            this.justifyContent = LayoutConstant[this.alignment.toLowerCase()];
        }
        else {
            this.justifyContent = 'start';
        }
    };
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.setBorder = /**
     * @return {?}
     */
    function () {
        if (this.border) {
            this.borderstyle = '1px solid #ced4da';
            this.borderboxstyle = '0 2px 2px 0 rgba(0,0,0,.14)';
        }
    };
    /**
     * @return {?}
     */
    AmexioLayoutComponent.prototype.setFit = /**
     * @return {?}
     */
    function () {
        if (this.fit) {
            this.height = '100%';
        }
    };
    AmexioLayoutComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-layout-columns',
                    template: "\n      <ng-content></ng-content>\n    ",
                    styles: ["\n    :host {\n        display: flex;\n    }\n  "],
                },] },
    ];
    AmexioLayoutComponent.propDecorators = {
        orientation: [{ type: core.Input, args: ['orientation',] }],
        alignment: [{ type: core.Input, args: ['alignment',] }],
        border: [{ type: core.Input, args: ['border',] }],
        fit: [{ type: core.Input, args: ['fit',] }],
        orientationDirection: [{ type: core.HostBinding, args: ['style.flex-direction',] }],
        justifyContent: [{ type: core.HostBinding, args: ['style.justify-content',] }],
        borderstyle: [{ type: core.HostBinding, args: ['style.border',] }],
        borderboxstyle: [{ type: core.HostBinding, args: ['style.box-shadow',] }],
        height: [{ type: core.HostBinding, args: ['style.height',] }]
    };
    return AmexioLayoutComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioLayoutItemComponent = /** @class */ (function () {
    function AmexioLayoutItemComponent() {
    }
    /**
     * @return {?}
     */
    AmexioLayoutItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.fit) {
            this.flexgrow = 1;
        }
        if (this.padding) {
            this.lipadding = this.padding;
        }
    };
    AmexioLayoutItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-layout-item',
                    template: "\n        <ng-content></ng-content>\n    ",
                },] },
    ];
    AmexioLayoutItemComponent.propDecorators = {
        fit: [{ type: core.Input, args: ['fit',] }],
        padding: [{ type: core.Input, args: ['padding',] }],
        flexgrow: [{ type: core.HostBinding, args: ['style.flex-grow',] }],
        lipadding: [{ type: core.HostBinding, args: ['style.padding',] }]
    };
    return AmexioLayoutItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioBorderLayoutItemComponent = /** @class */ (function () {
    function AmexioBorderLayoutItemComponent() {
        this.positionClass = 'borderlayout-';
        this.role = this.positionClass;
    }
    /**
     * @return {?}
     */
    AmexioBorderLayoutItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioBorderLayoutItemComponent.prototype.getClassType = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ pos = '';
        if (this.position.toLowerCase() === 'north') {
            pos = 'N';
        }
        else if (this.position.toLowerCase() === 'east') {
            pos = 'E';
        }
        else if (this.position.toLowerCase() === 'center') {
            pos = 'C';
        }
        else if (this.position.toLowerCase() === 'west') {
            pos = 'W';
        }
        else if (this.position.toLowerCase() === 'south') {
            pos = 'S';
        }
        this.positionClass = this.positionClass + pos;
        this.role = this.positionClass;
        return pos;
    };
    AmexioBorderLayoutItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-borderlayout-item',
                    template: "\n    <aside style=\"height:100%;\"><ng-content></ng-content></aside>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioBorderLayoutItemComponent.ctorParameters = function () { return []; };
    AmexioBorderLayoutItemComponent.propDecorators = {
        position: [{ type: core.Input }],
        role: [{ type: core.HostBinding, args: ['attr.class',] }]
    };
    return AmexioBorderLayoutItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 1/4/18.
 */
var AmexioBorderLayoutComponent = /** @class */ (function () {
    function AmexioBorderLayoutComponent() {
        this.borderclass = 'borderlayout-container';
    }
    /**
     * @return {?}
     */
    AmexioBorderLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioBorderLayoutComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.layoutitems = this.layout.toArray();
        this.layoutitems.forEach(function (item) {
            _this.borderclass = _this.borderclass + '-' + item.getClassType();
        });
    };
    AmexioBorderLayoutComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-borderlayout',
                    template: "\n\n    <section [ngClass]=\"borderclass\">\n      <ng-content></ng-content>\n    </section>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioBorderLayoutComponent.ctorParameters = function () { return []; };
    AmexioBorderLayoutComponent.propDecorators = {
        layout: [{ type: core.ContentChildren, args: [AmexioBorderLayoutItemComponent,] }]
    };
    return AmexioBorderLayoutComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by anaghak07 on 6/3/18.
 */
var AmexioBoxComponent = /** @class */ (function () {
    function AmexioBoxComponent() {
        /*
        Properties
        name : padding
        datatype : boolean
        version : 4.1 onwards
        default : false
        description : Padding to all sides
        */
        this.padding = false;
        /*
        Properties
        name : border-dotted
        datatype : boolean
        version : 4.1.8 onwards
        default : false
        description : Dotted border
        */
        this.borderDotted = false;
        /*
        Properties
        name : closable
        datatype : boolean
        version : 4.1.8 onwards
        default : false
        description : closable box
        */
        this.closable = false;
        this.close = true;
    }
    /**
     * @return {?}
     */
    AmexioBoxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.borderColor == null) {
            this.borderColor = 'box-default';
        }
        if (this.borderColor != null && this.bgColor == null) {
            this.bgColor = this.borderColor;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioBoxComponent.prototype.closeBox = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.close = false;
        this.closable = false;
    };
    AmexioBoxComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-box',
                    template: "\n <div class=\"box-content\" *ngIf=\"close\"\n [style.height] = \"height ? height:'none'\"\n [style.width] = \"width ? width:'none'\"\n [style.align] = \"align ? align:'none'\"\n [ngClass]=\"{\n 'box-default': borderColor=='default' || borderColor ==null,\n 'border-topbar': border=='top',\n 'border-bottombar': border =='bottom',\n 'border-rightbar': border =='right',\n 'border-leftbar': border =='left',\n 'border-all' : border =='all',\n 'border-top-bottom' : border =='top-bottom' || border =='bottom-top',\n 'border-right-left' : border =='right-left' || border =='left-right',\n\n 'bg-brown': bgColor=='brown',\n 'bg-red': bgColor=='red',\n 'bg-green': bgColor=='green',\n 'bg-yellow': bgColor=='yellow',\n 'bg-blue': bgColor=='blue',\n 'bg-purple': bgColor=='purple',\n 'bg-theme-color' : bgColor =='theme-color',\n\n 'border-theme-color' : borderColor =='theme-color',\n 'border-red' : borderColor =='red',\n 'border-yellow' : borderColor =='yellow',\n 'border-green' : borderColor =='green',\n 'border-blue' : borderColor =='blue',\n 'border-brown' : borderColor =='brown',\n 'border-purple' : borderColor =='purple',\n 'padding' : padding,\n 'border-dotted' : borderDotted\n  }\" >\n  <span *ngIf=\"closable\" class=\"box-close\">\n  <amexio-layout-icon key=\"tab_close\" (onClick)=\"closeBox($event)\"></amexio-layout-icon>\n  </span>\n   <ng-content></ng-content>\n\n </div>\n ",
                },] },
    ];
    /** @nocollapse */
    AmexioBoxComponent.ctorParameters = function () { return []; };
    AmexioBoxComponent.propDecorators = {
        border: [{ type: core.Input, args: ['border',] }],
        borderColor: [{ type: core.Input, args: ['border-color',] }],
        bgColor: [{ type: core.Input, args: ['background-color',] }],
        padding: [{ type: core.Input, args: ['padding',] }],
        height: [{ type: core.Input, args: ['box-height',] }],
        width: [{ type: core.Input, args: ['box-width',] }],
        borderDotted: [{ type: core.Input, args: ['border-dotted',] }],
        align: [{ type: core.Input, args: ['align',] }],
        closable: [{ type: core.Input, args: ['closable',] }]
    };
    return AmexioBoxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioHeaderComponent = /** @class */ (function () {
    function AmexioHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AmexioHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-header', template: "\n  <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioHeaderComponent.ctorParameters = function () { return []; };
    AmexioHeaderComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 18/12/17.
 */
var AmexioFooterComponent = /** @class */ (function () {
    function AmexioFooterComponent() {
    }
    /**
     * @return {?}
     */
    AmexioFooterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioFooterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-action', template: '<ng-content></ng-content>',
                },] },
    ];
    /** @nocollapse */
    AmexioFooterComponent.ctorParameters = function () { return []; };
    AmexioFooterComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioBodyComponent = /** @class */ (function () {
    function AmexioBodyComponent() {
    }
    /**
     * @return {?}
     */
    AmexioBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioBodyComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-body', template: '<ng-content></ng-content>',
                },] },
    ];
    /** @nocollapse */
    AmexioBodyComponent.ctorParameters = function () { return []; };
    AmexioBodyComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioBodyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/18/17.
 */
/*
Component Name : Amexio card
 Component Selector : <amexio-card>
Component Description : Amexio Card which renders card based on title, body and actions user has configured
*/
var AmexioCardComponent = /** @class */ (function () {
    function AmexioCardComponent(renderer) {
        this.renderer = renderer;
        /*
        Properties
        name : show
        datatype :  boolean
        version : 4.0 onwards
        default : true
        description : User can bind variable to this and hide/unhide card based on requirement..
        */
        this.show = true;
        this.nodeRightClick = new core.EventEmitter();
        this.rightClick = new core.EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.headeralign = 'left';
        this.footeralign = 'right';
    }
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.onResize();
        }, 500);
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // FOR HEADER PADING
        this.headerComponentList = this.amexioHeader.toArray();
        this.headerComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.headerPadding = item.padding;
            }
        });
        // FOR BODY PADDING
        this.bodyComponentList = this.amexioBody.toArray();
        this.bodyComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.bodyPadding = item.padding;
            }
        });
        // FOR FOOTER PADDING
        this.footerComponentList = this.amexioFooter.toArray();
        this.footerComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.footerPadding = item.padding;
            }
        });
    };
    // Calculate body size based on browser height
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.bodyheight) {
            var /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.cardHeader && this.cardHeader.nativeElement && this.cardHeader.nativeElement.offsetHeight) {
                h = h - this.cardHeader.nativeElement.offsetHeight;
            }
            if (this.cardFooter && this.cardFooter.nativeElement && this.cardFooter.nativeElement.offsetHeight) {
                h = h - this.cardFooter.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioCardComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    AmexioCardComponent.prototype.loadContextMenu = /**
     * @param {?} rightClickData
     * @return {?}
     */
    function (rightClickData) {
        this.mouseLocation.left = rightClickData.event.clientX;
        this.mouseLocation.top = rightClickData.event.clientY;
        this.getContextMenu();
        this.posixUp = this.getListPosition(rightClickData.ref);
        rightClickData.event.preventDefault();
        rightClickData.event.stopPropagation();
        this.rightClickNodeData = rightClickData.data;
        this.contextStyle = this.getContextMenuStyle();
        this.nodeRightClick.emit(rightClickData);
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioCardComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                NodeData: this.rightClickNodeData,
            };
            this.flag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.flag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.flag = false;
            if (!_this.flag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioCardComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioCardComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-card',
                    template: "\n  <div  #id  class=\"card-container\" *ngIf=\"show\"  (window:resize)=\"onResize()\"\n  (contextmenu)=\"loadContextMenu({event:$event,ref:id})\">\n    <header #cardHeader  [style.padding]=\"headerPadding\"  class=\"card-header\" *ngIf=\"header\"\n\n            [ngClass]=\"{'flex-start':(headeralign=='left'),'flex-end':(headeralign=='right'),'flex-center':(headeralign=='center')}\">\n      <ng-content select=\"amexio-header\"></ng-content>\n    </header>\n<div class=\"card-body cardbody\" [style.padding]=\"bodyPadding\"\n[ngStyle]=\"{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}\">\n      <ng-content select=\"amexio-body\"></ng-content>\n    </div>\n    <footer  #cardFooter [style.padding]=\"footerPadding\"  class=\"card-footer\" *ngIf=\"footer\"\n            [ngClass]=\"{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}\">\n      <ng-content select=\"amexio-action\"></ng-content>\n    </footer>\n  </div>\n\n  <span *ngIf=\"flag\" [ngStyle]=\"contextStyle\">\n    <ul class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n      <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\"\n      [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\"\n        [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\" *ngFor=\"let itemConfig of contextmenu\">\n        <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n        <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n        </span>\n      </li>\n    </ul>\n  </span>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioCardComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioCardComponent.propDecorators = {
        headeralign: [{ type: core.Input, args: ['header-align',] }],
        header: [{ type: core.Input }],
        footer: [{ type: core.Input }],
        footeralign: [{ type: core.Input, args: ['footer-align',] }],
        show: [{ type: core.Input }],
        height: [{ type: core.Input }],
        minHeight: [{ type: core.Input, args: ['min-height',] }],
        bodyheight: [{ type: core.Input, args: ['body-height',] }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        parentRef: [{ type: core.Input }],
        nodeRightClick: [{ type: core.Output }],
        rightClick: [{ type: core.Output }],
        cardHeader: [{ type: core.ViewChild, args: ['cardHeader', { read: core.ElementRef },] }],
        cardFooter: [{ type: core.ViewChild, args: ['cardFooter', { read: core.ElementRef },] }],
        amexioHeader: [{ type: core.ContentChildren, args: [AmexioHeaderComponent,] }],
        amexioBody: [{ type: core.ContentChildren, args: [AmexioBodyComponent,] }],
        amexioFooter: [{ type: core.ContentChildren, args: [AmexioFooterComponent,] }]
    };
    return AmexioCardComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 8/1/18.
 */
var AmexioColumnComponent = /** @class */ (function () {
    function AmexioColumnComponent() {
        this.role = this.colclass;
    }
    Object.defineProperty(AmexioColumnComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size_;
        },
        /*
        Properties
        name : size
        datatype : any
        version : 4.0 onwards
        default :
        description : Column size*/
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.size_ = value;
            this.colclass = 'flex-col flex-col-' + value;
            this.role = this.colclass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioColumnComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-column', template: "\n\n    <div [ngStyle]=\"{'height':fit ? '100%':''}\">\n        <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioColumnComponent.ctorParameters = function () { return []; };
    AmexioColumnComponent.propDecorators = {
        role: [{ type: core.HostBinding, args: ['attr.class',] }],
        fit: [{ type: core.Input, args: ['fit',] }],
        size: [{ type: core.Input }]
    };
    return AmexioColumnComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioGridLayoutService = /** @class */ (function () {
    function AmexioGridLayoutService() {
        this.layoutData = [];
    }
    /**
     * @param {?} dataLayout
     * @return {?}
     */
    AmexioGridLayoutService.prototype.createLayout = /**
     * @param {?} dataLayout
     * @return {?}
     */
    function (dataLayout) {
        var /** @type {?} */ findStatus = false;
        this.count = dataLayout.count;
        var /** @type {?} */ data = dataLayout.getLayout();
        if (this.layoutData.length <= 0) {
            this.layoutData.push(data);
        }
        else {
            this.layoutData.forEach(function (obj) {
                if (obj.name === data.name) {
                    obj[data.layoutType] = data[data.layoutType];
                    findStatus = true;
                }
            });
            if (!findStatus) {
                this.layoutData.push(data);
            }
        }
    };
    /**
     * @param {?} layoutName
     * @return {?}
     */
    AmexioGridLayoutService.prototype.getLayoutData = /**
     * @param {?} layoutName
     * @return {?}
     */
    function (layoutName) {
        return this.layoutData.find(function (obj) { return obj.name === layoutName; });
    };
    AmexioGridLayoutService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    AmexioGridLayoutService.ctorParameters = function () { return []; };
    return AmexioGridLayoutService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioGridItemComponent = /** @class */ (function () {
    function AmexioGridItemComponent() {
    }
    Object.defineProperty(AmexioGridItemComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this.hostname = this._name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioGridItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.insertStyleSheetRule('.' + this.name + '{ grid-area: ' + this.name + ' } ');
    };
    /**
     * @param {?} ruleText
     * @return {?}
     */
    AmexioGridItemComponent.prototype.insertStyleSheetRule = /**
     * @param {?} ruleText
     * @return {?}
     */
    function (ruleText) {
        var /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            var /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        var /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    };
    AmexioGridItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-grid-item',
                    template: "\n          <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioGridItemComponent.ctorParameters = function () { return []; };
    AmexioGridItemComponent.propDecorators = {
        hostname: [{ type: core.HostBinding, args: ['class',] }],
        name: [{ type: core.Input, args: ['name',] }]
    };
    return AmexioGridItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioGridComponent = /** @class */ (function () {
    function AmexioGridComponent(_gridlayoutService) {
        this._gridlayoutService = _gridlayoutService;
    }
    /**
     * @return {?}
     */
    AmexioGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.colCount = this._gridlayoutService.count;
        this.containerClass = '';
        this.className = '';
        this.cssGenreration(this._gridlayoutService.getLayoutData(this.layout));
    };
    /**
     * @return {?}
     */
    AmexioGridComponent.prototype.getCssAttribute = /**
     * @return {?}
     */
    function () {
        return 'display: grid;' + ' grid-gap: 5px;' + 'grid-template-columns: repeat(' + this.colCount + ', 1fr);';
    };
    /**
     * @param {?} ruleText
     * @return {?}
     */
    AmexioGridComponent.prototype.insertStyleSheetRuleParent = /**
     * @param {?} ruleText
     * @return {?}
     */
    function (ruleText) {
        var /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            var /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        var /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    };
    /**
     * @return {?}
     */
    AmexioGridComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.itemCollection = this.queryItem.toArray();
    };
    /**
     * @param {?} deviceName
     * @return {?}
     */
    AmexioGridComponent.prototype.dataCreation = /**
     * @param {?} deviceName
     * @return {?}
     */
    function (deviceName) {
        var _this = this;
        this.containerClass = '';
        deviceName.forEach(function (ele) {
            _this.containerClass = _this.containerClass + '"' + ele.join(' ') + '"';
        });
        return this.containerClass;
    };
    /**
     * @param {?} layoutData
     * @return {?}
     */
    AmexioGridComponent.prototype.cssGenreration = /**
     * @param {?} layoutData
     * @return {?}
     */
    function (layoutData) {
        this.className = this.className + '' + layoutData.name;
        this.cssGenerationCommonMethod(layoutData, '(max-width: 767px)', 'mobile');
        this.cssGenerationCommonMethod(layoutData, '(min-width: 1025px)', 'desktop');
        this.cssGenerationCommonMethod(layoutData, '(min-width: 768px) and (max-width: 1024px)', 'tab');
    };
    /**
     * @param {?} layoutData
     * @param {?} screenWidth
     * @param {?} deviceType
     * @return {?}
     */
    AmexioGridComponent.prototype.cssGenerationCommonMethod = /**
     * @param {?} layoutData
     * @param {?} screenWidth
     * @param {?} deviceType
     * @return {?}
     */
    function (layoutData, screenWidth, deviceType) {
        this.insertStyleSheetRuleParent('@' + 'media' + screenWidth + '{' + '.' + layoutData.name +
            '{' + this.getCssAttribute() + ' grid-template-areas: ' +
            this.dataCreation(layoutData[deviceType]) + '}' + '}');
    };
    AmexioGridComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-layout-grid',
                    template: "\n    <div [ngClass]=\"className\" >\n          <ng-content select=\"amexio-grid-item\"></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioGridComponent.ctorParameters = function () { return [
        { type: AmexioGridLayoutService }
    ]; };
    AmexioGridComponent.propDecorators = {
        queryItem: [{ type: core.ContentChildren, args: [AmexioGridItemComponent,] }],
        layout: [{ type: core.Input, args: ['layout',] }]
    };
    return AmexioGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioIconLayoutComponent = /** @class */ (function () {
    function AmexioIconLayoutComponent(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioIconLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconClass = this.getIconClass();
    };
    /**
     * @return {?}
     */
    AmexioIconLayoutComponent.prototype.getIconClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.iconLoaderService.iconMappings != null) {
            var /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find(function (obj) { return obj.component === _this.key; });
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioIconLayoutComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    };
    AmexioIconLayoutComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-layout-icon', template: "\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'fa'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"{{customclass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"{{iconClass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\"></i>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'mat'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\">{{customclass}}</i>\n      </ng-container>\n\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\">{{iconClass}}</i>\n      </ng-container>\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioIconLayoutComponent.ctorParameters = function () { return [
        { type: IconLoaderService }
    ]; };
    AmexioIconLayoutComponent.propDecorators = {
        key: [{ type: core.Input }],
        customclass: [{ type: core.Input }],
        onClick: [{ type: core.Output }]
    };
    return AmexioIconLayoutComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 8/1/18.
 */
var AmexioRowComponent = /** @class */ (function () {
    function AmexioRowComponent() {
    }
    /**
     * @return {?}
     */
    AmexioRowComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioRowComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioRowComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-row', template: "\n    <div class=\"flex-row\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioRowComponent.ctorParameters = function () { return []; };
    return AmexioRowComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DeviceQueryService = /** @class */ (function () {
    function DeviceQueryService(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = function (mq) {
            if (common.isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        };
        this.IsTablet = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        };
        this.IsDesktop = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        };
        this.IsPortrait = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        };
        this.IsLandscape = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        };
        this.IsRetina = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        };
        this.browserWindow = function () {
            return window;
        };
    }
    /**********************************************
     METHODS FOR CHECKING TYPE
     **********************************************/
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    DeviceQueryService.prototype.IsPhone = /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    function () {
        if (common.isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    };
    /**********************************************
     EVENT LISTENERS BY TYPE
     **********************************************/
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPhone = /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
            var /** @type {?} */ mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnTablet = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
            var /** @type {?} */ mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnDesktop = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
            var /** @type {?} */ mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPortrait = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
            var /** @type {?} */ mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnLandscape = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && common.isPlatformBrowser(this.platformId)) {
            var /** @type {?} */ mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    DeviceQueryService.prototype.mqlMethod = /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    function (callBack, mql) {
        mql.addListener(function (mql1) {
            if (mql1.matches) {
                callBack(mql);
            }
        });
    };
    DeviceQueryService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    DeviceQueryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
    ]; };
    return DeviceQueryService;
}());

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var isFunction_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;

});

unwrapExports(isFunction_1);

var config$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _enable_super_gross_mode_that_will_cause_bad_things = false;
exports.config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

});

unwrapExports(config$1);

var hostReportError_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
exports.hostReportError = hostReportError;

});

unwrapExports(hostReportError_1);

var Observer = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config$1.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError_1.hostReportError(err);
        }
    },
    complete: function () { }
};

});

unwrapExports(Observer);

var isArray$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

});

unwrapExports(isArray$1);

var isObject_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;

});

unwrapExports(isObject_1);

var errorObject$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorObject = { e: {} };

});

unwrapExports(errorObject$1);

var tryCatch_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject$1.errorObject.e = e;
        return errorObject$1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;

});

unwrapExports(tryCatch_1);

var UnsubscriptionError$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ?
        errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
}
UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
exports.UnsubscriptionError = UnsubscriptionErrorImpl;

});

unwrapExports(UnsubscriptionError$1);

var Subscription_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });






var Subscription = (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        while (_parent) {
            _parent.remove(this);
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject$1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject$1.errorObject.e instanceof UnsubscriptionError$1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject$1.errorObject.e.errors) : [errorObject$1.errorObject.e]);
            }
        }
        if (isArray$1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject$1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject$1.errorObject.e;
                        if (err instanceof UnsubscriptionError$1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError$1.UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function') {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            this._parent = parent;
        }
        else if (!_parents) {
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError$1.UnsubscriptionError) ? err.errors : err); }, []);
}

});

unwrapExports(Subscription_1);

var rxSubscriber$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rxSubscriber = typeof Symbol === 'function'
    ? Symbol('rxSubscriber')
    : '@@rxSubscriber_' + Math.random();
exports.$$rxSubscriber = exports.rxSubscriber;

});

unwrapExports(rxSubscriber$1);

var Subscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        _this._parentSubscription = null;
        switch (arguments.length) {
            case 0:
                _this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber$1.rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        this._parentSubscription = null;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config$1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config$1.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError_1.hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError_1.hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config$1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError_1.hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config$1.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError_1.hostReportError(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
exports.SafeSubscriber = SafeSubscriber;

});

unwrapExports(Subscriber_1);

var canReportError_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof Subscriber_1.Subscriber) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
exports.canReportError = canReportError;

});

unwrapExports(canReportError_1);

var toSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber$1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber$1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;

});

unwrapExports(toSubscriber_1);

var observable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

});

unwrapExports(observable$1);

var noop_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function noop() { }
exports.noop = noop;

});

unwrapExports(noop_1);

var pipe_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;

});

unwrapExports(pipe_1);

var Observable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });





var Observable = (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || (config$1.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (config$1.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError_1.canReportError(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable$1.observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config$1.config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

});

unwrapExports(Observable_1);

var ObjectUnsubscribedError$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
}
ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
exports.ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

});

unwrapExports(ObjectUnsubscribedError$1);

var SubjectSubscription_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;

});

unwrapExports(SubjectSubscription_1);

var Subject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber$1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;

});

unwrapExports(Subject_1);

var refCount_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
exports.refCount = refCount;
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(refCount_1);

var ConnectableObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });





var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(ConnectableObservable_1);

var groupBy_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });




function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
exports.groupBy = groupBy;
var GroupByOperator = (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
var GroupBySubscriber = (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
var GroupDurationSubscriber = (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
var GroupedObservable = (function (_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));

});

unwrapExports(groupBy_1);

var BehaviorSubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;

});

unwrapExports(BehaviorSubject_1);

var Action_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;

});

unwrapExports(Action_1);

var AsyncAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;

});

unwrapExports(AsyncAction_1);

var QueueAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var QueueAction = (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;

});

unwrapExports(QueueAction_1);

var Scheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());
exports.Scheduler = Scheduler;

});

unwrapExports(Scheduler_1);

var AsyncScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler_1.Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;

});

unwrapExports(AsyncScheduler_1);

var QueueScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var QueueScheduler = (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;

});

unwrapExports(QueueScheduler_1);

var queue$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);

});

unwrapExports(queue$1);

var empty_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.EMPTY = new Observable_1.Observable(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
}
exports.empty = empty;
function emptyScheduled(scheduler) {
    return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
exports.emptyScheduled = emptyScheduled;

});

unwrapExports(empty_1);

var isScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;

});

unwrapExports(isScheduler_1);

var subscribeToArray$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeToArray = function (array) { return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
        subscriber.next(array[i]);
    }
    if (!subscriber.closed) {
        subscriber.complete();
    }
}; };

});

unwrapExports(subscribeToArray$1);

var fromArray_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToArray$1.subscribeToArray(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
exports.fromArray = fromArray;

});

unwrapExports(fromArray_1);

var scalar_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function scalar(value) {
    var result = new Observable_1.Observable(function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
exports.scalar = scalar;

});

unwrapExports(scalar_1);

var of_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return empty_1.empty(scheduler);
        case 1:
            return scheduler ? fromArray_1.fromArray(args, scheduler) : scalar_1.scalar(args[0]);
        default:
            return fromArray_1.fromArray(args, scheduler);
    }
}
exports.of = of;

});

unwrapExports(of_1);

var throwError_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
exports.throwError = throwError;
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}

});

unwrapExports(throwError_1);

var Notification_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of_1.of(this.value);
            case 'E':
                return throwError_1.throwError(this.error);
            case 'C':
                return empty_1.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;

});

unwrapExports(Notification_1);

var observeOn_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
var ObserveOnSubscriber = (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
        this.unsubscribe();
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;

});

unwrapExports(observeOn_1);

var ReplaySubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError$1.ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue$1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());

});

unwrapExports(ReplaySubject_1);

var AsyncSubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var AsyncSubject = (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;

});

unwrapExports(AsyncSubject_1);

var Immediate$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
exports.Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};

});

unwrapExports(Immediate$1);

var AsapAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = Immediate$1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            Immediate$1.Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;

});

unwrapExports(AsapAction_1);

var AsapScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;

});

unwrapExports(AsapScheduler_1);

var asap$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);

});

unwrapExports(asap$1);

var async$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);

});

unwrapExports(async$1);

var AnimationFrameAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AnimationFrameAction = (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;

});

unwrapExports(AnimationFrameAction_1);

var AnimationFrameScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AnimationFrameScheduler = (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;

});

unwrapExports(AnimationFrameScheduler_1);

var animationFrame$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);

});

unwrapExports(animationFrame$1);

var VirtualTimeScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var VirtualTimeScheduler = (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = scheduler.index += 1; }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;

});

unwrapExports(VirtualTimeScheduler_1);

var identity_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function identity(x) {
    return x;
}
exports.identity = identity;

});

unwrapExports(identity_1);

var isObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function isObservable(obj) {
    return !!obj && (obj instanceof Observable_1.Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
exports.isObservable = isObservable;

});

unwrapExports(isObservable_1);

var ArgumentOutOfRangeError$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
}
ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

});

unwrapExports(ArgumentOutOfRangeError$1);

var EmptyError$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
}
EmptyErrorImpl.prototype = Object.create(Error.prototype);
exports.EmptyError = EmptyErrorImpl;

});

unwrapExports(EmptyError$1);

var TimeoutError$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function TimeoutErrorImpl() {
    Error.call(this);
    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    return this;
}
TimeoutErrorImpl.prototype = Object.create(Error.prototype);
exports.TimeoutError = TimeoutErrorImpl;

});

unwrapExports(TimeoutError$1);

var map_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
exports.MapOperator = MapOperator;
var MapSubscriber = (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(map_1);

var bindCallback_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });






function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new Observable_1.Observable(function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (canReportError_1.canReportError(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
exports.bindCallback = bindCallback;
function dispatch(state) {
    var _this = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}


});

unwrapExports(bindCallback_1);

var bindNodeCallback_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });






function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new Observable_1.Observable(function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (canReportError_1.canReportError(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
exports.bindNodeCallback = bindNodeCallback;
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}

});

unwrapExports(bindNodeCallback_1);

var OuterSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var OuterSubscriber = (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;

});

unwrapExports(OuterSubscriber_1);

var InnerSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var InnerSubscriber = (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;

});

unwrapExports(InnerSubscriber_1);

var subscribeToPromise$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.subscribeToPromise = function (promise) { return function (subscriber) {
    promise.then(function (value) {
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }, function (err) { return subscriber.error(err); })
        .then(null, hostReportError_1.hostReportError);
    return subscriber;
}; };

});

unwrapExports(subscribeToPromise$1);

var iterator$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = getSymbolIterator();
exports.$$iterator = exports.iterator;

});

unwrapExports(iterator$1);

var subscribeToIterable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.subscribeToIterable = function (iterable) { return function (subscriber) {
    var iterator = iterable[iterator$1.iterator]();
    do {
        var item = iterator.next();
        if (item.done) {
            subscriber.complete();
            break;
        }
        subscriber.next(item.value);
        if (subscriber.closed) {
            break;
        }
    } while (true);
    if (typeof iterator.return === 'function') {
        subscriber.add(function () {
            if (iterator.return) {
                iterator.return();
            }
        });
    }
    return subscriber;
}; };

});

unwrapExports(subscribeToIterable$1);

var subscribeToObservable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.subscribeToObservable = function (obj) { return function (subscriber) {
    var obs = obj[observable$1.observable]();
    if (typeof obs.subscribe !== 'function') {
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    }
    else {
        return obs.subscribe(subscriber);
    }
}; };

});

unwrapExports(subscribeToObservable$1);

var isArrayLike$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

});

unwrapExports(isArrayLike$1);

var isPromise_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;

});

unwrapExports(isPromise_1);

var subscribeTo$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });










exports.subscribeTo = function (result) {
    if (result instanceof Observable_1.Observable) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (result && typeof result[observable$1.observable] === 'function') {
        return subscribeToObservable$1.subscribeToObservable(result);
    }
    else if (isArrayLike$1.isArrayLike(result)) {
        return subscribeToArray$1.subscribeToArray(result);
    }
    else if (isPromise_1.isPromise(result)) {
        return subscribeToPromise$1.subscribeToPromise(result);
    }
    else if (result && typeof result[iterator$1.iterator] === 'function') {
        return subscribeToIterable$1.subscribeToIterable(result);
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

});

unwrapExports(subscribeTo$1);

var subscribeToResult_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
    if (destination === void 0) { destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex); }
    if (destination.closed) {
        return;
    }
    return subscribeTo$1.subscribeTo(result)(destination);
}
exports.subscribeToResult = subscribeToResult;

});

unwrapExports(subscribeToResult_1);

var combineLatest_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });





var NONE = {};
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    if (observables.length === 1 && isArray$1.isArray(observables[0])) {
        observables = observables[0];
    }
    return fromArray_1.fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());
exports.CombineLatestOperator = CombineLatestOperator;
var CombineLatestSubscriber = (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.CombineLatestSubscriber = CombineLatestSubscriber;

});

unwrapExports(combineLatest_1);

var isInteropObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function isInteropObservable(input) {
    return input && typeof input[observable$1.observable] === 'function';
}
exports.isInteropObservable = isInteropObservable;

});

unwrapExports(isInteropObservable_1);

var isIterable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function isIterable(input) {
    return input && typeof input[iterator$1.iterator] === 'function';
}
exports.isIterable = isIterable;

});

unwrapExports(isIterable_1);

var fromPromise_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToPromise$1.subscribeToPromise(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () { return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            }); }));
            return sub;
        });
    }
}
exports.fromPromise = fromPromise;

});

unwrapExports(fromPromise_1);

var fromIterable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToIterable$1.subscribeToIterable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var iterator;
            sub.add(function () {
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[iterator$1.iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
exports.fromIterable = fromIterable;

});

unwrapExports(fromIterable_1);

var fromObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToObservable$1.subscribeToObservable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () {
                var observable = input[observable$1.observable]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
exports.fromObservable = fromObservable;

});

unwrapExports(fromObservable_1);

var from_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });










function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable_1.Observable) {
            return input;
        }
        return new Observable_1.Observable(subscribeTo$1.subscribeTo(input));
    }
    if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
            return fromObservable_1.fromObservable(input, scheduler);
        }
        else if (isPromise_1.isPromise(input)) {
            return fromPromise_1.fromPromise(input, scheduler);
        }
        else if (isArrayLike$1.isArrayLike(input)) {
            return fromArray_1.fromArray(input, scheduler);
        }
        else if (isIterable_1.isIterable(input) || typeof input === 'string') {
            return fromIterable_1.fromIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
exports.from = from;

});

unwrapExports(from_1);

var mergeMap_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });





function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        subscribeToResult_1.subscribeToResult(this, ish, value, index, innerSubscriber);
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;

});

unwrapExports(mergeMap_1);

var mergeAll_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(identity_1.identity, concurrent);
}
exports.mergeAll = mergeAll;

});

unwrapExports(mergeAll_1);

var concatAll_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;

});

unwrapExports(concatAll_1);

var concat_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from_1.from(observables[0]);
    }
    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
}
exports.concat = concat;

});

unwrapExports(concat_1);

var defer_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function defer(observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? from_1.from(input) : empty_1.empty();
        return source.subscribe(subscriber);
    });
}
exports.defer = defer;

});

unwrapExports(defer_1);

var forkJoin_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        resultSelector = sources.pop();
    }
    if (sources.length === 1 && isArray$1.isArray(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    if (resultSelector) {
        return forkJoin(sources).pipe(map_1.map(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
exports.forkJoin = forkJoin;
var ForkJoinSubscriber = (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

});

unwrapExports(forkJoin_1);

var fromEvent_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction_1.isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
exports.fromEvent = fromEvent;
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

});

unwrapExports(fromEvent_1);

var fromEventPattern_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!isFunction_1.isFunction(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
exports.fromEventPattern = fromEventPattern;

});

unwrapExports(fromEventPattern_1);

var generate_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity_1.identity;
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = identity_1.identity;
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new Observable_1.Observable(function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
exports.generate = generate;
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}

});

unwrapExports(generate_1);

var iif_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) { trueResult = empty_1.EMPTY; }
    if (falseResult === void 0) { falseResult = empty_1.EMPTY; }
    return defer_1.defer(function () { return condition() ? trueResult : falseResult; });
}
exports.iif = iif;

});

unwrapExports(iif_1);

var isNumeric_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function isNumeric(val) {
    return !isArray$1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
exports.isNumeric = isNumeric;

});

unwrapExports(isNumeric_1);

var interval_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function interval(period, scheduler) {
    if (period === void 0) { period = 0; }
    if (scheduler === void 0) { scheduler = async$1.async; }
    if (!isNumeric_1.isNumeric(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = async$1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
exports.interval = interval;
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}

});

unwrapExports(interval_1);

var merge_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));
}
exports.merge = merge;

});

unwrapExports(merge_1);

var never_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.NEVER = new Observable_1.Observable(noop_1.noop);
function never() {
    return exports.NEVER;
}
exports.never = never;

});

unwrapExports(never_1);

var onErrorResumeNext_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && isArray$1.isArray(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new Observable_1.Observable(function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return from_1.from(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
exports.onErrorResumeNext = onErrorResumeNext;

});

unwrapExports(onErrorResumeNext_1);

var pairs_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


function pairs(obj, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new Subscription_1.Subscription();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
exports.pairs = pairs;
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
exports.dispatch = dispatch;

});

unwrapExports(pairs_1);

var race_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });




function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1) {
        if (isArray$1.isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return fromArray_1.fromArray(observables, undefined).lift(new RaceOperator());
}
exports.race = race;
var RaceOperator = (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
exports.RaceOperator = RaceOperator;
var RaceSubscriber = (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.RaceSubscriber = RaceSubscriber;

});

unwrapExports(race_1);

var range_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function range(start, count, scheduler) {
    if (start === void 0) { start = 0; }
    if (count === void 0) { count = 0; }
    return new Observable_1.Observable(function (subscriber) {
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
exports.range = range;
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
exports.dispatch = dispatch;

});

unwrapExports(range_1);

var timer_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    var period = -1;
    if (isNumeric_1.isNumeric(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (isScheduler_1.isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!isScheduler_1.isScheduler(scheduler)) {
        scheduler = async$1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        var due = isNumeric_1.isNumeric(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
exports.timer = timer;
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}

});

unwrapExports(timer_1);

var using_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function using(resourceFactory, observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? from_1.from(result) : empty_1.EMPTY;
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
exports.using = using;

});

unwrapExports(using_1);

var zip_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
}
exports.zip = zip;
var ZipOperator = (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());
exports.ZipOperator = ZipOperator;
var ZipSubscriber = (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) { values = Object.create(null); }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray$1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator$1.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator$1.iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        this.unsubscribe();
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                var destination = this.destination;
                destination.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--;
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator$1.iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
var ZipBufferIterator = (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator$1.iterator] = function () {
        return this;
    };
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));

});

unwrapExports(zip_1);

var rxjs = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.Observable = Observable_1.Observable;

exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;

exports.GroupedObservable = groupBy_1.GroupedObservable;

exports.observable = observable$1.observable;

exports.Subject = Subject_1.Subject;

exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;

exports.ReplaySubject = ReplaySubject_1.ReplaySubject;

exports.AsyncSubject = AsyncSubject_1.AsyncSubject;

exports.asapScheduler = asap$1.asap;

exports.asyncScheduler = async$1.async;

exports.queueScheduler = queue$1.queue;

exports.animationFrameScheduler = animationFrame$1.animationFrame;

exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
exports.VirtualAction = VirtualTimeScheduler_1.VirtualAction;

exports.Scheduler = Scheduler_1.Scheduler;

exports.Subscription = Subscription_1.Subscription;

exports.Subscriber = Subscriber_1.Subscriber;

exports.Notification = Notification_1.Notification;

exports.pipe = pipe_1.pipe;

exports.noop = noop_1.noop;

exports.identity = identity_1.identity;

exports.isObservable = isObservable_1.isObservable;

exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError$1.ArgumentOutOfRangeError;

exports.EmptyError = EmptyError$1.EmptyError;

exports.ObjectUnsubscribedError = ObjectUnsubscribedError$1.ObjectUnsubscribedError;

exports.UnsubscriptionError = UnsubscriptionError$1.UnsubscriptionError;

exports.TimeoutError = TimeoutError$1.TimeoutError;

exports.bindCallback = bindCallback_1.bindCallback;

exports.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;

exports.combineLatest = combineLatest_1.combineLatest;

exports.concat = concat_1.concat;

exports.defer = defer_1.defer;

exports.empty = empty_1.empty;

exports.forkJoin = forkJoin_1.forkJoin;

exports.from = from_1.from;

exports.fromEvent = fromEvent_1.fromEvent;

exports.fromEventPattern = fromEventPattern_1.fromEventPattern;

exports.generate = generate_1.generate;

exports.iif = iif_1.iif;

exports.interval = interval_1.interval;

exports.merge = merge_1.merge;

exports.never = never_1.never;

exports.of = of_1.of;

exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;

exports.pairs = pairs_1.pairs;

exports.race = race_1.race;

exports.range = range_1.range;

exports.throwError = throwError_1.throwError;

exports.timer = timer_1.timer;

exports.using = using_1.using;

exports.zip = zip_1.zip;
var empty_2 = empty_1;
exports.EMPTY = empty_2.EMPTY;
var never_2 = never_1;
exports.NEVER = never_2.NEVER;

exports.config = config$1.config;

});

unwrapExports(rxjs);
var rxjs_1 = rxjs.Observable;
var rxjs_5 = rxjs.Subject;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AccordionService = /** @class */ (function () {
    function AccordionService() {
        this.subject = new rxjs_5();
    }
    /**
     * @param {?} data
     * @param {?} parent
     * @return {?}
     */
    AccordionService.prototype.onClickEvent = /**
     * @param {?} data
     * @param {?} parent
     * @return {?}
     */
    function (data, parent) {
        this.subject.next({ data: data, parent: parent });
    };
    /**
     * @return {?}
     */
    AccordionService.prototype.clearEvents = /**
     * @return {?}
     */
    function () {
        this.subject.next();
    };
    /**
     * @return {?}
     */
    AccordionService.prototype.getEvents = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    AccordionService.decorators = [
        { type: core.Injectable },
    ];
    return AccordionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 27/11/17.
 */
var LAYOUT_COMPONENTS = [
    AmexioRowComponent,
    AmexioColumnComponent,
    AmexioGridComponent,
    AmexioGridItemComponent,
    AmexioBorderLayoutItemComponent,
    AmexioBorderLayoutComponent,
    AmexioCardComponent,
    AmexioBoxComponent,
    AmexioAccordionTabComponent,
    AmexioAccordionComponent,
    AmexioAccordionHeaderComponent,
    AmexioIconLayoutComponent,
    AmexioLayoutComponent,
    AmexioLayoutItemComponent,
];
var AmexioLayoutModule = /** @class */ (function () {
    function AmexioLayoutModule() {
    }
    /**
     * @return {?}
     */
    AmexioLayoutModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioLayoutModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService, AmexioGridLayoutService],
        };
    };
    AmexioLayoutModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        HttpClientModule,
                    ],
                    exports: LAYOUT_COMPONENTS,
                    declarations: LAYOUT_COMPONENTS,
                    providers: [CommonDataService, DeviceQueryService, IconLoaderService, AmexioGridLayoutService],
                },] },
    ];
    return AmexioLayoutModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio Carousel
 Component Selector : <[amexioTemplate]>
 Component Description : Amexio CarouselView displays a collection of
 images or other content in a horizontal layout with built-in navigation between the items.

*/
var AmexioTemplateDirective = /** @class */ (function () {
    function AmexioTemplateDirective(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    AmexioTemplateDirective.prototype.getType = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    AmexioTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[amexioTemplate]',
                },] },
    ];
    /** @nocollapse */
    AmexioTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef }
    ]; };
    AmexioTemplateDirective.propDecorators = {
        type: [{ type: core.Input }],
        name: [{ type: core.Input, args: ['amexioTemplate',] }]
    };
    return AmexioTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 28/12/17.
 */
var AmexioCarouselComponent = /** @class */ (function () {
    function AmexioCarouselComponent() {
    }
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.startTimeInterval();
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.templates.forEach(function (item) {
            _this.itemTemplate = item.template;
        });
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.scrollData = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ nxt = this.tabs.nativeElement;
        nxt.scrollLeft = nxt.scrollLeft + 200;
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ prev = this.tabs.nativeElement;
        prev.scrollLeft = prev.scrollLeft - 200;
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.shuffle = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.startTimeInterval = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.shuffleinterval != null) {
            this.timeInterval = setInterval(function () {
                var /** @type {?} */ carouselItemPosix = _this.tabs.nativeElement;
                if (!((carouselItemPosix.scrollWidth - carouselItemPosix.offsetWidth - carouselItemPosix.scrollLeft) <= 0)) {
                    // go next
                    carouselItemPosix.scrollLeft = carouselItemPosix.scrollLeft + 200;
                }
                else if (carouselItemPosix.scrollLeft > 0) {
                    // go previous
                    carouselItemPosix.scrollLeft = carouselItemPosix.scrollLeft - 200;
                }
            }, this.shuffleinterval);
        }
    };
    /**
     * @return {?}
     */
    AmexioCarouselComponent.prototype.stopTimeInterval = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.timeInterval);
    };
    AmexioCarouselComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-carousel', template: "\n    <h4>{{header}}</h4>\n    <div class=\"tabwrapper\">\n      <div class=\"carouselnavigation float-left\" (click)=\"previous()\">\n        <amexio-pane-icon key=\"carousel_previous\"></amexio-pane-icon>\n      </div>\n      <div class=\"carouselnavigation float-right\" (click)=\"next()\">\n        <amexio-pane-icon key=\"carousel_next\"></amexio-pane-icon>\n      </div>\n      <ul #tab class=\"tab\">\n        <li class=\"tablistitems\" *ngFor=\"let item of data\" (mouseover)=\"stopTimeInterval($event)\"\n            (mouseleave)=\"startTimeInterval($event)\">\n          <ng-template [amexioTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></ng-template>\n        </li>\n      </ul>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioCarouselComponent.ctorParameters = function () { return []; };
    AmexioCarouselComponent.propDecorators = {
        header: [{ type: core.Input }],
        data: [{ type: core.Input }],
        shuffleinterval: [{ type: core.Input, args: ['shuffle-interval',] }],
        templates: [{ type: core.ContentChildren, args: [AmexioTemplateDirective,] }],
        tabs: [{ type: core.ViewChild, args: ['tab', { read: core.ElementRef },] }]
    };
    return AmexioCarouselComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioTemplateWrapperDirective = /** @class */ (function () {
    function AmexioTemplateWrapperDirective(viewContainer) {
        this.viewContainer = viewContainer;
    }
    /**
     * @return {?}
     */
    AmexioTemplateWrapperDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.render();
    };
    Object.defineProperty(AmexioTemplateWrapperDirective.prototype, "item", {
        /*
     Properties
     name : get item
     datatype :   any
     version : 4.0 onwards
     default : none
     description : gets the carousel item
     */
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this._item = item;
            if (this.view) {
                this.view.destroy();
                this.render();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTemplateWrapperDirective.prototype.render = /**
     * @return {?}
     */
    function () {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef, {
            $implicit: this.item, index: this.index,
        });
    };
    /**
     * @return {?}
     */
    AmexioTemplateWrapperDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.view.destroy();
    };
    AmexioTemplateWrapperDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[amexioTemplateWrapper]',
                },] },
    ];
    /** @nocollapse */
    AmexioTemplateWrapperDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef }
    ]; };
    AmexioTemplateWrapperDirective.propDecorators = {
        index: [{ type: core.Input }],
        templateRef: [{ type: core.Input, args: ['amexioTemplateWrapper',] }],
        item: [{ type: core.Input }]
    };
    return AmexioTemplateWrapperDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by dattaram on 23/1/18.
 */
var AmexiodialoguePaneComponent = /** @class */ (function () {
    function AmexiodialoguePaneComponent(renderer) {
        this.renderer = renderer;
        /*
           Properties
           name : button-size
           datatype :  string
           version : 4.2 onwards
           default :
           description : Different Sizes of Buttons availabe : large, default, small & xsmall
           */
        this.buttonsize = 'large' || 'small' || 'default' || 'xsmall';
        this.showChange = new core.EventEmitter();
        /*
           Events
           name : actionStatus
           datatype :  none
           version : none
           default : none
           description : Fire when click on yes or no button
           */
        this.actionStatus = new core.EventEmitter();
        /*
           Events
           name : close
           datatype :  none
           version : none
           default : none
           description : Fire when user close dialogue
           */
        this.close = new core.EventEmitter();
        this.value = 0;
        this.closable = true;
        this.secondaryactionlabel = 'Cancel';
        this.primaryactionlabel = 'Ok';
        this.custom = false;
        this.buttonsize = 'default';
        this.buttontype = 'theme-color';
        this.closeonescape = true;
    }
    /**
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.showdialogue) {
            this.show = this.showdialogue;
        }
        if (this.footeralign == null) {
            this.footeralign = 'right';
        }
        if (this.contentalign == null || this.contentalign === '') {
            this.contentalign = 'center';
        }
        if (this.type == null) {
            this.type = 'confirm';
        }
        this.defaultStyle = this.getDefaultStyle();
        this.buttontype = this.getStyle();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['showdialogue']) {
            this.show = changes["showdialogue"].currentValue;
            if (this.show && this.closeonescape) {
                this.globalListenFunc = this.renderer.listen('document', 'keyup.esc', function (e) {
                    _this.showdialogue = false;
                    _this.show = false;
                    _this.showChange.emit(false);
                });
            }
            else if (this.globalListenFunc) {
                this.globalListenFunc();
            }
        }
    };
    /**
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        if (this.closable) {
            this.showdialogue = false;
            this.show = false;
            this.showChange.emit(false);
            this.close.emit(false);
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.getStatus = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        this.onCloseClick();
        this.actionStatus.emit(v);
    };
    /**
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.getDefaultStyle = /**
     * @return {?}
     */
    function () {
        if (this.materialDesign) {
            return 'transparent';
        }
        else {
            return 'defualt';
        }
    };
    /**
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.getStyle = /**
     * @return {?}
     */
    function () {
        if (this.materialDesign) {
            this.buttontype = 'transparent';
            return this.buttontype;
        }
        else {
            return this.buttontype;
        }
    };
    /**
     * @return {?}
     */
    AmexiodialoguePaneComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    };
    AmexiodialoguePaneComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dialogue', template: "\n    <div class=\"root-window\"\n         [ngStyle]=\"{'display' : show  ? 'block' : 'none'}\">\n      <div class=\"dialogue-sm\">\n        <div class=\"dialogue-content\">\n          <header [ngClass]=\"{ 'dialogue-material-design':materialDesign ,'dialogue-header':!materialDesign }\"\n          >\n            <div class=\"dialogue-table\">\n              <div class=\"tablerow\">\n                <div class=\"tablecol\">\n                  {{title}}\n                </div>\n                <div class=\"tablecol float-right\">\n                  <div *ngIf=\"closable\" class=\"icon-style\">\n                    <amexio-pane-icon [key]=\"'window_close'\" (onClick)=\"onCloseClick()\"></amexio-pane-icon>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </header>\n          <div class=\"dialogue-middle\" [ngStyle]=\"{'text-align':custom ? contentalign :'center'}\">\n            <span class=\"dialogue-icon\">\n              <span\n                [ngClass]=\"{'dialogue-success': messagetype  == 'help','dialogue-danger':messagetype  == 'error',\n                'dialogue-warning': messagetype  == 'warning'}\"\n                *ngIf=\"messagetype  || messagetype  != '' \">\n                <amexio-pane-icon [key]=\"'window-msgtype-'+ messagetype \"></amexio-pane-icon>\n              </span>\n               <ng-container *ngIf=\"!custom\">\n                 <span class=\"dialogue-message\">\n                        {{message}}\n                 </span>\n            </ng-container>\n            </span>\n            <ng-container *ngIf=\"custom\">\n              <ng-content select=\"amexio-body\"></ng-content>\n            </ng-container>\n\n          </div>\n          <footer *ngIf=\"custom\" class=\"dialogue-footer\"\n                  [ngClass]=\"{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}\">\n            <ng-content select=\"amexio-action\"></ng-content>\n          </footer>\n\n          <footer *ngIf=\"!custom\" class=\"dialogue-footer\"\n                  [ngClass]=\"{'dialogue-material-design-footer':materialDesign ,\n                  'dialogue-footer':!materialDesign, 'flex-start':(footeralign=='left'),\n                  'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}\">\n            <amexio-button *ngIf=\"type =='confirm'\"  [size]=\"buttonsize\" [label]=\"secondaryactionlabel\"\n            [type]=\"defaultStyle\" (onClick)=\"getStatus('cancel')\"></amexio-button>\n            <div  class=\"custom-btn\">\n              <amexio-button *ngIf=\"type =='confirm' || type == 'alert'\"   [size]=\"buttonsize\"\n              [label]=\"primaryactionlabel\"\n                             [ngStyle]=\"{'color':materialDesign ? 'blue':'white'}\"\n                             [type]=\"buttontype\" (onClick)=\"getStatus('ok')\">\n                             </amexio-button>\n            </div>\n\n          </footer>\n        </div>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexiodialoguePaneComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexiodialoguePaneComponent.propDecorators = {
        closeonescape: [{ type: core.Input, args: ['close-on-escape',] }],
        buttontype: [{ type: core.Input, args: ['button-type',] }],
        buttonsize: [{ type: core.Input, args: ['button-size',] }],
        footeralign: [{ type: core.Input, args: ['footer-align',] }],
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        showdialogue: [{ type: core.Input, args: ['show-dialogue',] }],
        show: [{ type: core.Input }],
        showChange: [{ type: core.Output }],
        closable: [{ type: core.Input }],
        title: [{ type: core.Input }],
        message: [{ type: core.Input }],
        custom: [{ type: core.Input }],
        type: [{ type: core.Input }],
        primaryactionlabel: [{ type: core.Input, args: ['primary-action-label',] }],
        secondaryactionlabel: [{ type: core.Input, args: ['secondary-action-label',] }],
        messagetype: [{ type: core.Input, args: ['message-type',] }],
        materialDesign: [{ type: core.Input, args: ['material-design',] }],
        actionStatus: [{ type: core.Output }],
        close: [{ type: core.Output }]
    };
    return AmexiodialoguePaneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 12/12/17.
 */
var AmexioFieldSetComponent = /** @class */ (function () {
    function AmexioFieldSetComponent() {
    }
    /**
     * @return {?}
     */
    AmexioFieldSetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.collapsible) {
            this.isActive = true;
        }
    };
    /**
     * @return {?}
     */
    AmexioFieldSetComponent.prototype.onLegendClick = /**
     * @return {?}
     */
    function () {
        if (this.collapsible) {
            this.isActive = !this.isActive;
        }
    };
    AmexioFieldSetComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-fieldset',
                    template: "\n    <fieldset>\n      <legend *ngIf=\"(title && title.length>0) || collapsible \" class=\"collapsible-legend\" (click)=\"onLegendClick()\">\n\n          <ng-container *ngIf=\"!collapsible\">\n            {{title}}\n          </ng-container>\n\n          <ng-container *ngIf=\"collapsible && !isActive\">\n            <amexio-pane-icon style=\"padding-right:5px\" key=\"fieldset_expand\"></amexio-pane-icon>{{title}}\n          </ng-container>\n\n          <ng-container *ngIf=\"collapsible && isActive\">\n            <amexio-pane-icon style=\"padding-right:5px\" key=\"fieldset_collpase\"></amexio-pane-icon>{{title}}\n          </ng-container>\n\n      </legend>\n      <div class=\"collapsible-fieldset\" [ngClass]=\"{'active' : isActive}\">\n        <ng-content></ng-content>\n      </div>\n    </fieldset>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFieldSetComponent.ctorParameters = function () { return []; };
    AmexioFieldSetComponent.propDecorators = {
        collapsible: [{ type: core.Input }],
        title: [{ type: core.Input }]
    };
    return AmexioFieldSetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENT_CLASS_MAP = {
    primary: 'btn-primary-badge',
    secondary: 'btn-secondary-badge',
};
var AmexioButtonComponent = /** @class */ (function () {
    // THIS METHOD IS USED FOR ADDING CSS CLASS DYNAMICALLY
    function AmexioButtonComponent() {
        /*
          Events
          name : onClick
          datatype :  none
          version : none
          default : none
          description : Fire when button click
          */
        this.onClick = new core.EventEmitter();
        this.badgeCssClass = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioButtonComponent.prototype.buttonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            this.onClick.emit(event);
        }
    };
    /**
     * @return {?}
     */
    AmexioButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.badgeCssClass = this.badgeClass();
    };
    /**
     * @return {?}
     */
    AmexioButtonComponent.prototype.badgeClass = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ className = '';
        if (this.type === 'primary' || this.type === 'theme-color') {
            className = 'btn-primary-badge';
        }
        if (this.type === 'secondary' || this.type === 'theme-backgroundcolor') {
            className = 'btn-secondary-badge';
        }
        if (this.type === 'success' || this.type === 'green') {
            className = 'btn-success-badge';
        }
        if (this.type === 'danger' || this.type === 'red') {
            className = 'btn-danger-badge';
        }
        if (this.type === 'warning' || this.type === 'yellow') {
            className = 'btn-warning-badge';
        }
        if (this.type === 'transparent') {
            className = 'btn-transparent-badge';
        }
        return className;
    };
    // THIS METHOD SET DISABLED PROPERTY FOR BUTTON
    /**
     * @param {?} disabled
     * @return {?}
     */
    AmexioButtonComponent.prototype.setDisabled = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    AmexioButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-button',
                    template: "\n    <button class=\"button\" [ngStyle]=\"{'cursor': disabled ? 'not-allowed':'pointer'}\" ng-disabled=\"disabled ? true: null\" [attr.title]=\"tooltip\" \n    [ngClass]=\"{'button-default': size=='default'\n            || size ==null,\n            'button-small': size=='small',\n            'button-large' : size=='large',\n            'button-block': block==true ,\n            'button-primary' : type == 'primary' || type == 'theme-color' ,\n            'button-secondary' : type == 'secondary' || type == 'theme-backgroundcolor',\n            'button-success' : type == 'success' || type == 'green',\n            'button-danger' : type=='danger' || type == 'red',\n            'button-warning' : type=='warning' || type == 'yellow',\n            'button-transparent' : type=='transparent',\n            'disabled' : disabled }\" (click)=\"buttonClick($event)\">\n            <span class=\"button-text\">\n              <span style=\"padding-right: 5px;\" *ngIf=\"icon\">\n                <amexio-form-icon [customclass]=\"icon\" >\n                </amexio-form-icon>\n              </span>\n              <span style=\"padding-right: 5px;\" *ngIf=\"loading\">\n                <amexio-form-icon key=\"button-loading-icon\"></amexio-form-icon>\n              </span>\n              {{label}}\n              <ng-container *ngIf=\"badge\">\n                <span [ngClass]=\"badgeCssClass\" >{{badge}}</span> \n             </ng-container>\n            </span>\n      \n    </button>\n  ",
                    styles: ["\n\n  "],
                },] },
    ];
    /** @nocollapse */
    AmexioButtonComponent.ctorParameters = function () { return []; };
    AmexioButtonComponent.propDecorators = {
        label: [{ type: core.Input }],
        badge: [{ type: core.Input, args: ['badge',] }],
        icon: [{ type: core.Input }],
        type: [{ type: core.Input }],
        tooltip: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        formbind: [{ type: core.Input, args: ['form-bind',] }],
        size: [{ type: core.Input }],
        loading: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        block: [{ type: core.Input }]
    };
    return AmexioButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioButtonGroupComponent = /** @class */ (function () {
    function AmexioButtonGroupComponent() {
        /* for internal use*/
        this._buttonGroupLocalData = [];
        this.getButton = new core.EventEmitter();
        this.buttons = [];
    }
    Object.defineProperty(AmexioButtonGroupComponent.prototype, "buttonGroupLocalData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._buttonGroupLocalData;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._buttonGroupLocalData = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.buttonGroupPreviewData) !== JSON.stringify(this.buttonGroupLocalData)) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.buttons = this.buttonGroupLocalData;
            this.setButtonSizes(this.buttons);
        }
    };
    /**
     * @param {?} change
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.ngOnChanges = /**
     * @param {?} change
     * @return {?}
     */
    function (change) {
        if (change["size"] && !change["size"].isFirstChange()) {
            this.updateButtonSizes(change["size"]);
        }
    };
    /**
     * @param {?} clickEvent
     * @param {?} btnObj
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.buttonGroupClick = /**
     * @param {?} clickEvent
     * @param {?} btnObj
     * @return {?}
     */
    function (clickEvent, btnObj) {
        if (this.buttonGroupLocalData || this.buttonGroupLocalData.length > 0) {
            this.getButton.emit({ event: clickEvent, buttonObject: btnObj });
        }
        else {
            btnObj.onClick.emit(clickEvent);
        }
    };
    /**
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.buttons = this.buttonGroupLocalData;
        }
        else {
            this.buttons = this.btns.toArray();
            this.addBadgeCssClass();
        }
        this.setButtonSizes(this.buttons);
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.addBadgeCssClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.buttons.forEach(function (btn) {
            btn.badgeCssClass = _this.badgeClass(btn);
        });
    };
    /**
     * @param {?} button
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.badgeClass = /**
     * @param {?} button
     * @return {?}
     */
    function (button) {
        var /** @type {?} */ btnStyleClass = '';
        switch (button.type) {
            case 'primary': {
                return 'btn-group-primary-badge';
            }
            case 'theme-color': {
                return 'btn-group-primary-badge';
            }
            case 'secondary': {
                return 'btn-group-secondary-badge';
            }
            case 'theme-backgroundcolor': {
                return 'btn-group-secondary-badge';
            }
            case 'success': {
                return 'btn-group-success-badge';
            }
            case 'green': {
                return 'btn-group-success-badge';
            }
        }
        btnStyleClass = this.badgeMoreClass(button);
        return btnStyleClass;
    };
    /**
     * @param {?} btnArray
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.setButtonSizes = /**
     * @param {?} btnArray
     * @return {?}
     */
    function (btnArray) {
        var _this = this;
        if (btnArray.length > 0) {
            btnArray.forEach(function (btn) {
                btn.size = _this.size;
            });
        }
    };
    /**
     * @param {?} button
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.badgeMoreClass = /**
     * @param {?} button
     * @return {?}
     */
    function (button) {
        var /** @type {?} */ className = '';
        if (button.type === 'danger' || button.type === 'red') {
            className = 'btn-group-danger-badge';
        }
        if (button.type === 'warning' || button.type === 'yellow') {
            className = 'btn-group-warning-badge';
        }
        if (button.type === 'transparent') {
            className = 'btn-group-transparent-badge';
        }
        return className;
    };
    /**
     * @param {?} size
     * @return {?}
     */
    AmexioButtonGroupComponent.prototype.updateButtonSizes = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        this.buttons.forEach(function (btn) {
            btn.size = size;
        });
    };
    AmexioButtonGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-btn-group',
                    template: "\n    <div class=\"btn-group\">\n        <ng-container *ngFor=\"let button of buttons\">\n            <button [attr.disabled]=\"button.disabled ? true: null\" [attr.title]=\"button.tooltip\" (click)=\"buttonGroupClick($event,button)\" [ngClass]=\"{'button-default': button.size=='default' || button.size ==null,\n        'button-small': button.size=='small',\n        'button-large' : button.size=='large',\n        'button-primary' : button.type == 'primary' || button.type == 'theme-color',\n        'button-secondary' : button.type == 'secondary' || button.type == null ||button.type == 'theme-backgroundcolor' ,\n        'button-success' : button.type == 'success' || button.type == 'green',\n        'button-danger' : button.type=='danger'|| button.type == 'red',\n        'button-warning' : button.type=='warning' || button.type == 'yellow',\n        'button-transparent' : button.type=='transparent',\n        'disabled' : button.disabled}\">\n          <ng-container *ngIf=\"button.icon!=null\">\n            <amexio-form-icon style=\"padding-right: 5px;\" [customclass]=\"button.icon\"></amexio-form-icon>\n          </ng-container>\n\n          {{button.label}} \n          <ng-container *ngIf=\"button.badge\">\n            <span [ngClass]=\"button.badgeCssClass\" >{{button.badge}}</span> \n         </ng-container>\n        </button>\n        </ng-container>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioButtonGroupComponent.ctorParameters = function () { return []; };
    AmexioButtonGroupComponent.propDecorators = {
        size: [{ type: core.Input }],
        buttonGroupLocalData: [{ type: core.Input, args: ['buttonGroupLocalData',] }],
        badge: [{ type: core.Input, args: ['badge',] }],
        getButton: [{ type: core.Output }],
        btns: [{ type: core.ContentChildren, args: [AmexioButtonComponent,] }]
    };
    return AmexioButtonGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormActionComponent = /** @class */ (function () {
    function AmexioFormActionComponent() {
        this.buttons = [];
    }
    /**
     * @return {?}
     */
    AmexioFormActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioFormActionComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.btns.length > 0) {
            this.buttons = this.btns.toArray();
        }
        else if (this.btngrp.length > 0) {
            this.buttons = this.btngrp.toArray()[0].buttons;
        }
    };
    AmexioFormActionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-form-action', template: '<ng-content></ng-content>',
                },] },
    ];
    /** @nocollapse */
    AmexioFormActionComponent.ctorParameters = function () { return []; };
    AmexioFormActionComponent.propDecorators = {
        padding: [{ type: core.Input }],
        btns: [{ type: core.ContentChildren, args: [AmexioButtonComponent,] }],
        btngrp: [{ type: core.ContentChildren, args: [AmexioButtonGroupComponent,] }]
    };
    return AmexioFormActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormBodyComponent = /** @class */ (function () {
    function AmexioFormBodyComponent() {
    }
    /**
     * @return {?}
     */
    AmexioFormBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioFormBodyComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-form-body', template: '<ng-content></ng-content>',
                },] },
    ];
    /** @nocollapse */
    AmexioFormBodyComponent.ctorParameters = function () { return []; };
    AmexioFormBodyComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioFormBodyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormGroupDirective = /** @class */ (function () {
    function AmexioFormGroupDirective() {
    }
    /**
     * @return {?}
     */
    AmexioFormGroupDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.modelsarray = this.models.toArray();
    };
    AmexioFormGroupDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[form-group]',
                },] },
    ];
    AmexioFormGroupDirective.propDecorators = {
        group: [{ type: core.Input, args: ['form-group',] }],
        models: [{ type: core.ContentChildren, args: [forms.NgModel, { descendants: true },] }]
    };
    return AmexioFormGroupDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormHeaderComponent = /** @class */ (function () {
    function AmexioFormHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AmexioFormHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioFormHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-form-header', template: "\n        <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFormHeaderComponent.ctorParameters = function () { return []; };
    AmexioFormHeaderComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioFormHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormComponent = /** @class */ (function () {
    function AmexioFormComponent(formBuilder) {
        this.formBuilder = formBuilder;
        /*
        Properties
        name : show-error
        datatype : boolean
        version : 4.2 onwards
        default : false
        description : Flag to show form invalid error messages
        */
        this.showError = false;
        /*
        Events
        name : showErrorMsg
        datatype : any
        version : none
        default :
        description : Event fired if showError msg info button is clicked
        */
        this.showErrorMsg = new core.EventEmitter();
        this.componentError = [];
        this.checkForm = false;
        this.isFormValid = false;
        this.showDialogue = false;
        this.headeralign = 'left';
        this.footeralign = 'right';
        this.errorMsgArray = [];
    }
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // FOR HEADER PADING
        this.headerComponentList = this.amexioHeader.toArray();
        this.headerComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.headerPadding = item.padding;
            }
        });
        // FOR BODY PADDING
        this.bodyComponentList = this.amexioBody.toArray();
        this.bodyComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.bodyPadding = item.padding;
            }
        });
        // FOR FOOTER PADDING
        this.footerComponentList = this.amexioFooter.toArray();
        this.footerComponentList.forEach(function (item, currentIndex) {
            if (item.padding) {
                _this.footerPadding = item.padding;
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.bodyheight) {
            var /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.formHeader && this.formHeader.nativeElement && this.formHeader.nativeElement.offsetHeight) {
                h = h - this.formHeader.nativeElement.offsetHeight;
            }
            if (this.formFooter && this.formFooter.nativeElement && this.formFooter.nativeElement.offsetHeight) {
                h = h - this.formFooter.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.buttons = [];
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ ngContentModels = this.models.toArray();
        var /** @type {?} */ innerModelArray = [];
        this.fb.forEach(function (fbnode) {
            var /** @type {?} */ modelarray = fbnode.modelsarray;
            var /** @type {?} */ fgc = {};
            modelarray.forEach(function (m) {
                fgc[m.name] = m.control;
                innerModelArray.push(m);
            });
            var /** @type {?} */ grp = _this.formBuilder.group(fgc);
            _this.form.form.registerControl(fbnode.group, grp);
        });
        ngContentModels.forEach(function (model) {
            if (!_this.isFieldPresentInParentAndChildBoth(innerModelArray, model.name)) {
                if (!model.name || model.name === null) {
                    model.name = model.valueAccessor['name'];
                }
                _this.form.control.registerControl(model.name, model.control);
            }
        });
        this.form.form.updateValueAndValidity();
        this.btns.toArray().forEach(function (btnCom) {
            if ((btnCom.formbind === _this.fname) && !btnCom.disabled) {
                _this.buttons.push(btnCom);
            }
        });
        this.validateForm();
        this.onResize();
    };
    /**
     * @param {?} innerModelArray
     * @param {?} name
     * @return {?}
     */
    AmexioFormComponent.prototype.isFieldPresentInParentAndChildBoth = /**
     * @param {?} innerModelArray
     * @param {?} name
     * @return {?}
     */
    function (innerModelArray, name) {
        var /** @type {?} */ isPresent = false;
        innerModelArray.forEach(function (innerModel) {
            if (name === innerModel.name) {
                isPresent = true;
            }
        });
        return isPresent;
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.closeDialogue = /**
     * @return {?}
     */
    function () {
        this.showDialogue = !this.showDialogue;
    };
    // THIS METHOD IS USED FOR ADDING MSG
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.addErrorMsg = /**
     * @return {?}
     */
    function () {
        if (this.form && this.form.status === 'INVALID') {
            for (var _i = 0, _a = Object.entries(this.form.controls); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (value && value.status === 'INVALID') {
                    var /** @type {?} */ errorObject = {};
                    errorObject['label'] = key;
                    this.errorMsgArray.push(errorObject);
                }
            }
        }
    };
    // REMOVE OBJECT FROM ARRAY
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioFormComponent.prototype.showErrors = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.errorMsgArray = [];
        this.addErrorMsg();
        this.showDialogue = !this.isFormValid;
        if (!this.isFormValid) {
            this.showDialogue = true;
        }
        else {
            this.showDialogue = false;
        }
    };
    // THIS METHOD IS USED FOR DISABLE BUTTON
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.validateForm = /**
     * @return {?}
     */
    function () {
        if (this.form && this.form.status === 'INVALID') {
            this.disableButton(true);
        }
        else {
            this.disableButton(false);
        }
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    AmexioFormComponent.prototype.disableButton = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this.buttons.forEach(function (btn) {
            btn.disabled = flag;
        });
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.validateForm();
    };
    /**
     * @return {?}
     */
    AmexioFormComponent.prototype.findformStyleClass = /**
     * @return {?}
     */
    function () {
        if (this.headeralign === 'right') {
            return 'flex-end';
        }
        if (this.headeralign === 'left') {
            return 'flex-start';
        }
        if (this.headeralign === 'center') {
            return 'flex-center';
        }
    };
    AmexioFormComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-form',
                    template: "\n    <form name=\"fname\" class=\"form-container form-group\" (window:resize)=\"onResize()\">\n\n        <header #formHeader class=\"form-header\" [style.padding]=\"headerPadding\" *ngIf=\"header\" [ngClass]=\"findformStyleClass()\">\n            <ng-content select=\"amexio-form-header\"></ng-content>\n        </header>\n\n        <div class=\"form-body formbody\" [style.padding]=\"bodyPadding\" [ngStyle]=\"{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}\">\n            <ng-content select=\"amexio-form-body\"></ng-content>\n        </div>\n\n        <footer #formFooter class=\"form-footer\" [style.padding]=\"footerPadding\" [ngClass]=\"{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}\">\n            <ng-content select=\"amexio-form-action\"></ng-content>\n            <br/>\n            <div *ngIf=\"!form.valid\" style=\"padding: 5px;\">\n                <button class=\"button\" [attr.title]=\"'click'\" (click)=\"showErrors($event)\" [ngClass]=\"'button-warning button-small button-round'\">\n                            <span class=\"button-text\">\n                              <span style=\"padding-right: 5px;\" *ngIf=\"icon\">\n                                <amexio-form-icon [customclass]=\"icon\" >\n                                </amexio-form-icon>\n                              </span>\n                              <span style=\"padding-right: 5px;\" *ngIf=\"loading\">\n                                <amexio-form-icon key=\"button-loading-icon\"></amexio-form-icon>\n                              </span>\n                              ?\n                            </span>\n                    </button>\n                <amexio-dialogue [show-dialogue]=\"showDialogue\" [custom]=\"true\" [content-align]=\"'left'\" [closable]=\"false\" [title]=\"'Invalid Fields'\" [type]=\"'confirm'\">\n\n                    <amexio-body *ngFor=\"let msg of errorMsgArray let index=index\">\n                        <amexio-label>{{index+1}}) {{msg.label}}</amexio-label><br>\n                    </amexio-body>\n\n                    <amexio-action>\n                        <amexio-button type=\"primary\" (onClick)=\"closeDialogue()\" [label]=\"'OK'\">\n                        </amexio-button>\n                    </amexio-action>\n                </amexio-dialogue>\n            </div>\n        </footer>\n    </form>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFormComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    AmexioFormComponent.propDecorators = {
        headeralign: [{ type: core.Input, args: ['header-align',] }],
        footeralign: [{ type: core.Input, args: ['footer-align',] }],
        fname: [{ type: core.Input, args: ['form-name',] }],
        header: [{ type: core.Input, args: ['header',] }],
        showError: [{ type: core.Input, args: ['show-error',] }],
        height: [{ type: core.Input }],
        minHeight: [{ type: core.Input, args: ['min-height',] }],
        bodyheight: [{ type: core.Input, args: ['body-height',] }],
        formHeader: [{ type: core.ViewChild, args: ['formHeader', { read: core.ElementRef },] }],
        formFooter: [{ type: core.ViewChild, args: ['formFooter', { read: core.ElementRef },] }],
        showErrorMsg: [{ type: core.Output }],
        amexioHeader: [{ type: core.ContentChildren, args: [AmexioFormHeaderComponent,] }],
        amexioBody: [{ type: core.ContentChildren, args: [AmexioFormBodyComponent,] }],
        amexioFooter: [{ type: core.ContentChildren, args: [AmexioFormActionComponent,] }],
        btns: [{ type: core.ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
        form: [{ type: core.ViewChild, args: [forms.NgForm,] }],
        models: [{ type: core.ContentChildren, args: [forms.NgModel, { descendants: true },] }],
        fb: [{ type: core.ContentChildren, args: [AmexioFormGroupDirective, { descendants: true },] }]
    };
    return AmexioFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioIconPaneComponent = /** @class */ (function () {
    function AmexioIconPaneComponent(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioIconPaneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconClass = this.getIconClass();
    };
    /**
     * @return {?}
     */
    AmexioIconPaneComponent.prototype.getIconClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.iconLoaderService.iconMappings != null) {
            var /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find(function (obj) { return obj.component === _this.key; });
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioIconPaneComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    };
    AmexioIconPaneComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-pane-icon', template: "\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'fa'\">\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"{{customclass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i [ngClass]=\"iconClass\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\"></i>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'mat'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\">{{customclass}}</i>\n      </ng-container>\n\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\" style=\"cursor: pointer;\">{{iconClass}}</i>\n      </ng-container>\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioIconPaneComponent.ctorParameters = function () { return [
        { type: IconLoaderService }
    ]; };
    AmexioIconPaneComponent.propDecorators = {
        key: [{ type: core.Input }],
        customclass: [{ type: core.Input }],
        onClick: [{ type: core.Output }]
    };
    return AmexioIconPaneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 14/12/17.
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Pratik Kelwalkar
 *
 */
var AmexioPanelComponent = /** @class */ (function () {
    function AmexioPanelComponent(renderer) {
        this.renderer = renderer;
        /*
        Properties
        name : collapsible
        datatype :  boolean
        version : 4.0 onwards
        default : false
        description : Pane will expand or collapse based on the boolean.
        */
        this.collapsible = true;
        this.contentAlign = 'left';
        this.onClick = new core.EventEmitter();
        this.nodeRightClick = new core.EventEmitter();
        this.rightClick = new core.EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.faFaIconUPCss = 'fa fa-caret-up';
        this.faFaIconDownCss = 'fa fa-caret-down';
        this.panelstyle = { visibility: 'visible' };
    }
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.collapsible) {
            this.expanded = true;
        }
        this.iconclassKey = this.expanded ? this.faFaIconUPCss : this.faFaIconDownCss;
        if (this.height) {
            return this.height;
        }
        this.updatestyle();
    };
    /**
     * @param {?} btn
     * @return {?}
     */
    AmexioPanelComponent.prototype.onTabClick = /**
     * @param {?} btn
     * @return {?}
     */
    function (btn) {
        btn.classList.toggle('active-accordion');
        if (this.iconclassKey === this.faFaIconDownCss) {
            this.iconclassKey = this.faFaIconUPCss;
        }
        else if (this.iconclassKey === this.faFaIconUPCss) {
            this.iconclassKey = this.faFaIconDownCss;
        }
        this.expanded = !this.expanded;
        this.updatestyle();
        this.onClick.emit();
    };
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.updatestyle = /**
     * @return {?}
     */
    function () {
        if (this.fit && this.expanded) {
            this.panelstyle = { visibility: 'visible' };
        }
        else if (this.fit && !this.expanded) {
            this.panelstyle = { visibility: 'hidden' };
        }
        else if (!this.fit && this.expanded) {
            this.panelstyle = { display: 'block' };
        }
        else if (!this.fit && !this.expanded) {
            this.panelstyle = { display: 'none' };
        }
        else {
            this.panelstyle = { visibility: 'visible' };
        }
    };
    // getcontextmenu
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioPanelComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    AmexioPanelComponent.prototype.loadContextMenu = /**
     * @param {?} rightClickData
     * @return {?}
     */
    function (rightClickData) {
        this.mouseLocation.left = rightClickData.event.clientX;
        this.mouseLocation.top = rightClickData.event.clientY;
        this.getContextMenu();
        this.posixUp = this.getListPosition(rightClickData.ref);
        rightClickData.event.preventDefault();
        rightClickData.event.stopPropagation();
        this.rightClickNodeData = rightClickData.data;
        this.contextStyle = this.getContextMenuStyle();
        this.nodeRightClick.emit(rightClickData);
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioPanelComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                NodeData: this.rightClickNodeData,
            };
            this.flag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.flag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.flag = false;
            if (!_this.flag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioPanelComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-panel',
                    template: "\n    <div #id style=\"width: 100%\" (contextmenu)=\"loadContextMenu({event:$event,ref:id})\">\n        <ng-container *ngIf=\"collapsible; else elseBlock\">\n            <div *ngIf=\"header\" class=\"panel-accordion\" (click)=\"onTabClick(btn1)\">\n                <amexio-toolbar>\n                    <amexio-toolbar-item position-left>\n                        <amexio-label size=\"small\">\n                            {{title}}\n                        </amexio-label>\n                    </amexio-toolbar-item>\n                    <amexio-toolbar-item position-right>\n                        <ng-content select=\"amexio-panel-header\"></ng-content>\n                    </amexio-toolbar-item>\n                    <amexio-toolbar-item style=\"margin:auto\" position-right>\n                        <i [class]=\"iconclassKey\" aria-hidden=\"true\" #btn1></i>\n                    </amexio-toolbar-item>\n                </amexio-toolbar>\n            </div>\n        </ng-container>\n\n        <ng-template #elseBlock>\n            <div *ngIf=\"header\" class=\"panel-accordion\" (click)=\"onTabClick(btn1)\">\n                <amexio-toolbar>\n                    <amexio-toolbar-item position-left>\n                        <amexio-label size=\"small\">\n                            {{title}}\n                        </amexio-label>\n                    </amexio-toolbar-item>\n                    <amexio-toolbar-item position-right>\n                        <ng-content select=\"amexio-panel-header\"></ng-content>\n                    </amexio-toolbar-item>\n                </amexio-toolbar>\n            </div>\n        </ng-template>\n\n        <div class=\"panel-panel\" [ngClass]=\"{'panel-box-border':border}\" [style.textAlign]=\"contentAlign\" [ngStyle]=\"panelstyle\" [style.height.px]=\"height\">\n            <ng-content></ng-content>\n        </div>\n\n\n        <span [ngStyle]=\"contextStyle\">\n            <ul *ngIf=\"flag\" class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n                <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\"\n                    [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\" *ngFor=\"let itemConfig of contextmenu\">\n                    <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n                    <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n                    </span>\n                </li>\n            </ul>\n        </span>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioPanelComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioPanelComponent.propDecorators = {
        title: [{ type: core.Input }],
        header: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        border: [{ type: core.Input }],
        collapsible: [{ type: core.Input }],
        height: [{ type: core.Input }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        contentAlign: [{ type: core.Input, args: ['content-align',] }],
        parentRef: [{ type: core.Input }],
        fit: [{ type: core.Input, args: ['fit',] }],
        onClick: [{ type: core.Output }],
        nodeRightClick: [{ type: core.Output }],
        rightClick: [{ type: core.Output }]
    };
    return AmexioPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioPanelHeaderComponent = /** @class */ (function () {
    function AmexioPanelHeaderComponent() {
        this.role = 'amexio-panel-header';
    }
    /**
     * @return {?}
     */
    AmexioPanelHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioPanelHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-panel-header', template: "\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioPanelHeaderComponent.ctorParameters = function () { return []; };
    AmexioPanelHeaderComponent.propDecorators = {
        role: [{ type: core.HostBinding, args: ['attr.class',] }],
        padding: [{ type: core.Input }]
    };
    return AmexioPanelHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by sagar on 6/9/17.
 */
var StepBlockComponent = /** @class */ (function () {
    function StepBlockComponent() {
    }
    /**
     * @return {?}
     */
    StepBlockComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    StepBlockComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-step-block', template: "\n  ",
                },] },
    ];
    /** @nocollapse */
    StepBlockComponent.ctorParameters = function () { return []; };
    StepBlockComponent.propDecorators = {
        active: [{ type: core.Input }],
        label: [{ type: core.Input }],
        icon: [{ type: core.Input }]
    };
    return StepBlockComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 15/12/17.
 */
var AmexioStepsComponent = /** @class */ (function () {
    function AmexioStepsComponent() {
        /*
        Events
        name : onClick
        datatype : none
        version : none
        default : none
        description :Event emitted on block click.
        */
        this.onClick = new core.EventEmitter();
        /*
        Events
        name : getStepBlockData
        datatype : none
        version : none
        default : none
        description :Gives stepblock information .
        */
        this.getStepBlockData = new core.EventEmitter();
    }
    Object.defineProperty(AmexioStepsComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} clickData
     * @param {?} ev
     * @return {?}
     */
    AmexioStepsComponent.prototype.onStepClick = /**
     * @param {?} clickData
     * @param {?} ev
     * @return {?}
     */
    function (clickData, ev) {
        this.getStepBlockData.emit({ event: ev, data: clickData });
        this.onClick.emit(clickData);
    };
    /**
     * @return {?}
     */
    AmexioStepsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.length > 0) {
            this.stepPreviewData = JSON.parse(JSON.stringify(this.data));
            this.stepBlockArray = this.data;
        }
        else {
            this.stepBlockArray = this.stepBlocks.toArray();
        }
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    AmexioStepsComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.stepPreviewData) !== JSON.stringify(this.data)) {
            this.stepPreviewData = JSON.parse(JSON.stringify(this.data));
            this.stepBlockArray = this.data;
        }
    };
    AmexioStepsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-steps', template: "\n    <div class=\"stepwizard\" *ngIf=\"(index && !block && !icon)\">\n      <div class=\"stepwizard-row setup-panel\">\n        <div *ngFor=\"let stepBlock of stepBlockArray; let i = index\" class=\"stepwizard-step\" >\n          <button type=\"button\" [disabled]=\"!stepBlock.active\" [ngClass]=\"{'disabled index-step-inactive':!stepBlock.active,\n          'active':stepBlock.active}\"\n                  class=\"btn-circle button button-primary\" (click)=\"onStepClick(stepBlock,$event)\"\n                  >{{i + 1}}\n          </button>\n          <ng-container *ngIf=\"stepBlock.label && !stepBlock.active\">\n            <p>{{stepBlock.label}}</p>\n          </ng-container>\n          <ng-container *ngIf=\"stepBlock.label && stepBlock.active\">\n            <p><strong class=\"step-label-highlight\">{{stepBlock.label}}</strong></p>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <!--this code use when user give icon true bydefault it is false-->\n    <div class=\"stepwizard\" *ngIf=\"(icon && !index && !block)\">\n      <div class=\"stepwizard-row setup-panel\" >\n        <div *ngFor=\"let stepBlock of stepBlockArray; let i = index\" class=\"stepwizard-step\" >\n          <ng-container *ngIf=\"stepBlock.icon && stepBlock.active\">\n          <span [ngClass]=\"{'step-box-icon-active':stepBlock.active}\" (onClick)=\"onStepClick(stepBlock,$event)\">\n            <amexio-pane-icon [customclass]=\"stepBlock.icon\" ></amexio-pane-icon>\n          </span>\n            </ng-container>\n          <ng-container *ngIf=\"stepBlock.icon && !stepBlock.active\">\n          <span [ngClass]=\"{'step-block-icon-disable':!stepBlock.active}\">\n            <amexio-pane-icon [customclass]=\"stepBlock.icon\" (onClick)=\"onStepClick(stepBlock,$event)\"></amexio-pane-icon>\n            </span>\n          </ng-container>\n          <ng-container *ngIf=\"stepBlock.icon=='' || !stepBlock.icon\">\n            <br>\n          </ng-container>\n          <ng-container *ngIf=\"stepBlock.label && !stepBlock.active\">\n            <p style=\"cursor:not-allowed;\" (onClick)=\"onStepClick(stepBlock,$event)\">{{stepBlock.label}}</p>\n          </ng-container>\n          <ng-container *ngIf=\"stepBlock.label && stepBlock.active\">\n            <p style=\"cursor:pointer;\" ><strong class=\"step-label-highlight\"\n            [ngClass]=\"{'step-box-label-active':stepBlock.active}\">{{stepBlock.label}}</strong></p>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <!--This code use for steps of boxes-->\n    <div *ngIf=\"block\">\n      <div *ngIf=\"block\" class=\"step-box-sqaure\">\n        <div class=\"step-box-table\">\n          <ng-container *ngFor=\"let stepBlock of stepBlockArray; let i = index\">\n            <div class=\"step-box-table-item\" (click)=\"onStepClick(stepBlock,$event)\"  style=\"padding-top: 10px;\"\n            [ngClass]=\"{'disabled step-box-table-item-hover ':!stepBlock.active,'active':stepBlock.active}\">\n              <a>\n                <ng-container *ngIf=\"index\">\n                  {{i + 1}}<br>\n                </ng-container>\n                <ng-container *ngIf=\"icon && stepBlock.icon\">\n                <amexio-pane-icon [customclass]=\"stepBlock.icon\"></amexio-pane-icon>\n                </ng-container>\n                <ng-container *ngIf=\"stepBlock.label && !stepBlock.active\">\n                  <p style=\"word-wrap: break-word;\">{{stepBlock.label}}</p>\n                </ng-container>\n                <ng-container *ngIf=\"stepBlock.label && stepBlock.active\">\n                <p style=\"word-wrap: break-word;\"><strong>{{stepBlock.label}}</strong></p>\n                </ng-container>\n              </a>\n            </div>\n          </ng-container>\n\n        </div>\n      </div>\n\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioStepsComponent.ctorParameters = function () { return []; };
    AmexioStepsComponent.propDecorators = {
        index: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        block: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        getStepBlockData: [{ type: core.Output }],
        stepBlocks: [{ type: core.ContentChildren, args: [StepBlockComponent,] }],
        data: [{ type: core.Input, args: ['data',] }]
    };
    return AmexioStepsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 8/12/17.
 */
var AmexioTabPillComponent = /** @class */ (function () {
    function AmexioTabPillComponent() {
        /*
        Properties
        name : disabled
        datatype : boolean
        version : 4.1.4 onwards
        default : false
        description : Disable property for tab
        */
        this.disabled = false;
        /*
        Properties
        name : active
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Set true for specific tab open as default tab..
        */
        this.active = false;
        /*
         Properties
         name : closable
         datatype : boolean
         version : 4.2 onwards
         default : false
         description : Font color of label
         */
        this.closable = null;
        this.tabId = Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    AmexioTabPillComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioTabPillComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tab', template: "\n    <div role=\"tabpanel\" class=\"tab-pane active\" [attr.id]=\"tabId\" [hidden]=\"!active\">\n      <ng-content></ng-content>\n      <ng-template #target></ng-template>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioTabPillComponent.ctorParameters = function () { return []; };
    AmexioTabPillComponent.propDecorators = {
        title: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        active: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        amexiocolor: [{ type: core.Input, args: ['amexio-color',] }],
        closable: [{ type: core.Input }],
        target: [{ type: core.ViewChild, args: ['target', { read: core.ViewContainerRef },] }]
    };
    return AmexioTabPillComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioRightVerticalTabComponent = /** @class */ (function () {
    function AmexioRightVerticalTabComponent(render) {
        this.render = render;
        /*
        Events
        name : onClick
        datatype :none
        version : 4.0 onwards
        default : none
        description : Callback to invoke on activated tab event.
        */
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.tabCollection = this.queryTabs.toArray();
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.onTabClick = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (!tab.disabled) {
            for (var _i = 0, _a = this.tabCollection; _i < _a.length; _i++) {
                var i = _a[_i];
                if (i === tab) {
                    i['active'] = true;
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                }
            }
        }
    };
    /**
     * @param {?} tabNode
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.closeTab = /**
     * @param {?} tabNode
     * @return {?}
     */
    function (tabNode) {
        var /** @type {?} */ newTab = [];
        var /** @type {?} */ index = 0;
        var /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach(function (tab) {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
            }
            if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.activateTab(newTab[tabHighlightIndex].tabId);
        this.tabCollection = newTab;
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    AmexioRightVerticalTabComponent.prototype.activateTab = /**
     * @param {?} tabId
     * @return {?}
     */
    function (tabId) {
        this.tabCollection.forEach(function (tab) {
            tab.active = false;
            if (tab.tabId === tabId) {
                tab.active = true;
            }
        });
    };
    AmexioRightVerticalTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-right-vertical-tab-view',
                    template: "\n\n    <div class=\"righttable\">\n      <div class=\"righttablerow\">\n        <div class=\"tablecol verticalalign-tabcontent\">\n          <div style=\"float:left\" class=\"tabcontent\">\n            <ng-content></ng-content>\n          </div>\n        </div>\n\n        <div style=\"float:right\" class=\"righttablecol verticalalign-tabright\">\n          <div class=\"verticalnavtab verticalnavtab-right\">\n            <ul>\n              <li *ngFor=\"let tabnode of tabCollection\">\n                <div class=\"defaultnode\" [ngClass]=\"{'rightactivetab':tabnode.active,'disabled-tab':tabnode.disabled }\" \n                (click)=\"onTabClick(tabnode)\">\n                  <span *ngIf=\"tabnode.icon\" [ngClass]=\"tabnode.icon\"  aria-hidden=\"true\"></span>\n                  <span style=\"padding-left:5px\">{{tabnode.title}}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioRightVerticalTabComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioRightVerticalTabComponent.propDecorators = {
        tabs: [{ type: core.ViewChild, args: ['tab', { read: core.ElementRef },] }],
        queryTabs: [{ type: core.ContentChildren, args: [AmexioTabPillComponent,] }],
        onClick: [{ type: core.Output }]
    };
    return AmexioRightVerticalTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$2 = function () {
};
/**
 * @abstract
 * @template T
 */
var ValueAccessorBase = /** @class */ (function () {
    function ValueAccessorBase() {
        this.onTouchedCallback = noop$2;
        this.onChangeCallback = noop$2;
    }
    Object.defineProperty(ValueAccessorBase.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    ValueAccessorBase.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessorBase.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessorBase.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    // THIS METHOD GENERATE RANDOM STRING
    /**
     * @param {?} name
     * @param {?} fieldlabel
     * @param {?} inputType
     * @return {?}
     */
    ValueAccessorBase.prototype.generateName = /**
     * @param {?} name
     * @param {?} fieldlabel
     * @param {?} inputType
     * @return {?}
     */
    function (name, fieldlabel, inputType) {
        var /** @type {?} */ newName;
        if (!name && fieldlabel) {
            newName = fieldlabel.replace(/\s/g, '');
        }
        else if (!name && !fieldlabel) {
            newName = inputType + '-' + this.getRandomString();
        }
        return newName;
    };
    /**
     * @return {?}
     */
    ValueAccessorBase.prototype.getRandomString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        var /** @type {?} */ randomString = '';
        for (var /** @type {?} */ i = 0; i < 6; i++) {
            randomString += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length));
        }
        return randomString;
    };
    return ValueAccessorBase;
}());

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioCheckBoxGroupComponent = /** @class */ (function (_super) {
    __extends$1(AmexioCheckBoxGroupComponent, _super);
    function AmexioCheckBoxGroupComponent(httpService) {
        var _this = _super.call(this) || this;
        _this.httpService = httpService;
        /*
          Properties
          name : disabled
          datatype : boolean
          version : 4.0 onwards
          default : false
          description :  If true will not react on any user events and show disable icon over
          */
        _this.disabled = false;
        _this.onSelection = new core.EventEmitter();
        return _this;
    }
    Object.defineProperty(AmexioCheckBoxGroupComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            this.viewdata = of(this.data);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ reponseData;
        if (this.httpmethod && this.httpurl) {
            this.httpService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                reponseData = response;
            }, function (error) {
            }, function () {
                _this.data = _this.getResponseData(reponseData);
            });
        }
        else if (this.data && this.datareader) {
            this.data = this.getResponseData(this.data);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.contains = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (this._model instanceof Array) {
            this._model.forEach(function (obj) {
                if (obj[_this.displayfield] === value[_this.displayfield]) {
                    return true;
                }
            });
        }
        return false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.add = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.contains(value)) {
            if (this._model instanceof Array) {
                this._model.push(value);
            }
            else {
                this._model = [value];
            }
            this.onChangeCallback(this._model);
        }
        this.emitCheckboxes(this._model);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.remove = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ index = this._model.indexOf(value);
        if (!this._model || index < 0) {
            return;
        }
        this._model.splice(index, 1);
        this.onChangeCallback(this._model);
        this.emitCheckboxes(this._model);
    };
    // THIS METHOD EMMIT SELECTED CHECKBOXES
    /**
     * @param {?} selectedCheckBoxes
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.emitCheckboxes = /**
     * @param {?} selectedCheckBoxes
     * @return {?}
     */
    function (selectedCheckBoxes) {
        var _this = this;
        this.selectedCheckBox = [];
        if (selectedCheckBoxes && selectedCheckBoxes.length > 0) {
            selectedCheckBoxes.forEach(function (obj) {
                obj.checked = true;
                _this.selectedCheckBox.push(obj);
            });
        }
        this.onSelection.emit(this.selectedCheckBox);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioCheckBoxGroupComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return (this.required && (this._model && this._model.length > 0)) || !this.required
            ? null
            : {
                jsonParseError: {
                    valid: true,
                },
            };
    };
    AmexioCheckBoxGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-checkbox-group',
                    template: "\n    <!-- <div style=\"height: 300px;\" *ngIf=\"mask\">\n        <div class=\"spinner\"></div>\n    </div> -->\n    <div class=\"inputgroup form-group\">\n        <div *ngIf=\"fieldlabel\">\n            <label>{{fieldlabel}}</label>\n        </div>\n\n        <div *ngIf=\"horizontal\" style=\"display: inline-flex; flex-direction :row;\">\n            <checkbox *ngFor=\"let data of viewdata | async\" [checked]=\"data.checked\" [value]=\"data\" [disabled]=\"data?.disabled || disabled\" [label]=\"data[displayfield]\">\n            </checkbox>\n        </div>\n\n        <div *ngIf=\"!horizontal\" style=\"display: inline-flex;flex-direction :column;\">\n            <checkbox *ngFor=\"let data of viewdata | async\" [checked]=\"data.checked\" [value]=\"data\" [disabled]=\"data?.disabled || disabled\" [label]=\"data[displayfield]\">\n            </checkbox>\n        </div>\n    </div>\n  ",
                    providers: [
                        { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioCheckBoxGroupComponent; }), multi: true },
                        { provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioCheckBoxGroupComponent; }), multi: true },
                    ]
                },] },
    ];
    /** @nocollapse */
    AmexioCheckBoxGroupComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    AmexioCheckBoxGroupComponent.propDecorators = {
        horizontal: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        required: [{ type: core.Input, args: ['required',] }],
        name: [{ type: core.Input, args: ['name',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        onSelection: [{ type: core.Output }]
    };
    return AmexioCheckBoxGroupComponent;
}(ValueAccessorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormValidator = /** @class */ (function () {
    function AmexioFormValidator() {
    }
    return AmexioFormValidator;
}());

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$3 = function () {
};
var AmexioCheckBoxComponent = /** @class */ (function (_super) {
    __extends$2(AmexioCheckBoxComponent, _super);
    function AmexioCheckBoxComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$3;
        _this.onChangeCallback = noop$3;
        /*
          Properties
          name : required
          datatype : boolean
          version : 4.0 onwards
          default : false
          description :  property to set if manditory
          */
        _this.required = false;
        /*
          Events
          name : onSelection
          datatype : any
          version : none
          default : none
          description : Event fired on checkbox click.
          */
        _this.onSelection = new core.EventEmitter();
        /*
          Events
          name : input
          datatype : any
          version : none
          default : none
          description : On input event field.
          */
        _this.input = new core.EventEmitter();
        _this.isComponentValid = new core.EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.generateName();
        this.isValid = !this.required;
        this.isComponentValid.emit(!this.required);
    };
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.input.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.value = !this.value;
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.onSelection.emit(this.value);
    };
    Object.defineProperty(AmexioCheckBoxComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            if (this.required) {
                this.isValid = this.innerValue;
            }
            else {
                this.isValid = true;
            }
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // Set touched on blur
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return ((this.required && this.value) || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    // THIS METHOD GENERATE RANDOM STRING
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.generateName = /**
     * @return {?}
     */
    function () {
        if (!this.name && this.fieldlabel) {
            this.name = this.fieldlabel.replace(/\s/g, '');
        }
        else if (!this.name && !this.fieldlabel) {
            this.name = 'textinput-' + this.getRandomString();
        }
    };
    /**
     * @return {?}
     */
    AmexioCheckBoxComponent.prototype.getRandomString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        var /** @type {?} */ randomString = '';
        for (var /** @type {?} */ i = 0; i < 6; i++) {
            randomString += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length));
        }
        return randomString;
    };
    AmexioCheckBoxComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-checkbox',
                    template: "\n\n    <div class=\"inputgroup form-group\" >\n        <label class=\"input-box-container\" >{{fieldlabel}}\n            <input type=\"checkbox\"  [ngClass]=\"{'checkbox-disable' : disabled}\" \n            [attr.checked]=\"value ? true: null\" \n            (input)=\"onInput()\" (click)=\"onClick()\" [attr.disabled] = \"disabled ? true: null\" [required]=\"required\">\n            <span class=\"input-box-checkbox-label\"></span>\n          </label>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioCheckBoxComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioCheckBoxComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioCheckBoxComponent.ctorParameters = function () { return []; };
    AmexioCheckBoxComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        disabled: [{ type: core.Input }],
        required: [{ type: core.Input }],
        onSelection: [{ type: core.Output }],
        input: [{ type: core.Output }],
        name: [{ type: core.Input, args: ['name',] }],
        isComponentValid: [{ type: core.Output }]
    };
    return AmexioCheckBoxComponent;
}(AmexioFormValidator));

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var BaseInput = /** @class */ (function (_super) {
    __extends$6(BaseInput, _super);
    function BaseInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    BaseInput.prototype.onBaseInputFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkValidity();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseInput.prototype.onBaseInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkValidity();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseInput.prototype.onBlur2 = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkValidity();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseInput.prototype.onBaseInputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkValidity();
    };
    /**
     * @return {?}
     */
    BaseInput.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseInput.prototype.validateOnInit = /**
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @return {?}
     */
    BaseInput.prototype.isVali1d = /**
     * @return {?}
     */
    function () {
        return true;
    };
    return BaseInput;
}(ValueAccessorBase));

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var EventBaseComponent = /** @class */ (function (_super) {
    __extends$5(EventBaseComponent, _super);
    function EventBaseComponent(renderer, element, cd) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.element = element;
        _this.cd = cd;
        _this.self = false;
        _this.itemClick = false;
        _this.hide();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    EventBaseComponent.prototype.onBaseFocusEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    EventBaseComponent.prototype.onBaseBlurEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onBaseItemClicked();
        return false;
    };
    /**
     * @return {?}
     */
    EventBaseComponent.prototype.onBaseItemClicked = /**
     * @return {?}
     */
    function () {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    };
    /**
     * @return {?}
     */
    EventBaseComponent.prototype.bindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', function (event) { return _this.handleDocumentListener(event); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    EventBaseComponent.prototype.handleDocumentListener = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    };
    /**
     * @return {?}
     */
    EventBaseComponent.prototype.clearClicks = /**
     * @return {?}
     */
    function () {
        this.self = false;
        this.itemClick = false;
    };
    /**
     * @return {?}
     */
    EventBaseComponent.prototype.unbindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    /**
     * @return {?}
     */
    EventBaseComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.dropdownstyle = { visibility: 'hidden' };
    };
    return EventBaseComponent;
}(BaseInput));

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var BaseFormValidator = /** @class */ (function (_super) {
    __extends$4(BaseFormValidator, _super);
    // @ViewChild(NgModel) model: NgModel;
    // public validate(c: FormControl) {
    //     return (this.model.valid ) ? null : {
    //         jsonParseError: {
    //             valid: true,
    //         },
    //     };
    // }
    function BaseFormValidator(renderer, element, _cd) {
        var _this = _super.call(this, renderer, element, _cd) || this;
        _this.renderer = renderer;
        _this.element = element;
        _this._cd = _cd;
        return _this;
    }
    return BaseFormValidator;
}(EventBaseComponent));

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 1/12/17.
 */
var AmexioDropDownComponent = /** @class */ (function (_super) {
    __extends$3(AmexioDropDownComponent, _super);
    function AmexioDropDownComponent(dataService, element, renderer, _cd) {
        var _this = _super.call(this, renderer, element, _cd) || this;
        _this.dataService = dataService;
        _this.element = element;
        _this.renderer = renderer;
        _this.displayValue = '';
        _this.filteredOptions = [];
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : 	On blur event
          */
        _this.onBlur = new core.EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description : 	On input event field.
        */
        _this.input = new core.EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On field focus event
        */
        _this.focus = new core.EventEmitter();
        /*
        Events
        name : onSingleSelect
        datatype : any
        version : none
        default :
        description : Fire when drop down item selected.
        */
        _this.onSingleSelect = new core.EventEmitter();
        /*
        Events
        name : onMultiSelect
        datatype : any
        version :none
        default :
        description : Fire when multiple record select in drop down.this event is only
        applied when multi-select=true
        */
        _this.onMultiSelect = new core.EventEmitter();
        /*
        Events
        name : onClick
        datatype : any
        version :none
        default :
        description : On record select event.this event is only for normal dropdown.
        */
        _this.onClick = new core.EventEmitter();
        /*
        Properties
        name : place-holder
        datatype : string
        version : 4.0 onwards
        default :
        description : Show place-holder inside dropdown component*/
        _this.placeholder = '';
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : flag to set label
        */
        _this.haslabel = true;
        _this.selectedindex = 0;
        _this.multiselectValues = [];
        _this.maskloader = true;
        _this.scrollposition = 30;
        // The internal dataviews model
        _this.isComponentValid = new core.EventEmitter();
        return _this;
    }
    Object.defineProperty(AmexioDropDownComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.setData(this._data);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioDropDownComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
        Properties
        name : error-msg
        datatype : string
        version : 4.0 onwards
        default :
        description : Sets the error message
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.name = this.generateName(this.name, this.fieldlabel, 'dropdowninput');
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.placeholder === '') {
            this.placeholder = 'Choose Option';
        }
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioDropDownComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        // Check if key is added?
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            this.multiselectValues = [];
            var /** @type {?} */ dr = this.datareader.split('.');
            if (dr) {
                for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                    var ir = dr_1[_i];
                    responsedata = responsedata[ir];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.setResponseData(responsedata);
        this.multiSelection();
        this.setUserSelection();
        this.maskloader = false;
    };
    /**
     * @param {?} responsedata
     * @return {?}
     */
    AmexioDropDownComponent.prototype.setResponseData = /**
     * @param {?} responsedata
     * @return {?}
     */
    function (responsedata) {
        var _this = this;
        if (responsedata) {
            this.viewData = responsedata.sort(function (a, b) { return a[_this.displayfield].toLowerCase()
                !== b[_this.displayfield].toLowerCase() ?
                a[_this.displayfield].toLowerCase() < b[_this.displayfield].toLowerCase() ? -1 : 1 : 0; });
            this.filteredOptions = this.viewData;
        }
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.multiSelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.multiselect) {
            var /** @type {?} */ preSelectedMultiValues_1 = '';
            var /** @type {?} */ optionsChecked_1 = [];
            this.viewData.forEach(function (row) {
                if (row.hasOwnProperty('checked')) {
                    if (row.checked) {
                        optionsChecked_1.push(row[_this.valuefield]);
                        _this.multiselectValues.push(row);
                        preSelectedMultiValues_1 === '' ? preSelectedMultiValues_1 +=
                            row[_this.displayfield] : preSelectedMultiValues_1 += ',' + row[_this.displayfield];
                    }
                }
                else {
                    row['checked'] = false;
                }
            });
            this.displayValue = this.setMultiSelect();
            this.onMultiSelect.emit(this.multiselectValues);
        }
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.setUserSelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Set user selection
        if (this.innerValue != null) {
            var /** @type {?} */ valueKey_1 = this.valuefield;
            var /** @type {?} */ displayKey_1 = this.displayfield;
            var /** @type {?} */ val_1 = this.innerValue;
            if (this.viewData.length > 0) {
                this.viewData.forEach(function (item) {
                    if (item[valueKey_1] === val_1) {
                        _this.isValid = true;
                        _this.isComponentValid.emit(true);
                        _this.displayValue = item[displayKey_1];
                        _this.onSingleSelect.emit(item);
                    }
                });
            }
        }
    };
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onItemSelect = /**
     * @param {?} selectedItem
     * @return {?}
     */
    function (selectedItem) {
        var _this = this;
        if (this.multiselect) {
            var /** @type {?} */ optionsChecked_2 = [];
            this.multiselectValues = [];
            if (selectedItem.hasOwnProperty('checked')) {
                selectedItem.checked = !selectedItem.checked;
                this.filteredOptions.forEach(function (row) {
                    if (row.checked) {
                        optionsChecked_2.push(row[_this.valuefield]);
                        _this.multiselectValues.push(row);
                    }
                });
                this.innerValue = optionsChecked_2;
                this.displayValue = this.setMultiSelect();
                this.onMultiSelect.emit(this.multiselectValues);
            }
        }
        else {
            this.value = selectedItem[this.valuefield]; // Issue here?
            this.displayValue = selectedItem[this.displayfield];
            this.multiselect ? this.showToolTip = true : this.showToolTip = false;
            this.onSingleSelect.emit(selectedItem);
        }
        this.isValid = true;
        this.isComponentValid.emit(true);
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.setMultiSelectData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.multiselectValues = [];
        if (this.innerValue && this.innerValue.length > 0) {
            var /** @type {?} */ modelValue_1 = this.innerValue;
            this.filteredOptions.forEach(function (test) {
                modelValue_1.forEach(function (mdValue) {
                    if (test[_this.valuefield] === mdValue) {
                        if (test.hasOwnProperty('checked')) {
                            test.checked = true;
                        }
                        _this.multiselectValues.push(test);
                    }
                });
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.navigateKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.getDisplayText = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.innerValue != null || this.innerValue !== '') {
            if (this.multiselect) {
                this.displayValue = this.setMultiSelect();
            }
            else {
                this.displayValue = '';
                this.filteredOptions.forEach(function (test) {
                    if (test[_this.valuefield] === _this.innerValue) {
                        _this.displayValue = test[_this.displayfield];
                    }
                });
                this.displayValue = this.displayValue === undefined ? '' : this.displayValue;
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.setMultiSelect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setMultiSelectData();
        var /** @type {?} */ multiselectDisplayString = '';
        this.multiselectValues.forEach(function (row) {
            multiselectDisplayString === '' ? multiselectDisplayString +=
                row[_this.displayfield] : multiselectDisplayString += ',' + row[_this.displayfield];
        });
        if (this.multiselectValues.length > 0) {
            return multiselectDisplayString;
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.innerValue = event;
        this.isValid = true;
        this.getDisplayText();
        this.isComponentValid.emit(true);
    };
    /**
     * @param {?} input
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onInput = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        this.input.emit();
        this.isValid = input.valid;
        this.isComponentValid.emit(input.valid);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onDropDownSearchKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.search) {
            var /** @type {?} */ keyword = event.target.value;
            if (keyword != null && keyword !== '' && keyword !== ' ') {
                this.filteredOptions = [];
                var /** @type {?} */ search_Term_1 = keyword.toLowerCase();
                this.viewData.forEach(function (row) {
                    if (row[_this.displayfield].toLowerCase().startsWith(search_Term_1)) {
                        _this.filteredOptions.push(row);
                    }
                });
            }
            if (keyword === '') {
                this.filteredOptions = this.viewData;
            }
        }
        if (event.keyCode === 8) {
            this.innerValue = '';
        }
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            this.navigateUsingKey(event);
        }
        this.onBaseFocusEvent({});
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.navigateUsingKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.selectedindex > this.filteredOptions.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 || event.keyCode === 38 && this.selectedindex <
            this.filteredOptions.length) {
            this.navigateFilterOptions();
        }
        if (event.keyCode === 13 && this.filteredOptions[this.selectedindex]) {
            this.onItemSelect(this.filteredOptions[this.selectedindex]);
        }
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.navigateFilterOptions = /**
     * @return {?}
     */
    function () {
        if (!this.showToolTip) {
            this.showToolTip = true;
        }
        var /** @type {?} */ prevselectedindex = 0;
        if (this.selectedindex === 0) {
            this.selectedindex = 1;
        }
        else {
            prevselectedindex = this.selectedindex;
            this.scrollPositionIndex(event);
        }
        if (this.filteredOptions[this.selectedindex]) {
            this.filteredOptions[this.selectedindex].selected = true;
        }
        if (this.filteredOptions[prevselectedindex]) {
            this.filteredOptions[prevselectedindex].selected = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.scrollPositionIndex = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 40) {
            this.selectedindex++;
            if ((this.selectedindex > 5)) {
                this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
                this.scrollposition = this.scrollposition + 30;
            }
        }
        else if (event.keyCode === 38) {
            this.selectedindex--;
            if (this.scrollposition >= 0 && this.selectedindex > 1) {
                this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
                this.scrollposition = this.scrollposition - 30;
            }
            if (this.selectedindex === 1) {
                this.scrollposition = 30;
            }
        }
    };
    Object.defineProperty(AmexioDropDownComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v != null && v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // Set touched on blur
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onblur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target && event.target.value && this.filteredOptions &&
            this.filteredOptions.length === 1) {
            var /** @type {?} */ fvalue = event.target.value;
            var /** @type {?} */ row = this.filteredOptions[0];
            var /** @type {?} */ rvalue = row[this.displayfield];
            if (fvalue && rvalue && (fvalue.toLowerCase() === rvalue.toLowerCase())) {
                this.onItemSelect(row);
            }
        }
        this.onTouchedCallback();
        this.onBaseBlurEvent(event);
        this.onBlur.emit();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onFocus = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        this.onBaseFocusEvent(elem);
        this.showToolTip = true;
        this.posixUp = this.getListPosition(elem);
        this.focus.emit();
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioDropDownComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ dropdownHeight = 325; // must be same in dropdown.scss
        if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            return true;
        }
        else {
            return false;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioDropDownComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value != null) {
            this.writeChangedValue(value);
        }
        else {
            this.innerValue = '';
            if (this.allowblank) {
                this.isValid = true;
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioDropDownComponent.prototype.writeChangedValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value !== this.innerValue) {
            var /** @type {?} */ status_1 = false;
            if (this.viewData && this.viewData.length > 0) {
                this.viewData.forEach(function (item) {
                    if (item[_this.valuefield] === value) {
                        _this.isValid = true;
                        _this.displayValue = item[_this.displayfield];
                        status_1 = true;
                        return;
                    }
                });
            }
            if (!status_1) {
                this.displayValue = '';
            }
            this.value = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioDropDownComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioDropDownComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.onIconClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.onBaseFocusEvent({});
            this.showToolTip = !this.showToolTip;
        }
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioDropDownComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioDropDownComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return ((!this.allowblank && (this.value || this.value === 0)) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioDropDownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dropdown',
                    template: "\n    <div class=\"inputgroup\" #rootDiv>\n\n        <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n          {{fieldlabel}}\n        </label>\n  \n        <input type=\"hidden\"\n               [ngModel]=\"value\"\n               (ngModelChange)=\"onChange($event)\"\n               #inp=\"ngModel\"\n        />\n        <input type=\"text\" class=\"input-control\"\n               [value]=\"displayValue\"\n               [ngClass]=\"{'input-control-error' : inp.invalid && (inp.dirty || inp.touched),'input-control-success' : inp.valid && (inp.dirty || inp.touched)}\"\n               (blur)=\"onblur($event)\"\n               (focus)=\"onFocus(rootDiv)\"\n               [attr.placeholder]=\"placeholder\"\n               [readonly]=\"readonly ? true : null\"\n               [attr.disabled]=\"disabled ? true: null\"\n               [required]=\"!allowblank\" (keyup)=\"onDropDownSearchKeyUp($event)\" (keydown)=\"navigateKey($event)\"/>\n  \n  \n        <span class=\"drodown-caret-down\" (click)=\"onIconClick()\">\n          <amexio-form-icon key=\"dropdown_caret\" *ngIf=\"!maskloader\" ></amexio-form-icon>\n          <em class=\"fa fa-spinner fa-spin\" *ngIf=\"maskloader\"></em>\n        </span>\n  \n        <span #dropdownitems class=\"dropdown\" [ngClass]=\"{'dropdown-up' : posixUp}\" [ngStyle]=\"dropdownstyle\">\n              <ul class=\"dropdown-list\">\n  \n                <li class=\"list-items\" [ngClass]=\"{'list-items-selected':item.selected}\" *ngFor=\"let item of filteredOptions\" (mousedown)=\"onItemSelect(item)\">\n                  <ng-container *ngIf=\"bodyTemplate\">\n                    <ng-template [ngTemplateOutlet]=\"bodyTemplate\" [ngTemplateOutletContext]=\"{ $implicit: { text : row }, row: item }\">\n                      </ng-template>\n                    </ng-container>\n                  <ng-container *ngIf=\"!bodyTemplate\">\n                    <span>{{item[displayfield]}}</span>\n                  </ng-container>            <span style=\"float : right\">{{item?.checked ? '&#10004;': ''}}</span>\n                </li>\n                 <ng-template *ngIf=\"filteredOptions && (filteredOptions.length < 1)\">\n                   <li class=\"list-items\">No Options</li>\n                 </ng-template>\n              </ul>\n            </span>\n        <span class=\"inputfieldbar\"></span>\n      </div>\n  \n  \n      <span *ngIf=\"iconfeedback && (inp.invalid && (inp.dirty || inp.touched) || inp.valid)\"\n            class=\"input-control-feedback\">\n              <span *ngIf=\"inp.invalid && (inp.dirty || inp.touched)\">&#9888;</span>\n              <span *ngIf=\"inp.valid && (inp.dirty || inp.touched)\"> &#10004;</span>\n  \n      </span>\n  \n      <span *ngIf=\"showToolTip && enablepopover\" class=\"tooltiptext\">\n              <div [innerHTML]=\"helpInfoMsg\"></div>\n      </span>\n  \n  \n  \n  \n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioDropDownComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioDropDownComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioDropDownComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioDropDownComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        data: [{ type: core.Input, args: ['data',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        search: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        multiselect: [{ type: core.Input, args: ['multi-select',] }],
        dropdownitems: [{ type: core.ViewChild, args: ['dropdownitems', { read: core.ElementRef },] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        onSingleSelect: [{ type: core.Output }],
        onMultiSelect: [{ type: core.Output }],
        onClick: [{ type: core.Output }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        bodyTemplate: [{ type: core.ContentChild, args: ['amexioBodyTmpl',] }],
        isComponentValid: [{ type: core.Output }],
        name: [{ type: core.Input, args: ['name',] }]
    };
    return AmexioDropDownComponent;
}(BaseFormValidator));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioLabelComponent = /** @class */ (function () {
    function AmexioLabelComponent() {
        this.enableclick = false;
        this.onClick = new core.EventEmitter();
        this.tempStyleArray = ['large', 'medium', 'small', 'bold', 'large-bold', 'medium-bold', 'small-bold',
            'large-44', 'large-24', 'large-50', 'large-54', 'large-56', 'large-60', 'large-64', 'large-68', 'large-78', 'large-9vw',
            'large-44-bold', 'large-50-bold', 'large-24-bold', 'large-4vw', 'large-4vw-bold',
            'large-54-bold', 'large-56-bold', 'large-60-bold', 'large-64-bold', 'large-68-bold', 'large-78-bold', 'large-9vw-bold'];
    }
    /**
     * @return {?}
     */
    AmexioLabelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.styleClass == null) {
            this.styleClass = 'small';
        }
        else {
            this.styleClass = this.tempStyleArray.find(function (x) { return x === _this.styleClass; });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioLabelComponent.prototype.onLabel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enableclick) {
            this.onClick.emit(event);
        }
    };
    AmexioLabelComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-label',
                    template: "\n  <label class=\"label-content {{styleClass}}\" (click)=\"onLabel($event)\"\n    [ngStyle]=\"{'color' : fontColor,'cursor': enableclick ? 'pointer': 'text'}\">\n    <ng-content></ng-content>\n    <span class=\"label-badge\" *ngIf=\"badge\">{{badge}}</span>\n  </label>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioLabelComponent.ctorParameters = function () { return []; };
    AmexioLabelComponent.propDecorators = {
        badge: [{ type: core.Input, args: ['badge',] }],
        styleClass: [{ type: core.Input, args: ['size',] }],
        fontColor: [{ type: core.Input, args: ['font-color',] }],
        enableclick: [{ type: core.Input, args: ['enable-click',] }],
        onClick: [{ type: core.Output }]
    };
    return AmexioLabelComponent;
}());

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioNumberInputComponent = /** @class */ (function (_super) {
    __extends$7(AmexioNumberInputComponent, _super);
    function AmexioNumberInputComponent() {
        var _this = _super.call(this) || this;
        _this.isValid = false;
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : On blur event
          */
        _this.onBlur = new core.EventEmitter();
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description : 	On input event field.
         */
        _this.input = new core.EventEmitter();
        /*
         Events
         name : focus
         datatype : any
         version : none
         default :
         description : On focus event field.
         */
        _this.focus = new core.EventEmitter();
        /*
         Events
         name : change
         datatype : any
         version : none
         default :
         description : On field value change event
         */
        _this.change = new core.EventEmitter();
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : true
        description : Flag to set label
        */
        _this.haslabel = true;
        _this.showToolTip = false;
        return _this;
    }
    Object.defineProperty(AmexioNumberInputComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
        Properties
        name : error-msg
        datatype : none
        version : 4.0 onwards
        default : none
        description : Sets the error message
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioNumberInputComponent.prototype, "minerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minerrormsg;
        },
        /*
        Properties
        name : min-error-msg
        datatype : string
        version : 4.0 onwards
        default :
        description : Sets the error message for min validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + 'Min value: ' + value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioNumberInputComponent.prototype, "maxerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxerrormsg;
        },
        /*
        Properties
        name : max-error-msg
        datatype : string
        version : 4.0 onwards
        default :
        description : Sets the error message for max validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + 'Max value: ' + value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioNumberInputComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pattern;
        },
        /*
      Properties
      name : pattern
      datatype : string
      version : 4.0 onwards
      default :
      description : Apply Reg-ex to the field
      */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                this.regEx = new RegExp(this.pattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.generateName(this.name, this.fieldlabel, 'numberinput');
    };
    // THIS METHOD USED FOR BLUR EVENT.
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.onBlurEvent = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    };
    // THIS METHOD USED FOR FOCUS EVENT .
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.showToolTip = true;
        this.focus.emit(this.value);
    };
    // THIS METHOD USED FOR  INPUT EVENT .
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValidate();
        this.input.emit(this.value);
    };
    // THIS METHOD USED FOR CHANGE EVENT  .
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.onChangeEv = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.isFieldValidate = /**
     * @return {?}
     */
    function () {
        if (this.minvalue && !this.maxvalue) {
            return this.innerValue && (this.innerValue > this.minvalue);
        }
        else if (!this.minvalue && this.maxvalue) {
            return this.innerValue && (this.innerValue < this.maxvalue);
        }
        else if (!this.minvalue && !this.maxvalue && this.innerValue) {
            return true;
        }
        else {
            return this.innerValue && (this.innerValue > this.minvalue && this.innerValue < this.maxvalue);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioNumberInputComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        var /** @type {?} */ isValid = (!this.allowblank && this.isFieldValidate()) || this.allowblank;
        return isValid ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioNumberInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-number-input',
                    template: "\n\n\n\n    <div class=\"inputgroup\">\n\n      <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n          {{fieldlabel}}\n      </label>\n\n      <input type=\"number\" \n             class=\"input-control\"\n             [ngClass]=\"model.touched ? (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''\"\n             [(ngModel)]=\"value\"\n             (blur)=\"onBlurEvent()\" \n             (focus)=\"onFocus()\" \n             (input)=\"onInput()\" \n             (change)=\"onChangeEv()\"\n             [name]=\"name\" \n             [pattern]=\"regEx\"\n             [attr.placeholder]=\"placeholder\" \n             [attr.max]=\"maxvalue\" \n             [attr.min]=\"minvalue\" \n             [attr.disabled]=\"disabled ? true: null\"\n             [required]=\"!allowblank\" />\n\n\n      <ng-container *ngIf=\"iconfeedback\">\n          <span class=\"input-control-feedback\">\n              <span *ngIf=\"!isValid && model.touched\"><em class=\"fa fa-times\"></em></span>\n              <span *ngIf=\"isValid && model.touched\"><em class=\"fa fa-check\"></em></span>\n          </span>\n      </ng-container>\n\n\n      <span *ngIf=\"showToolTip && enablepopover\" class=\"dropdown tooltiptext\">\n          <div [innerHTML]=\"helpInfoMsg\"></div>\n      </span>\n      <span class=\"inputfieldbar\"></span>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioNumberInputComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioNumberInputComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioNumberInputComponent.ctorParameters = function () { return []; };
    AmexioNumberInputComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        minvalue: [{ type: core.Input, args: ['min-value',] }],
        maxvalue: [{ type: core.Input, args: ['max-value',] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        minerrormsg: [{ type: core.Input, args: ['min-error-msg',] }],
        maxerrormsg: [{ type: core.Input, args: ['max-error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        minlength: [{ type: core.Input, args: ['min-length',] }],
        maxlength: [{ type: core.Input, args: ['max-length',] }],
        disabled: [{ type: core.Input }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        change: [{ type: core.Output }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        name: [{ type: core.Input, args: ['name',] }],
        pattern: [{ type: core.Input, args: ['pattern',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        model: [{ type: core.ViewChild, args: [forms.NgModel,] }]
    };
    return AmexioNumberInputComponent;
}(ValueAccessorBase));

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioRadioGroupComponent = /** @class */ (function (_super) {
    __extends$8(AmexioRadioGroupComponent, _super);
    // The internal dataviews model
    // private innerValue: any = '';
    function AmexioRadioGroupComponent(amxHttp, cd) {
        var _this = _super.call(this) || this;
        _this.amxHttp = amxHttp;
        _this.cd = cd;
        /*
           Properties
           name : default-value
           datatype : string
           version : 4.0 onwards
           default :
           description : Default Value to be checked
           */
        _this.defaultSelectedValue = '';
        /*
           Properties
           name : data
           datatype : any
           version : 4.0 onwards
           default :
           description : 	Local data for radio group.
           */
        _this.data = [];
        /*
           Events
           name : onSelection
           datatype : any
           version : 4.0 onwards
           default :
           description : Fires selection event
           */
        _this.onSelection = new core.EventEmitter();
        // Placeholders for the callbacks which are later provided
        // by the Control Value Accessor
        // private onTouchedCallback: () => void = noop;
        // private onChangeCallback: (_: any) => void = noop;
        _this.isComponentValid = new core.EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.name = this.generateName(this.name, this.fieldlabel, 'textinput');
        if (this.defaultSelectedValue) {
            this.value = this.defaultSelectedValue;
        }
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.httpmethod && this.httpurl) {
            this.amxHttp.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.data = _this.getResponseData(response);
            });
        }
        else if (this.data != null) {
            this.data = this.getResponseData(this.data);
        }
    };
    /**
     * @param {?} viewData
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.checkDefaultValidation = /**
     * @param {?} viewData
     * @return {?}
     */
    function (viewData) {
        var _this = this;
        viewData.forEach(function (opt) {
            if (opt[_this.valuefield] === _this.innerValue || (opt.hasOwnProperty('selected') && opt.selected)) {
                _this.isValid = true;
                _this.isComponentValid.emit(true);
                return;
            }
        });
    };
    /**
     * @param {?} viewData
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.checkSelectedFlag = /**
     * @param {?} viewData
     * @return {?}
     */
    function (viewData) {
        var _this = this;
        viewData.forEach(function (opt) {
            if (_this.innerValue === '' && (opt.hasOwnProperty('selected') && opt.selected)) {
                _this.value = opt[_this.valuefield];
                return;
            }
        });
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            if (dr != null) {
                for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                    var ir = dr_1[_i];
                    responsedata = responsedata[ir];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.checkSelectedFlag(responsedata);
        if (!this.allowblank) {
            this.checkDefaultValidation(responsedata);
        }
        return responsedata;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    Object.defineProperty(AmexioRadioGroupComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} row
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.onClick = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.isValid = true;
        this.value = row[this.valuefield];
        this.isComponentValid.emit(true);
        this.onSelection.emit(row);
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioRadioGroupComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return ((!this.allowblank && this.value) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioRadioGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-radio-group',
                    template: "\n    <div class=\"inputgroup from-group\">\n      <div *ngIf=\"fieldlabel\">\n        <label>{{fieldlabel}}</label>\n      </div>\n      <ng-container *ngIf=\"horizontal\">\n        <ng-container *ngFor=\"let rData of data\">\n          <span class=\"input-box-container\" style=\"padding-bottom:0px !important; margin: 5px !important\" (click)=\"onClick(rData)\" \n          [ngClass]=\"{'disable-component' : rData.disabled || disabled}\">{{rData[displayfield]}}\n            <input type=\"radio\" [required]=\"!allowblank\" [name]=\"name\" \n            [value]=\"rData[valuefield]\" [attr.disabled]=\"rData?.disabled ? true: null\"\n              [(ngModel)]=\"value\" [checked]=\"(value === rData[valuefield])\">\n            <span class=\"input-box-radiobox-label\"></span>\n          </span>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"!horizontal\">\n        <ng-container *ngFor=\"let rData of data\">\n          <div>\n            <span class=\"input-box-container\" style=\"padding-bottom:0px !important\" (click)=\"onClick(rData)\" [ngClass]=\"{'disable-component' : rData.disabled || disabled}\">{{rData[displayfield]}}\n              <input type=\"radio\" [required]=\"!allowblank\" [name]=\"name\" [checked]=\"(value === rData[valuefield])\" required\n                [value]=\"rData[valuefield]\" [attr.disabled]=\"rData?.disabled ? true: null\" [(ngModel)]=\"value\">\n              <span class=\"input-box-radiobox-label\"></span>\n            </span>\n          </div>\n        </ng-container>\n      </ng-container>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioRadioGroupComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: AmexioRadioGroupComponent, multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioRadioGroupComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioRadioGroupComponent.propDecorators = {
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        name: [{ type: core.Input }],
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        defaultSelectedValue: [{ type: core.Input, args: ['default-value',] }],
        horizontal: [{ type: core.Input }],
        data: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        onSelection: [{ type: core.Output }],
        isComponentValid: [{ type: core.Output }]
    };
    return AmexioRadioGroupComponent;
}(ValueAccessorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioRatingComponent = /** @class */ (function () {
    function AmexioRatingComponent() {
        /*
          Properties
          name : icon-class
          datatype : string
          version : 4.0 onwards
          default : star-icon
          description : Sets if custom icon class is required
          */
        this.iconclass = 'star-icon';
        /*
          Properties
          name : full-icon
          datatype : string
          version : 4.0 onwards
          default :
          description : 	Icon for selected rating .This attribute is useful only
          when user have custom rating icons.example
          */
        this.fullicon = '★';
        /*
          Properties
          name : empty-icon
          datatype : string
          version : 4.0 onwards
          default :
          description : Icon for non-selected rating .This attribute is useful only
          when user have custom rating icons.example
          */
        this.emptyicon = '☆';
        /*
          Properties
          name : titles
          datatype : string array
          version : 4.0 onwards
          default : 1,2,3..
          description : Array of titles
          */
        this.titles = [];
        // -------------------------------------------------------------------------
        // Outputs
        // -------------------------------------------------------------------------
        /*
          Events
          name : onHover
          datatype : any
          version : 4.0 onwards
          default :
          description : Fires on hovering component
          */
        this.onHover = new core.EventEmitter();
        /*
          Events
          name : onLeave
          datatype : any
          version : 4.0 onwards
          default :
          description : fires on leaving component and returns its value
          */
        this.onLeave = new core.EventEmitter();
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this._max = 5;
    }
    Object.defineProperty(AmexioRatingComponent.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        /*
        Properties
        name : max
        datatype : number
        version : 4.0 onwards
        default :
        description : Number of stars for rating component.
        */
        set: /**
         * @param {?} max
         * @return {?}
         */
        function (max) {
            this._max = max;
            this.buildRanges();
        },
        enumerable: true,
        configurable: true
    });
    // -------------------------------------------------------------------------
    // Implemented from ControlValueAccessor
    // -------------------------------------------------------------------------
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioRatingComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioRatingComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioRatingComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    // -------------------------------------------------------------------------
    // Implemented from Va..
    // -------------------------------------------------------------------------
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioRatingComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (this.required && !c.value) {
            return {
                required: true,
            };
        }
        return null;
    };
    // -------------------------------------------------------------------------
    // Lifecycle callbacks
    // -------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AmexioRatingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.buildRanges();
    };
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    /**
     * @param {?} item
     * @return {?}
     */
    AmexioRatingComponent.prototype.calculateWidth = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.hovered > 0) {
            if (this.hoveredPercent !== undefined && this.hovered === item) {
                return this.hoveredPercent;
            }
            else {
                return this.hovered >= item ? 100 : 0;
            }
        }
        else {
            return this.model >= item ? 100 : 100 - Math.round((item - this.model) * 10) * 10;
        }
    };
    /**
     * @param {?} hovered
     * @return {?}
     */
    AmexioRatingComponent.prototype.setHovered = /**
     * @param {?} hovered
     * @return {?}
     */
    function (hovered) {
        if (!this.readonly && !this.disabled) {
            this.hovered = hovered;
            this.onHover.emit(hovered);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioRatingComponent.prototype.changeHovered = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.float) {
            return;
        }
        var /** @type {?} */ target = /** @type {?} */ (event.target);
        var /** @type {?} */ relativeX = event.pageX - target.offsetLeft;
        var /** @type {?} */ percent = Math.round((relativeX * 100 / target.offsetWidth) / 10) * 10;
        this.hoveredPercent = percent > 50 ? 100 : 50;
    };
    /**
     * @return {?}
     */
    AmexioRatingComponent.prototype.resetHovered = /**
     * @return {?}
     */
    function () {
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this.onLeave.emit(this.hovered);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioRatingComponent.prototype.rate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.readonly && !this.disabled && value >= 0 && value <= this.ratingRange.length) {
            var /** @type {?} */ newValue = this.hoveredPercent ? (value - 1) + this.hoveredPercent / 100 : value;
            this.model = newValue;
        }
    };
    /**
     * @return {?}
     */
    AmexioRatingComponent.prototype.buildRanges = /**
     * @return {?}
     */
    function () {
        this.ratingRange = this.range(1, this.max);
    };
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    AmexioRatingComponent.prototype.range = /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (start, end) {
        var /** @type {?} */ foo = [];
        for (var /** @type {?} */ i = start; i <= end; i++) {
            foo.push(i);
        }
        return foo;
    };
    AmexioRatingComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-rating-input',
                    template: "\n    <div class=\"inputgroup\">\n        <ng-container *ngIf=\"fieldlabel\">\n            <label>\n              {{fieldlabel}}\n            </label>\n        </ng-container>\n\n\n        <div (mouseleave)=\"resetHovered()\" class=\"rating\" [class.disabled]=\"disabled\" [class.readonly]=\"readonly\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"ratingRange.length\" [attr.aria-valuenow]=\"model\">\n            <span *ngFor=\"let item of ratingRange; let index = index\">\n              <em (mouseenter)=\"setHovered(item)\"\n                 (mousemove)=\"changeHovered($event)\"\n                 (click)=\"rate(item)\"\n                 [attr.data-icon]=\"fullicon\"\n                 class=\"{{ iconclass }} half{{ calculateWidth(item) }}\"\n                 [title]=\"titles[index] || item\">{{ emptyicon }}</em>\n          </span>\n        </div>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return AmexioRatingComponent; }),
                            multi: true,
                        },
                        {
                            provide: forms.NG_VALIDATORS,
                            useExisting: core.forwardRef(function () { return AmexioRatingComponent; }),
                            multi: true,
                        },
                    ],
                },] },
    ];
    AmexioRatingComponent.propDecorators = {
        iconclass: [{ type: core.Input, args: ['icon-class',] }],
        fullicon: [{ type: core.Input, args: ['full-icon',] }],
        emptyicon: [{ type: core.Input, args: ['empty-icon',] }],
        readonly: [{ type: core.Input, args: ['read-only',] }],
        disabled: [{ type: core.Input }],
        required: [{ type: core.Input }],
        float: [{ type: core.Input }],
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        titles: [{ type: core.Input }],
        max: [{ type: core.Input }],
        onHover: [{ type: core.Output }],
        onLeave: [{ type: core.Output }]
    };
    return AmexioRatingComponent;
}());

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioTextInputComponent = /** @class */ (function (_super) {
    __extends$9(AmexioTextInputComponent, _super);
    function AmexioTextInputComponent() {
        var _this = _super.call(this) || this;
        /*
        Properties
        name : icon-feedback
        datatype : boolean
        version : 4.0 onwards
        default :false
        description :
        */
        _this.iconfeedback = false;
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Flag to set label
        */
        _this.haslabel = true;
        _this.isValid = false;
        /*
         Events
         name : onBlur
         datatype : any
         version : 4.0 onwards
         default :
         description : On blur event
         */
        _this.onBlur = new core.EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description :   On input event field.
        */
        _this.input = new core.EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On focus event field.
        */
        _this.focus = new core.EventEmitter();
        /*
        Events
        name : change
        datatype : any
        version : none
        default :
        description : On field value change event
        */
        _this.change = new core.EventEmitter();
        _this.showToolTip = false;
        return _this;
    }
    Object.defineProperty(AmexioTextInputComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
       Properties
       name : error-msg
       datatype : none
       version : 4.0 onwards
       default : none
       description : Sets the error message
       */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextInputComponent.prototype, "minerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minerrormsg;
        },
        /*
       Properties
       name : min-error-msg
       datatype : string
       version : 4.0 onwards
       default :
       description : Sets the error message for min validation
       */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + '<b>Min Length<b/>: ' + value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextInputComponent.prototype, "maxerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxerrormsg;
        },
        /*
       Properties
       name : max-error-msg
       datatype : string
       version : 4.0 onwards
       default :
       description : Sets the error message for max validation
       */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextInputComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pattern;
        },
        /*
      Properties
      name : pattern
      datatype : string
      version : 4.0 onwards
      default :
      description : Apply Reg-ex to the field
      */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                this._pattern = value;
                this.regEx = new RegExp(this._pattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.generateName(this.name, this.fieldlabel, 'textinput');
    };
    // THIS METHOD USED FOR BLUR EVENT.
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.onBlurEvent = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    };
    // THIS METHOD USED FOR FOCUS EVENT .
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.onFocusEvent = /**
     * @return {?}
     */
    function () {
        this.showToolTip = true;
        this.focus.emit(this.value);
    };
    // THIS METHOD USED FOR  INPUT EVENT .
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    };
    // THIS METHOD USED FOR CHANGE EVENT  .
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.onChangeEv = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioTextInputComponent.prototype.isFieldValid = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ valid;
        valid = (!this.allowblank && (this.value && ((this.value.length >= this.minlength) && this.value.length > 0)) ||
            (!this.minlength && this.value && this.value.length > 0)) || this.allowblank;
        return valid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioTextInputComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioTextInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-text-input',
                    template: "\n    <div class=\"inputgroup\">\n\n        <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n          {{fieldlabel}}\n      </label>\n        <input type=\"text\" #inp=\"ngModel\"  class=\"input-control\" [ngClass]=\"inp.touched ? (isValid && inp.touched) ? 'input-control-success' : 'input-control-error' :''\" [(ngModel)]=\"value\" (blur)=\"onBlurEvent()\" (focus)=\"onFocusEvent()\" (input)=\"onInput()\" (change)=\"onChangeEv()\"\n            [name]=\"name\" [pattern]=\"regEx\" [attr.placeholder]=\"placeholder\" [maxlength]=\"maxlength\" [minlength]=\"minlength\" [attr.disabled]=\"disabled ? true: null\" [required]=\"!allowblank\" />\n\n\n        <ng-container *ngIf=\"iconfeedback\">\n            <span class=\"input-control-feedback\">\n              <span *ngIf=\"!isValid && inp.touched\"><em class=\"fa fa-times\"></em></span>\n            <span *ngIf=\"isValid && inp.touched\"><em class=\"fa fa-check\"></em></span>\n            </span>\n        </ng-container>\n\n\n        <span *ngIf=\"showToolTip && enablepopover\" class=\"dropdown tooltiptext\">\n          <div [innerHTML]=\"helpInfoMsg\"></div>\n      </span>\n        <span class=\"inputfieldbar\"></span>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioTextInputComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioTextInputComponent; }), multi: true,
                        }],
                    encapsulation: core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    AmexioTextInputComponent.ctorParameters = function () { return []; };
    AmexioTextInputComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        minlength: [{ type: core.Input, args: ['min-length',] }],
        maxlength: [{ type: core.Input, args: ['max-length',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        minerrormsg: [{ type: core.Input, args: ['min-error-msg',] }],
        maxerrormsg: [{ type: core.Input, args: ['max-error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        pattern: [{ type: core.Input, args: ['pattern',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        model: [{ type: core.ViewChild, args: [forms.NgModel,] }],
        name: [{ type: core.Input, args: ['name',] }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        change: [{ type: core.Output }]
    };
    return AmexioTextInputComponent;
}(ValueAccessorBase));

var __extends$10 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$6 = function () {
};
var AmexioToggleComponent = /** @class */ (function (_super) {
    __extends$10(AmexioToggleComponent, _super);
    function AmexioToggleComponent() {
        var _this = _super.call(this) || this;
        _this.onChange = new core.EventEmitter();
        _this.isComponentValid = new core.EventEmitter();
        _this.innerValue = '';
        _this.onTouchedCallback = noop$6;
        _this.onChangeCallback = noop$6;
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioToggleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.shape === '' || this.shape == null) {
            this.shape = 'round';
        }
        this.isValid = !this.required;
        this.isComponentValid.emit(false);
    };
    /**
     * @return {?}
     */
    AmexioToggleComponent.prototype.onToggle = /**
     * @return {?}
     */
    function () {
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.onChange.emit(this.value);
    };
    Object.defineProperty(AmexioToggleComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // Set touched on blur
    /**
     * @return {?}
     */
    AmexioToggleComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioToggleComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value !== this.innerValue) {
            this.isValid = value;
        }
        if (!value && value !== this.innerValue) {
            this.isValid = value;
        }
        this.innerValue = value;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioToggleComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioToggleComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioToggleComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioToggleComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return ((this.required && this.value) || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioToggleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-toggle',
                    template: "\n    <div class=\"inputgroup \">\n\n    <label>{{fieldlabel}}</label>\n    <label class=\"toggle\">\n      <input type=\"checkbox\" checked\n             [name]=\"value\"\n             #rangeHndl\n             (blur)=\"onBlur()\"\n             [(ngModel)]=\"value\"\n             (change)=\"onToggle()\">\n      <span class=\"toggle-slider {{shape}}\"></span>\n    </label>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioToggleComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioToggleComponent; }), multi: true,
                        }],
                    encapsulation: core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    AmexioToggleComponent.ctorParameters = function () { return []; };
    AmexioToggleComponent.propDecorators = {
        shape: [{ type: core.Input }],
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        required: [{ type: core.Input }],
        onChange: [{ type: core.Output }],
        isComponentValid: [{ type: core.Output }]
    };
    return AmexioToggleComponent;
}(AmexioFormValidator));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*****
 * Created by pratik on 18/12/17.

 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 ****/
var AmexioImageComponent = /** @class */ (function () {
    function AmexioImageComponent() {
        /*
        Properties
        name : c-class
        datatype :  string
        version : 4.0 onwards
        default :
        description : Used for custom style classes
        */
        this.cclass = '';
        /*
        Events
        name : onClick
        datatype :  none
        version : none
        default : none
        description : Get image / icon click event.
        */
        this.onClick = new core.EventEmitter();
        this.overlay = false;
        this.imageCss = ' image-';
        this.overlayTextCss = 'overlay-text overlay-';
        this.textCss = '-text';
        this.imgFluidCss = ' img-fluid';
        this.overlayOverlayCss = 'overlay overlay-';
        this.imageTitleCss = 'image-title image-';
        this.imageTitleBottomCss = 'image-title image-bottom-right';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioImageComponent.prototype.onImageClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClick.emit(event);
    };
    /**
     * @return {?}
     */
    AmexioImageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!(this.width || this.height)) {
            this.cclass = this.cclass + this.imgFluidCss;
        }
        if (this.filter) {
            this.cclass = this.cclass + this.imageCss + this.filter;
        }
        if (this.overlayEffect) {
            this.overlay = true;
            if (!this.overlayText) {
                this.overlayText = '';
            }
            if (this.overlayText) {
                this.overlayTextClass = this.overlayTextCss + this.overlayEffect + this.textCss;
            }
            this.overlayEffect = this.overlayOverlayCss + this.overlayEffect;
        }
        if (this.position && !this.imgTitle) {
            this.imgTitle = '';
        }
        if (this.imgTitle) {
            if (this.position) {
                this.position = this.imageTitleCss + this.position;
            }
            else {
                this.position = this.imageTitleBottomCss;
            }
        }
    };
    AmexioImageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-image', template: "\n    <!--Normal image-->\n    <ng-container *ngIf=\"iconclass && (!path && !mda) && overlay || overlayText || titlePara || imgTitle \">\n    <div class=\"img-container\">\n      <ng-container *ngIf=\"path || (path && iconclass)\">\n        <ng-container *ngIf=\"!(width || height)\">\n          <img alt=\"title\" [src]=\"path\" [attr.class]=\"cclass\" (click)=\"onImageClick($event)\" [attr.title]=\"tooltip\">\n          <div *ngIf=\"overlay\" [ngClass]=\"overlayEffect\">\n            <div *ngIf=\"overlayText\" [ngClass]=\"overlayTextClass\">{{overlayText}}\n              <p *ngIf=\"titlePara\">{{titlePara}}</p>\n            </div>\n          </div>\n          <div *ngIf=\"imgTitle\" [ngClass]=\"position\">{{imgTitle}}</div>\n        </ng-container>\n        <ng-container *ngIf=\"width || height\">\n          <img alt=\"title\" [ngStyle]=\"{'width':width,'height':height}\" [attr.class]=\"cclass\" [src]=\"path\" (click)=\"onImageClick($event)\" [attr.title]=\"tooltip\">\n           <div *ngIf=\"overlay\" [ngClass]=\"overlayEffect\">\n            <div *ngIf=\"overlayText\" [ngClass]=\"overlayTextClass\">{{overlayText}}\n              <p *ngIf=\"titlePara\">{{titlePara}}</p>\n            </div>\n          </div>\n          <div *ngIf=\"imgTitle\" [ngClass]=\"position\">{{imgTitle}}</div>\n        </ng-container>\n      </ng-container>\n      </div>\n    </ng-container>\n\n\n\n    <ng-container *ngIf=\"!(iconclass && (!path && !mda) && overlay || overlayText || titlePara || imgTitle )\">\n        <ng-container *ngIf=\"path || (path && iconclass)\">\n        <ng-container *ngIf=\"!(width || height)\">\n        <img alt=\"title\" [src]=\"path\" [attr.class]=\"cclass\" (click)=\"onImageClick($event)\" [attr.title]=\"tooltip\">\n        </ng-container>\n        <ng-container *ngIf=\"width || height\">\n        <img alt=\"title\" [ngStyle]=\"{'width':width,'height':height}\" [attr.class]=\"cclass\" [src]=\"path\" (click)=\"onImageClick($event)\" [attr.title]=\"tooltip\">\n        </ng-container>\n        </ng-container>\n        </ng-container>\n    \n    <!--this is for fontawesome-->\n    <ng-container *ngIf=\"iconclass && (!path && !mda)\">\n      <em [attr.class]=\"iconclass\" [attr.title]=\"tooltip\" (click)=\"onImageClick($event)\"></em>\n      <label class=\"image-title\" *ngIf=\"title\" (click)=\"onImageClick($event)\" style=\"cursor: pointer\">{{title}}</label>\n    </ng-container>\n\n    <!--Material icon-->\n    <ng-container *ngIf=\"(iconclass && mda) && !path\">\n      <em [attr.class]=\"iconclass\" [attr.title]=\"tooltip\" (click)=\"onImageClick($event)\">{{mda}}</em>\n    </ng-container>\n\n    <ng-container *ngIf=\" title && !iconclass\">\n      <span style=\"font-size: medium\">{{title}}</span>\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioImageComponent.ctorParameters = function () { return []; };
    AmexioImageComponent.propDecorators = {
        tooltip: [{ type: core.Input }],
        title: [{ type: core.Input }],
        path: [{ type: core.Input }],
        iconclass: [{ type: core.Input, args: ['icon-class',] }],
        cclass: [{ type: core.Input, args: ['c-class',] }],
        mda: [{ type: core.Input }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        filter: [{ type: core.Input, args: ['filter',] }],
        overlayEffect: [{ type: core.Input, args: ['overlay-effect',] }],
        overlayText: [{ type: core.Input, args: ['overlay-text',] }],
        imgTitle: [{ type: core.Input, args: ['image-title',] }],
        position: [{ type: core.Input, args: ['title-position',] }],
        titlePara: [{ type: core.Input, args: ['para',] }]
    };
    return AmexioImageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioTabActionComponent = /** @class */ (function () {
    function AmexioTabActionComponent() {
        this.showContent = false;
        this.actionComponent = '';
    }
    /**
     * @return {?}
     */
    AmexioTabActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioTabActionComponent.prototype.checkActionComponent = /**
     * @return {?}
     */
    function () {
        this.textinput = this.queryTextinput.toArray();
        if (this.textinput.length > 0) {
            this.actionComponent = 'text';
            this.textinput[0].haslabel = false;
            this.textinput[0].iconfeedback = false;
        }
        this.checkbox = this.queryCheckbox.toArray();
        if (this.checkbox.length > 0) {
            this.actionComponent = 'checkbox';
            this.checkbox[0].fieldlabel = '';
        }
        this.radioGroup = this.queryRadioGroup.toArray();
        if (this.radioGroup.length > 0) {
            this.actionComponent = 'radiogroup';
            this.radioGroup[0].fieldlabel = '';
            this.radioGroup[0].horizontal = true;
        }
        this.label = this.queryLabel.toArray();
        if (this.label.length > 0) {
            this.actionComponent = 'label';
        }
        this.number = this.queryNumber.toArray();
        if (this.number.length > 0) {
            this.actionComponent = 'number';
            this.number[0].fieldlabel = '';
        }
        this.rating = this.queryRating.toArray();
        if (this.rating.length > 0) {
            this.actionComponent = 'rating';
            this.rating[0].fieldlabel = '';
        }
        this.toggle = this.queryToggle.toArray();
        if (this.toggle.length > 0) {
            this.actionComponent = 'toggle';
            this.toggle[0].fieldlabel = '';
        }
        this.button = this.queryButton.toArray();
        if (this.button.length > 0) {
            this.actionComponent = 'button';
        }
        this.image = this.queryImage.toArray();
        if (this.image.length > 0) {
            this.actionComponent = 'image';
        }
        this.dropdown = this.queryDropDown.toArray();
        if (this.dropdown.length > 0) {
            this.actionComponent = 'dropdown';
            this.dropdown[0].fieldlabel = '';
        }
        this.checkboxgroup = this.queryCheckBoxGroup.toArray();
        if (this.checkboxgroup.length > 0) {
            this.actionComponent = 'checkboxgroup';
            this.checkboxgroup[0].fieldlabel = '';
            this.checkboxgroup[0].horizontal = true;
        }
    };
    AmexioTabActionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tab-action',
                    template: "\n   <ng-content></ng-content>\n   ",
                },] },
    ];
    /** @nocollapse */
    AmexioTabActionComponent.ctorParameters = function () { return []; };
    AmexioTabActionComponent.propDecorators = {
        queryTextinput: [{ type: core.ContentChildren, args: [AmexioTextInputComponent, { descendants: true },] }],
        queryCheckbox: [{ type: core.ContentChildren, args: [AmexioCheckBoxComponent, { descendants: true },] }],
        queryRadioGroup: [{ type: core.ContentChildren, args: [AmexioRadioGroupComponent, { descendants: true },] }],
        queryLabel: [{ type: core.ContentChildren, args: [AmexioLabelComponent, { descendants: true },] }],
        queryNumber: [{ type: core.ContentChildren, args: [AmexioNumberInputComponent, { descendants: true },] }],
        queryRating: [{ type: core.ContentChildren, args: [AmexioRatingComponent, { descendants: true },] }],
        queryToggle: [{ type: core.ContentChildren, args: [AmexioToggleComponent, { descendants: true },] }],
        queryButton: [{ type: core.ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
        queryImage: [{ type: core.ContentChildren, args: [AmexioImageComponent, { descendants: true },] }],
        queryDropDown: [{ type: core.ContentChildren, args: [AmexioDropDownComponent, { descendants: true },] }],
        queryCheckBoxGroup: [{ type: core.ContentChildren, args: [AmexioCheckBoxGroupComponent, { descendants: true },] }]
    };
    return AmexioTabActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var TOP_COMPONENT_CLASS_MAP = {
    red: 'amexio-top-tab-red',
    green: 'amexio-top-tab-green',
    purple: 'amexio-top-tab-purple',
    blue: 'amexio-top-tab-blue',
    brown: 'amexio-top-tab-brown',
    yellow: 'amexio-top-tab-yellow',
    black: 'amexio-top-tab-black',
    pink: 'amexio-top-tab-pink',
    orange: 'amexio-top-tab-orange',
};
var BOTTOM_COMPONENT_CLASS_MAP = {
    red: 'amexio-bottom-tab-red',
    green: 'amexio-bottom-tab-green',
    purple: 'amexio-bottom-tab-purple',
    blue: 'amexio-bottom-tab-blue',
    brown: 'amexio-bottom-tab-brown',
    yellow: 'amexio-bottom-tab-yellow',
    black: 'amexio-bottom-tab-black',
    pink: 'amexio-bottom-tab-pink',
    orange: 'amexio-bottom-tab-orange',
};
var AmexioTabComponent = /** @class */ (function () {
    function AmexioTabComponent(render, componentFactoryResolver, renderer) {
        this.render = render;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        /*
           Properties
           name :  context-menu
           datatype : string
           version : 5.0.1 onwards
           default :
           description : Context Menu provides the list of menus on right click.
           */
        this.contextmenu = [];
        /*
           Events
           name : rightClick
           datatype : none
           version : 5.0.1
           default : none
           description : It will gives you row clicked data.
           */
        this.rightClick = new core.EventEmitter();
        /*
           Events
           name : onClick
           datatype : none
           version : none
           default : none
           description : Callback to invoke on activated tab event.
           */
        this.onClick = new core.EventEmitter();
        this.showprev = false;
        this.shownext = false;
        this.mouseLocation = { left: 0, top: 0 };
        this.closeOthersConst = 'Close Others';
        this.dummyArray = [];
        this.tabPositionClass = '';
        this.componentId = '';
        this.map = new Map();
        this.headeralign = 'left';
        this.typeActionAlign = 'left';
        this.tabPosition = 'top';
        this.fullPageTabs = false;
        this.action = false;
    }
    Object.defineProperty(AmexioTabComponent.prototype, "tabLocalData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabLocalData;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tabLocalData = value;
            if (this.componentLoaded) {
                this.updateTabComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.componentLoaded = true;
        this.componentId = Math.floor(Math.random() * 90000) + 10000 + '_tabc';
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.updateTabComponent = /**
     * @return {?}
     */
    function () {
        if (this.tabs.nativeElement.scrollWidth > this.tabs.nativeElement.clientWidth) {
            this.headeralign = 'left';
        }
        this.adjustWidth();
        if (this.tabs && this.tabs.nativeElement
            && this.headerWidth && this.headerWidth.nativeElement
            && this.tabAction && this.tabAction.nativeElement
            && this.tabWidth1 !== this.tabs.nativeElement.offsetWidth) {
            this.headWidth = (this.tabAction.nativeElement.scrollWidth + this.headerWidth.nativeElement.scrollWidth);
            this.widthTabs = this.tabs.nativeElement.offsetWidth - this.headWidth;
        }
        if (JSON.stringify(this.tabPreviewData) !== JSON.stringify(this.tabLocalData)) {
            this.tabPreviewData = JSON.parse(JSON.stringify(this.tabLocalData));
            this.tabCollection = this.tabLocalData;
        }
        this.tabPositionClass = this.findTabStyleClass();
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tabWidth1 = this.tabs.nativeElement.offsetWidth;
        this.totalTabs = this.tabCollection.length;
        setTimeout(function () {
            _this.updateTabComponent();
        }, 500);
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.adjustWidth = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tWidth = this.tabs.nativeElement.clientWidth;
        var /** @type {?} */ tlistWidth = this.tabslist.nativeElement.scrollWidth;
        var /** @type {?} */ hWidth = 0;
        var /** @type {?} */ totalElWidth = tlistWidth + hWidth;
        if (totalElWidth > tWidth) {
            this.shownext = true;
        }
        else {
            this.shownext = false;
        }
        if (this.fullPageTabs === true) {
            if (totalElWidth > tWidth && this.fullPageTabs) {
                this.shownext = true;
            }
            else {
                this.singleTabWidth = totalElWidth / this.totalTabs;
            }
        }
        this.onAdjustHeight();
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.tabLocalData && this.tabLocalData.length > 0) {
            this.tabPreviewData = JSON.parse(JSON.stringify(this.tabLocalData));
            this.tabCollection = this.tabLocalData;
        }
        else {
            this.tabCollection = [];
            this.tabCollection = this.queryTabs.toArray();
        }
        this.tabNodeProperties();
        // To add action in tab
        this.actionComp = this.queryAction.toArray();
        if (this.actionComp.length > 0) {
            this.actionComp[0].checkActionComponent();
        }
        this.tabPositionClass = this.findTabStyleClass();
    };
    /**
     * @param {?} title
     * @param {?} amexiocolor
     * @param {?} closable
     * @param {?} component
     * @return {?}
     */
    AmexioTabComponent.prototype.addDynamicTab = /**
     * @param {?} title
     * @param {?} amexiocolor
     * @param {?} closable
     * @param {?} component
     * @return {?}
     */
    function (title, amexiocolor, closable, component) {
        // get a component factory for our TabComponent
        var /** @type {?} */ tpCF = this.componentFactoryResolver.resolveComponentFactory(AmexioTabPillComponent);
        var /** @type {?} */ tp = this.target.createComponent(tpCF);
        // set the according properties on our component instance
        var /** @type {?} */ instance = /** @type {?} */ (tp.instance);
        instance.title = title;
        instance.active = true;
        instance.closable = closable;
        instance['tabpillinstance'] = this.target;
        if (instance.amexiocolor === '') {
            instance.amexiocolor = 'amexio-top-tab-black';
        }
        else {
            instance.amexiocolor = 'amexio-top-tab-' + amexiocolor;
        }
        // create dynamic component
        var /** @type {?} */ dynCF = this.componentFactoryResolver.resolveComponentFactory(component);
        var /** @type {?} */ dynCmp = tp.instance.target.createComponent(dynCF);
        // Push new tab and select it.
        this.dummyArray.push(tp);
        this.tabCollection.push(tp.instance);
        this.selectTab(tp.instance);
        this.adjustWidth();
        return dynCmp.instance;
    };
    // Method to close all tab
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.closeAllTabs = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tabCollection.forEach(function (tabs) {
            if (tabs.closable === true || _this.closable === true) {
                _this.closeTab(tabs);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioTabComponent.prototype.closeTabs = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        var /** @type {?} */ tabList = [];
        this.tabCollection.forEach(function (tabs) {
            tabs.active = false;
            data.forEach(function (opt) {
                if (opt.toLowerCase() !== tabs.title.toLowerCase() && (tabs.closable === true || _this.closable === true)) {
                    _this.closeTab(tabs);
                }
                else {
                    tabList.push(tabs);
                    _this.asignTabPillClass(tabs);
                }
            });
        });
        tabList[tabList.length - 1].active = true;
        this.asignTabPillClass(tabList[tabList.length - 1]);
    };
    // Method to set active tab on the basis of tab sequence or tab title
    /**
     * @param {?} input
     * @return {?}
     */
    AmexioTabComponent.prototype.setActiveTab = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var _this = this;
        var /** @type {?} */ flag = false;
        if (typeof input === 'string') {
            this.tabCollection.forEach(function (tabs) {
                tabs.tabPillClass = '';
                if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                    tabs.active = true;
                    flag = true;
                }
                else {
                    tabs.active = false;
                }
                _this.asignTabPillClass(tabs);
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach(function (tabs, index) {
                tabs.tabPillClass = '';
                if (index + 1 === input) {
                    tabs.active = true;
                    flag = true;
                }
                else {
                    tabs.active = false;
                }
                _this.asignTabPillClass(tabs);
            });
        }
        return flag;
    };
    /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    AmexioTabComponent.prototype.setDisableTabs = /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    function (disabledTabInput) {
        var _this = this;
        var /** @type {?} */ flag = false;
        if (disabledTabInput.length > 0) {
            disabledTabInput.forEach(function (ele) {
                if (typeof ele === 'string') {
                    _this.disableTabByString(flag, ele);
                }
                else if (typeof ele === 'number') {
                    _this.disableTabByNumber(flag, ele);
                }
            });
        }
        return flag;
    };
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    AmexioTabComponent.prototype.disableTabByString = /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    function (flag, ele) {
        var _this = this;
        this.tabCollection.forEach(function (tabs) {
            tabs.tabPillClass = '';
            if (ele.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                tabs.disabled = true;
                flag = true;
            }
            _this.asignTabPillClass(tabs);
        });
    };
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    AmexioTabComponent.prototype.disableTabByNumber = /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    function (flag, ele) {
        var _this = this;
        this.tabCollection.forEach(function (tabs, index) {
            tabs.tabPillClass = '';
            if (index + 1 === ele) {
                tabs.active = true;
                flag = true;
            }
            else {
                tabs.active = false;
            }
            _this.asignTabPillClass(tabs);
        });
    };
    /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    AmexioTabComponent.prototype.setEnableTabs = /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    function (disabledTabInput) {
        var _this = this;
        var /** @type {?} */ flag = false;
        if (disabledTabInput.length > 0) {
            disabledTabInput.forEach(function (ele) {
                if (typeof ele === 'string') {
                    _this.enableTabByString(flag, ele);
                }
                else if (typeof ele === 'number') {
                    _this.enableTabByNumber(flag, ele);
                }
            });
        }
        return flag;
    };
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    AmexioTabComponent.prototype.enableTabByString = /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    function (flag, ele) {
        var _this = this;
        this.tabCollection.forEach(function (tabs) {
            tabs.tabPillClass = '';
            if (ele.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                tabs.disabled = false;
                flag = true;
            }
            _this.asignTabPillClass(tabs);
        });
    };
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    AmexioTabComponent.prototype.enableTabByNumber = /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    function (flag, ele) {
        var _this = this;
        this.tabCollection.forEach(function (tabs, index) {
            tabs.tabPillClass = '';
            if (index + 1 === ele) {
                tabs.disabled = false;
                flag = true;
            }
            _this.asignTabPillClass(tabs);
        });
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    AmexioTabComponent.prototype.selectTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        var _this = this;
        // deactivate all tabs
        this.tabCollection.forEach(function (tab1) {
            tab1.active = false;
        });
        tab.active = true;
        this.tabCollection.forEach(function (tab1) {
            _this.asignTabPillClass(tab1);
        });
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.tabNodeProperties = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tabWidth = this.tabCollection.length;
        for (var /** @type {?} */ i = 0; i < tabWidth; i++) {
            if (this.tabPosition === 'top') {
                this.tabCollection[i].amexiocolor = TOP_COMPONENT_CLASS_MAP[this.tabCollection[i].amexiocolor];
            }
            else {
                this.tabCollection[i].amexiocolor = BOTTOM_COMPONENT_CLASS_MAP[this.tabCollection[i].amexiocolor];
            }
            if (this.closable) {
                if (this.tabCollection[i].closable === null || this.tabCollection[i].closable === true) {
                    this.tabCollection[i].closable = true;
                }
                else if (this.tabCollection[i].closable === false) {
                    this.tabCollection[i].closable = false;
                }
            }
            this.asignTabPillClass(this.tabCollection[i]);
        }
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    AmexioTabComponent.prototype.onTabClick = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        var _this = this;
        if (!tab.disabled && !tab.header) {
            for (var _i = 0, _a = this.tabCollection; _i < _a.length; _i++) {
                var i = _a[_i];
                if (i === tab) {
                    i['active'] = true;
                    this.asignTabPillClass(tab);
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                    i['tabPillClass'] = '';
                }
            }
            this.tabCollection.forEach(function (tab1) {
                _this.asignTabPillClass(tab1);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ nxt = this.tabs.nativeElement;
        nxt.scrollLeft = nxt.scrollLeft + 200;
        if ((nxt.scrollWidth - nxt.offsetWidth - nxt.scrollLeft) <= 0) {
            this.shownext = false;
        }
        this.showprev = true;
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ prev = this.tabs.nativeElement;
        prev.scrollLeft = prev.scrollLeft - 200;
        if (prev.scrollLeft === 0) {
            this.showprev = false;
        }
        this.shownext = true;
    };
    /**
     * @param {?} tabNode
     * @return {?}
     */
    AmexioTabComponent.prototype.closeTab = /**
     * @param {?} tabNode
     * @return {?}
     */
    function (tabNode) {
        var /** @type {?} */ newTab = [];
        var /** @type {?} */ index = 0;
        var /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach(function (tab, i) {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
                if (tab.hasOwnProperty('tabpillinstance')) {
                    tab.target.remove();
                }
                else {
                    var /** @type {?} */ removeNode = document.getElementById(tab.tabId).parentNode;
                    var /** @type {?} */ parentRefNode = removeNode.parentNode;
                    parentRefNode.removeChild(removeNode);
                }
            }
            else if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.tabCollection = newTab;
        if (tabHighlightIndex > -1) {
            this.activateTab(newTab[tabHighlightIndex].tabId);
        }
        else {
            this.activateTab(null);
        }
        if (this.tabCollection.length === 1) {
            this.closable = false;
        }
        if (newTab.length === 1) {
            newTab[0].closable = false;
        }
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    AmexioTabComponent.prototype.activateTab = /**
     * @param {?} tabId
     * @return {?}
     */
    function (tabId) {
        var _this = this;
        if (tabId !== null) {
            this.tabCollection.forEach(function (tab) {
                tab.active = false;
                if (tab.tabId === tabId) {
                    tab.active = true;
                }
                _this.asignTabPillClass(tab);
            });
        }
    };
    /**
     * @param {?} tabData
     * @return {?}
     */
    AmexioTabComponent.prototype.asignTabPillClass = /**
     * @param {?} tabData
     * @return {?}
     */
    function (tabData) {
        tabData.tabPillClass = '';
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && tabData.active && (this.tabPosition === 'top')) {
            tabData.tabPillClass = 'activetab';
        }
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'bottomActivetab';
        }
        if (tabData.disabled) {
            tabData.tabPillClass = 'disabled-tab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'top') && tabData.active) {
            tabData.tabPillClass = 'activecolortab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'activebottomcolortab';
        }
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.findTabStyleClass = /**
     * @return {?}
     */
    function () {
        if (this.headeralign === 'right' && !this.fullPageTabs) {
            return 'tabposition-right';
        }
        if (this.headeralign === 'left' && !this.fullPageTabs) {
            return 'tabposition-left';
        }
        if (this.fullPageTabs === true) {
            return 'equally-align-tabs';
        }
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.onAdjustHeight = /**
     * @return {?}
     */
    function () {
        if (this.bodyheight) {
            var /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.tabs && this.tabs.nativeElement && this.tabs.nativeElement.offsetHeight) {
                h = h - this.tabs.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    };
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    AmexioTabComponent.prototype.loadContextMenu = /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    function (event, row, id) {
        this.tempSelectedFlag(this.tabCollection);
        this.mouseLocation.left = event.clientX;
        this.mouseLocation.top = event.clientY;
        row.active = true;
        this.getContextMenu();
        this.posixUp = this.getListPosition(id);
        event.preventDefault();
        event.stopPropagation();
        this.rightClickRowData = row;
        this.contextStyle = this.getContextMenuStyle();
    };
    /**
     * @param {?} tabs
     * @return {?}
     */
    AmexioTabComponent.prototype.tempSelectedFlag = /**
     * @param {?} tabs
     * @return {?}
     */
    function (tabs) {
        tabs.forEach(function (tab) {
            if (tab.active) {
                tab.active = false;
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.defaultContextMenu) {
            var /** @type {?} */ obj = { text: 'Close All', icon: 'fa fa-close', disable: false };
            var /** @type {?} */ obj2 = { text: this.closeOthersConst, icon: 'fa fa-close', seperator: false, disabled: false };
            var /** @type {?} */ tmpflag = true;
            for (var _i = 0, _a = this.contextmenu; _i < _a.length; _i++) {
                var i = _a[_i];
                if (i.text === 'Close All' || i.text === this.closeOthersConst) {
                    tmpflag = false;
                }
            }
            if (tmpflag) {
                this.contextmenu.push(obj, obj2);
            }
            this.contextMenuFlag = true;
            this.addListner();
        }
        else if (this.contextmenu && this.contextmenu.length > 0) {
            this.contextMenuFlag = true;
            this.addListner();
        }
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextMenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioTabComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioTabComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        var /** @type {?} */ temptab;
        this.tabCollection.forEach(function (obj) {
            if (obj.active) {
                temptab = obj;
            }
        });
        if (itemConfig.active) {
            temptab = itemConfig;
        }
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                rowData: this.rightClickRowData,
            };
            if (itemConfig.text === 'Close All') {
                this.closeAllTabs();
            }
            if (itemConfig.text === this.closeOthersConst) {
                this.closeOtherTabs(temptab);
            }
            this.contextMenuFlag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioTabComponent.prototype.closeOtherTabs = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.tabCollection.forEach(function (tabs) {
            if (data.title.toLowerCase() !== tabs.title.toLowerCase() && (tabs.closable === true || _this.closable === true)) {
                _this.closeTab(tabs);
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.contextMenuFlag = false;
            if (!_this.contextMenuFlag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioTabComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
    };
    AmexioTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tab-view',
                    template: "\n    <div class=\"tabwrapper\">\n      <div *ngIf=\"showprev\" [ngClass]=\"{'tabnavigation float-right tabnavigation-bottom-left':tabPosition=='bottom', 'tabnavigation float-left':tabPosition=='top'}\" (click)=\"previous()\">\n        <amexio-pane-icon key=\"tab_previous\"></amexio-pane-icon>\n      </div>\n      <div *ngIf=\"shownext\" [ngClass]=\"{'tabnavigation float-right tabnavigation-bottom-right':tabPosition=='bottom','tabnavigation float-right':tabPosition=='top'}\" (click)=\"next()\">\n        <amexio-pane-icon key=\"tab_next\"></amexio-pane-icon>\n      </div>\n\n      <div #tab class=\"tab\" [ngClass]=\"{'bottomTab':tabPosition == 'bottom'}\">\n\n        <div #tabslist class=\"tablistitems {{tabPositionClass}}\">\n          <!-- HEADER -->\n\n          <div class=\"tablink\" style=\"padding-bottom:0%\" *ngIf=\"(this.action == true || header) && (fullPageTabs == false)\">\n            <div class=\"table\">\n              <div class=\"tablerow\">\n                <div class=\"tablecol\">\n                  {{header}}\n                </div>\n                <div class=\"tablecol\">\n                  <ng-content select=\"amexio-tab-action\"></ng-content>\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n\n          <div>\n            <div *ngFor=\"let tabnode of tabCollection\" class=\"tablink {{tabnode.amexiocolor+ ' '+tabnode.tabPillClass}}\" [style.width.px]=\"singleTabWidth\"\n                 (click)=\"onTabClick(tabnode)\" (contextmenu)=\"loadContextMenu($event,tabnode, tab)\">\n              <div class=\"table\">\n                <div class=\"tablerow\">\n                  <div *ngIf=\"tabnode.icon\" class=\"tablecol\">\n                    <amexio-pane-icon *ngIf=\"tabnode.icon\" [customclass]=\"tabnode.icon\"></amexio-pane-icon>\n                  </div>\n                  <div class=\"tablecol\">\n                    {{tabnode.title}}\n                  </div>\n                  <div *ngIf=\"tabnode.closable\" class=\"tablecol\">\n                    <amexio-pane-icon key=\"tab_close\" (onClick)=\"closeTab(tabnode)\"></amexio-pane-icon>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"tabcontent\" [attr.id]=\"componentId\" [ngStyle]=\"{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}\" >\n      <ng-content></ng-content>\n      <ng-template #target></ng-template>\n    </div>\n\n    <span [ngStyle]=\"contextStyle\">\n      <ul *ngIf=\"contextMenuFlag\" class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n        <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\" [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\"\n            *ngFor=\"let itemConfig of contextmenu\">\n          <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n          <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n          </span>\n        </li>\n      </ul>\n    </span>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioTabComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ComponentFactoryResolver },
        { type: core.Renderer2 }
    ]; };
    AmexioTabComponent.propDecorators = {
        closable: [{ type: core.Input }],
        headeralign: [{ type: core.Input, args: ['header-align',] }],
        action: [{ type: core.Input }],
        typeActionAlign: [{ type: core.Input, args: ['action-type-align',] }],
        fullPageTabs: [{ type: core.Input, args: ['divide-header-equally',] }],
        tabPosition: [{ type: core.Input, args: ['tab-position',] }],
        header: [{ type: core.Input }],
        bodyheight: [{ type: core.Input, args: ['body-height',] }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        defaultContextMenu: [{ type: core.Input, args: ['default-context-menu',] }],
        rightClick: [{ type: core.Output }],
        tabs: [{ type: core.ViewChild, args: ['tab', { read: core.ElementRef },] }],
        tabAction: [{ type: core.ViewChild, args: ['tabAction', { read: core.ElementRef },] }],
        headerWidth: [{ type: core.ViewChild, args: ['headerWidth', { read: core.ElementRef },] }],
        headerName: [{ type: core.ViewChild, args: ['headerName', { read: core.ElementRef },] }],
        tabslist: [{ type: core.ViewChild, args: ['tabslist', { read: core.ElementRef },] }],
        actionProperty: [{ type: core.ViewChild, args: ['actionProperty', { read: core.ElementRef },] }],
        queryTabs: [{ type: core.ContentChildren, args: [AmexioTabPillComponent,] }],
        target: [{ type: core.ViewChild, args: ['target', { read: core.ViewContainerRef },] }],
        queryAction: [{ type: core.ContentChildren, args: [AmexioTabActionComponent, { descendants: true },] }],
        onClick: [{ type: core.Output }],
        tabLocalData: [{ type: core.Input, args: ['tabLocalData',] }]
    };
    return AmexioTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var AmexioVerticalTabComponent = /** @class */ (function () {
    function AmexioVerticalTabComponent(render) {
        this.render = render;
        /*
        Events
        name : onClick
        datatype : none
        version : 4.0 onwards
        default :none
        description : Callback to invoke on activated tab event.
        */
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.tabCollection = this.queryTabs.toArray();
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.onTabClick = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (!tab.disabled) {
            for (var _i = 0, _a = this.tabCollection; _i < _a.length; _i++) {
                var i = _a[_i];
                if (i === tab) {
                    i['active'] = true;
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                }
            }
        }
    };
    /**
     * @param {?} tabNode
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.closeTab = /**
     * @param {?} tabNode
     * @return {?}
     */
    function (tabNode) {
        var /** @type {?} */ newTab = [];
        var /** @type {?} */ index = 0;
        var /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach(function (tab) {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
            }
            if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.activateTab(newTab[tabHighlightIndex].tabId);
        this.tabCollection = newTab;
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    AmexioVerticalTabComponent.prototype.activateTab = /**
     * @param {?} tabId
     * @return {?}
     */
    function (tabId) {
        this.tabCollection.forEach(function (tab) {
            tab.active = false;
        });
    };
    AmexioVerticalTabComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-vertical-tab-view',
                    template: "\n    <div class=\"vertical-table\">\n      <div class=\"vertical-tablerow\">\n        <div class=\"vertical-tablecol verticalalign-tableft\">\n          <div class=\"verticalnavtab verticalnavtab-left \">\n            <ul>\n              <li *ngFor=\"let tabnode of tabCollection\">\n                <div class=\"defaultnode\" [ngClass]=\"{'leftactivetab':tabnode.active,'disabled-tab':tabnode.disabled }\" (click)=\"onTabClick(tabnode)\">\n                  <span *ngIf=\"tabnode.icon\" [ngClass]=\"tabnode.icon\" style=\"padding-right:8px\"  aria-hidden=\"true\"></span>\n                  <span>{{tabnode.title}}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"vertical-tablecol verticalalign-tabcontent\">\n          <div class=\"tabcontent\">\n            <ng-content></ng-content>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioVerticalTabComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioVerticalTabComponent.propDecorators = {
        tabs: [{ type: core.ViewChild, args: ['tab', { read: core.ElementRef },] }],
        queryTabs: [{ type: core.ContentChildren, args: [AmexioTabPillComponent,] }],
        onClick: [{ type: core.Output }]
    };
    return AmexioVerticalTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexiotimelineeventComponent = /** @class */ (function () {
    function AmexiotimelineeventComponent() {
        this.timelineclass = 'timeline-item';
        /*
          Properties
          name :contentborder
          datatype :string
          version : 4.2onwards
          default : false
          description : This will specify the content border in timeline.
          */
        this.contentborder = true;
        this.alignment = 'center';
    }
    AmexiotimelineeventComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-timeline-event',
                    template: "<div class=\"timeline-badge \" [ngClass]=\"{'timeline-badge-center': (alignment === 'center')\n  , 'timeline-badge-left': (alignment === 'right')\n  , 'timeline-badge-right': (alignment === 'left')}\">\n<amexio-pane-icon [customclass]=\"icon\"></amexio-pane-icon>\n</div>\n<div class=\"timeline-panel\" [ngClass]=\"{'timeline-panel-border':contentborder,\n 'timeline-panel-float-right': (contentalignment == 'right'),\n 'timeline-panel-float-left': (contentalignment == 'left'),\n 'timeline-panel-center': (alignment === 'center'),\n 'timeline-panel-right': (alignment === 'right'),\n 'timeline-panel-left': (alignment === 'left')}\">\n<div *ngIf=\"label\"><b>{{label}}</b></div>\n<ng-content></ng-content>\n</div>",
                },] },
    ];
    /** @nocollapse */
    AmexiotimelineeventComponent.ctorParameters = function () { return []; };
    AmexiotimelineeventComponent.propDecorators = {
        timelineclass: [{ type: core.HostBinding, args: ['attr.class',] }],
        label: [{ type: core.Input, args: ['label',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        contentborder: [{ type: core.Input, args: ['content-border',] }],
        contentalignment: [{ type: core.Input, args: ['content-alignment',] }]
    };
    return AmexiotimelineeventComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioTimeLineModel = /** @class */ (function () {
    function AmexioTimeLineModel(timelineevents, contentalignment, alignment) {
        this.timelineevents = timelineevents;
        this.alignment = alignment;
        this.contentalignment = contentalignment;
    }
    return AmexioTimeLineModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexiotimelineComponent = /** @class */ (function () {
    function AmexiotimelineComponent(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.alignment = 'center';
        var /** @type {?} */ that = this;
        this.matchMediaService.OnPhone(function (mediaQueryList) {
            that.mobileOrTabletMode();
        });
        this.matchMediaService.OnTablet(function (mediaQueryList) {
            that.mobileOrTabletMode();
        });
        this.matchMediaService.OnDesktop(function (mediaQueryList) {
            that.desktopMode();
        });
    }
    /**
     * @return {?}
     */
    AmexiotimelineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexiotimelineComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.timelineevents = this.querylist.toArray();
        this.initContentAlignment();
    };
    /**
     * @return {?}
     */
    AmexiotimelineComponent.prototype.initContentAlignment = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.contentalignment) {
            this.alignment = this.contentalignment;
        }
        var /** @type {?} */ hasContentAlignment = true;
        this.timelineevents.forEach(function (timeline) {
            if (timeline.contentalignment) {
                hasContentAlignment = false;
            }
        });
        if (hasContentAlignment) {
            this.timelineevents.forEach(function (timeline, index) {
                if (_this.contentalignment) {
                    timeline.contentalignment = _this.contentalignment;
                }
                else {
                    timeline.contentalignment = ((index % 2) === 0) ? 'right' : 'left';
                }
                timeline.alignment = _this.alignment;
            });
        }
        this.timelineModel = new AmexioTimeLineModel(JSON.parse(JSON.stringify(this.timelineevents)), this.contentalignment, this.alignment);
    };
    /**
     * @return {?}
     */
    AmexiotimelineComponent.prototype.mobileOrTabletMode = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.alignment = 'right';
        this.timelineevents.forEach(function (timeline, index) {
            timeline.contentalignment = 'right';
            timeline.alignment = _this.alignment;
        });
    };
    /**
     * @return {?}
     */
    AmexiotimelineComponent.prototype.desktopMode = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.alignment = this.timelineModel.alignment;
        this.contentalignment = this.timelineModel.contentalignment;
        this.timelineevents.forEach(function (timeline, index) {
            var /** @type {?} */ originalTimelineEvent1 = _this.timelineModel.timelineevents[index];
            timeline.contentalignment = originalTimelineEvent1.contentalignment;
            timeline.alignment = originalTimelineEvent1.alignment;
        });
    };
    AmexiotimelineComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-timeline',
                    template: "\n    <div class='timeline' [ngClass]=\"{'timelinecenter': (alignment == 'center'), \n                                    'timelineleft': (alignment == 'left'), \n                                    'timelineright': (alignment == 'right')}\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexiotimelineComponent.ctorParameters = function () { return [
        { type: DeviceQueryService }
    ]; };
    AmexiotimelineComponent.propDecorators = {
        querylist: [{ type: core.ContentChildren, args: [AmexiotimelineeventComponent,] }],
        contentalignment: [{ type: core.Input, args: ['content-alignment',] }]
    };
    return AmexiotimelineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioWindowHeaderComponent = /** @class */ (function () {
    function AmexioWindowHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AmexioWindowHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioWindowHeaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-window-header', template: "\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioWindowHeaderComponent.ctorParameters = function () { return []; };
    AmexioWindowHeaderComponent.propDecorators = {
        padding: [{ type: core.Input }]
    };
    return AmexioWindowHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/18/17.
 */
/** @enum {number} */
var KEY_CODE_window = {
    esc: 27,
};
KEY_CODE_window[KEY_CODE_window.esc] = "esc";
var AmexioWindowPaneComponent = /** @class */ (function () {
    function AmexioWindowPaneComponent(renderer) {
        this.renderer = renderer;
        /*
           Properties
           name : relative
           datatype : boolean
           version : 4.1 onwards
           default : none
           description : Place floating button at relative position
           */
        this.relative = false;
        this.showChange = new core.EventEmitter();
        this.window = ' window-';
        this.nodeRightClick = new core.EventEmitter();
        this.rightClick = new core.EventEmitter();
        this.close = new core.EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.absoluteposition = false;
        this.header = true;
        this.closable = true;
        this.closeonescape = true;
        if (this.verticalposition == null) {
            this.verticalposition = 'center';
        }
        if (this.horizontalposition == null) {
            this.horizontalposition = 'center';
        }
        this.positionclass = this.window + this.verticalposition + this.window + this.horizontalposition;
    }
    // THIS METHOD IS USED FOR SETTING CSS CLASSSES
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.sizeChange = /**
     * @return {?}
     */
    function () {
        this.isFullWindow = !this.isFullWindow;
        this.setClass();
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        if (this.closable) {
            this.showWindow = false;
            this.show = false;
            this.showChange.emit(false);
            this.close.emit(this.showWindow);
        }
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.showWindow) {
            this.show = this.showWindow;
        }
        if (this.maximize == null) {
            this.maximize = false;
            this.isFullWindow = false;
        }
        else if (this.maximize) {
            this.isFullWindow = true;
            this.bodyHeight = '100%';
        }
        if (this.footeralign == null) {
            this.footeralign = 'right';
        }
        if (this.verticalposition === '') {
            this.verticalposition = 'center';
        }
        if (this.horizontalposition === '') {
            this.horizontalposition = 'center';
        }
        this.positionclass = this.window + this.verticalposition + this.window + this.horizontalposition;
        this.setClass();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['show']) {
            this.setShowFlag(changes["show"].currentValue);
        }
        if (changes['showWindow']) {
            this.setShowFlag(changes["showWindow"].currentValue);
        }
    };
    /**
     * @param {?} changedValue
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.setShowFlag = /**
     * @param {?} changedValue
     * @return {?}
     */
    function (changedValue) {
        var _this = this;
        this.show = changedValue;
        if (this.show && this.closeonescape) {
            this.globalListenFunc = this.renderer.listen('document', 'keyup.esc', function (e) {
                _this.showWindow = false;
                _this.showChange.emit(false);
            });
        }
        else if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        if (this.isFullWindow) {
            this.styleClass = 'modal-window-content-max';
        }
        else {
            this.styleClass = this.positionclass;
        }
    };
    // context menu code below
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.getContextMenu = /**
     * @return {?}
     */
    function () {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.loadContextMenu = /**
     * @param {?} rightClickData
     * @return {?}
     */
    function (rightClickData) {
        this.mouseLocation.left = rightClickData.event.clientX;
        this.mouseLocation.top = rightClickData.event.clientY;
        this.getContextMenu();
        this.posixUp = this.getListPosition(rightClickData.ref);
        rightClickData.event.preventDefault();
        rightClickData.event.stopPropagation();
        this.rightClickNodeData = rightClickData.data;
        this.contextStyle = this.getContextMenuStyle();
        this.nodeRightClick.emit(rightClickData);
    };
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.onContextNodeClick = /**
     * @param {?} itemConfig
     * @return {?}
     */
    function (itemConfig) {
        if (!itemConfig.disabled) {
            var /** @type {?} */ obj = {
                menuData: itemConfig,
                NodeData: this.rightClickNodeData,
            };
            this.flag = false;
            this.removeListner();
            this.rightClick.emit(obj);
        }
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.getContextMenuStyle = /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.flag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.addListner = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.globalClickListenFunc = this.renderer.listen('document', 'click', function (e) {
            _this.flag = false;
            if (!_this.flag) {
                _this.removeListner();
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.removeListner = /**
     * @return {?}
     */
    function () {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    };
    /**
     * @return {?}
     */
    AmexioWindowPaneComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListner();
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    };
    AmexioWindowPaneComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-window',
                    template: "\n    <div #id class=\"root-window model-fade\" [ngClass]=\"{'modal-window-max': isFullWindow,'modal-window-min': !isFullWindow}\"\n        [ngStyle]=\"{'display' : show ? 'block' : 'none'}\" (contextmenu)=\"loadContextMenu({event:$event,ref:id})\">\n        <div class=\"modal-window-lg\" [ngStyle]=\"{'height': bodyHeight ? '100%':'auto'}\">\n            <div class=\"modal-window-content\" [ngClass]=\"styleClass\" [style.height]=\"bodyHeight+'%'\">\n                <header [ngClass]=\"{ 'window-material-design-header':materialDesign,'modal-window-header':!materialDesign}\"\n                    *ngIf=\"header\">\n                    <div class=\"modal-window-table\">\n                        <div class=\"tablerow\">\n                            <div class=\"tablecol\">\n                                <ng-content select=\"amexio-header\"></ng-content>\n                                <ng-content select=\"amexio-window-header\"></ng-content>\n                            </div>\n                            <div class=\"tablecol float-right\">\n                                <ng-container *ngIf=\"(!isFullWindow && maximize)\">\n                                    <amexio-pane-icon [key]=\"'window_maximize'\" (onClick)=\"sizeChange()\"></amexio-pane-icon>\n                                    &nbsp;\n                                </ng-container>\n                                <ng-container *ngIf=\"(isFullWindow && maximize)\">\n                                    <amexio-pane-icon [key]=\"'window_restore'\" (click)=\"sizeChange()\"></amexio-pane-icon>\n                                    &nbsp;\n                                </ng-container>\n                                <ng-container *ngIf=\"closable\">\n                                    <amexio-pane-icon [key]=\"'window_close'\" (onClick)=\"onCloseClick()\"></amexio-pane-icon>\n                                    &nbsp;\n                                </ng-container>\n                            </div>\n                        </div>\n                    </div>\n                </header>\n                <div class=\"modal-window-middle\">\n                    <ng-content select=\"amexio-body\"></ng-content>\n                </div>\n                <footer *ngIf=\"footer\" class=\"modal-window-footer\" [ngClass]=\"{'window-material-design-footer':materialDesign ,\n             'modal-window-footer':!materialDesign,\n             'modal-window-footer-max': isFullWindow && maximize,'flex-start':(footeralign =='left'),\n             'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}\">\n                    <div [ngClass]=\"{'footer-right-align': (isFullWindow && maximize)}\">\n                        <ng-content select=\"amexio-action\"></ng-content>\n                    </div>\n                </footer>\n            </div>\n\n        </div>\n    </div>\n    <ng-container *ngIf=\"flag\">\n        <span [ngStyle]=\"contextStyle\" style=\" z-index: 5; position: absolute;\">\n            <ul class=\"context-menu-list\" [ngClass]=\"{'dropdown-up' : posixUp}\">\n                <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" [ngStyle]=\"{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}\"\n                    [ngClass]=\"{'context-menu-separator':itemConfig.seperator}\" *ngFor=\"let itemConfig of contextmenu\">\n                    <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\" [ngClass]=\"itemConfig.icon\"></em>\n                    <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.text}}\n                    </span>\n                </li>\n            </ul>\n        </span>\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioWindowPaneComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioWindowPaneComponent.propDecorators = {
        verticalposition: [{ type: core.Input, args: ['vertical-position',] }],
        horizontalposition: [{ type: core.Input, args: ['horizontal-position',] }],
        closeonescape: [{ type: core.Input, args: ['close-on-escape',] }],
        top: [{ type: core.Input, args: ['position-top',] }],
        bottom: [{ type: core.Input, args: ['position-bottom',] }],
        relative: [{ type: core.Input, args: ['relative',] }],
        footeralign: [{ type: core.Input, args: ['footer-align',] }],
        showWindow: [{ type: core.Input, args: ['show-window',] }],
        materialDesign: [{ type: core.Input, args: ['material-design',] }],
        show: [{ type: core.Input }],
        windowHeader: [{ type: core.ViewChild, args: ['windowHeader', { read: core.ElementRef },] }],
        showChange: [{ type: core.Output }],
        bodyHeight: [{ type: core.Input, args: ['body-height',] }],
        maximize: [{ type: core.Input }],
        closable: [{ type: core.Input }],
        header: [{ type: core.Input }],
        footer: [{ type: core.Input }],
        contextmenu: [{ type: core.Input, args: ['context-menu',] }],
        parentRef: [{ type: core.Input }],
        nodeRightClick: [{ type: core.Output }],
        rightClick: [{ type: core.Output }],
        amexioHeader: [{ type: core.ContentChildren, args: [AmexioWindowHeaderComponent,] }],
        close: [{ type: core.Output }]
    };
    return AmexioWindowPaneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioSearchAdvanceComponent = /** @class */ (function () {
    function AmexioSearchAdvanceComponent() {
        this.title = 'Advance Search';
        this.advanceSearchFlag = false;
    }
    /**
     * @return {?}
     */
    AmexioSearchAdvanceComponent.prototype.closeSearchForm = /**
     * @return {?}
     */
    function () {
        this.advanceSearchFlag = false;
    };
    /**
     * @return {?}
     */
    AmexioSearchAdvanceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioSearchAdvanceComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-searchbox-options',
                    template: "\n  <form class=\"advancesearchform\" *ngIf=\"advanceSearchFlag\"  [style.width]=\"formwidth+'px'\">\n    <label class=\"search-form-label\">\n        {{title}}\n    </label>\n    <span class=\"fa fa-window-close fa-1x close-icon\"  (click)=\"closeSearchForm()\"></span>\n    <hr class=\"hrclass\">\n             <ng-content></ng-content>\n</form>\n",
                },] },
    ];
    /** @nocollapse */
    AmexioSearchAdvanceComponent.ctorParameters = function () { return []; };
    AmexioSearchAdvanceComponent.propDecorators = {
        title: [{ type: core.Input }],
        formwidth: [{ type: core.Input, args: ['form-width',] }]
    };
    return AmexioSearchAdvanceComponent;
}());

var __extends$11 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SearchboxtoolComponent = /** @class */ (function (_super) {
    __extends$11(SearchboxtoolComponent, _super);
    function SearchboxtoolComponent(element, dataService, renderer, _cd) {
        var _this = _super.call(this, renderer, element, _cd) || this;
        _this.element = element;
        _this.dataService = dataService;
        _this.renderer = renderer;
        /*
           Properties
           name : title
           datatype : string
           version : 4.2 onwards
           default : none
           description : sets title to advance search form
           */
        _this.title = 'Advance Search';
        /*
           Properties
           name : width
           datatype : number
           version : 4.2 onwards
           default : none
           description : Sets width to auto recommendation list.
           */
        _this.width = 500;
        /*
           Events
           name : keyup
           description : Fires when keyup event occurs
           */
        _this.keyup = new core.EventEmitter();
        /*
           Events
           name : onSearchItemClick
           description : Fires when search item is selected
           */
        _this.onSearchItemClick = new core.EventEmitter();
        /*
           Events
           name : onSearchClick
           description : Fires when search button is clicked
           */
        _this.onSearchClick = new core.EventEmitter();
        _this.caretFlag = false;
        _this.searchFlag = false;
        _this.searchTextBox = false;
        _this.selectedValue = '';
        _this.advanceSearchFlag = false;
        _this.selectedindex = 0;
        _this.scrollposition = 30;
        _this.enableAdvanceSearch = false;
        return _this;
    }
    Object.defineProperty(SearchboxtoolComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.advanceSearchRef.formwidth = this.width;
        this.enableAdvnSearch = this.advanceSearchRef.advanceSearchFlag;
        this.enableAdvanceSearch = true;
        if (this.advanceSearchRef) {
            this.enableAdvanceSearch = true;
            if (this.advanceSearchRef.title) {
                this.advanceButtonLabel = this.advanceSearchRef.title;
            }
            else if (!this.advanceSearchRef.title || this.advanceSearchRef.title === '') {
                this.advanceButtonLabel = 'Advance Search';
            }
        }
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.onSelectClick = /**
     * @return {?}
     */
    function () {
        this.advanceSearchFlag = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchboxtoolComponent.prototype.onInputClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.searchFlag = true;
        this.onBaseFocusEvent({});
        var /** @type {?} */ keyword = event.target.value;
        this.viewData = [];
        if (keyword != null && keyword !== ' ') {
            var /** @type {?} */ search_term_1 = keyword.toLowerCase();
            this.localData.forEach(function (item) {
                if (item != null && item[_this.displayfield].toLowerCase().startsWith(search_term_1)) {
                    _this.viewData.push(item);
                }
            });
            this.keyup.emit(event);
        }
        // logic for arrow keys and enter key press
        // 40=down-arrow and 38=up-arrow and 13=enter
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            // if key pressed is up down or enter then process accordingly
            // call function for process
            this.navigateKeys(event);
        }
        if (!this.selectedValue || this.selectedValue === '') {
            this.viewData = [];
        }
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedValue.length > 0) {
            var /** @type {?} */ keyword = this.selectedValue;
            this.viewData = [];
            if (keyword != null && keyword !== ' ') {
                var /** @type {?} */ search_term_2 = keyword.toLowerCase();
                this.localData.forEach(function (item1) {
                    if (item1 != null && item1[_this.displayfield].toLowerCase().startsWith(search_term_2)) {
                        // if word exist in start
                        // if word exist in start
                        _this.viewData.push(item1);
                    }
                });
                this.searchFlag = true;
                this.onBaseFocusEvent({});
                this.keyup.emit(event);
            }
            this.selectedValueOnFocus();
        }
    };
    // If Selected Value is blank, then view data will be reset
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.selectedValueOnFocus = /**
     * @return {?}
     */
    function () {
        if (!this.selectedValue || this.selectedValue === '') {
            this.viewData = [];
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchboxtoolComponent.prototype.navigateKeys = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.selectedindex > this.viewData.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 ||
            event.keyCode === 38
                && this.selectedindex < this.viewData.length) {
            this.navigateKeysCondition(event);
        }
        if (event.keyCode === 13 && this.viewData[this.selectedindex]) {
            this.onItemSelect(this.viewData[this.selectedindex]);
        }
    };
    // Method will be called when keycode will be 40 or 38
    /**
     * @param {?} event
     * @return {?}
     */
    SearchboxtoolComponent.prototype.navigateKeysCondition = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ prevselectedindex = 0;
        if (this.selectedindex === 0) {
            this.selectedindex = 1;
        }
        else {
            prevselectedindex = this.selectedindex;
            if (event.keyCode === 40) {
                this.selectedindex++;
                if ((this.selectedindex > 5)) {
                    this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
                    this.scrollposition = this.scrollposition + 30;
                }
            }
            else if (event.keyCode === 38) {
                this.eventKeyCodeCondition();
            }
        }
        if (this.viewData[this.selectedindex]) {
            this.viewData[this.selectedindex].selected = true;
        }
        if (this.viewData[prevselectedindex]) {
            this.viewData[prevselectedindex].selected = false;
        }
    };
    // If keycode is 38
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.eventKeyCodeCondition = /**
     * @return {?}
     */
    function () {
        this.selectedindex--;
        if (this.scrollposition >= 0 && this.selectedindex > 1) {
            this.dropdownitems.nativeElement.scroll(1, this.scrollposition);
            this.scrollposition = this.scrollposition - 30;
        }
        if (this.selectedindex === 1) {
            this.scrollposition = 30;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchboxtoolComponent.prototype.onSearchButtonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSearchClick.emit(event);
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.selectCssClass = /**
     * @return {?}
     */
    function () {
        if (this.viewData.length > 5) {
            return 'dropdown-list scroll';
        }
        else {
            return 'dropdown-list';
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SearchboxtoolComponent.prototype.onItemSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.value = item[this.valuefield];
        this.selectedValue = item[this.displayfield];
        this.searchFlag = this.onBaseBlurEvent({});
        this.onSearchItemClick.emit(item);
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.advanceSearch = /**
     * @return {?}
     */
    function () {
        this.advanceSearchRef.advanceSearchFlag = true;
        this.advanceSearchFlag = true;
        this.searchFlag = this.onBaseBlurEvent({});
    };
    /**
     * @return {?}
     */
    SearchboxtoolComponent.prototype.closeSearchForm = /**
     * @return {?}
     */
    function () {
        this.advanceSearchFlag = false;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    SearchboxtoolComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            if (dr != null) {
                for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                    var ir = dr_1[_i];
                    responsedata = responsedata[dr[ir]];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    SearchboxtoolComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        // Check if key is added?
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_2 = dr; _i < dr_2.length; _i++) {
                var ir = dr_2[_i];
                responsedata = responsedata[dr[ir]];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.localData = JSON.parse(JSON.stringify(this.viewData));
    };
    SearchboxtoolComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-searchbox',
                    template: "\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\">\n        <input type=\"text\" class=\"form-control\" (keyup)=\"onInputClick($event)\" #inp [(ngModel)]=\"selectedValue\"\n          [attr.placeholder]=\"placeholder\" (click)=\"onSelectClick()\" (focus)=\"onFocus()\">\n      </div>\n\n\n\n      <div class=\"input-group-text-search \" (click)=\"onSearchButtonClick($event)\">\n        <em class=\"fa fa-search iconColor\">\n        </em>\n      </div>\n\n    </div>\n\n\n\n    <form [ngStyle]=\"dropdownstyle\" class=\"dropdownposition\">\n      <ng-container *ngIf=\"!advanceSearchFlag\">\n        <ul #dropdownitems [style.width]=\"width+'px'\" class=\"search-dropdown-list\" [ngClass]=\"selectCssClass()\">\n\n          <li class=\"search-list-items \" [ngClass]=\"{'search-list-items-selected':item.selected}\" *ngFor=\"let item of viewData\"\n            (click)=\"onItemSelect(item)\">\n            <div style=\"white-space: nowrap;display: inline;\">{{item[displayfield]}}</div>\n          </li>\n        </ul>\n        <ng-container *ngIf=\"selectedValue.length > 0\">\n          <div [style.width]=\"width+'px'\" class=\"advancesearchbuttondiv\">\n            <button class=\"fa fa-search btncolor\" [style.width]=\"width+'px'\" class=\"advancesearchbtn fa fa-search\" (click)=\"advanceSearch()\">\n              {{advanceButtonLabel}}\n            </button>\n          </div>\n        </ng-container>\n\n      </ng-container>\n    </form>\n\n    <div [ngStyle]=\"{'block': advanceSearchRef.advanceSearchFlag ? 'block' : 'none'}\">\n\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    SearchboxtoolComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: CommonDataService },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    SearchboxtoolComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        title: [{ type: core.Input }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        width: [{ type: core.Input }],
        keyup: [{ type: core.Output }],
        onSearchItemClick: [{ type: core.Output }],
        onSearchClick: [{ type: core.Output }],
        advanceSearchRef: [{ type: core.ContentChild, args: [AmexioSearchAdvanceComponent,] }],
        dropdownitems: [{ type: core.ViewChild, args: ['dropdownitems', { read: core.ElementRef },] }],
        inp: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef },] }]
    };
    return SearchboxtoolComponent;
}(BaseFormValidator));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioButtonDropDownItemComponent = /** @class */ (function () {
    function AmexioButtonDropDownItemComponent() {
        /*
        Events
        name : onItemClick
        datatype : none
        version : none
        default : none
        description : Fire when button-dropdown item button/link click
        */
        this.onItemClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioButtonDropDownItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AmexioButtonDropDownItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-btn-dropdown-item', template: '',
                },] },
    ];
    /** @nocollapse */
    AmexioButtonDropDownItemComponent.ctorParameters = function () { return []; };
    AmexioButtonDropDownItemComponent.propDecorators = {
        label: [{ type: core.Input }],
        badge: [{ type: core.Input, args: ['badge',] }],
        disabled: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        onClickRoute: [{ type: core.Input }],
        onItemClick: [{ type: core.Output }]
    };
    return AmexioButtonDropDownItemComponent;
}());

var __extends$12 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioButtonDropdownComponent = /** @class */ (function (_super) {
    __extends$12(AmexioButtonDropdownComponent, _super);
    function AmexioButtonDropdownComponent(element, renderer, _cd) {
        var _this = _super.call(this, renderer, element, _cd) || this;
        _this.element = element;
        _this.dropdownItemData = [];
        /*
        Events
        name : click
        datatype :  none
        version : none
        default : none
        description : Fire when button-dropdown item button/link click
        */
        _this.click = new core.EventEmitter();
        /*
        Events
        name : getLinkData
        datatype :  none
        version : none
        default : none
        description : Fire when button-dropdown item button/link click
        */
        _this.getLinkData = new core.EventEmitter();
        return _this;
    }
    Object.defineProperty(AmexioButtonDropdownComponent.prototype, "data", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._buttonGroupLocalData = value;
            if (this.componentLoaded) {
                this.updateComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioButtonDropdownComponent.prototype, "buttonGroupLocalData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._buttonGroupLocalData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.updateComponent = /**
     * @return {?}
     */
    function () {
        if (JSON.stringify(this.buttonGroupPreviewData) !== JSON.stringify(this.buttonGroupLocalData)) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.dropdownItemData = this.buttonGroupLocalData;
        }
    };
    /**
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.dropdownItemData = this.buttonGroupLocalData;
            this.createDropdownItemConfig(this.dropdownItemData);
        }
        else {
            this.createDropdownItemConfig(this.buttons.toArray());
        }
        this.componentLoaded = true;
    };
    /**
     * @param {?} btnCollection
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.createDropdownItemConfig = /**
     * @param {?} btnCollection
     * @return {?}
     */
    function (btnCollection) {
        var /** @type {?} */ itemRefArray = btnCollection;
        for (var _i = 0, itemRefArray_1 = itemRefArray; _i < itemRefArray_1.length; _i++) {
            var itemConfig = itemRefArray_1[_i];
            var /** @type {?} */ data = {
                label: itemConfig.label,
                disabled: itemConfig.disabled,
                onItemClick: itemConfig.onItemClick,
                iconStyleClass: itemConfig.iconStyleClass,
                icon: itemConfig.icon,
                badge: itemConfig.badge,
                onClickRoute: itemConfig.onClickRoute,
            };
            data.iconStyleClass = data.icon;
            this.dropdownItemData.push(data);
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.onClick = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        this.openContent = !this.openContent;
        if (this.openContent) {
            this.onBaseFocusEvent({});
        }
        else {
            this.openContent = this.onBaseBlurEvent(elem);
        }
        this.posixUp = this.getListPosition(elem);
        this.click.emit();
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ dropdownHeight = 325; // must be same in dropdown.scss
        if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} eve
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.onblur = /**
     * @param {?} eve
     * @return {?}
     */
    function (eve) {
        this.openContent = this.onBaseBlurEvent(eve);
    };
    /**
     * @param {?} clickEvent
     * @param {?} itemData
     * @return {?}
     */
    AmexioButtonDropdownComponent.prototype.btnItemClick = /**
     * @param {?} clickEvent
     * @param {?} itemData
     * @return {?}
     */
    function (clickEvent, itemData) {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.getLinkData.emit({ event: clickEvent, parentRef: this, data: itemData });
        }
        else {
            if (!itemData.disabled) {
                itemData.onItemClick.emit(clickEvent);
                this.openContent = !this.openContent;
                this.onBaseBlurEvent(event);
            }
        }
    };
    AmexioButtonDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-btn-dropdown', template: "\n    <div class=\"button-group\" #rootDiv>\n       <button class=\"button-dropdown-main\" (blur)=\"onblur($event)\" (click)=\"onClick(rootDiv)\" #btnRef\n               [ngClass]=\"{'button-default': size=='default' || size ==null,\n               'button-small': size=='small',\n               'button-large' : size=='large',\n               'button-primary' : type == 'primary' || type == null || type == 'theme-color',\n               'button-success' : type == 'success' || type == 'green',\n               'button-danger' : type=='danger' || type == 'red',\n               'button-warning' : type=='warning' ||  type == 'yellow'}\">\n         <amexio-form-icon style=\"float:right;\" key=\"button_caret-down\"></amexio-form-icon>\n         <span [attr.disabled]=\"disabled ? true: null\">{{label}} &nbsp;&nbsp;</span>\n         <!--<i class=\"fa fa-caret-down\" style=\"float:right;\" ></i>-->\n       </button>\n      <div class=\"button-dropdown\" [ngClass]=\"{'button-dropdown-up' : posixUp}\"  [ngStyle]=\"dropdownstyle\">\n        <ng-container *ngFor=\"let itemData of dropdownItemData\">\n          <div [ngClass]=\"{'button-default': size=='default' || size ==null,'button-small': size=='small','button-large' : size=='large'}\">\n            <div [ngStyle]=\"{'cursor': itemData.disabled ? 'not-allowed':'pointer'}\"\n                 (click)=\"btnItemClick($event,itemData)\">\n              <amexio-form-icon style=\"padding-right: 5px;\" [customclass]=\"itemData.iconStyleClass\"></amexio-form-icon>\n              <span [attr.disabled]=\"itemData.disabled ? true: null\">{{itemData.label}}&nbsp;&nbsp;</span>\n              <!--<i [class]=\"itemData.iconStyleClass\" aria-hidden=\"true\" style=\"float:right;\" ></i>-->\n              <ng-container *ngIf=\"itemData.badge\">\n              <span class=\"btn-dropdown-badge\">{{itemData.badge}}</span>\n              </ng-container>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioButtonDropdownComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioButtonDropdownComponent.propDecorators = {
        btnReference: [{ type: core.ViewChild, args: ['btnRef',] }],
        label: [{ type: core.Input }],
        buttons: [{ type: core.ContentChildren, args: [AmexioButtonDropDownItemComponent,] }],
        data: [{ type: core.Input, args: ['buttonGroupLocalData',] }],
        type: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        size: [{ type: core.Input }],
        badge: [{ type: core.Input, args: ['badge',] }],
        click: [{ type: core.Output }],
        getLinkData: [{ type: core.Output }]
    };
    return AmexioButtonDropdownComponent;
}(BaseFormValidator));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 13/12/17.
 */
var AmexioSpiltButtonDropdownComponent = /** @class */ (function () {
    function AmexioSpiltButtonDropdownComponent() {
        this.dropdownItemData = [];
    }
    /**
     * @return {?}
     */
    AmexioSpiltButtonDropdownComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.createDropdownItemConfig();
    };
    /**
     * @return {?}
     */
    AmexioSpiltButtonDropdownComponent.prototype.createDropdownItemConfig = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ itemRefArray = [];
        itemRefArray = this.buttons.toArray();
        for (var _i = 0, itemRefArray_1 = itemRefArray; _i < itemRefArray_1.length; _i++) {
            var itemConfig = itemRefArray_1[_i];
            var /** @type {?} */ data = {
                label: itemConfig.label,
                disabled: itemConfig.disabled,
                onItemClick: itemConfig.onItemClick,
                iconStyleClass: itemConfig.iconStyleClass,
                icon: itemConfig.icon,
                onClickRoute: itemConfig.onClickRoute,
            };
            data.iconStyleClass = data.icon;
            this.dropdownItemData.push(data);
        }
    };
    /**
     * @return {?}
     */
    AmexioSpiltButtonDropdownComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.openContent = !this.openContent;
    };
    /**
     * @param {?} event
     * @param {?} itemData
     * @return {?}
     */
    AmexioSpiltButtonDropdownComponent.prototype.itemClick = /**
     * @param {?} event
     * @param {?} itemData
     * @return {?}
     */
    function (event, itemData) {
        itemData.onItemClick.emit(event);
    };
    /**
     * @return {?}
     */
    AmexioSpiltButtonDropdownComponent.prototype.getBackgroundColor = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ colorCode;
        if (this.type === 'primary' || this.type === 'theme-color') {
            colorCode = '#0275d8';
        }
        else if (this.type === 'success' || this.type === 'green') {
            colorCode = '#5cb85c';
        }
        else if (this.type === 'danger' || this.type === 'red') {
            colorCode = '#d9534f';
        }
        else if (this.type === 'warning' || this.type === 'yellow') {
            colorCode = '#f0ad4e';
        }
        return {
            'background-color': colorCode,
        };
    };
    AmexioSpiltButtonDropdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-btn-split-dropdown', template: "\n    <div class=\"dropdown-button\" [ngStyle]=\"getBackgroundColor()\">\n      <button class=\"button\" [attr.disabled]=\"disabled ? true: null\"\n              [ngClass]=\"{'button-default': size=='default' || size ==null,\n              'button-small': size=='small','button-large' : size=='large',\n              'button-primary' : type == 'primary' || type == null,\n              'button-success' : type == 'success',' button-danger' : type=='danger',\n              'button-warning' : type=='warning'}\">\n        {{label}}\n      </button>\n      <button class=\"button\"\n              [ngClass]=\"{'button-default': size=='default' || size ==null,\n              'button-small': size=='small',\n              'button-large' : size=='large',\n              'button-primary' : type == 'primary' || type == null || type == 'theme-color',\n              'button-success' : type == 'success' || type == 'green',\n              'button-danger' : type=='danger' || type == 'red',\n              'button-warning' : type=='warning' ||  type == 'yellow'}\">\n              (click)=\"onClick()\"><i class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></button>\n      <div class=\"dropdown-button-content\" [ngStyle]=\"{'display' : openContent ? 'block' : 'none'}\">\n        <ul class=\"dropdown-list\">\n          <ng-container *ngFor=\"let itemData of dropdownItemData\">\n            <li class=\"list-items\" [ngClass]=\"{'disabled':itemData.disabled}\" (click)=\"itemClick($event,itemData)\">\n            <ng-container *ngIf=\"itemData.icon!=null\">\n              <!--<i [class]=\"itemData.iconStyleClass\" aria-hidden=\"true\"></i>-->\n              <amexio-form-icon style=\"padding-right: 5px;\" [customclass]=\"itemData.iconStyleClass\"></amexio-form-icon>\n            </ng-container>{{itemData.label}}\n            </li>\n          </ng-container>\n        </ul>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioSpiltButtonDropdownComponent.ctorParameters = function () { return []; };
    AmexioSpiltButtonDropdownComponent.propDecorators = {
        label: [{ type: core.Input }],
        badge: [{ type: core.Input, args: ['badge',] }],
        buttons: [{ type: core.ContentChildren, args: [AmexioButtonDropDownItemComponent,] }],
        type: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        size: [{ type: core.Input }]
    };
    return AmexioSpiltButtonDropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CheckboxComponent = /** @class */ (function () {
    function CheckboxComponent(checkboxGroup) {
        this.checkboxGroup = checkboxGroup;
    }
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.toggleCheck = /**
     * @return {?}
     */
    function () {
        if (!this.checked) {
            this.checkboxGroup.add(this.value);
        }
        else {
            this.checkboxGroup.remove(this.value);
        }
        this.checked = !this.checked;
    };
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.isChecked = /**
     * @return {?}
     */
    function () {
        return this.checked || this.checkboxGroup.contains(this.value);
    };
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this.checked) {
                _this.checkboxGroup.add(_this.value);
            }
        }, 200);
    };
    CheckboxComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'checkbox',
                    template: "\n    <!-- <div style=\"display: flex;\" (click)=\"toggleCheck()\">\n        <input class=\"form-control\" type=\"checkbox\" [checked]=\"isChecked()\" />\n        <label>{{label}}</label>\n    </div> <br/> -->\n\n    <label class=\"input-box-container\" [ngClass]=\"{'disable-component' : disabled || disabled}\">\n        {{label}}\n        <input type=\"checkbox\" class=\"form-control\" [ngClass]=\"{'checkbox-disable' : disabled}\" [checked]=\"checked\" (click)=\"toggleCheck()\">\n        <span class=\"input-box-checkbox-label\"></span>\n      </label>\n  ",
                },] },
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return [
        { type: AmexioCheckBoxGroupComponent, decorators: [{ type: core.Host }] }
    ]; };
    CheckboxComponent.propDecorators = {
        label: [{ type: core.Input }],
        value: [{ type: core.Input }],
        name: [{ type: core.Input }],
        checked: [{ type: core.Input }],
        disabled: [{ type: core.Input }]
    };
    return CheckboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioChipComponent = /** @class */ (function () {
    function AmexioChipComponent() {
        /*
            Events
            name :  closeClick
            datatype : none
            version : none
            default : none
            description : It will fire only on selection of checkbox and gives you selected record data.
            */
        this.closeClick = new core.EventEmitter();
        /*
           Events
           name :  labelClick
           datatype : none
           version : none
           default : none
           description : It will fire only on selection of checkbox and gives you selected record data.
           */
        this.labelClick = new core.EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioChipComponent.prototype.onCloseClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.closeClick.emit(this.createObject());
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioChipComponent.prototype.onLabelClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.labelClick.emit(this.createObject());
    };
    /**
     * @return {?}
     */
    AmexioChipComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioChipComponent.prototype.createObject = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ obj = {};
        obj['icon'] = this.icon;
        obj['label'] = this.label;
        obj['badge'] = this.badge;
        obj['closable'] = this.closable;
        obj['color'] = this.color;
        return obj;
    };
    AmexioChipComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chip',
                    template: "\n\n    <div class=\"chips\" style=\"cursor: pointer;\" [ngStyle]=\"{'background-color': color}\">\n        <amexio-form-icon [customclass]=\"icon\"></amexio-form-icon>\n        <amexio-label (click)=\" onLabelClick($event)\">\n          <span style=\"cursor: pointer;padding-left:10px\">\n            {{label}}\n          </span>\n        </amexio-label>\n        <span class=\"badge\" *ngIf=\"badge\">{{badge}}</span>\n        <ng-container *ngIf=\"closable\">\n          <i class=\"fa fa-times\" style=\"cursor: pointer; margin-left:10px\" (click)=\"onCloseClick($event) \"></i>\n        </ng-container>\n      </div>\n  ",
                    styles: ["\n\n  "],
                },] },
    ];
    /** @nocollapse */
    AmexioChipComponent.ctorParameters = function () { return []; };
    AmexioChipComponent.propDecorators = {
        icon: [{ type: core.Input, args: ['icon',] }],
        label: [{ type: core.Input, args: ['label',] }],
        color: [{ type: core.Input, args: ['color',] }],
        badge: [{ type: core.Input, args: ['badge',] }],
        closable: [{ type: core.Input, args: ['closable',] }],
        closeClick: [{ type: core.Output }],
        labelClick: [{ type: core.Output }]
    };
    return AmexioChipComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioChipsComponent = /** @class */ (function () {
    function AmexioChipsComponent() {
        /*
            Events
            name : selectedRowData
            datatype : none
            version : none
            default : none
            description : It will fire only on selection of checkbox and gives you selected record data.
            */
        this.selectedchipsData = new core.EventEmitter();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    AmexioChipsComponent.prototype.onCloseChipsClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        this.data.forEach(function (element, index) {
            if (element.label === item.label) {
                _this.data.splice(index, 1);
            }
        });
        this.emitSelectedLabel(item);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AmexioChipsComponent.prototype.emitSelectedLabel = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.selectedchipsData.emit(item);
    };
    AmexioChipsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chips',
                    template: "\n    <ng-container *ngIf=\"data?.length > 0; else elseBlock\">\n      <ng-container *ngFor=\"let item of data\">\n          <amexio-chip [icon]=\"item.icon\" [label]=\"item.label\" [badge]=\"item.badge\" [closable]=\"item.closable\" [color]=\"item.color\"\n              (closeClick)=\"onCloseChipsClick($event)\" (labelClick)=\"emitSelectedLabel($event) \">\n          </amexio-chip>\n      </ng-container>\n    </ng-container>\n    <ng-template #elseBlock>\n          <ng-content></ng-content>\n    </ng-template>\n  ",
                    styles: ["\n\n  "],
                },] },
    ];
    /** @nocollapse */
    AmexioChipsComponent.ctorParameters = function () { return []; };
    AmexioChipsComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        selectedchipsData: [{ type: core.Output }]
    };
    return AmexioChipsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioCreditCardModel = /** @class */ (function () {
    function AmexioCreditCardModel() {
        this.owner = '';
        this.cvv = null;
        this.cardnumber = null;
        this.expMonth = 1;
        this.expYear = 2018;
    }
    return AmexioCreditCardModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$7 = function () {
};
var AmexioCreditcardComponent = /** @class */ (function () {
    function AmexioCreditcardComponent() {
        /*
          Properties
          name : yearcount
          datatype : string
          version : 5.2.3onwards
          default :
          description : the minexp will set the dropdown to user defined dropdown.
          */
        this.yearcount = 12;
        /*
         Properties
         name : showlabel
         datatype : boolean
         version : 5.2.3onwards
         default :
         description : the showlabel will set the label of creditcard.
         */
        this.showlabel = 'false';
        this.isNameValid = false;
        this.isCvvValid = false;
        this.visaEagerReg = /^4/;
        this.visaReg = /^4\d{12}(\d{3}|\d{6})?$/;
        this.mastropattern = /^(?:5[06789]\d\d|(?!6011[0234])(?!60117[4789])(?!60118[6789])(?!60119)(?!64[456789])(?!65)6\d{3})\d{8,15}$/;
        this.masttroeagerPattern = /^(5(018|0[23]|[68])|6[37]|60111|60115|60117([56]|7[56])|60118[0-5]|64[0-3]|66)/;
        this.masterpattern = /^5[1-5]\d{14}$/;
        this.mastereagerPattern = /^5[1-5]/;
        this.isFullCardValid = false;
        this.cvvRegex = /^[0-9]{3,4}$/;
        this.year = new Date();
        this.yearList = [];
        this.eagarValue = '';
        this.fullPatternValue = '';
        this.onTouchedCallback = noop$7;
        this.onChangeCallback = noop$7;
        if (this.template === 'single-column') {
            this.templateFlag = true;
        }
        else if (this.template === 'double-column') {
            this.templateFlag = false;
        }
        this.creditCardModel = new AmexioCreditCardModel();
        this.dummyMonth = '0' + this.creditCardModel.expMonth;
        this.dateData = [
            {
                month: '01',
            },
            {
                month: '02',
            },
            {
                month: '03',
            },
            {
                month: '04',
            },
            {
                month: '05',
            },
            {
                month: '06',
            },
            {
                month: '07',
            },
            {
                month: '08',
            },
            {
                month: '09',
            },
            {
                month: '10',
            },
            {
                month: '11',
            },
            {
                month: '12',
            },
        ];
        this.cardGroupData = [
            {
                iconName: 'fa fa-cc-visa',
                key: 'eagerflagvisa',
                color: 'black',
            },
            {
                iconName: 'fa fa-cc-mastercard',
                key: 'mastereagerPattern',
                color: 'black',
            },
            {
                iconName: 'fa fa-credit-card',
                key: 'masttroeagerPattern',
                color: 'black',
            },
        ];
    }
    // From ControlValueAccessor Interface
    /**
     * @param {?} modelValue
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.writeValue = /**
     * @param {?} modelValue
     * @return {?}
     */
    function (modelValue) {
        var _this = this;
        if (modelValue) {
            this.creditCardModel = modelValue;
            this.onChangeCardNumber(this.creditCardModel.cardnumber);
            this.onChangeMonth('0' + this.creditCardModel.expMonth);
            this.isNameValid = true;
            this.isCvvValid = this.cvvRegex.test(this.creditCardModel.cvv);
            this.cardRegexMap.forEach(function (value, key) {
                var /** @type {?} */ isEagarValid = value.test(_this.dummyCreditCardNumber);
                if (isEagarValid) {
                    _this.eagarflag = isEagarValid;
                    _this.eagarValue = key;
                }
            });
            this.validEagerCard = this.eagarValue;
            this.switchCaseMethod();
            this.onCheckValidation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onChangeCardNumber = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.dummyCreditCardNumber = this.creditCardNumberSpaceRemove(event);
        var /** @type {?} */ concatCardNumber = this.replaceSpace(this.dummyCreditCardNumber);
        this.cardPatternMap.forEach(function (value, key) {
            // Condition for Full String Regex
            // Condition for Full String Regex
            _this.isValidFullString = value.test(concatCardNumber);
            if (_this.isValidFullString) {
                _this.fullPatternflag = _this.isValidFullString;
                _this.fullPatternValue = key;
            }
        });
        this.validPatternCard = this.fullPatternValue;
        this.creditCardModel.cardnumber = +concatCardNumber;
    };
    // From ControlValueAccessor Interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor Interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    // method to check owners length
    /**
     * @param {?} inp
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onNameClick = /**
     * @param {?} inp
     * @return {?}
     */
    function (inp) {
        if (inp.model.length > 0) {
            this.isNameValid = true;
        }
        else {
            this.isNameValid = false;
        }
    };
    // method to check Cvv Number
    /**
     * @param {?} inpcvv
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onClick = /**
     * @param {?} inpcvv
     * @return {?}
     */
    function (inpcvv) {
        this.isCvvValid = this.cvvRegex.test(inpcvv.model);
    };
    // method to check Card Number
    /**
     * @param {?} inp
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onInput = /**
     * @param {?} inp
     * @return {?}
     */
    function (inp) {
        // Condition for null check
        if (inp.model !== '') {
            var /** @type {?} */ isValidFullString_1;
            var /** @type {?} */ fullPatternValue_1 = '';
            var /** @type {?} */ concatValue_1 = this.replaceSpace(inp.model);
            this.cardPatternMap.forEach(function (value, key) {
                // Condition for Full String Regex
                // Condition for Full String Regex
                isValidFullString_1 = value.test(concatValue_1);
                if (isValidFullString_1) {
                    fullPatternValue_1 = key;
                }
            });
            this.validPatternCard = fullPatternValue_1;
            var /** @type {?} */ eagarValue_1 = '';
            this.cardRegexMap.forEach(function (value, key) {
                var /** @type {?} */ isEagarValid = value.test(concatValue_1);
                if (isEagarValid) {
                    eagarValue_1 = key;
                }
            });
            this.validEagerCard = eagarValue_1;
        }
        else {
            this.validEagerCard = '';
        }
        this.switchCaseMethod();
        this.onCheckValidation();
        if (inp.model !== '') {
            this.cardNumberValue = this.creditCardNumberSpaceRemove(inp.model);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.replaceSpace = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ newString = '';
        if (value) {
            var /** @type {?} */ stringArray = value.split(' ');
            if (stringArray) {
                stringArray.forEach(function (element) {
                    newString = newString.concat(element);
                });
            }
        }
        return newString;
    };
    // Map Implementation for key value pair
    /**
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.cardRegexMap = new Map();
        this.cardPatternMap = new Map();
        this.cardRegexMap.set('eagerflagvisa', this.visaEagerReg);
        this.cardRegexMap.set('mastereagerPattern', this.mastereagerPattern);
        this.cardRegexMap.set('masttroeagerPattern', this.masttroeagerPattern);
        this.cardPatternMap.set('visaReg', this.visaReg);
        this.cardPatternMap.set('masterpattern', this.masterpattern);
        this.cardPatternMap.set('mastropattern', this.mastropattern);
        this.cardName = '';
        this.currentYear = this.year.getFullYear();
        if (this.template === 'single-column') {
            this.templateFlag = true;
        }
        else if (this.template === 'double-column') {
            this.templateFlag = false;
        }
        for (var /** @type {?} */ i = 0; i < this.yearcount; i++) {
            this.yearList.push(this.currentYear + i);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.creditCardNumberSpaceRemove = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = value.toString();
        var /** @type {?} */ v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
        var /** @type {?} */ matches = v.match(/\d{4,16}/g);
        var /** @type {?} */ match = matches && matches[0] || '';
        var /** @type {?} */ parts = [];
        var /** @type {?} */ len;
        var /** @type {?} */ i;
        for (i = 0, len = match.length; i < len; i += 4) {
            parts.push(match.substring(i, i + 4));
        }
        if (parts.length) {
            return parts.join(' ');
        }
        else {
            return value;
        }
    };
    /**
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.switchCaseMethod = /**
     * @return {?}
     */
    function () {
        switch (this.validEagerCard) {
            case 'eagerflagvisa':
                this.cardName = 'fa fa-cc-visa';
                break;
            case 'mastereagerPattern':
                this.cardName = 'fa fa-cc-mastercard';
                break;
            case 'masttroeagerPattern':
                this.cardName = 'fa fa-credit-card';
                break;
            case '':
                this.cardName = '';
                break;
            default:
                this.cardName = '';
                break;
        }
    };
    /**
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onCheckValidation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.cardGroupData.forEach(function (element) {
            if (element.key === _this.validEagerCard) {
                element.color = 'blue';
            }
            else {
                element.color = 'black';
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioCreditcardComponent.prototype.onChangeMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dummyMonth = event;
        this.creditCardModel.expMonth = +this.dummyMonth;
    };
    AmexioCreditcardComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-creditcard',
                    template: "\n    <!-- <pre><code>{{creditCardModel|json}}</code></pre> -->\n    <ng-container *ngIf=\"templateFlag\">\n\n            <div class=\"creditCardFormSglCol\">\n                <div class=\"imageSglCol\">\n                    <i *ngFor=\"let cardimage of cardGroupData\" [style.color]=\"cardimage.color\" [attr.class]=\"cardimage.iconName\" style=\"font-size:50px\">\n                    </i>\n                </div>\n                <div class=\"ownerdetailsSglCol\">\n                    <label *ngIf=\"showlabel\">CARD HOLDER NAME</label>\n                    <div class=\"ownerSglCol\">\n                        <input [ngClass]=\"{'input-control-success':isNameValid,'input-control-failure':(!isNameValid && inpowner.touched)}\" type=\"text\" placeholder=\"CARD HOLDER NAME\"\n                            #inpowner=\"ngModel\" class=\"input-control\" [(ngModel)]=\"creditCardModel.owner\" (keyup)=\"onNameClick(inpowner)\">\n                    </div>\n                </div>\n        \n                <div class=\"cardNumberSglCol\">\n                    <label *ngIf=\"showlabel\">CARD NUMBER</label>\n                    <input type=\"text\" placeholder=\"CARD NUMBER\" maxlength=\"19\" class=\"input-control\" [ngModel]=\"dummyCreditCardNumber\" (ngModelChange)=\"onChangeCardNumber($event)\"\n                    [value]=\"cardNumberValue\" #inp=\"ngModel\" [ngClass]=\"{'input-control-success':validPatternCard,'input-control-failure':(!validPatternCard && (inp.dirty || inp.touched))}\" (keyup)=\"onInput(inp)\"\n                    />\n                </div>\n                <label *ngIf=\"showlabel\">EXP DATE</label>\n                <div class=\"expiration-dateSglCol\">\n                    <div class=\"monthSglCol\">\n                        <select [ngModel]=\"dummyMonth\" (ngModelChange)=\"onChangeMonth($event)\" placeholder=\"MM\" style=\"padding:10px\">\n                            <option *ngFor=\"let months of dateData\">{{months.month}}</option>\n                        </select>\n                    </div>\n                    <div class=\"dateSglCol\">\n                        <select [(ngModel)]=\"creditCardModel.expYear\" yearControl=\"yearControl\" style=\"padding:10px\" placeholder=\"YY\">\n                            <option *ngFor=\"let year of yearList\">{{year}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"cvvSglCol\">\n                    <label *ngIf=\"showlabel\">CVV</label>\n                    <input #inpcvv=\"ngModel\" [ngClass]=\"{'input-control-success':isCvvValid,'input-control-failure':(!isCvvValid && inpcvv.touched)}\"\n                        type=\"password\" placeholder=\"CVV\" maxlength=\"3\" class=\"input-control\" [(ngModel)]=\"creditCardModel.cvv\" (keyup)=\"onClick(inpcvv)\">\n                </div>\n            </div>\n            </ng-container>\n            <br>\n            <ng-container *ngIf=\"!templateFlag\">\n            <div class=\"creditCardForm\">\n                <div class=\"owner\">\n                    <label *ngIf=\"showlabel\">CARD HOLDER NAME</label>\n                    <input [ngClass]=\"{'input-control-success':isNameValid,'input-control-failure':(!isNameValid && inpowner.touched)}\" type=\"text\" placeholder=\"CARD HOLDER NAME\"\n                       #inpowner=\"ngModel\" class=\"input-control\" [(ngModel)]=\"creditCardModel.owner\" (keyup)=\"onNameClick(inpowner)\">\n                </div>\n                <div [ngClass]=\"{'image-label':showlabel==true,'image':showlabel==false}\">\n                    <i *ngFor=\"let cardimage of cardGroupData\" [style.color]=\"cardimage.color\" [attr.class]=\"cardimage.iconName\" style=\"font-size:40px\"></i>\n                </div>\n        \n        \n                <div class=\"cardNumber\">\n                    <label *ngIf=\"showlabel\">CARD NUMBER</label>\n                    <input type=\"text\" placeholder=\"CARD NUMBER\" maxlength=\"19\" class=\"input-control\" [ngModel]=\"dummyCreditCardNumber\" (ngModelChange)=\"onChangeCardNumber($event)\"\n                    [value]=\"cardNumberValue\"   #inp=\"ngModel\" [ngClass]=\"{'input-control-success':validPatternCard,'input-control-failure':(!validPatternCard && (inp.dirty || inp.touched))}\" (keyup)=\"onInput(inp)\" />\n                </div>\n        \n                <div [ngClass]=\"{'expiration-date-label':showlabel==true,'expiration-date':showlabel==false}\" >\n                    <label *ngIf=\"showlabel\">EXP DATE</label>\n                    <div class=\"exp-month-date-label\">\n                        <div class=\"month\">\n                            <select [ngModel]=\"dummyMonth\" (ngModelChange)=\"onChangeMonth($event)\" style=\"padding:10px\" placeholder=\"MM\">\n                                <option *ngFor=\"let months of dateData\">{{months.month}}</option>\n                            </select>\n                        </div>\n                        <div class=\"date\">\n                            <select [(ngModel)]=\"creditCardModel.expYear\" yearControl=\"yearControl\" style=\"padding:10px\" placeholder=\"YY\">\n                                <option *ngFor=\"let year of yearList\">{{year}}</option>\n                            </select>\n                        </div>\n                    </div>\n        \n                </div>\n        \n                <div class=\"cvv\">\n                    <label *ngIf=\"showlabel\">CVV</label>\n                    <input #inpcvv=\"ngModel\" [ngClass]=\"{'input-control-success':isCvvValid,'input-control-failure':(!isCvvValid && (inpcvv.dirty ||inpcvv.touched))}\"\n                        type=\"password\" placeholder=\"CVV\" maxlength=\"3\" class=\"input-control\" [(ngModel)]=\"creditCardModel.cvv\" (keyup)=\"onClick(inpcvv)\">\n                </div>\n            </div>\n            </ng-container>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioCreditcardComponent; }), multi: true,
                        }],
                    styles: ["\n\n  "],
                },] },
    ];
    /** @nocollapse */
    AmexioCreditcardComponent.ctorParameters = function () { return []; };
    AmexioCreditcardComponent.propDecorators = {
        yearcount: [{ type: core.Input, args: ['year-count',] }],
        showlabel: [{ type: core.Input, args: ['show-label',] }],
        template: [{ type: core.Input, args: ['template',] }]
    };
    return AmexioCreditcardComponent;
}());

var __extends$14 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var ListBaseDatepickerComponent = /** @class */ (function (_super) {
    __extends$14(ListBaseDatepickerComponent, _super);
    function ListBaseDatepickerComponent(renderer, element, cd) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.element = element;
        _this.cd = cd;
        _this.self = false;
        _this.itemClick = false;
        _this.hide();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.focus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.blur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemClicked();
    };
    /**
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.itemClicked = /**
     * @return {?}
     */
    function () {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    };
    /**
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.bindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', function (event) { return _this.handleDocumentListener(event); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.handleDocumentListener = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    };
    /**
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.clearClicks = /**
     * @return {?}
     */
    function () {
        this.self = false;
        this.itemClick = false;
    };
    /**
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.unbindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    /**
     * @return {?}
     */
    ListBaseDatepickerComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.dropdownstyle = { visibility: 'hidden' };
    };
    return ListBaseDatepickerComponent;
}(AmexioFormValidator));

var __extends$13 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$8 = function () {
};
var AmexioDateTimePickerComponent = /** @class */ (function (_super) {
    __extends$13(AmexioDateTimePickerComponent, _super);
    function AmexioDateTimePickerComponent(element, cdf, renderer) {
        var _this = _super.call(this, renderer, element, cdf) || this;
        _this.element = element;
        _this.cdf = cdf;
        /*
           Properties
           name : diabled-date
           datatype :  any
           version : 4.2 onwards
           default : none
           description : sets disabled dates range
           */
        _this.diabledDate = [];
        /*
           Properties
           name : inline-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets inline calender
           */
        _this.inlineDatepicker = false;
        /*
           Properties
           name : dropdown-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets dropdown datepicker
           */
        _this.dropdownDatepicker = false;
        /*
           Properties
           name : required
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Flag to allow blank field or not
           */
        _this.required = false;
        /*
           Events
           name : blur
           description : On blur event
           */
        // @Output() blur: EventEmitter<any> = new EventEmitter<any>();
        /*
           Properties
           name : change
           description : On field value change event
           */
        _this.change = new core.EventEmitter();
        /*
           Properties
           name : input
           description : On input event field.
           */
        _this.input = new core.EventEmitter();
        _this.drop = false;
        _this.tempFlag = true;
        _this.hostFlag = false;
        _this.isComponentValid = new core.EventEmitter();
        _this.backArrowFlag = false;
        _this.forwardArrowFlag = false;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$8;
        _this.onChangeCallback = noop$8;
        _this.viewmode = '1';
        _this.yearList1 = [{ year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }];
        _this.yearList2 = [{ year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }];
        _this.monthList1 = [{ name: 'Jan', flag: false, num: 4 }, { name: 'Feb', flag: false },
            { name: 'Mar', flag: false }, { name: 'Apr', flag: false }, { name: 'May', flag: false },
            { name: 'Jun', flag: false }];
        _this.monthList2 = [{ name: 'Jul', flag: false }, { name: 'Aug', flag: false }, { name: 'Sep', flag: false },
            { name: 'Oct', flag: false }, { name: 'Nov', flag: false }, { name: 'Dec', flag: false }];
        _this.minDate = '';
        _this.maxDate = '';
        _this.elementId = new Date().getTime() + '';
        _this.selectedDate = new Date();
        _this.currrentDate = new Date();
        _this.curYear = _this.currrentDate.getFullYear();
        var /** @type {?} */ i = 0;
        var /** @type {?} */ j = 0;
        for (i = 4; i >= 0; i--) {
            _this.yearList1[j].year = _this.curYear - i;
            j++;
        }
        j = 0;
        for (i = 1; i <= 5; i++) {
            _this.yearList2[j].year = _this.curYear + i;
            j++;
        }
        _this.daysTitle = [];
        _this.daysArray = [];
        _this.timepicker = false;
        _this.hrs = _this.currrentDate.getHours();
        _this.min = _this.currrentDate.getMinutes();
        _this.initDaysTitle();
        _this.createDaysForCurrentMonths(_this.currrentDate);
        _this.monthList1.forEach(function (tmpElement) {
        });
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.inlineDatepicker) {
            this.showToolTip = true;
            this.dropdownstyle = { visibility: 'visible' };
        }
        this.isValid = !this.required;
        this.isComponentValid.emit(!this.required);
        if (this.dateformat != null) {
            this.dateformat = 'dd/MM/yyyy';
        }
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.minMaxDateFound();
        } // main if ends
        // logic for disabling yrs before min and after max
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            var /** @type {?} */ min_1 = new Date(this.minDate);
            var /** @type {?} */ max_1 = new Date(this.maxDate);
            this.yearList1.forEach(function (element) {
                _this.disableMinMaxYear(element, min_1, max_1);
            });
            this.yearList2.forEach(function (element) {
                _this.disableMinMaxYear(element, min_1, max_1);
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.initDaysTitle = /**
     * @return {?}
     */
    function () {
        this.daysTitle.push({ text: 'Mo' });
        this.daysTitle.push({ text: 'Tu' });
        this.daysTitle.push({ text: 'We' });
        this.daysTitle.push({ text: 'Th' });
        this.daysTitle.push({ text: 'Fr' });
        this.daysTitle.push({ text: 'Sa' });
        this.daysTitle.push({ text: 'Su' });
    };
    /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.createDaysForCurrentMonths = /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    function (selectedPeriod) {
        this.daysArray = [];
        var /** @type {?} */ date = new Date(selectedPeriod.getFullYear(), selectedPeriod.getMonth(), 1, 0, 0, 0, 0); // Starting at the 1st of the month
        var /** @type {?} */ extras = (date.getDay() + 6) % 7; // How many days of the last month do we need to include?
        date.setDate(date.getDate() - extras); // Skip back to the previous monday
        while (this.daysArray.length < 6) {
            var /** @type {?} */ rowDays = [];
            for (var /** @type {?} */ i = 0; i < 7; i++) {
                var /** @type {?} */ day = {
                    date: null, selected: false, isCurrentMonth: null, isDisabled: false,
                };
                day.date = new Date(date.getTime());
                day.isCurrentMonth = (date.getMonth() === selectedPeriod.getMonth());
                if (this.dateModel && (date.getMonth() === this.dateModel.getMonth()) && (date.getDate() === this.dateModel.getDate())) {
                    day.selected = true;
                }
                else if ((date.getMonth() === this.currrentDate.getMonth()) && (date.getDate() === this.currrentDate.getDate())) {
                    if (this.dateModel) {
                        day.selected = false;
                    }
                    else {
                        day.selected = true;
                    }
                }
                rowDays.push(day);
                date.setDate(date.getDate() + 1);
            }
            this.daysArray.push(rowDays);
        }
    };
    /**
     * @param {?} dateObj
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onDateClick = /**
     * @param {?} dateObj
     * @return {?}
     */
    function (dateObj) {
        if (this.inlineDatepicker === false) {
            _super.prototype.itemClicked.call(this);
        }
        this.hostFlag = true;
        this.selectedDate = dateObj;
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.resetSelection(dateObj);
        this.dateModel = this.selectedDate;
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        if (this.inlineDatepicker) {
            this.showToolTip = true;
        }
        else {
            this.showToolTip = !this.showToolTip;
        }
    };
    /**
     * @param {?} dateObj
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.resetSelection = /**
     * @param {?} dateObj
     * @return {?}
     */
    function (dateObj) {
        for (var _i = 0, _a = this.daysArray; _i < _a.length; _i++) {
            var i = _a[_i];
            for (var _b = 0, i_1 = i; _b < i_1.length; _b++) {
                var j = i_1[_b];
                var /** @type {?} */ day = j;
                if (day.date.getTime() === dateObj.getTime()) {
                    day.selected = true;
                }
                else {
                    day.selected = false;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target.value != null && event.target.value !== '') {
            var /** @type {?} */ timeValue = event.target.value.split(':');
            if (timeValue != null) {
                var /** @type {?} */ hrs = parseInt(timeValue[0].trim(), 10);
                var /** @type {?} */ mins = parseInt(timeValue[1].trim(), 10);
                this.selectedDate.setHours(hrs);
                this.selectedDate.setMinutes(mins);
                this.hrs = hrs;
                this.min = mins;
                this.value = this.selectedDate;
                this.change.emit(this.value);
                event.stopPropagation();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.nextMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateData('plus', 1, event);
        this.disableddays(this.diabledDate);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.prevMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateData('minus', 1, event);
        this.disableddays(this.diabledDate);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.nextYear = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateData1('plus', 12, event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.prevYear = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setDateData1('minus', 12, event);
    };
    // this function validates month
    /**
     * @param {?} state
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setDateData = /**
     * @param {?} state
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    function (state, mon, event) {
        var /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of month
        if (state === 'plus') {
            this.setPlusData(d, max, mon);
        }
        else if (state === 'minus') {
            this.setMinusData(d, min, mon);
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    };
    // Set Plus Data
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setPlusData = /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    function (d, max, mon) {
        if (this.maxDate.length > 0) {
            if (d.getFullYear() === max.getFullYear()) {
                this.setMaxFullYear(d, max, mon);
            }
            else {
                // logic to chk if year is valid
                if (d.getFullYear() <= max.getFullYear()) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
        }
        else {
            // outer ends
            d.setMonth(d.getMonth() + mon);
        } // checks if selected date is within minimum range of month
    };
    // Set Max Full Year
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setMaxFullYear = /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    function (d, max, mon) {
        if ((d.getMonth() !== max.getMonth()) && d.getFullYear() <= max.getFullYear() && d.getMonth() <= max.getMonth()) {
            d.setMonth(d.getMonth() + mon);
        }
    };
    // Set Minus Data
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setMinusData = /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    function (d, min, mon) {
        if (this.minDate.length > 0) {
            if (d.getFullYear() === min.getFullYear()) {
                this.setMinFullYear(d, min, mon);
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        else {
            d.setMonth(d.getMonth() - mon);
        }
    };
    // Set Min Full year
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setMinFullYear = /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    function (d, min, mon) {
        if ((d.getMonth() !== min.getMonth()) && d.getFullYear() >= min.getFullYear() && d.getMonth() >= min.getMonth()) {
            // logic to chk if year is valid
            d.setMonth(d.getMonth() - mon);
        }
    };
    // this function validates year
    /**
     * @param {?} state
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setDateData1 = /**
     * @param {?} state
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    function (state, mon, event) {
        var /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of year
        if (state === 'plus') {
            if (this.maxDate.length > 0) {
                if (d.getFullYear() <= max.getFullYear() - 1) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
            else {
                d.setMonth(d.getMonth() + mon);
            } // checks if selected date is within minimum range of year
        }
        else if (state === 'minus') {
            if (this.minDate.length > 0) {
                if (d.getFullYear() >= min.getFullYear() + 1) {
                    d.setMonth(d.getMonth() - mon);
                }
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.setToday = /**
     * @return {?}
     */
    function () {
        this.currrentDate = new Date();
        this.initDate();
        this.showToolTip = !this.showToolTip;
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.currrentDate);
        this.selectedDate = this.currrentDate;
        this.dateModel = this.selectedDate;
        this.value = this.selectedDate;
        this.innerValue = '';
    };
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.plus = /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    function (type, event) {
        if (type === 'min') {
            if (this.min === 59) {
                this.min = -1;
                this.hrs++;
            }
            this.min++;
        }
        if (type === 'hrs') {
            this.hrs++;
        }
        if (this.hrs === 24) {
            this.hrs = 0;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    };
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.minus = /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    function (type, event) {
        if (type === 'min') {
            if (this.min === 0) {
                this.min = 60;
                this.hrs--;
            }
            this.min--;
        }
        if (type === 'hrs') {
            this.hrs--;
        }
        if (this.hrs === 0) {
            this.hrs = 23;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    };
    Object.defineProperty(AmexioDateTimePickerComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // Set touched on blur
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== '') {
            if (value !== this.innerValue) {
                this.validateWriteValue(value);
            }
        }
        else {
            this.dateModel = '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.validateWriteValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.innerValue = value;
        if (this.innerValue instanceof Date || ('number' === typeof this.innerValue)) {
            if (('number' === typeof this.innerValue)) {
                this.innerValue = new Date(this.innerValue);
            }
            this.dateModel = this.innerValue;
            this.currrentDate = this.dateModel;
            this.selectedDate = this.currrentDate;
            this.createDaysForCurrentMonths(this.dateModel);
            if (this.required) {
                this.isValid = true;
            }
        }
        else {
            this.negateisValid();
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.negateisValid = /**
     * @return {?}
     */
    function () {
        this.isValid = false;
        this.hrs = 0;
        this.min = 0;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onFocus = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onFocusOut = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (isNaN(Date.parse(value.value))) {
            this.isValid = false;
            value.value = '';
        }
        else {
            this.value = Date.parse(value.value);
            this.isValid = true;
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.openPicker = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        _super.prototype.focus.call(this, elem);
        this.hostFlag = false;
        this.pickerele = elem;
        if (this.inlineDatepicker) {
            this.showToolTip = this.inlineDatepicker;
        }
        else {
            this.showToolTip = true;
        }
        this.posixUp = this.getListPosition(elem);
        this.disableddays(this.diabledDate);
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ dropdownHeight = 350; // must be same in dropdown.scss
        if (window.innerHeight - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            if ((elementRef.getBoundingClientRect().top - dropdownHeight - elementRef.getBoundingClientRect().height) > 0) {
                this.positionClass = {
                    top: (elementRef.getBoundingClientRect().top - dropdownHeight - elementRef.getBoundingClientRect().height) + 'px',
                };
            }
            else if ((dropdownHeight - elementRef.getBoundingClientRect().top) > 0) {
                this.positionClass = {
                    top: (dropdownHeight - elementRef.getBoundingClientRect().top) + 'px',
                };
            }
            else if ((elementRef.getBoundingClientRect().top - dropdownHeight) > 0) {
                this.positionClass = {
                    top: (elementRef.getBoundingClientRect().top - dropdownHeight) + 'px',
                };
            }
            return true;
        }
        else {
            this.positionClass = {
                top: (elementRef.getBoundingClientRect().top + elementRef.getBoundingClientRect().height) + 'px'
            };
            return false;
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.onSelect = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
    };
    /**
     * @param {?} days
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.validateDays = /**
     * @param {?} days
     * @return {?}
     */
    function (days) {
        var /** @type {?} */ max = new Date(this.maxDate);
        var /** @type {?} */ min = new Date(this.minDate);
        // check1: if min max is null return false
        if (this.maxDate.length <= 0 && this.minDate.length <= 0) {
            return false;
        }
        if ((this.maxDate.length > 0 && this.minDate.length <= 0) ||
            (this.maxDate.length > 0 && this.minDate.length > 0)) {
            this.validateMaxDate(days, max);
        }
        if ((this.maxDate.length <= 0 && this.minDate.length > 0) || (this.maxDate.length > 0 && this.minDate.length > 0)) {
            // 3
            if (days.getDate() < min.getDate() &&
                days.getMonth() === min.getMonth() && days.getFullYear() === min.getFullYear()) {
                return true;
                // 4
            }
            else if (days.getMonth() < min.getMonth() && days.getFullYear() === min.getFullYear()) {
                return true;
            }
        }
        this.disableddays(this.diabledDate);
    };
    /**
     * @param {?} days
     * @param {?} max
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.validateMaxDate = /**
     * @param {?} days
     * @param {?} max
     * @return {?}
     */
    function (days, max) {
        // check if days greater than max return
        // 1
        if (days.getDate() > max.getDate() &&
            days.getMonth() >= max.getMonth() && days.getFullYear() >= max.getFullYear()) {
            return true;
            // 2
        }
        else if (days.getMonth() > max.getMonth() && days.getFullYear() === max.getFullYear()) {
            return true;
        }
    };
    /**
     * @param {?} dates
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.disableddays = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        var _this = this;
        if (dates) {
            dates.forEach(function (element) {
                var /** @type {?} */ From = new Date(element.from);
                var /** @type {?} */ To = new Date(element.to);
                _this.daysArray.forEach(function (element2) {
                    element2.forEach(function (element1) {
                        if (element1.date.getFullYear() <= To.getFullYear() && element1.date.getMonth()
                            <= To.getMonth() && element1.date.getDate() <= To.getDate() && element1.date.getFullYear() >= From.getFullYear() &&
                            element1.date.getMonth() >= From.getMonth() &&
                            element1.date.getDate() >= From.getDate()) {
                            element1.isDisabled = true;
                        }
                    });
                });
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.dropdownDatePicker = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.monthList1.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.monthList2.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.yearList1.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.yearList2.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.hostFlag = true;
        this.tempFlag = false;
        this.drop = true;
        _super.prototype.focus.call(this, {});
    };
    // Added method to avois recursive code
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.elementFlagMethod = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (element.flag) {
            element.flag = false;
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.negateDrop = /**
     * @return {?}
     */
    function () {
        this.hostFlag = true;
        this.drop = false;
        this.showToolTip = true;
        this.tempFlag = true;
    };
    /**
     * @param {?} month
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.getDropdownMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        var _this = this;
        this.monthList1.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.monthList2.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.monthList1.forEach(function (element) {
            _this.chkMonth(element, month);
        });
        this.monthList2.forEach(function (element) {
            _this.chkMonth(element, month);
        });
        switch (month.name) {
            case 'Jan':
                this.monthNo = 0;
                break;
            case 'Feb':
                this.monthNo = 1;
                break;
            case 'Mar':
                this.monthNo = 2;
                break;
            case 'Apr':
                this.monthNo = 3;
                break;
            case 'May':
                this.monthNo = 4;
                break;
            case 'Jun':
                this.monthNo = 5;
                break;
            case 'Jul':
                this.monthNo = 6;
                break;
            case 'Aug':
                this.monthNo = 7;
                break;
            case 'Sep':
                this.monthNo = 8;
                break;
            case 'Oct':
                this.monthNo = 9;
                break;
            case 'Nov':
                this.monthNo = 10;
                break;
            case 'Dec':
                this.monthNo = 11;
                break;
            default:
                break;
        }
        _super.prototype.focus.call(this, {});
    };
    // this function broken from chk month getDropdownMonth()
    /**
     * @param {?} element
     * @param {?} month
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.chkMonth = /**
     * @param {?} element
     * @param {?} month
     * @return {?}
     */
    function (element, month) {
        if (element.name === month.name) {
            element.flag = true;
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.yearFlagNegate = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this.elementFlagMethod(element);
    };
    // this function is broken from getDropdownYear
    /**
     * @param {?} element
     * @param {?} year
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.yearFlag = /**
     * @param {?} element
     * @param {?} year
     * @return {?}
     */
    function (element, year) {
        if (element.year === year.year) {
            element.flag = true;
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.getDropdownYear = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        var _this = this;
        this.yearList1.forEach(function (element) {
            // negate dropdown year flag
            // negate dropdown year flag
            _this.yearFlagNegate(element);
        });
        this.yearList2.forEach(function (element) {
            // negate dropdown year flag
            // negate dropdown year flag
            _this.yearFlagNegate(element);
        });
        this.yearList1.forEach(function (element) {
            _this.yearFlag(element, year);
        });
        this.yearList2.forEach(function (element) {
            _this.yearFlag(element, year);
        });
        this.yearNo = year.year;
        _super.prototype.focus.call(this, {});
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.navigateDropdown = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hostFlag = true;
        this.selectedDate = new Date();
        if (this.yearNo != null && this.monthNo != null) {
            this.selectedDate.setFullYear(this.yearNo);
            this.selectedDate.setMonth(this.monthNo);
        }
        else if (this.yearNo != null && this.monthNo === null) {
            this.selectedDate.setFullYear(this.yearNo);
        }
        else if (this.yearNo === null && this.monthNo != null) {
            this.selectedDate.setMonth(this.monthNo);
        }
        this.drop = false;
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.selectedDate);
        this.disableddays(this.diabledDate);
        this.tempFlag = true;
        this.cdf.detectChanges();
        this.yearList1.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.yearList2.forEach(function (element) {
            _this.elementFlagMethod(element);
        });
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.selectedDate);
        this.disableddays(this.diabledDate);
        _super.prototype.focus.call(this, {});
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.cancelDropdown = /**
     * @return {?}
     */
    function () {
        this.drop = false;
        this.showToolTip = true;
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.arrowClickBack = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            // arrow click logic
            this.backArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
            } // for ends
        } // main else ends
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.backArrow = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach(function (element) {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() && element.year !== min.getFullYear()) {
                _this.forwardArrowFlag = true;
                _this.backArrowFlag = false;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                _this.forwardArrowFlag = false;
                _this.backArrowFlag = false;
            }
        });
        // resets Arrow Flag
        this.resetYearFlag();
    };
    // this function is broken from resetArrowFlag()
    /**
     * @param {?} element
     * @param {?} min
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.alterBackArrow = /**
     * @param {?} element
     * @param {?} min
     * @return {?}
     */
    function (element, min) {
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.resetArrowFlag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        this.yearList2.forEach(function (element) {
            _this.alterBackArrow(element, min);
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.forwardArrowFlag = true;
            }
        });
    };
    // this fn is broken from  backArrow() and it resets Year Flag
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.resetYearFlag = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ i;
        if (!this.backArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            }
        } /* if ends */
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.alterBackForwardArrow = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
        if (element.year === max.getFullYear() ||
            (element.year === min.getFullYear() && element.year === max.getFullYear())) {
            this.forwardArrowFlag = true;
        }
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.forwardArrow = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ i;
        // chk yearlist1
        this.chkYearList1();
        this.yearList2.forEach(function (element) {
            _this.alterBackForwardArrow(element);
        });
        if (!this.forwardArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            } // for ends
        } // if ends
    };
    // chk yearlist1 broken from forwardArrow()
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.chkYearList1 = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach(function (element) {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.backArrowFlag = true;
            }
            if (element.year === min.getFullYear() && element.year !== max.getFullYear()) {
                _this.forwardArrowFlag = false;
                _this.backArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                _this.forwardArrowFlag = false;
                _this.backArrowFlag = false;
            }
            if (element.year === max.getFullYear()) {
                _this.forwardArrowFlag = true;
            }
        });
    };
    // this function is obtained by breaking arrowClickBack() and arrowClickForward()
    // for rechking arrow flags after reinitialization of yrlist1 & 2
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.rechkYearFlag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.yearList1.forEach(function (element) {
            var /** @type {?} */ min = new Date(_this.minDate);
            var /** @type {?} */ max = new Date(_this.maxDate);
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                _this.forwardArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                _this.forwardArrowFlag = false;
                _this.backArrowFlag = false;
            }
        });
        this.yearList2.forEach(function (element) {
            _this.alterBackForwardArrow(element);
        });
    };
    // this function is broken from disableYearFlag() , here year flag disable altered to true
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.yearFlagDisable = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        if (element.year < min.getFullYear() || element.year > max.getFullYear()) {
            element.disabled = true;
        } // if ends
    };
    // this function is obtained by breaking arrowClickBack() and arrowClickForward()
    // for disabling year flag
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.disableYearFlag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.yearList1.forEach(function (element) {
                _this.yearFlagDisable(element);
            }); // for ends
            this.yearList2.forEach(function (element) {
                _this.yearFlagDisable(element);
            }); // for ends
        } // outer if ends
    };
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.arrowClickForward = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.forwardArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
            }
        }
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
    };
    // onInit Method: If min max date is provided
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.minMaxDateFound = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ min = new Date(this.minDate);
        var /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach(function (element) {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                _this.forwardArrowFlag = true;
            }
        });
        this.yearList2.forEach(function (element) {
            if (element.year === min.getFullYear()) {
                _this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                _this.forwardArrowFlag = true;
            }
        });
    };
    // Method to disable when min max year provided
    /**
     * @param {?} element
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.disableMinMaxYear = /**
     * @param {?} element
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (element, min, max) {
        if (element.year < min.getFullYear() || element.year > max.getFullYear()) {
            element.disabled = true;
        }
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioDateTimePickerComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return (this.value || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioDateTimePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-date-time-picker',
                    template: "\n    <div>\n      <div class=\"inputgroup\" *ngIf=\"!inlineDatepicker\" #rootDiv>\n\n        <label>\n          {{fieldlabel}}\n        </label>\n\n        <ng-container *ngIf=\"datepicker && !timepicker\">\n          <input type=\"text\" #pickerDt value=\"{{dateModel|date:dateformat}}\" [attr.disabled]=\"disabled ? true: null\" [required]=\"required ? true: null\"\n                 (blur)=\"onBlur()\" (focus)=\"onFocus(rootDiv)\" (focusout)=\"onFocusOut(pickerDt)\" (change)=\"change.emit()\" class=\"input-control\"\n                 [ngStyle]=\"{'cursor': readonly ? 'not-allowed':'pointer'}\" placeholder=\"Choose Date\" />\n        </ng-container>\n\n        <ng-container *ngIf=\"timepicker\">\n          <input type=\"text\" [(ngModel)]=\"selectedDate\" value=\"{{selectedDate|date:dateformat}} {{hrs + ' : ' + min}}\" [attr.disabled]=\"disabled ? true: null\"\n                 [attr.required]=\"required ? true: null\" (blur)=\"onBlur()\" (focus)=\"onFocus(rootDiv)\" (input)=\"onInput($event)\"\n                 (change)=\"change.emit()\" class=\"input-control\" [ngStyle]=\"{'cursor': readonly ? 'not-allowed':'pointer'}\" placeholder=\"Choose Time\"\n          />\n        </ng-container>\n\n        <div class=\"drodown-caret-down\" style=\"cursor: pointer\" (click)=\"openPicker(rootDiv)\">\n          <ng-container *ngIf=\"timepicker\">\n            <amexio-form-icon key=\"datepicker-clock-icon\"></amexio-form-icon>\n          </ng-container>\n          <ng-container *ngIf=\"!timepicker\">\n            <amexio-form-icon key=\"datepicker_calendar\"></amexio-form-icon>\n          </ng-container>\n\n        </div>\n\n\n      </div>\n\n      <div [ngStyle]=\"dropdownstyle\" [ngStyle]=\"positionClass\" [ngClass]=\"{'datetimepicker1':inlineDatepicker , 'datetimepicker':!inlineDatepicker}\">\n\n        <div class=\"datetimepickertopbar\" [ngStyle]=\"{'display': datepicker ? 'block' : 'none'}\">\n          <ul>\n            <li class=\"prev\">\n              <amexio-form-icon key=\"datepicker_previous_fast\" (onClick)=\"prevYear($event)\"></amexio-form-icon>\n              <amexio-form-icon key=\"datepicker_previous\" (onClick)=\"prevMonth($event)\"></amexio-form-icon>\n            </li>\n            <li class=\"next\">\n              <amexio-form-icon key=\"datepicker_next\" (onClick)=\"nextMonth($event)\"></amexio-form-icon>\n              <amexio-form-icon key=\"datepicker_next_fast\" (onClick)=\"nextYear($event)\"></amexio-form-icon>\n            </li>\n            <li>\n                        <span *ngIf=\"dropdownDatepicker\">\n                        <span style=\"cursor:pointer\"(click)=\"dropdownDatePicker()\">\n                            {{selectedDate | date:'MMMM'}}\n                            <br>\n                            <span class=\"title\">{{selectedDate | date:'y'}}</span>\n                        </span>\n                        <span  (onClick)=\" dropdownDatePicker()\" style=\"cursor:pointer\">\n                            <amexio-form-icon key=\"dropdown_caret\" (onClick)=\"dropdownDatePicker()\"></amexio-form-icon>\n                        </span>\n                    </span>\n\n              <span *ngIf=\"!dropdownDatepicker\">\n                        {{selectedDate | date:'MMMM'}}\n                        <br>\n                        <span class=\"title\" style=\"cursor:auto\">{{selectedDate | date:'y'}}</span>\n                    </span>\n\n            </li>\n          </ul>\n        </div>\n        <div *ngIf=\"!drop\">\n          <ul class=\"weekdays\" [ngStyle]=\"{'display': datepicker ? 'block' : 'none'}\">\n            <li *ngFor=\"let dayTitle of daysTitle\">{{dayTitle.text}}</li>\n          </ul>\n\n          <ul class=\"days\" [ngStyle]=\"{'display': datepicker ? 'block' : 'none'}\">\n\n            <ng-container *ngFor=\"let dayArray of daysArray\">\n              <li *ngFor=\"let day of dayArray\" (click)=\"onDateClick(day.date)\" [ngClass]=\"{'date1':validateDays(day.date) , 'date1':day.isDisabled}\">\n                            <span (click)=\"onDateClick(day.date)\" class=\"day\" [ngClass]=\"{'active':day.selected, 'currentMonth':day.isCurrentMonth, 'notCurrentMonth':!day.isCurrentMonth,'invaliddays':validateDays(day.date), 'disabled':day.isDisabled}\">\n                                {{ day.date | date:'d' }}\n                            </span>\n              </li>\n            </ng-container>\n\n\n            <li class=\"date-today\">\n              <amexio-button type=\"primary\" label=\"TODAY\" (onClick)=\"setToday()\" size=\"small\"></amexio-button>\n            </li>\n\n\n          </ul>\n        </div>\n        <table class=\"table\"  [ngStyle]=\"{'display': timepicker ? 'block' : 'none'}\" style=\"cursor : pointer;text-align: center;padding: 5px;\">\n          <!--if picker is true-->\n          <tr style=\"padding: 10px;\">\n            <td colspan=\"2\"></td>\n            <td (click)=\"plus('hrs', $event);\">&#9650;</td>\n            <td></td>\n            <td (click)=\"plus('min', $event);\">&#9650;</td>\n            <td colspan=\"2\"></td>\n          </tr>\n          <tr>\n            <td colspan=\"2\"></td>\n            <td>{{hrs}}</td>\n            <td>:</td>\n            <td>{{min}}</td>\n            <td colspan=\"2\">\n            </td>\n          </tr>\n          <tr>\n            <td colspan=\"2\"></td>\n            <td (click)=\"minus('hrs', $event);\">&#9660;</td>\n            <td></td>\n            <td (click)=\"minus('min', $event);\">&#9660;</td>\n            <td colspan=\"2\">\n            </td>\n          </tr>\n\n        </table>\n\n        <!--dropdown datepicker -->\n        <div [ngStyle]=\"positionClass\" class=\"datedropdown\" *ngIf=\"drop && !timepicker\">\n\n          <div class=\"dropdiv1\">\n\n                    <span class=\"dropspan1\">\n                        <ul class=\"dropul1\">\n                            <li class=\"li4\" (click)=\"getDropdownMonth(month)\" *ngFor=\"let month of monthList1\">\n                                <span [ngClass]=\"{'change4':month.flag}\"> {{month.name}}</span>\n                            </li>\n\n                        </ul>\n                    </span>\n\n            <span class=\"dropspan2\">\n                        <ul class=\"dropul2\">\n                            <li class=\"li4\" (click)=\"getDropdownMonth(month)\" *ngFor=\"let month of monthList2\">\n                                <span [ngClass]=\"{'change4':month.flag}\"> {{month.name}}</span>\n                            </li>\n\n                        </ul>\n                    </span>\n\n            <span class=\"dropspan1\">\n                        <ul class=\"dropul1\">\n                            <li [ngClass]=\"{ 'disablearrow':backArrowFlag}\" class=\"dropiconpadding\" (click)=\"arrowClickBack()\">\n                                <amexio-form-icon key=\"paginator_first\" (onClick)=\"arrowClickBack()\"></amexio-form-icon>\n                            </li>\n                            <li [ngClass]=\"{ 'disablearrow':year.disabled}\" class=\"li4\" (click)=\"getDropdownYear(year)\" *ngFor=\"let year of yearList1\">\n                                <span [ngClass]=\"{'change4':year.flag && !year.disabled}\">\n                                    {{year.year}}\n                                </span>\n                            </li>\n\n\n                        </ul>\n                    </span>\n\n            <span class=\"dropspan4\">\n                        <ul class=\"dropul2\">\n\n                            <li [ngClass]=\"{ 'disablearrow':forwardArrowFlag}\" class=\"dropiconpadding\" (click)=\"arrowClickForward()\">\n                                <amexio-form-icon key=\"paginator_last\" (onClick)=\"arrowClickForward()\"></amexio-form-icon>\n                            </li>\n                            <li [ngClass]=\"{ 'disablearrow ':year.disabled}\" class=\"li4\" (click)=\"getDropdownYear(year)\" *ngFor=\"let year of yearList2\">\n                                <span [ngClass]=\"{'change4':year.flag && !year.disabled}\">\n                                    {{year.year}}\n                                </span>\n                            </li>\n\n                        </ul>\n                    </span>\n\n          </div>\n          <div class=\"btndiv1\">\n                    <span class=\"dropbtnspan\">\n                        <button (click)=\"navigateDropdown()\" class=\"datedropbtn\">\n                            ok\n                        </button>\n                        <button class=\"datedropbtn\" (click)=\"negateDrop()\">\n                            cancel\n                        </button>\n                    </span>\n\n\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n  "],
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioDateTimePickerComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioDateTimePickerComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioDateTimePickerComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 }
    ]; };
    AmexioDateTimePickerComponent.propDecorators = {
        dateformat: [{ type: core.Input, args: ['date-format',] }],
        datepicker: [{ type: core.Input, args: ['date-picker',] }],
        timepicker: [{ type: core.Input, args: ['time-picker',] }],
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        disabled: [{ type: core.Input, args: ['disabled',] }],
        readonly: [{ type: core.Input, args: ['read-only',] }],
        minDate: [{ type: core.Input, args: ['min-date',] }],
        maxDate: [{ type: core.Input, args: ['max-date',] }],
        diabledDate: [{ type: core.Input, args: ['disabled-date',] }],
        inlineDatepicker: [{ type: core.Input, args: ['inline-datepicker',] }],
        dropdownDatepicker: [{ type: core.Input, args: ['dropdown-datepicker',] }],
        required: [{ type: core.Input }],
        change: [{ type: core.Output }],
        input: [{ type: core.Output }],
        isComponentValid: [{ type: core.Output }]
    };
    return AmexioDateTimePickerComponent;
}(ListBaseDatepickerComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio  Dropdown Menu
 Component Selector : <amexio-drop-down-menu-items>
 Component Description : Amexio Dropdown component with various modes and configurations .
 */
var AmexioDropDownitemsComponent = /** @class */ (function () {
    function AmexioDropDownitemsComponent() {
        /*
           Properties
           name : add-seperator
           datatype :  boolean
           version : 4.2 onwards
           default : false
           description : add divider to the dropdown menu list
           */
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioDropDownitemsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.iconalign && this.labelalign
            && this.iconalign.toLowerCase() === this.labelalign.toLowerCase()) {
            this.iconalign = null;
            this.labelalign = null;
        }
        else if (this.iconalign && this.iconalign === 'left') {
            this.labelalign = 'right';
            this.iconalign = null;
        }
        else if (this.iconalign && this.iconalign === 'right') {
            this.labelalign = null;
        }
    };
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    AmexioDropDownitemsComponent.prototype.onItemClick = /**
     * @param {?} clickEvent
     * @return {?}
     */
    function (clickEvent) {
        this.toggle = false;
        var /** @type {?} */ e = {
            event: clickEvent,
            this: this,
        };
        this.onClick.emit(e);
    };
    AmexioDropDownitemsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-drop-down-menu-item',
                    template: "\n    <div *ngIf=\"!(icon && label)\" class=\"dropdowndivider\" style=\"padding-bottom: 5px;\">\n      <ng-content></ng-content>\n    </div>\n    <a *ngIf=\" (icon || label)\" (click)=\"onItemClick($event)\" [ngClass]=\"{'dropdowndivider':separator}\">\n\n      <ng-container *ngIf=\"icon\">\n        <em [style.float]=\"iconalign\" [ngClass]=\"icon\"></em>\n      </ng-container>\n\n      <ng-container *ngIf=\"label\">\n        <span [style.float]=\"labelalign\" style=\"padding: 5px;\">\n          {{label}}\n        </span>\n      </ng-container>\n\n    </a>\n  ",
                },] },
    ];
    AmexioDropDownitemsComponent.propDecorators = {
        label: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        labelalign: [{ type: core.Input, args: ['label-align',] }],
        iconalign: [{ type: core.Input, args: ['icon-align',] }],
        separator: [{ type: core.Input, args: ['separator',] }],
        onClick: [{ type: core.Output }]
    };
    return AmexioDropDownitemsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioDropDownMenuComponent = /** @class */ (function () {
    function AmexioDropDownMenuComponent(element, matchMediaService) {
        this.element = element;
        this.matchMediaService = matchMediaService;
        this.xposition = false;
        /*
           Properties
           name : menu icon
           datatype : string
           version : 4.2 onwards
           default :
           description : icon on menu
           */
        this.downArrowIcon = true;
        /*
           Properties
           name : transparent
           datatype : string
           version : 4.2 onwards
           default :
           description : transparent style for menu
           */
        this.transparent = false;
        this.onClick = new core.EventEmitter();
        this.optionsCollection = [];
        this.iconalign = 'left';
        this.padding = '5px 10px';
    }
    /**
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.data) {
            this.data.forEach(function (node) {
                if (!node.iconalign && _this.iconalign) {
                    node.iconalign = _this.iconalign;
                }
                if (!node.labelalign) {
                    node.labelalign = 'left';
                }
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.optionsCollection = this.dropdowns.toArray();
        this.optionsCollection.forEach(function (node) { return node.onClick.subscribe(function (eventdata) {
            _this.toggle = false;
        }); });
    };
    /**
     * @param {?} targetElement
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.onElementOutClick = /**
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        var /** @type {?} */ parentFound = false;
        while (targetElement !== null && !parentFound) {
            if (targetElement === this.element.nativeElement) {
                parentFound = true;
            }
            targetElement = targetElement.parentElement;
        }
        if (!parentFound) {
            this.toggle = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.showDropDownContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.toggle = !this.toggle;
        this.top = event.target.getBoundingClientRect().top + 25;
        if ((this.matchMediaService.browserWindow().innerWidth - event.clientX) < 200) {
            this.xposition = true;
        }
        else {
            this.xposition = false;
        }
    };
    /**
     * @param {?} childposition
     * @param {?} parentIconPosition
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.getIconPosition = /**
     * @param {?} childposition
     * @param {?} parentIconPosition
     * @return {?}
     */
    function (childposition, parentIconPosition) {
        if (childposition.hasOwnProperty('iconalign') && childposition.iconalign !== '') {
            if (childposition.iconalign === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (parentIconPosition === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.onDropDownMenuClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.toggle = false;
        this.onClick.emit(event);
    };
    /**
     * @param {?} childPosition
     * @param {?} parentLabelPosition
     * @return {?}
     */
    AmexioDropDownMenuComponent.prototype.getLabelPosition = /**
     * @param {?} childPosition
     * @param {?} parentLabelPosition
     * @return {?}
     */
    function (childPosition, parentLabelPosition) {
        if (childPosition.hasOwnProperty('labelalign') && childPosition.labelalign !== '') {
            if (childPosition.labelalign === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (parentLabelPosition === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
    };
    AmexioDropDownMenuComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-drop-down-menu',
                    template: "\n    <div (click)=\"showDropDownContent($event)\" class=\"dropdown-menu\" \n         [style.padding]=\"padding\"\n         [ngStyle]=\"{'background-color':(transparent)?'unset':'null'}\">\n\n      <span >\n        <em *ngIf=\"icon\" style=\"padding-right: 5px;\" [ngClass]=\"icon\">&nbsp;</em>{{title}}&nbsp;</span>\n      <ng-container *ngIf=\"downArrowIcon\">\n        <em *ngIf=\"!toggle\"  class=\"fa fa-angle-down \"></em>\n        <em *ngIf=\"toggle\"  class=\"fa fa-angle-up \"></em>\n      </ng-container>\n\n    </div>\n\n    <div   *ngIf=\"toggle\" class=\"dropdown-menu-content\"\n         [style.height]=\"height\"   [ngClass]=\"{'menu-right':xposition}\">\n\n      <ng-content></ng-content>\n      <amexio-drop-down-menu-item (onClick)=\"onDropDownMenuClick($event)\"  *ngFor=\"let node of data\"\n                                    [icon-align]=\"node.iconalign\"\n                                    [label-align]=\"node.labelalign\"\n                                    [label]=\"node.label\"\n                                    [separator]=\"node.separator\"\n                                    [icon]=\"node.icon\">\n      </amexio-drop-down-menu-item>\n\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioDropDownMenuComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: DeviceQueryService }
    ]; };
    AmexioDropDownMenuComponent.propDecorators = {
        dropDownMenuLocalData: [{ type: core.Input }],
        data: [{ type: core.Input }],
        title: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        iconalign: [{ type: core.Input, args: ['icon-align',] }],
        padding: [{ type: core.Input }],
        downArrowIcon: [{ type: core.Input, args: ['down-arrow-icon',] }],
        transparent: [{ type: core.Input }],
        height: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        dropdowns: [{ type: core.ContentChildren, args: [AmexioDropDownitemsComponent,] }],
        onElementOutClick: [{ type: core.HostListener, args: ['document:click', ['$event.target'],] }, { type: core.HostListener, args: ['document: touchstart', ['$event.target'],] }]
    };
    return AmexioDropDownMenuComponent;
}());

var __extends$15 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioEmailInputComponent = /** @class */ (function (_super) {
    __extends$15(AmexioEmailInputComponent, _super);
    function AmexioEmailInputComponent() {
        var _this = _super.call(this) || this;
        /*
           Properties
           name : has-label
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Flag to set label
           */
        _this.hasLabel = true;
        _this.emailpattern = /\S+@\S+\.\S+/;
        /*
           Events
           name : onBlur
           datatype : any
           version : 4.0 onwards
           default :
           description : On blur event
           */
        _this.onBlur = new core.EventEmitter();
        /*
           Events
           name : input
           datatype : any
           version : none
           default :
           description : 	On input event field.
           */
        _this.input = new core.EventEmitter();
        /*
           Events
           name : focus
           datatype : any
           version : none
           default :
           description : On focus event field.
           */
        _this.focus = new core.EventEmitter();
        /*
           Events
           name : change
           datatype : any
           version : none
           default :
           description : On field value change event
           */
        _this.change = new core.EventEmitter();
        _this.showToolTip = false;
        return _this;
    }
    Object.defineProperty(AmexioEmailInputComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
         Properties
         name : error-msg
         datatype : none
         version : 4.0 onwards
         default : none
         description : Sets the error message
         */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioEmailInputComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pattern;
        },
        /*
         Properties
         name : pattern
         datatype : string
         version : 4.0 onwards
         default :
         description : Apply Reg-ex to the field
         */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                this._pattern = value;
                this.regEx = new RegExp(this._pattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.generateName(this.name, this.fieldlabel, 'emailinput');
    };
    // THIS METHOD USED FOR BLUR EVENT.
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.onblur = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    };
    // THIS METHOD USED FOR FOCUS EVENT .
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.showToolTip = true;
        this.focus.emit(this.value);
    };
    // THIS METHOD USED FOR  INPUT EVENT .
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    };
    // THIS METHOD USED FOR CHANGE EVENT  .
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.onChangeEv = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
    };
    // THIS METHOD IS USED FOR VALIDATION
    /**
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.isFieldValid = /**
     * @return {?}
     */
    function () {
        return (!this.allowblank && this.emailpattern.test(this.value)) || this.allowblank;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioEmailInputComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioEmailInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-email-input',
                    template: "\n\n    <div class=\"inputgroup\">\n\n      <label *ngIf=\"hasLabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n        {{fieldlabel}}\n      </label> \n\n      <input type=\"email\" \n             class=\"input-control\"\n             [ngClass]=\"model.touched ? (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''\"\n             [(ngModel)]=\"value\"\n             (blur)=\"onblur()\"\n             (focus)=\"onFocus()\"\n             (input)=\"onInput()\"\n             (change)=\"onChangeEv()\"\n             [name]=\"name\"\n             [pattern]=\"regEx\"\n             [attr.placeholder]=\"placeholder\"\n             [attr.disabled] = \"disabled ? true: null\"\n             [required]=\"!allowblank\"/>\n\n             <ng-container *ngIf=\"iconfeedback\">\n              <span class=\"input-control-feedback\">\n                  <span *ngIf=\"!isValid && model.touched\"><em class=\"fa fa-times\"></em></span>\n                  <span *ngIf=\"isValid && model.touched\"><em class=\"fa fa-check\"></em></span>\n              </span>\n          </ng-container>\n    \n    \n          <span *ngIf=\"showToolTip && enablepopover\" class=\"dropdown tooltiptext\">\n              <div [innerHTML]=\"helpInfoMsg\"></div>\n          </span>\n          <span class=\"inputfieldbar\"></span>\n        </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioEmailInputComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioEmailInputComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioEmailInputComponent.ctorParameters = function () { return []; };
    AmexioEmailInputComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        hasLabel: [{ type: core.Input, args: ['has-label',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        model: [{ type: core.ViewChild, args: [forms.NgModel,] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        pattern: [{ type: core.Input, args: ['pattern',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        change: [{ type: core.Output }],
        name: [{ type: core.Input, args: ['name',] }]
    };
    return AmexioEmailInputComponent;
}(ValueAccessorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFileUploadComponent = /** @class */ (function () {
    function AmexioFileUploadComponent(dataService) {
        this.dataService = dataService;
        /*
           Events
           name : onRemove
           datatype : any
           version : none
           default :
           description : On remove click event
           */
        this.onRemove = new core.EventEmitter();
        this.uploadedFiles = [];
    }
    /**
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} bytes
     * @param {?} decimals
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.formatBytes = /**
     * @param {?} bytes
     * @param {?} decimals
     * @return {?}
     */
    function (bytes, decimals) {
        if (bytes === 0) {
            return '0 Bytes';
        }
        var /** @type {?} */ k = 1024;
        var /** @type {?} */ dm = decimals || 2;
        // tslint:disable-next-line:one-variable-per-declaration
        var /** @type {?} */ sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var /** @type {?} */ i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.onFileDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.dropClass = '';
        var /** @type {?} */ dt = event.dataTransfer;
        if (dt.items) {
            // Use DataTransferItemList interface to access the file(s)
            // tslint:disable-next-line:prefer-for-of
            for (var /** @type {?} */ i = 0; i < dt.items.length; i++) {
                if (dt.items[i].kind === 'file') {
                    var /** @type {?} */ f = dt.items[i].getAsFile();
                    this.uploadFile(f, true);
                }
            }
        }
        else {
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.dropClass = 'drop';
    };
    /**
     * @param {?} filedata
     * @param {?} index
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.closeFile = /**
     * @param {?} filedata
     * @param {?} index
     * @return {?}
     */
    function (filedata, index) {
        this.onRemove.emit({ fileData: filedata });
        this.uploadedFiles.splice(index, 1);
    };
    //  For Uploading files
    /**
     * @param {?} event
     * @param {?} singleFile
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.uploadFile = /**
     * @param {?} event
     * @param {?} singleFile
     * @return {?}
     */
    function (event, singleFile) {
        var _this = this;
        if (singleFile) {
            var /** @type {?} */ formData = new FormData();
            formData.append(this.paramname, event);
            this.dataService
                .uploadFile(this.httpurl, this.httpmethod, formData)
                .subscribe(function (response) {
                _this.responseData = response;
            }, function (error) { }, function () {
            });
            this.uploadedFiles.push({
                name: event.name,
                size: this.formatBytes(event.size, 2),
            });
        }
        else {
            this.serviceCall(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.serviceCall = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ fileList = event.target.files != null ? event.target.files : event;
        var /** @type {?} */ formData = new FormData();
        if (fileList) {
            // tslint:disable-next-line:prefer-for-of
            for (var /** @type {?} */ i = 0; i < fileList.length; i++) {
                if (!this.paramname) {
                    this.paramname = 'file';
                }
                formData.append(this.paramname, fileList[i]);
            }
            this.uploadService(formData);
            if (fileList.length === 1) {
                var /** @type {?} */ fsize = this.formatBytes(fileList[0].size, 2);
                this.uploadedFiles.push({ name: fileList[0].name, size: fsize });
            }
            else if (fileList.length > 1) {
                // tslint:disable-next-line:prefer-for-of
                for (var /** @type {?} */ i = 0; i < fileList.length; i++) {
                    var /** @type {?} */ fsize = this.formatBytes(fileList[i].size, 2);
                    this.uploadedFiles.push({ name: fileList[i].name, size: fsize });
                }
            }
        }
    };
    /**
     * @param {?} formData
     * @return {?}
     */
    AmexioFileUploadComponent.prototype.uploadService = /**
     * @param {?} formData
     * @return {?}
     */
    function (formData) {
        var _this = this;
        this.dataService.uploadFile(this.httpurl, this.httpmethod, formData)
            .subscribe(function (response) {
            _this.responseData = response;
        }, function (error) { }, function () {
        });
    };
    AmexioFileUploadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-fileupload',
                    template: "\n    <div class='input-group' *ngIf='!droppable'>\n        <ng-container *ngIf='fieldlabel'>\n            <label>{{fieldlabel}}</label>\n        </ng-container>\n        <ng-container *ngIf='!fieldlabel'>\n            <label>Choose File</label>\n        </ng-container>\n        <input type='file' class='input-control' [attr.accept]='filetype' (change)='uploadFile($event,false)' [attr.multiple]='multiplefile' #inp>\n    </div>\n    <ng-container *ngIf='droppable'>\n        <ng-container *ngIf='fieldlabel'>\n            <label>{{fieldlabel}}</label>\n        </ng-container>\n        <ng-container *ngIf='!fieldlabel'>\n            <label>Drag and Drop Files below</label>\n        </ng-container>\n        <div class='upload-drop-zone {{dropClass}}' (drop)='onFileDrop($event)' (dragover)='onDragOver($event)' (dragleave)='dropClass = \"\";' #drpZone>\n            Just drag and drop files here\n        </div>\n    </ng-container>\n\n    <div class='file-upload-box' style='width: 100%'>\n        <li *ngFor='let file of uploadedFiles ; let index = index' class='file-upload-info'>\n            <span class='uploaded-file-name'>({{file.name}} &nbsp;  &nbsp; ({{file.size}}) )</span>\n            <amexio-form-icon key='tab_close' class='close-icon' (onClick)='closeFile(file,index)'>\n            </amexio-form-icon>\n        </li>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFileUploadComponent.ctorParameters = function () { return [
        { type: CommonDataService }
    ]; };
    AmexioFileUploadComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        filetype: [{ type: core.Input, args: ['file-type',] }],
        multiplefile: [{ type: core.Input, args: ['multiple-file',] }],
        paramname: [{ type: core.Input, args: ['param-name',] }],
        droppable: [{ type: core.Input }],
        onRemove: [{ type: core.Output }]
    };
    return AmexioFileUploadComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFloatingButtonComponent = /** @class */ (function () {
    function AmexioFloatingButtonComponent() {
        /*
          Properties
          name : block
          datatype : none
          version : 4.1 onwards
          default : none
          description : Display button as round or square
          */
        this.block = 'circle';
        /*
          Properties
          name : relative
          datatype : boolean
          version : 4.1 onwards
          default : none
          description : Place floating button at relative position
          */
        this.relative = false;
        /*
          Events
          name : onClick
          datatype : any
          version : none
          default : none
          description : Event is fired when button is click
          */
        this.onClick = new core.EventEmitter();
        this.absoluteposition = false;
    }
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.addCSSClasses();
    };
    // THIS METHOD IS USED FOR SETTING CSS CLASSSES
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.addCSSClasses = /**
     * @return {?}
     */
    function () {
        if (this.top || this.bottom || this.right || this.left) {
            this.absoluteposition = true;
        }
        this.positionclass = '';
        if (this.relative) {
            this.positionclass = ' floatingbutton-relative ';
        }
        else {
            this.positionclass = ' floatingbutton-fixed ';
        }
        if (!this.absoluteposition && !this.relative) {
            this.btnPositionCss();
        }
        if (this.block === 'circle') {
            this.setCricle();
        }
        else if (this.block === 'square') {
            this.positionclass = this.positionclass + ' floatingbutton-square';
        }
        if (this.type === 'theme-color') {
            this.themeColorCss();
        }
        else if (this.type === 'green') {
            this.greenColorType();
        }
        else if (this.type === 'red') {
            this.redColorType();
        }
        else if (this.type === 'yellow') {
            this.yellowColorType();
        }
        else {
            this.defaultType();
        }
        return this.positionclass;
    };
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.setCricle = /**
     * @return {?}
     */
    function () {
        if (this.size && (this.size === 'large' || this.size === 'small')) {
            this.positionclass = this.positionclass + ' floatingbutton-circle-' + this.size;
        }
        else {
            this.positionclass = this.positionclass + ' floatingbutton-circle';
        }
        this.label = '';
    };
    // Method to call css class on the basis of theme color
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.themeColorCss = /**
     * @return {?}
     */
    function () {
        this.positionclass = this.disabled ? this.positionclass + ' floatingbutton-theme-color-disabled' :
            this.positionclass + ' floatingbutton-theme-color';
    };
    // Css for button type default.
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.defaultType = /**
     * @return {?}
     */
    function () {
        this.positionclass = this.disabled ? this.positionclass + ' floatingbutton-default-disabled' :
            this.positionclass + 'floatingbutton-default';
    };
    // Css for button type yellow.
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.yellowColorType = /**
     * @return {?}
     */
    function () {
        this.positionclass = this.disabled ? this.positionclass + 'floatingbutton-yellow-disabled' :
            this.positionclass + ' floatingbutton-yellow';
    };
    // Css for button type red.
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.redColorType = /**
     * @return {?}
     */
    function () {
        this.positionclass = this.disabled ? this.positionclass + 'floatingbutton-red-disabled' :
            this.positionclass + ' floatingbutton-red';
    };
    // Css for button type green.
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.greenColorType = /**
     * @return {?}
     */
    function () {
        this.positionclass = this.disabled ? this.positionclass + ' floatingbutton-green-disabled' :
            this.positionclass + ' floatingbutton-green';
    };
    // Css on btn position
    /**
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.btnPositionCss = /**
     * @return {?}
     */
    function () {
        if (this.verticalposition === null) {
            this.verticalposition = 'top';
        }
        else if (this.horizontalposition === null) {
            this.horizontalposition = 'right';
        }
        this.positionclass = this.positionclass + ' floatingbutton-' +
            this.verticalposition + ' floatingbutton-' + this.horizontalposition +
            ' floatingbutton-default';
    };
    // Method for button click
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    AmexioFloatingButtonComponent.prototype.buttonClick = /**
     * @param {?} clickEvent
     * @return {?}
     */
    function (clickEvent) {
        if (!this.disabled) {
            this.onClick.emit({ thisObj: this, event: clickEvent });
        }
    };
    AmexioFloatingButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-floating-button',
                    template: "\n    <div class=\"floatingbutton\" [ngClass]=\"addCSSClasses()\" [ngStyle]=\"{'top':top,'bottom':bottom,'left':left,'right':right}\" (click)=\"buttonClick($event)\">\n        <amexio-form-icon *ngIf=\"icon\" [customclass]=\"icon\">\n        </amexio-form-icon>\n        {{label}}\n    </div>\n  ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    AmexioFloatingButtonComponent.ctorParameters = function () { return []; };
    AmexioFloatingButtonComponent.propDecorators = {
        verticalposition: [{ type: core.Input, args: ['vertical-position',] }],
        horizontalposition: [{ type: core.Input, args: ['horizontal-position',] }],
        top: [{ type: core.Input, args: ['position-top',] }],
        bottom: [{ type: core.Input, args: ['position-bottom',] }],
        left: [{ type: core.Input, args: ['position-left',] }],
        right: [{ type: core.Input, args: ['position-right',] }],
        label: [{ type: core.Input, args: ['label',] }],
        block: [{ type: core.Input, args: ['block',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        type: [{ type: core.Input, args: ['type',] }],
        disabled: [{ type: core.Input, args: ['disabled',] }],
        relative: [{ type: core.Input, args: ['relative',] }],
        onClick: [{ type: core.Output }],
        size: [{ type: core.Input, args: ['size',] }]
    };
    return AmexioFloatingButtonComponent;
}());

var __extends$16 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFloatingGroupButtonComponent = /** @class */ (function (_super) {
    __extends$16(AmexioFloatingGroupButtonComponent, _super);
    function AmexioFloatingGroupButtonComponent(elementref, cdf, renderer) {
        var _this = _super.call(this, renderer, elementref, cdf) || this;
        _this.elementref = elementref;
        _this.cdf = cdf;
        /*
         Properties
         name : relative
         datatype : boolean
         version : 4.1 onwards
         default : none
         description : Place floating buttong at relative position
         */
        _this.relative = false;
        /*
         Events
         name : onClick
         datatype : any
         version : none
         default : none
         description : Event is fired when button is click
         */
        _this.onClick = new core.EventEmitter();
        _this.togglefloatinggroup = false;
        _this.datacount = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioFloatingGroupButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dropdownstyle = { visibility: 'hidden' };
        if (this.data && this.data.length > 0) {
            this.datacount = this.data.length;
            this.data.forEach(function (node) {
                if (!node['type']) {
                    node['type'] = _this.type;
                    node['typeclass'] = 'floatingbutton-' + _this.type;
                }
                else {
                    node['typeclass'] = 'floatingbutton-' + node['type'];
                }
            });
        }
    };
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    AmexioFloatingGroupButtonComponent.prototype.buttonClick = /**
     * @param {?} clickEvent
     * @return {?}
     */
    function (clickEvent) {
        var /** @type {?} */ x = clickEvent.currentTarget.getBoundingClientRect().left;
        var /** @type {?} */ y = clickEvent.currentTarget.getBoundingClientRect().top;
        if (!this.disabled) {
            if (this.floatinggroupposition === 'bottom') {
                this.floatinggroupxposition = (x) + 'px';
                this.floatinggroupyposition = (y + 70) + 'px';
            }
            if (this.floatinggroupposition === 'top') {
                this.floatinggroupxposition = (x) + 'px';
                this.floatinggroupyposition = (y - (70 * this.datacount)) + 'px';
            }
            this.toggleVisibility();
            this.togglefloatinggroup = !this.togglefloatinggroup;
            this.onClick.emit({ thisObj: this, event: clickEvent });
        }
    };
    /**
     * @return {?}
     */
    AmexioFloatingGroupButtonComponent.prototype.toggleVisibility = /**
     * @return {?}
     */
    function () {
        if (this.dropdownstyle.visibility === 'visible') {
            _super.prototype.itemClicked.call(this);
        }
        else {
            var /** @type {?} */ event_1 = '';
            _super.prototype.focus.call(this, event_1);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioFloatingGroupButtonComponent.prototype.onFloatingButtonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.buttonClick(event.event);
    };
    /**
     * @param {?} node
     * @param {?} clickEvent
     * @return {?}
     */
    AmexioFloatingGroupButtonComponent.prototype.onButtonClick = /**
     * @param {?} node
     * @param {?} clickEvent
     * @return {?}
     */
    function (node, clickEvent) {
        this.toggleVisibility();
        this.togglefloatinggroup = !this.togglefloatinggroup;
        this.onClick.emit({ this: node, parent: this, event: clickEvent });
    };
    AmexioFloatingGroupButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-floating-group-button',
                    template: "\n\n    <amexio-floating-button (onClick)=\"onFloatingButtonClick($event)\" \n            [vertical-position]=\"verticalposition\" \n            [horizontal-position]=\"horizontalposition\" \n            [icon]=\"icon\" \n            [type]=\"type\"\n            [disabled]=\"disabled\"\n            [relative]=\"relative\"\n            [position-top]=\"top\"\n            [position-bottom]=\"bottom\"\n            [position-left]=\"left\"\n            [position-right]=\"right\">\n    </amexio-floating-button>                \n    \n    <!-- *ngIf=\"togglefloatinggroup\" -->\n    <div class=\"floatinggroup\"  [ngStyle]=\"dropdownstyle\" \n    [ngStyle]=\"{'top':floatinggroupyposition, 'left':floatinggroupxposition}\">\n        <div class=\"floatinggroupitems\" *ngFor=\"let node of data\" >\n            <div *ngIf=\"node.icon\" class=\"floatingbutton-circle\" [ngClass]=\"node.typeclass\" (click)=\"onButtonClick(node,$event)\">\n                <amexio-form-icon [customclass]=\"node.icon\" >\n                </amexio-form-icon>\n            </div>\n        </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFloatingGroupButtonComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 }
    ]; };
    AmexioFloatingGroupButtonComponent.propDecorators = {
        verticalposition: [{ type: core.Input, args: ['vertical-position',] }],
        horizontalposition: [{ type: core.Input, args: ['horizontal-position',] }],
        top: [{ type: core.Input, args: ['position-top',] }],
        bottom: [{ type: core.Input, args: ['position-bottom',] }],
        left: [{ type: core.Input, args: ['position-left',] }],
        right: [{ type: core.Input, args: ['position-right',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        type: [{ type: core.Input, args: ['type',] }],
        disabled: [{ type: core.Input, args: ['disabled',] }],
        relative: [{ type: core.Input, args: ['relative',] }],
        floatinggroupposition: [{ type: core.Input, args: ['floating-group-position',] }],
        data: [{ type: core.Input, args: ['data',] }],
        onClick: [{ type: core.Output }]
    };
    return AmexioFloatingGroupButtonComponent;
}(ListBaseDatepickerComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioFormIconComponent = /** @class */ (function () {
    function AmexioFormIconComponent(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        /*
        Events
        name : onClick
        datatype : any
        version : none
        default : none
        description : Event is fired when button is click
        */
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioFormIconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconClass = this.getIconClass();
    };
    /**
     * @return {?}
     */
    AmexioFormIconComponent.prototype.getIconClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.iconLoaderService.iconMappings != null) {
            var /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find(function (obj) { return obj.component === _this.key; });
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioFormIconComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    };
    AmexioFormIconComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-form-icon',
                    template: "\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'fa' \">\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"{{customclass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"{{iconClass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'mat'\">\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{customclass}}</i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{iconClass}}</i>\n      </ng-container>\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioFormIconComponent.ctorParameters = function () { return [
        { type: IconLoaderService }
    ]; };
    AmexioFormIconComponent.propDecorators = {
        key: [{ type: core.Input }],
        onClick: [{ type: core.Output }],
        customclass: [{ type: core.Input }]
    };
    return AmexioFormIconComponent;
}());

var __extends$17 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioPasswordComponent = /** @class */ (function (_super) {
    __extends$17(AmexioPasswordComponent, _super);
    function AmexioPasswordComponent() {
        var _this = _super.call(this) || this;
        /*
          Properties
          name : has-label
          datatype : boolean
          version : 4.0 onwards
          default : false
          description : flag to set label
          */
        _this.haslabel = true;
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : On blur event
          */
        _this.onBlur = new core.EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description : 	On input event field.
        */
        _this.input = new core.EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On focus event field.
        */
        _this.focus = new core.EventEmitter();
        /*
        Events
        name : change
        datatype : any
        version : none
        default :
        description : On field value change event
        */
        _this.change = new core.EventEmitter();
        _this.showToolTip = false;
        return _this;
    }
    Object.defineProperty(AmexioPasswordComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
        Properties
        name : error-msg
        datatype : none
        version : 4.0 onwards
        default : none
        description : Sets the error message
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioPasswordComponent.prototype, "minerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minerrormsg;
        },
        /*
        Properties
        name : min-error-msg
        datatype : string
        version : 4.0 onwards
        default :
        description : Sets the error message for min validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + '<b>Min Length<b/>: ' + value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioPasswordComponent.prototype, "maxerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxerrormsg;
        },
        /*
        Properties
        name : max-error-msg
        datatype : string
        version : 4.0 onwards
        default :
        description : Sets the error message for max validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioPasswordComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pattern;
        },
        /*
        Properties
        name : pattern
        datatype : string
        version : 4.0 onwards
        default :
        description : Apply Reg-ex to the field
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                this.regEx = new RegExp(this.pattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    // THIS METHOD USED FOR BLUR EVENT.
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.onblur = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    };
    // THIS METHOD USED FOR FOCUS EVENT .
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.showToolTip = true;
        this.focus.emit(this.value);
    };
    // THIS METHOD USED FOR  INPUT EVENT .
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    };
    // THIS METHOD USED FOR CHANGE EVENT  .
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.onChangeEv = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValid();
        this.name = this.generateName(this.name, this.fieldlabel, 'passwordinput');
    };
    // THIS METHOD IS USED FOR VALIDATION
    /**
     * @return {?}
     */
    AmexioPasswordComponent.prototype.isFieldValid = /**
     * @return {?}
     */
    function () {
        return (!this.allowblank && (this.value && ((this.value.length >= this.minlength) && this.value.length > 0)) ||
            (!this.minlength && this.value && this.value.length > 0)) || this.allowblank;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioPasswordComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioPasswordComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-password-input',
                    template: "\n\n\n\n    <div class=\"inputgroup\">\n\n      <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n          {{fieldlabel}}\n      </label>\n\n      <input type=\"password\" \n             class=\"input-control\"\n             [ngClass]=\"model.touched ? (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''\"\n             [(ngModel)]=\"value\"\n             (blur)=\"onblur()\" \n             (focus)=\"onFocus()\" \n             (input)=\"onInput()\" \n             (change)=\"onChangeEv()\"\n             [name]=\"name\" \n             [pattern]=\"regEx\"\n             [attr.placeholder]=\"placeholder\" \n             [maxlength]=\"maxlength\" \n             [minlength]=\"minlength\"\n             [attr.disabled]=\"disabled ? true: null\"\n             [required]=\"!allowblank\" />\n\n\n      <ng-container *ngIf=\"iconfeedback\">\n          <span class=\"input-control-feedback\">\n              <span *ngIf=\"!isValid && model.touched\"><em class=\"fa fa-times\"></em></span>\n              <span *ngIf=\"isValid && model.touched\"><em class=\"fa fa-check\"></em></span>\n          </span>\n      </ng-container>\n\n\n      <span *ngIf=\"showToolTip && enablepopover\" class=\"dropdown tooltiptext\">\n          <div [innerHTML]=\"helpInfoMsg\"></div>\n      </span>\n      <span class=\"inputfieldbar\"></span>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioPasswordComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioPasswordComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioPasswordComponent.ctorParameters = function () { return []; };
    AmexioPasswordComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        minlength: [{ type: core.Input, args: ['min-length',] }],
        maxlength: [{ type: core.Input, args: ['max-length',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        minerrormsg: [{ type: core.Input, args: ['min-error-msg',] }],
        maxerrormsg: [{ type: core.Input, args: ['max-error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        pattern: [{ type: core.Input, args: ['pattern',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        change: [{ type: core.Output }],
        model: [{ type: core.ViewChild, args: [forms.NgModel,] }],
        name: [{ type: core.Input, args: ['name',] }]
    };
    return AmexioPasswordComponent;
}(ValueAccessorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoadRecaptchaService = /** @class */ (function () {
    function LoadRecaptchaService() {
    }
    /**
     * @return {?}
     */
    LoadRecaptchaService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ script = document.createElement('script');
        script.innerHTML = '';
        script.src = 'https://www.google.com/recaptcha/api.js?render=explicit';
        script.async = true;
        script.defer = true;
        return script;
    };
    LoadRecaptchaService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    LoadRecaptchaService.ctorParameters = function () { return []; };
    return LoadRecaptchaService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RecaptchaComponent = /** @class */ (function () {
    function RecaptchaComponent(_loadRecaptchaService) {
        this._loadRecaptchaService = _loadRecaptchaService;
        this.onSuccess = new core.EventEmitter();
        this.onFailure = new core.EventEmitter();
        this.responseStructure = {};
    }
    /**
     * @return {?}
     */
    RecaptchaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.componentId =
            +Math.floor(Math.random() * 90000) + 10000 + 'google';
        var /** @type {?} */ script = this._loadRecaptchaService.loadScript();
        var /** @type {?} */ body = /** @type {?} */ (document.body);
        script.onload = function () {
            grecaptcha.ready(function () {
                _this.rendercaptcha();
            });
        };
        body.appendChild(script);
    };
    /**
     * @return {?}
     */
    RecaptchaComponent.prototype.rendercaptcha = /**
     * @return {?}
     */
    function () {
        var _this = this;
        grecaptcha.render(this.componentId, {
            sitekey: this.sitekey, callback: function (response) {
                if (response && response.length > 0) {
                    _this.responseStructure['success'] = true;
                    _this.responseStructure['response'] = response;
                    _this.onSuccess.emit(_this.responseStructure);
                }
                else {
                    _this.responseStructure['success'] = false;
                    _this.responseStructure['response'] = '';
                    _this.onFailure.emit(_this.responseStructure);
                }
            },
        });
    };
    RecaptchaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-google-recaptcha',
                    template: "\n    <div class=\"g-recaptcha\" [attr.id]=\"componentId\">\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    RecaptchaComponent.ctorParameters = function () { return [
        { type: LoadRecaptchaService }
    ]; };
    RecaptchaComponent.propDecorators = {
        sitekey: [{ type: core.Input, args: ['site-key',] }],
        onSuccess: [{ type: core.Output }],
        onFailure: [{ type: core.Output }]
    };
    return RecaptchaComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DomHandler = /** @class */ (function () {
    function DomHandler() {
        this.calculatedScrollbarWidth = null;
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomHandler.prototype.addClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomHandler.prototype.addMultipleClasses = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            var /** @type {?} */ styles = className.split(' ');
            for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
                var i = styles_1[_i];
                element.classList.add([i]);
            }
        }
        else {
            var /** @type {?} */ styles = className.split(' ');
            for (var _a = 0, styles_2 = styles; _a < styles_2.length; _a++) {
                var i = styles_2[_a];
                element.className += ' ' + [i];
            }
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomHandler.prototype.removeClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomHandler.prototype.hasClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomHandler.prototype.siblings = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return Array.prototype.filter.call(element.parentNode.children, function (child) {
            return child !== element;
        });
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomHandler.prototype.find = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return element.querySelectorAll(selector);
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomHandler.prototype.findSingle = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return element.querySelector(selector);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomHandler.prototype.index = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ children = element.parentNode.childNodes;
        var /** @type {?} */ num = 0;
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var i = children_1[_i];
            if (i === element) {
                return num;
            }
            if (i.nodeType === 1) {
                num++;
            }
        }
        return -1;
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomHandler.prototype.relativePosition = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        var /** @type {?} */ elementDimensions = (element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } :
            this.getHiddenElementDimensions(element));
        var /** @type {?} */ targetHeight = target.offsetHeight;
        var /** @type {?} */ targetWidth = target.offsetWidth;
        var /** @type {?} */ targetOffset = target.getBoundingClientRect();
        var /** @type {?} */ viewport = this.getViewport();
        var /** @type {?} */ top;
        var /** @type {?} */ left;
        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {
            top = -1 * (elementDimensions.height);
            if (targetOffset.top + top < 0) {
                top = 0;
            }
        }
        else {
            top = targetHeight;
        }
        if ((targetOffset.left + elementDimensions.width) > viewport.width) {
            left = targetWidth - elementDimensions.width;
        }
        else {
            left = 0;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomHandler.prototype.absolutePosition = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        var /** @type {?} */ elementDimensions = (element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight }
            : this.getHiddenElementDimensions(element));
        var /** @type {?} */ elementOuterHeight = elementDimensions.height;
        var /** @type {?} */ elementOuterWidth = elementDimensions.width;
        var /** @type {?} */ targetOuterHeight = target.offsetHeight;
        var /** @type {?} */ targetOuterWidth = target.offsetWidth;
        var /** @type {?} */ targetOffset = target.getBoundingClientRect();
        var /** @type {?} */ windowScrollTop = this.getWindowScrollTop();
        var /** @type {?} */ windowScrollLeft = this.getWindowScrollLeft();
        var /** @type {?} */ viewport = this.getViewport();
        var /** @type {?} */ top;
        var /** @type {?} */ left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) {
            left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;
        }
        else {
            left = targetOffset.left + windowScrollLeft;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomHandler.prototype.getHiddenElementOuterHeight = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        var /** @type {?} */ elementHeight = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementHeight;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomHandler.prototype.getHiddenElementOuterWidth = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        var /** @type {?} */ elementWidth = element.offsetWidth;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementWidth;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomHandler.prototype.getHiddenElementDimensions = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ dimensions = {};
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return dimensions;
    };
    /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    DomHandler.prototype.scrollInView = /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    function (container, item) {
        var /** @type {?} */ borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        var /** @type {?} */ borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        var /** @type {?} */ paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        var /** @type {?} */ paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        var /** @type {?} */ containerRect = container.getBoundingClientRect();
        var /** @type {?} */ itemRect = item.getBoundingClientRect();
        var /** @type {?} */ offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        var /** @type {?} */ scroll = container.scrollTop;
        var /** @type {?} */ elementHeight = container.clientHeight;
        var /** @type {?} */ itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    };
    /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    DomHandler.prototype.fadeIn = /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    function (element, duration) {
        element.style.opacity = 0;
        var /** @type {?} */ last = +new Date();
        var /** @type {?} */ opacity = 0;
        var /** @type {?} */ tick = function () {
            opacity = +element.style.opacity.replace(',', '.') + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
        };
        tick();
    };
    /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    DomHandler.prototype.fadeOut = /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    function (element, ms) {
        var /** @type {?} */ opacity = 1;
        var /** @type {?} */ interval = 50;
        var /** @type {?} */ duration = ms;
        var /** @type {?} */ gap = interval / duration;
        var /** @type {?} */ fading = setInterval(function () {
            opacity = opacity - gap;
            if (opacity <= 0) {
                opacity = 0;
                clearInterval(fading);
            }
            element.style.opacity = opacity;
        }, interval);
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.getWindowScrollTop = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.getWindowScrollLeft = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomHandler.prototype.matches = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        var /** @type {?} */ p = Element.prototype;
        var /** @type {?} */ f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p.msMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
    };
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    DomHandler.prototype.getOuterWidth = /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    function (el, margin) {
        var /** @type {?} */ width = el.offsetWidth;
        if (margin) {
            var /** @type {?} */ style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getHorizontalPadding = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ style = getComputedStyle(el);
        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getHorizontalMargin = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ style = getComputedStyle(el);
        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.innerWidth = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ width = el.offsetWidth;
        var /** @type {?} */ style = getComputedStyle(el);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.width = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ width = el.offsetWidth;
        var /** @type {?} */ style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getInnerHeight = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ height = el.offsetHeight;
        var /** @type {?} */ style = getComputedStyle(el);
        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        return height;
    };
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    DomHandler.prototype.getOuterHeight = /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    function (el, margin) {
        var /** @type {?} */ height = el.offsetHeight;
        if (margin) {
            var /** @type {?} */ style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getHeight = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ height = el.offsetHeight;
        var /** @type {?} */ style = getComputedStyle(el);
        height -= (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom)
            + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth));
        return height;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getWidth = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ width = el.offsetWidth;
        var /** @type {?} */ style = getComputedStyle(el);
        width -= (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) +
            parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth));
        return width;
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.getViewport = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ win = window;
        var /** @type {?} */ d = document;
        var /** @type {?} */ e = d.documentElement;
        var /** @type {?} */ g = d.getElementsByTagName('body')[0];
        var /** @type {?} */ w = win.innerWidth || e.clientWidth || g.clientWidth;
        var /** @type {?} */ h = win.innerHeight || e.clientHeight || g.clientHeight;
        return { width: w, height: h };
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomHandler.prototype.getOffset = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var /** @type {?} */ rect = el.getBoundingClientRect();
        return {
            top: rect.top + document.body.scrollTop,
            left: rect.left + document.body.scrollLeft,
        };
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.getUserAgent = /**
     * @return {?}
     */
    function () {
        return navigator.userAgent;
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.isIE = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ua = window.navigator.userAgent;
        var /** @type {?} */ msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return true;
        }
        var /** @type {?} */ trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            return true;
        }
        var /** @type {?} */ edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return true;
        }
        // other browser
        return false;
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomHandler.prototype.appendChild = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        if (this.isElement(target)) {
            target.appendChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.appendChild(element);
        }
        else {
            throw new Error('Cannot append ' + target + ' to ' + element);
        }
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomHandler.prototype.removeChild = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        if (this.isElement(target)) {
            target.removeChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.removeChild(element);
        }
        else {
            throw new Error('Cannot remove ' + element + ' from ' + target);
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    DomHandler.prototype.isElement = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (typeof HTMLElement === 'object' ? obj instanceof HTMLElement :
            obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string');
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.calculateScrollbarWidth = /**
     * @return {?}
     */
    function () {
        if (this.calculatedScrollbarWidth !== null) {
            return this.calculatedScrollbarWidth;
        }
        var /** @type {?} */ scrollDiv = document.createElement('div');
        scrollDiv.className = 'ui-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        var /** @type {?} */ scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
    };
    /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    DomHandler.prototype.invokeElementMethod = /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    function (element, methodName, args) {
        (element)[methodName].apply(element, args);
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.clearSelection = /**
     * @return {?}
     */
    function () {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges &&
                window.getSelection().rangeCount > 0 &&
                window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                window.getSelection().removeAllRanges();
            }
        }
        else if (document['selection'] && document['selection'].empty) {
            try {
                document['selection'].empty();
            }
            catch (/** @type {?} */ error) {
                // ignore IE bug
            }
        }
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.getBrowser = /**
     * @return {?}
     */
    function () {
        if (!this.browser) {
            var /** @type {?} */ matched = this.resolveUserAgent();
            this.browser = {};
            if (matched.browser) {
                this.browser[matched.browser] = true;
                this.browser['version'] = matched.version;
            }
            if (this.browser['chrome']) {
                this.browser['webkit'] = true;
            }
            else if (this.browser['webkit']) {
                this.browser['safari'] = true;
            }
        }
        return this.browser;
    };
    /**
     * @return {?}
     */
    DomHandler.prototype.resolveUserAgent = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ua = navigator.userAgent.toLowerCase();
        var /** @type {?} */ match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];
        return {
            browser: match[1] || '',
            version: match[2] || '0',
        };
    };
    DomHandler.zindex = 1000;
    DomHandler.decorators = [
        { type: core.Injectable },
    ];
    return DomHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio Slider
 Component Selector :  <amexio-slider>
 Component Description : Slider with draggable input provide a way to input values
*/
var AmexioSliderComponent = /** @class */ (function () {
    function AmexioSliderComponent(el, domHandler, renderer, ngZone) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.ngZone = ngZone;
        /*
        Properties
        name : min-value
        datatype : number
        version : 4.0 onwards
        default :
        description : Min slider value
        */
        this.min = 0;
        /*
        Properties
        name : max-value
        datatype : number
        version : 4.0 onwards
        default :
        description : Max slider value
        */
        this.max = 100;
        /*
        Properties
        name : orientation
        datatype : string
        version : 4.0 onwards
        default : horizontal
        description : Vertical or Horizontal Orientation of slider
        */
        this.orientation = 'horizontal';
        /*
        Events
        name : onChange
        datatype : any
        version : 4.0 onwards
        default :
        description : Triggers when slider is moved
        */
        this.onChange = new core.EventEmitter();
        /*
        Events
        name : onSlideEnd
        datatype : any
        version : 4.0 onwards
        default :
        description : Triggers when slider reaches the end
        */
        this.onSlideEnd = new core.EventEmitter();
        this.handleIndex = 0;
        this.handleValues = [];
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    AmexioSliderComponent.prototype.onMouseDown = /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    function (event, index) {
        if (this.disabled) {
            return;
        }
        this.dragging = true;
        this.updateDomData();
        this.sliderHandleClick = true;
        this.handleIndex = index;
        this.bindDragListeners();
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    AmexioSliderComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    function (event, index) {
        var /** @type {?} */ touchobj = event.changedTouches[0];
        this.startHandleValue = (this.range) ? this.handleValues[index] : this.handleValue;
        this.dragging = true;
        this.handleIndex = index;
        if (this.orientation === 'horizontal') {
            this.startx = parseInt(touchobj.clientX, 10);
            this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        }
        else {
            this.starty = parseInt(touchobj.clientY, 10);
            this.barHeight = this.el.nativeElement.children[0].offsetHeight;
        }
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    AmexioSliderComponent.prototype.onTouchMove = /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    function (event, index) {
        var /** @type {?} */ touchobj = event.changedTouches[0];
        var /** @type {?} */ handleValue = 0;
        if (this.orientation === 'horizontal') {
            handleValue = Math.floor(((parseInt(touchobj.clientX, 10) - this.startx) * 100) / (this.barWidth)) + this.startHandleValue;
        }
        else {
            handleValue = Math.floor(((this.starty - parseInt(touchobj.clientY, 10)) * 100) / (this.barHeight)) + this.startHandleValue;
        }
        this.setValueFromHandle(event, handleValue);
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioSliderComponent.prototype.onBarClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        if (!this.sliderHandleClick) {
            this.updateDomData();
            this.handleChange(event);
        }
        this.sliderHandleClick = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioSliderComponent.prototype.handleChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ handleValue = this.calculateHandleValue(event);
        this.setValueFromHandle(event, handleValue);
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.bindDragListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (!_this.dragListener) {
                _this.dragListener = _this.renderer.listen('document', 'mousemove', function (event) {
                    if (_this.dragging) {
                        _this.ngZone.run(function () {
                            _this.handleChange(event);
                        });
                    }
                });
            }
            if (!_this.mouseupListener) {
                _this.mouseupListener = _this.renderer.listen('document', 'mouseup', function (event) {
                    _this.mouseUpListMethod();
                });
            }
        });
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.mouseUpListMethod = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dragging) {
            this.dragging = false;
            this.ngZone.run(function () {
                if (_this.range) {
                    _this.onSlideEnd.emit({ originalEvent: event, values: _this.values });
                }
                else {
                    _this.onSlideEnd.emit({ originalEvent: event, value: _this.value });
                }
            });
        }
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.unbindDragListeners = /**
     * @return {?}
     */
    function () {
        if (this.dragListener) {
            this.dragListener();
        }
        if (this.mouseupListener) {
            this.mouseupListener();
        }
    };
    /**
     * @param {?} event
     * @param {?} handleValue
     * @return {?}
     */
    AmexioSliderComponent.prototype.setValueFromHandle = /**
     * @param {?} event
     * @param {?} handleValue
     * @return {?}
     */
    function (event, handleValue) {
        var /** @type {?} */ newValue = this.getValueFromHandle(handleValue);
        if (this.range) {
            if (this.step) {
                this.handleStepChange(newValue, this.values[this.handleIndex]);
            }
            else {
                this.handleValues[this.handleIndex] = handleValue;
                this.updateValue(newValue, event);
            }
        }
        else {
            if (this.step) {
                this.handleStepChange(newValue, this.value);
            }
            else {
                this.handleValue = handleValue;
                this.updateValue(newValue, event);
            }
        }
    };
    /**
     * @param {?} newValue
     * @param {?} oldValue
     * @return {?}
     */
    AmexioSliderComponent.prototype.handleStepChange = /**
     * @param {?} newValue
     * @param {?} oldValue
     * @return {?}
     */
    function (newValue, oldValue) {
        var /** @type {?} */ diff = (newValue - oldValue);
        var /** @type {?} */ val = oldValue;
        if (diff < 0) {
            val = oldValue + Math.ceil((newValue - oldValue) / this.step) * this.step;
        }
        else if (diff > 0) {
            val = oldValue + Math.floor((newValue - oldValue) / this.step) * this.step;
        }
        this.updateValue(val);
        this.updateHandleValue();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioSliderComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.range) {
            this.values = value || [0, 0];
        }
        else {
            this.value = value || 0;
        }
        this.updateHandleValue();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioSliderComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioSliderComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    AmexioSliderComponent.prototype.setDisabledState = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.disabled = val;
    };
    Object.defineProperty(AmexioSliderComponent.prototype, "rangeStartLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVertical() ? 'auto' : this.handleValues[0] + '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioSliderComponent.prototype, "rangeStartBottom", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVertical() ? this.handleValues[0] + '%' : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioSliderComponent.prototype, "rangeEndLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVertical() ? 'auto' : this.handleValues[1] + '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioSliderComponent.prototype, "rangeEndBottom", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVertical() ? this.handleValues[1] + '%' : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.isVertical = /**
     * @return {?}
     */
    function () {
        return this.orientation === 'vertical';
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.updateDomData = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ rect = this.el.nativeElement.children[0].getBoundingClientRect();
        this.initX = rect.left + this.domHandler.getWindowScrollLeft();
        this.initY = rect.top + this.domHandler.getWindowScrollTop();
        this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        this.barHeight = this.el.nativeElement.children[0].offsetHeight;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioSliderComponent.prototype.calculateHandleValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.orientation === 'horizontal') {
            return ((event.pageX - this.initX) * 100) / (this.barWidth);
        }
        else {
            return (((this.initY + this.barHeight) - event.pageY) * 100) / (this.barHeight);
        }
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.updateHandleValue = /**
     * @return {?}
     */
    function () {
        if (this.range) {
            this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);
            this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);
        }
        else {
            if (this.value < this.min) {
                this.handleValue = 0;
            }
            else if (this.value > this.max) {
                this.handleValue = 100;
            }
            else {
                this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);
            }
        }
    };
    /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    AmexioSliderComponent.prototype.updateValue = /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    function (val, valueEvent) {
        if (this.range) {
            var /** @type {?} */ value = val;
            if (this.handleIndex === 0) {
                if (value < this.min) {
                    value = this.min;
                    this.handleValues[0] = 0;
                }
                else if (value > this.values[1]) {
                    value = this.values[1];
                    this.handleValues[0] = this.handleValues[1];
                }
            }
            else {
                if (value > this.max) {
                    value = this.max;
                    this.handleValues[1] = 100;
                }
                else if (value < this.values[0]) {
                    value = this.values[0];
                    this.handleValues[1] = this.handleValues[0];
                }
            }
            this.values[this.handleIndex] = Math.floor(value);
            this.onModelChange(this.values);
            this.onChange.emit({ event: valueEvent, values: this.values });
        }
        else {
            this.updateValueNoRange(val, valueEvent);
        }
    };
    /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    AmexioSliderComponent.prototype.updateValueNoRange = /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    function (val, valueEvent) {
        if (val < this.min) {
            val = this.min;
            this.handleValue = 0;
        }
        else if (val > this.max) {
            val = this.max;
            this.handleValue = 100;
        }
        this.value = Math.floor(val);
        this.onModelChange(this.value);
        this.onChange.emit({ event: valueEvent, value: this.value });
    };
    /**
     * @param {?} handleValue
     * @return {?}
     */
    AmexioSliderComponent.prototype.getValueFromHandle = /**
     * @param {?} handleValue
     * @return {?}
     */
    function (handleValue) {
        return (this.max - this.min) * (handleValue / 100) + this.min;
    };
    /**
     * @return {?}
     */
    AmexioSliderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unbindDragListeners();
    };
    AmexioSliderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-slider',
                    template: "\n    <div [ngStyle]=\"style\" [class]=\"styleClass\"\n    [ngClass]=\"{'ui-slider ui-widget ui-widget-content ui-corner-all':true,'disable-component':disabled,\n            'ui-slider-horizontal':orientation == 'horizontal',\n            'ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}\"\n         (click)=\"onBarClick($event)\">\n      <span *ngIf=\"range && orientation == 'horizontal'\" class=\"ui-slider-range ui-widget-header ui-corner-all\"\n      [ngStyle]=\"{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}\"></span>\n      <span *ngIf=\"range && orientation == 'vertical'\" class=\"ui-slider-range ui-widget-header ui-corner-all\"\n      [ngStyle]=\"{'bottom':handleValues[0] + '%',height: (handleValues[1] - handleValues[0] + '%')}\"></span>\n      <span *ngIf=\"!range && orientation=='vertical'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\"\n      [ngStyle]=\"{'height': handleValue + '%'}\"></span>\n      <span *ngIf=\"!range && orientation=='horizontal'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\"\n      [ngStyle]=\"{'width': handleValue + '%'}\"></span>\n      <span *ngIf=\"!range\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\"\n      (mousedown)=\"onMouseDown($event)\" (touchstart)=\"onTouchStart($event)\" (touchmove)=\"onTouchMove($event)\" (touchend)=\"dragging=false\"\n            [style.transition]=\"dragging ? 'none': null\" [ngStyle]=\"{'left': orientation == 'horizontal' ? handleValue + '%' : null,\n            'bottom': orientation == 'vertical' ? handleValue + '%' : null}\"></span>\n      <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,0)\"\n      (touchstart)=\"onTouchStart($event,0)\" (touchmove)=\"onTouchMove($event,0)\" (touchend)=\"dragging=false\"\n      [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\"\n            [ngStyle]=\"{'left': rangeStartLeft, 'bottom': rangeStartBottom}\"\n            [ngClass]=\"{'ui-slider-handle-active':handleIndex==0}\"></span>\n      <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,1)\"\n      (touchstart)=\"onTouchStart($event,1)\" (touchmove)=\"onTouchMove($event,1)\"\n      (touchend)=\"dragging=false\"\n      [style.transition]=\"dragging ? 'none': null\"\n      class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\"\n            [ngStyle]=\"{'left': rangeEndLeft, 'bottom': rangeEndBottom}\" [ngClass]=\"{'ui-slider-handle-active':handleIndex==1}\"></span>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioSliderComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioSliderComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: DomHandler },
        { type: core.Renderer2 },
        { type: core.NgZone }
    ]; };
    AmexioSliderComponent.propDecorators = {
        animate: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        min: [{ type: core.Input, args: ['min-value',] }],
        max: [{ type: core.Input, args: ['max-value',] }],
        orientation: [{ type: core.Input }],
        step: [{ type: core.Input, args: ['step-value',] }],
        range: [{ type: core.Input }],
        style: [{ type: core.Input }],
        styleClass: [{ type: core.Input, args: ['style-class',] }],
        onChange: [{ type: core.Output }],
        onSlideEnd: [{ type: core.Output }]
    };
    return AmexioSliderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioSpinnerComponent = /** @class */ (function () {
    function AmexioSpinnerComponent(renderer) {
        this.renderer = renderer;
        /*
          Events
          name : show
          datatype : boolean
          version : none
          default : true
          description : if show  is true than and only than the spinner is enable, if false then it is disable.
          */
        this.show = true;
        this.alpha = '0.2';
    }
    Object.defineProperty(AmexioSpinnerComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        /*
         Events
         name : color
         datatype : string
         version : none
         default : none
         description : spinner want color
         */
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var /** @type {?} */ ischanges = (this._color !== v);
            this._color = v;
            if (ischanges) {
                this.assignColor();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioSpinnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.assignColor();
    };
    /**
     * @return {?}
     */
    AmexioSpinnerComponent.prototype.assignColor = /**
     * @return {?}
     */
    function () {
        if (this.type === 'spinnerround' && this.color) {
            var /** @type {?} */ newColor = void 0;
            var /** @type {?} */ r = parseInt(this.color.slice(1, 3), 16);
            var /** @type {?} */ g = parseInt(this.color.slice(3, 5), 16);
            var /** @type {?} */ b = parseInt(this.color.slice(5, 7), 16);
            if (this.alpha) {
                newColor = "rgba(" + r + ", " + g + ", " + b + ", " + this.alpha + ")";
            }
            else {
                newColor = "rgba(" + r + ", " + g + ", " + b + ")";
            }
            var /** @type {?} */ inlinecss = 'margin: 60px auto;font-size: 10px;position: relative;text-indent: -9999em;border-top: 1.1em solid ' + newColor +
                '; border-right: 1.1em solid ' + newColor +
                ';border-left: 1.1em solid ;-webkit-transform: translateZ(0);-ms-transform: translateZ(0);border-bottom: 1.1em solid ' + newColor +
                ';transform: translateZ(0);  -webkit-animation: load8 1.1s infinite linear;animation: load8 1.1s infinite linear;';
            var /** @type {?} */ inlinecssafter = ' border-radius: 50%; width: 10em; height: 10em;';
            this.insertStyleSheetRule('.dynamicclass { ' + inlinecss + inlinecssafter + '}');
            this.insertStyleSheetRule('@-webkit-keyframes load8 { 0% {  -webkit-transform: rotate(0deg);  transform: rotate(0deg);} ' +
                '100%{-webkit-transform: rotate(360deg); transform: rotate(360deg);} }');
            this.renderer.addClass(this.element.nativeElement, 'dynamicclass');
        }
    };
    /**
     * @param {?} ruleText
     * @return {?}
     */
    AmexioSpinnerComponent.prototype.insertStyleSheetRule = /**
     * @param {?} ruleText
     * @return {?}
     */
    function (ruleText) {
        var /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            var /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        var /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    };
    AmexioSpinnerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-spinner',
                    template: "\n    <div #loadindicator [ngStyle]=\"{'display': show ? 'block': 'none'}\" \n    [style.color]='color' [style.font-size]= 'size'\n     [ngClass]=\"{\n            'rectangle-bounces' :type == 'rectanglebounce',\n            'rings' :type == 'ring',\n            'half-circles' :type == 'halfcircle',\n            'fading-circles' :type == 'fadingcircle',\n            'ball-spins' :type == 'ballspin',\n            'fire-spins' :type == 'firespin',\n            'three-bounces' :type == 'threebounce',\n            'spinner-rounds' :type == 'spinnerround'}\n            \">\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioSpinnerComponent.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };
    AmexioSpinnerComponent.propDecorators = {
        type: [{ type: core.Input, args: ['type',] }],
        color: [{ type: core.Input, args: ['color',] }],
        show: [{ type: core.Input }],
        size: [{ type: core.Input, args: ['size',] }],
        element: [{ type: core.ViewChild, args: ['loadindicator',] }]
    };
    return AmexioSpinnerComponent;
}());

var __extends$18 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 20/12/17.
 */
var AmexioTagsInputComponent = /** @class */ (function (_super) {
    __extends$18(AmexioTagsInputComponent, _super);
    function AmexioTagsInputComponent(dataService, element, renderer, _cd) {
        var _this = _super.call(this, renderer, element, _cd) || this;
        _this.dataService = dataService;
        _this.element = element;
        _this.renderer = renderer;
        /*
         Properties
         name : has-label
         datatype : boolean
         version : 4.0 onwards
         default : false
         description : flag to set label
         */
        _this.haslabel = true;
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description :	On input event field.
         */
        _this.input = new core.EventEmitter();
        /*
        Events
        name : onChange
        datatype : any
        version : none
        default :
        description : on change event
        */
        _this.onChange = new core.EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On field focus event
        */
        _this.focus = new core.EventEmitter();
        _this.onSelections = [];
        _this.activeindex = 0;
        _this.selectedindex = 0;
        _this.scrollposition = 30;
        _this.isComponentValid = new core.EventEmitter();
        _this.maskloader = true;
        return _this;
    }
    Object.defineProperty(AmexioTagsInputComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isComponentValid.emit(this.allowblank);
        if (this.placeholder === '' || this.placeholder === null) {
            this.placeholder = 'Choose Option';
        }
        if (!this.triggerchar) {
            this.triggerchar = 1;
        }
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.navigateKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.filteredResult = [];
        this.showToolTip = false;
        var /** @type {?} */ keyword = event.target.value;
        if (keyword !== null && keyword !== ' ' && keyword.length >= this.triggerchar) {
            var /** @type {?} */ search_term_1 = keyword.toLowerCase();
            this.viewData.forEach(function (item) {
                if (item != null && item[_this.key].toLowerCase().startsWith(search_term_1)) {
                    _this.filteredResult.push(item);
                }
            });
            if (this.filteredResult.length > 0) {
                this.showToolTip = true;
                this.onBaseFocusEvent({});
            }
            else {
                this.showToolTip = this.onBaseBlurEvent({});
            }
        }
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            this.navigateUsingKey(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.navigateUsingKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.selectedindex > this.filteredResult.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 || event.keyCode === 38 && this.selectedindex < this.filteredResult.length) {
            this.keyUpDownMethod(event);
        }
        if (event.keyCode === 13 && this.filteredResult[this.selectedindex]) {
            this.onItemSelect(this.filteredResult[this.selectedindex]);
        }
    };
    // Method when up arrow or down arrow is pressed
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.keyUpDownMethod = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.showToolTip) {
            this.showToolTip = true;
        }
        var /** @type {?} */ prevselectedindex = 0;
        if (this.selectedindex === 0) {
            this.selectedindex = 1;
        }
        else {
            prevselectedindex = this.selectedindex;
            if (event.keyCode === 40) {
                this.selectedindex++;
                if ((this.selectedindex > 5)) {
                    this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
                    this.scrollposition = this.scrollposition + 30;
                }
            }
            else if (event.keyCode === 38) {
                this.keyUpMethod();
            }
        }
        if (this.filteredResult[this.selectedindex]) {
            this.filteredResult[this.selectedindex].selected = true;
        }
        if (this.filteredResult[prevselectedindex]) {
            this.filteredResult[prevselectedindex].selected = false;
        }
    };
    // Method when keyCode is 38 i.e Up
    /**
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.keyUpMethod = /**
     * @return {?}
     */
    function () {
        this.selectedindex--;
        if (this.scrollposition >= 0 && this.selectedindex > 1) {
            this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
            this.scrollposition = this.scrollposition - 30;
        }
        if (this.selectedindex === 1) {
            this.scrollposition = 30;
        }
    };
    /**
     * @param {?} activerow
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.showAllData = /**
     * @param {?} activerow
     * @return {?}
     */
    function (activerow) {
        var _this = this;
        var /** @type {?} */ i = 0;
        this.viewData.forEach(function (item) {
            if (item != null) {
                if (i === activerow) {
                    item.active = true;
                    _this.currentActive = item;
                }
                else {
                    item.active = false;
                }
                item.activerow = activerow;
                _this.filteredResult.push(item);
            }
            i++;
        });
        if (this.filteredResult.length > 0) {
            this.showToolTip = true;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.onItemSelect = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.value = row[this.valuefield];
        this.displayValue = row[this.displayfield];
        this.showToolTip = false;
    };
    /**
     * @param {?} input
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.onInput = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        this.input.emit();
    };
    Object.defineProperty(AmexioTagsInputComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} elem
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.onFocus = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        this.inpHandle.nativeElement.placeholder = '';
        this.showToolTip = true;
        this.onBaseFocusEvent({});
        this.posixUp = this.getListPosition(elem);
        this.focus.emit(this.value);
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var /** @type {?} */ dropdownHeight = 325;
        // must be same in dropdown.scss
        if (elementRef) {
            if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.maskloader = false;
    };
    /**
     * @param {?} value
     * @param {?} ref
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.setValue = /**
     * @param {?} value
     * @param {?} ref
     * @return {?}
     */
    function (value, ref) {
        this.inpHandle.nativeElement.value = '';
        this.onSelections.push(value);
        this.onChange.emit(this.onSelections);
        if (this.onSelections.length > 0) {
            this.isValid = true;
            this.isComponentValid.emit(true);
        }
        this.showToolTip = false;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.removePill = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ indexToRemove = null;
        this.onSelections.forEach(function (selectedVal, index) {
            if (selectedVal === item) {
                indexToRemove = index;
            }
        });
        this.onSelections.splice(indexToRemove, 1);
        if (this.onSelections.length === 0) {
            this.isValid = false;
            this.isComponentValid.emit(false);
        }
        this.onChange.emit(this.onSelections);
    };
    // THIS MEHTOD CHECK INPUT IS VALID OR NOT
    /**
     * @return {?}
     */
    AmexioTagsInputComponent.prototype.checkValidity = /**
     * @return {?}
     */
    function () {
        return this.isValid;
    };
    AmexioTagsInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-tag-input', template: "\n    <div class=\"inputgroup\" #rootDiv>\n\n        <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n        {{fieldlabel}}\n      </label>\n\n\n        <div class=\"tag-input\" [ngClass]=\"{'loading-mask' : maskloader}\">\n            <div class=\"tag\" *ngFor=\"let item of onSelections\">\n                {{item[key]}}\n                <span class=\"closebtn\" (click)=\"removePill(item)\">&times;</span>\n            </div>\n\n            <input type=\"text\" class=\"input-control\" [ngClass]=\"{'input-control-error' : inp.invalid && (inp.dirty || inp.touched),'input-control-success' : inp.valid && (inp.dirty || inp.touched)}\" (focus)=\"onFocus(rootDiv)\" (input)=\"onInput(inp)\" (keyup)=\"onKeyUp($event)\"\n                [attr.placeholder]=\"placeholder\" [attr.disabled]=\"disabled ? true: null\" [required]=\"allowblank ? true: null\" #inp/>\n\n        </div>\n\n\n        <span #dropdownitems class=\"dropdown\" [ngClass]=\"{'dropdown-up' : posixUp}\" [ngStyle]=\"dropdownstyle\" #tagDropRef>\n        <ul class=\"dropdown-list\">\n          <li class=\"list-items\" [ngClass]=\"{'list-items-selected':item.selected}\"\n              *ngFor=\"let item of filteredResult\"\n              (click)=\"setValue(item,inp)\"><div>{{item[displayfield]}}</div></li>\n        </ul>\n      </span>\n\n    </div>\n\n\n    <span *ngIf=\"iconfeedback && (inp.invalid && (inp.dirty || inp.touched) || inp.valid)\" class=\"input-control-feedback\">\n            <span *ngIf=\"inp.invalid && (inp.dirty || inp.touched)\">&#9888;</span>\n    <span *ngIf=\"inp.valid && (inp.dirty || inp.touched)\"> &#10004;</span>\n\n    </span>\n\n    <span *ngIf=\"showToolTip && enablepopover\" class=\"tooltiptext\">\n            <div [innerHTML]=\"helpInfoMsg\"></div>\n    </span>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioTagsInputComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioTagsInputComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        data: [{ type: core.Input }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        key: [{ type: core.Input }],
        triggerchar: [{ type: core.Input, args: ['trigger-char',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        input: [{ type: core.Output }],
        onChange: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        inpHandle: [{ type: core.ViewChild, args: ['inp',] }],
        tagDropRef: [{ type: core.ViewChild, args: ['tagDropRef',] }],
        dropdownitems: [{ type: core.ViewChild, args: ['dropdownitems', { read: core.ElementRef },] }],
        isComponentValid: [{ type: core.Output }]
    };
    return AmexioTagsInputComponent;
}(BaseFormValidator));

var __extends$19 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioTextAreaComponent = /** @class */ (function (_super) {
    __extends$19(AmexioTextAreaComponent, _super);
    function AmexioTextAreaComponent() {
        var _this = _super.call(this) || this;
        _this.isComponentValid = new core.EventEmitter();
        /*
        Events
        name : onBlur
        datatype : any
        version : 4.0 onwards
        default :
        description : On blur event
        */
        _this.onBlur = new core.EventEmitter();
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description : 	On input event field.
         */
        _this.input = new core.EventEmitter();
        /*
         Events
         name : focus
         datatype : any
         version : none
         default :
         description : On focus event field.
         */
        _this.focus = new core.EventEmitter();
        /*
         Events
         name : change
         datatype : any
         version : none
         default :
         description : On field value change event
         */
        _this.change = new core.EventEmitter();
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : flag to set label
        */
        _this.haslabel = true;
        _this.showToolTip = false;
        return _this;
    }
    Object.defineProperty(AmexioTextAreaComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        /*
        Properties
        name : error-msg
        datatype : none
        version : 4.0 onwards
        default : none
        description : sets the error message
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextAreaComponent.prototype, "minerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minerrormsg;
        },
        /*
        Properties
        name : min-error-msg
        datatype : string
        version : 4.0 onwards
        default : none
        description : sets the error message for min validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + '<b>Min Length<b/>: ' + value + '<br/>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextAreaComponent.prototype, "maxerrormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxerrormsg;
        },
        /*
        Properties
        name : max-error-msg
        datatype : string
        version : 4.0 onwards
        default : none
        description : sets the error message for max validation
        */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTextAreaComponent.prototype, "pattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pattern;
        },
        /*
      Properties
      name : pattern
      datatype : string
      version : 4.0 onwards
      default : none
      description : Apply Reg-ex to the field
      */
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                this._pattern = value;
                this.regEx = new RegExp(this._pattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.generateName(this.name, this.fieldlabel, 'textareainput');
        this.isComponentValid.emit(this.allowblank);
    };
    // Set touched on blur
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.onBlurEvent = /**
     * @return {?}
     */
    function () {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.showToolTip = true;
        this.focus.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    };
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.onChangeEv = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
    };
    // THIS METHOD IS USED FOR VALIDATION
    /**
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.isFieldValid = /**
     * @return {?}
     */
    function () {
        return (!this.allowblank && (this.value && (this.value.length > 0)) ||
            (this.value && this.value.length > 0)) || this.allowblank;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioTextAreaComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioTextAreaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-textarea-input',
                    template: "\n\n    <div class=\"inputgroup form-group\">\n\n      <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n        {{fieldlabel}}\n      </label>\n\n      <textarea type=\"text\" class=\"input-control\"\n             [(ngModel)]=\"value\"\n             #inp=\"ngModel\"\n             [ngClass]=\"componentClass\"\n             (blur)=\"onBlurEvent()\"\n             (focus)=\"onFocus()\"\n             (input)=\"onInput()\"\n             [name]=\"name\"\n             [pattern]=\"regEx\"\n             #ref\n             [attr.placeholder]=\"placeholder\"\n             [attr.rows]=\"rows\"\n             [attr.cols]=\"columns\"\n             [attr.disabled] = \"disabled ? true: null\"\n             [required]=\"!allowblank\">\n      </textarea>\n\n      <span *ngIf=\"iconfeedback && (inp.invalid && (inp.dirty || inp.touched) || inp.valid)\" class=\"input-control-feedback\">\n            <span *ngIf=\"!isValid && inp.touched\"><em class=\"fa fa-times\"></em></span>\n            <span *ngIf=\"isValid && inp.touched\"><em class=\"fa fa-check\"></em></span>\n          </span>\n\n      <span *ngIf=\"showToolTip && enablepopover\" class=\"dropdown tooltiptext\">\n            <div  [innerHTML]=\"helpInfoMsg\"></div>\n      </span>\n      <span class=\"inputfieldbar\"></span>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioTextAreaComponent; }), multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioTextAreaComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioTextAreaComponent.ctorParameters = function () { return []; };
    AmexioTextAreaComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        rows: [{ type: core.Input }],
        columns: [{ type: core.Input }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        isComponentValid: [{ type: core.Output }],
        onBlur: [{ type: core.Output }],
        input: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        change: [{ type: core.Output }],
        inputRef: [{ type: core.ViewChild, args: ['ref', { read: core.ElementRef },] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        minerrormsg: [{ type: core.Input, args: ['min-error-msg',] }],
        maxerrormsg: [{ type: core.Input, args: ['max-error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        disabled: [{ type: core.Input }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        pattern: [{ type: core.Input, args: ['pattern',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        name: [{ type: core.Input, args: ['name',] }]
    };
    return AmexioTextAreaComponent;
}(ValueAccessorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToolbaroneComponent = /** @class */ (function () {
    function ToolbaroneComponent() {
    }
    /**
     * @return {?}
     */
    ToolbaroneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ToolbaroneComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-toolbar-item',
                    template: "\n  <div [ngClass]=\"{'toolbaritemseperatorright':(seperatorposition === 'right'),'toolbaritemseperatorleft':(seperatorposition === 'left')}\">\n  <ng-content></ng-content>\n  </div>\n   ",
                },] },
    ];
    /** @nocollapse */
    ToolbaroneComponent.ctorParameters = function () { return []; };
    ToolbaroneComponent.propDecorators = {
        seperatorposition: [{ type: core.Input, args: ['seperator-position',] }]
    };
    return ToolbaroneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToolbarComponent = /** @class */ (function () {
    function ToolbarComponent() {
        /*
          Events
          name : onClick
          datatype : none
          version : none
          default : none
          description : Callback to invoke on activated tab event.
          */
        this.onClick = new core.EventEmitter();
        this.toolbarposition = 'top';
        this.seperator = false;
    }
    /**
     * @return {?}
     */
    ToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ToolbarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.toolCollection = this.queryTool.toArray();
        for (var _i = 0, _a = this.toolCollection; _i < _a.length; _i++) {
            var i = _a[_i];
            [i]['position'] = this.getToolbaritemposition([i]['position']);
        }
    };
    /**
     * @param {?} position
     * @return {?}
     */
    ToolbarComponent.prototype.getToolbaritemposition = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position === 'right') {
            return 'main-right';
        }
        if (position === 'left') {
            return 'main-left';
        }
        if (position === 'center') {
            return 'main-center';
        }
        if (position === '') {
            return 'main-center';
        }
    };
    /**
     * @param {?} tool
     * @return {?}
     */
    ToolbarComponent.prototype.onToolClick = /**
     * @param {?} tool
     * @return {?}
     */
    function (tool) {
        if (!tool.disabled) {
            for (var _i = 0, _a = this.toolCollection; _i < _a.length; _i++) {
                var i = _a[_i];
                if ([i] === tool) {
                    [i]['active'] = true;
                    this.onClick.emit(tool);
                }
                else {
                    [i]['active'] = false;
                }
            }
        }
    };
    // THIS METHOD IS  FOR APPLIED SPERATOR CLASS
    /**
     * @param {?} toolnode
     * @return {?}
     */
    ToolbarComponent.prototype.getSeperatotClass = /**
     * @param {?} toolnode
     * @return {?}
     */
    function (toolnode) {
        var /** @type {?} */ cssName = '';
        if (this.seperator) {
            cssName = 'seperator-line';
        }
        cssName = cssName + toolnode.position;
        return cssName;
    };
    /**
     * @return {?}
     */
    ToolbarComponent.prototype.getToolbarPosition = /**
     * @return {?}
     */
    function () {
        if (this.toolbarposition === 'top') {
            return '';
        }
        if (this.toolbarposition === 'right') {
            return '';
        }
        if (this.toolbarposition === 'bottom') {
            return '';
        }
    };
    ToolbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-toolbar',
                    template: "\n\n\n    <div class=\"toolbar\">\n        <div class=\"topnavmainbar\">\n            <div class=\"toolbar-item\">\n                <ng-content select=\"[position-left]\"></ng-content>\n                <ng-content select=\"amexio-panel-header\"></ng-content>\n                <ng-content select=\"amexio-form-header\"></ng-content>\n                <ng-content select=\"amexio-window-header\"></ng-content>\n            </div>\n            <div class=\"toolbar-item\">\n                <ng-content select=\"[position-center]\"></ng-content>\n            </div>\n            <div class=\"toolbar-item\">\n                <ng-content select=\"[position-right]\"></ng-content>\n            </div>\n        </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    ToolbarComponent.ctorParameters = function () { return []; };
    ToolbarComponent.propDecorators = {
        seperator: [{ type: core.Input, args: ['seperator',] }],
        toolbarposition: [{ type: core.Input, args: ['toolbar-position',] }],
        onClick: [{ type: core.Output }],
        tabLocalData: [{ type: core.Input }],
        queryTool: [{ type: core.ContentChildren, args: [ToolbaroneComponent,] }]
    };
    return ToolbarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToolBarActionComponent = /** @class */ (function () {
    function ToolBarActionComponent() {
        /*
          Events
          name : navLinkClick
          datatype : any
          version : none
          default : none
          description : Fire when nav item is clicked,
          This event is fired when nav item type is defined as 'link/button/menu'
        
          */
        this.navLinkClick = new core.EventEmitter();
        this.actionComponent = '';
    }
    /**
     * @return {?}
     */
    ToolBarActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    ToolBarActionComponent.prototype.onClick = /**
     * @param {?} clickEvent
     * @return {?}
     */
    function (clickEvent) {
        var /** @type {?} */ node = {
            title: this.title,
            type: this.type,
        };
        this.navLinkClick.emit({ data: node, event: clickEvent });
    };
    /**
     * @return {?}
     */
    ToolBarActionComponent.prototype.checkActionComponent = /**
     * @return {?}
     */
    function () {
        this.dropdown = this.queryDropDown.toArray();
        if (this.dropdown.length > 0) {
            this.actionComponent = 'dropdown';
            this.dropdown[0].fieldlabel = '';
        }
        this.button = this.queryButton.toArray();
        if (this.button.length > 0) {
            this.actionComponent = 'button';
        }
    };
    ToolBarActionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-toolbar-action',
                    template: "\n   <ng-content></ng-content>\n  ",
                },] },
    ];
    /** @nocollapse */
    ToolBarActionComponent.ctorParameters = function () { return []; };
    ToolBarActionComponent.propDecorators = {
        queryDropDown: [{ type: core.ContentChildren, args: [AmexioDropDownComponent, { descendants: true },] }],
        queryButton: [{ type: core.ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
        queryLabel: [{ type: core.ContentChildren, args: [AmexioLabelComponent, { descendants: true },] }],
        type: [{ type: core.Input }],
        title: [{ type: core.Input }],
        navLinkClick: [{ type: core.Output }]
    };
    return ToolBarActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DropDownListComponent = /** @class */ (function () {
    function DropDownListComponent(elementRef) {
        this.elementRef = elementRef;
        this.itemclick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropDownListComponent.prototype.onDropDownListClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemclick.emit(event);
    };
    /**
     * @param {?} rowindex
     * @return {?}
     */
    DropDownListComponent.prototype.scroll = /**
     * @param {?} rowindex
     * @return {?}
     */
    function (rowindex) {
        var /** @type {?} */ listitems = this.elementRef.nativeElement.getElementsByClassName('list-items')[rowindex];
        if (listitems) {
            listitems.scrollIntoView({ behavior: 'smooth' });
        }
    };
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.selectedItem = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement.getElementsByClassName('list-items list-items-selected');
    };
    DropDownListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'dropdown-list-item',
                    template: "\n          <ul class=\"dropdown-list\">\n              <li  [ngClass]=\"{'list-items-selected': (i === highlightrow)}\" \n                   class=\"list-items\" \n                   [attr.valuefield]=\"item[valuefield]\" \n                   [attr.displayfield]=\"item[displayfield]\" \n                   *ngFor=\"let item of viewdata | async | filterpipe : displayfield : displayValue ; index as i\"  \n                  (mousedown)=\"onDropDownListClick(item)\">\n                  <ng-container *ngIf=\"!template\">\n                      <div>{{item[displayfield]}}</div>    \n                  </ng-container>\n\n                  <ng-container *ngIf=\"template\">\n                      <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: { text : row }, row: item }\">\n                      </ng-template>\n                  </ng-container>\n    \n              </li>\n          </ul>\n    ",
                },] },
    ];
    /** @nocollapse */
    DropDownListComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    DropDownListComponent.propDecorators = {
        viewdata: [{ type: core.Input, args: ['data',] }],
        highlightrow: [{ type: core.Input, args: ['highlight-row',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        displayValue: [{ type: core.Input, args: ['display-value',] }],
        itemclick: [{ type: core.Output }]
    };
    return DropDownListComponent;
}());

var __extends$21 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var ListBaseComponent = /** @class */ (function (_super) {
    __extends$21(ListBaseComponent, _super);
    function ListBaseComponent(renderer, element, cd) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.element = element;
        _this.cd = cd;
        _this.self = false;
        _this.itemClick = false;
        _this.hide();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseComponent.prototype.onFocusEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseComponent.prototype.blur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemClicked();
    };
    /**
     * @return {?}
     */
    ListBaseComponent.prototype.itemClicked = /**
     * @return {?}
     */
    function () {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    };
    /**
     * @return {?}
     */
    ListBaseComponent.prototype.bindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', function (event) { return _this.handleDocumentListener(event); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ListBaseComponent.prototype.handleDocumentListener = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    };
    /**
     * @return {?}
     */
    ListBaseComponent.prototype.clearClicks = /**
     * @return {?}
     */
    function () {
        this.self = false;
        this.itemClick = false;
    };
    /**
     * @return {?}
     */
    ListBaseComponent.prototype.unbindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    /**
     * @return {?}
     */
    ListBaseComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.dropdownstyle = { visibility: 'hidden' };
    };
    return ListBaseComponent;
}(BaseInput));

var __extends$20 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/21/17.
 */
var AmexioTypeAheadComponent = /** @class */ (function (_super) {
    __extends$20(AmexioTypeAheadComponent, _super);
    function AmexioTypeAheadComponent(dataService, element, renderer, cd) {
        var _this = _super.call(this, renderer, element, cd) || this;
        _this.dataService = dataService;
        _this.element = element;
        _this.displayValue = '';
        _this.onBlur = new core.EventEmitter();
        _this.onInputOutput = new core.EventEmitter();
        _this.onFocusOutput = new core.EventEmitter();
        _this.change = new core.EventEmitter();
        _this.onClick = new core.EventEmitter();
        _this.isComponentValid = new core.EventEmitter();
        _this.rowindex = 0;
        _this.maskloader = true;
        return _this;
    }
    Object.defineProperty(AmexioTypeAheadComponent.prototype, "fieldlabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldlabel;
        },
        /*
         Properties
         name : field-label
         datatype : string
         version : 4.0 onwards
         default :
         description : The label of this field
         */
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v != null && v.length > 0) {
                this._fieldlabel = v;
                this.initComponent();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTypeAheadComponent.prototype, "haslabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._haslabel;
        },
        /*
         Properties
         name : has-label
         datatype : boolean
         version : 4.0 onwards
         default : false
         description : Flag to set label
         */
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._haslabel = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioTypeAheadComponent.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._key = v;
            this.displayfield = this._key;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dropdown = this.dropdownlist.toArray();
        setTimeout(function () {
            _this.dropdown.forEach(function (dropdown) {
                dropdown.template = _this.bodyTemplate;
            });
        }, 200);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["placeholder"] && !changes["placeholder"].isFirstChange()) {
            this.placeholder = changes["placeholder"].currentValue;
        }
    };
    /**
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.name = this.generateName(this.name, this.fieldlabel, 'typeaheadinput');
        if (!this.valuefield) {
            this.valuefield = this.displayfield;
        }
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.placeholder === '' || this.placeholder == null) {
            this.placeholder = 'Choose Option';
        }
        if (!this.triggerchar) {
            this.triggerchar = 1;
        }
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.input = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.displayValue = event.target.value;
        this.rowindex = 0;
        if (this.displayValue.length >= 0 && !this.self && this.displayValue.length >= this.triggerchar) {
            this.dropdownstyle = { visibility: 'visible' };
            this.bindDocumentClickListener();
        }
        else {
            this.dropdownstyle = { visibility: 'hidden' };
        }
        this.onInputOutput.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.focus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'hidden' };
        this.bindDocumentClickListener();
        this.onFocusOutput.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.keyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ keycode = event.keyCode;
        if (keycode === 40) {
            this.rowindex++;
        }
        else if (keycode === 38) {
            this.rowindex--;
        }
        else if (keycode === 40 || keycode === 38) {
            this.rowindex = 0;
        }
        if (this.rowindex < 0) {
            this.rowindex = 0;
        }
        else if (this.rowindex >= this.viewdata.value.length) {
            this.rowindex = this.viewdata.value.length - 1;
        }
        if (keycode === 13) {
            var /** @type {?} */ data = this.dropdown[0].selectedItem();
            this.value = data[0].attributes['valuefield'].value;
            this.displayValue = data[0].attributes['displayfield'].value;
            this.itemClicked();
            this.isComponentValid.emit(true);
        }
        else if (keycode === 40 || keycode === 38) {
            this.dropdown[0].scroll(this.rowindex);
        }
    };
    // METHOS FOR BLUR EVENT
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.blur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        _super.prototype.blur.call(this, event);
        var /** @type {?} */ userinput = event.target.value;
        var /** @type {?} */ listitems = this.viewdata.value;
        listitems.forEach(function (item) {
            if ((item[_this.displayfield] + '').toLowerCase() === userinput.toLowerCase()) {
                _this.displayValue = item[_this.displayfield];
                _this.value = item[_this.valuefield];
                _this.isComponentValid.emit(true);
            }
        });
        this.onBlur.emit(event);
    };
    // METHOD TO DISPLAY ITEM WHEN SELECTED
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.onDropDownListItemClick = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.valuefield) {
            this.value = data[this.valuefield];
        }
        else {
            this.value = data[this.displayfield];
        }
        this.displayValue = data[this.displayfield];
        this.onClick.emit(data);
    };
    /**
     * @param {?} v
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.writeValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        _super.prototype.writeValue.call(this, v);
        if (v && this.viewdata) {
            this.showValue();
        }
    };
    /**
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.showValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ listitems = this.viewdata.value;
        listitems.forEach(function (item) {
            if (item[_this.valuefield] === _this.value) {
                _this.displayValue = item[_this.displayfield];
                _this.isComponentValid.emit(true);
            }
        });
    };
    // METHOD TO INITIALIZE COMPONENT
    /**
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.initComponent = /**
     * @return {?}
     */
    function () {
        if (this.fieldlabel != null && this.fieldlabel.length > 0) {
            this.haslabel = true;
        }
    };
    // METHOS TO EMIT CHANGE EVENT
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event != null) {
            this.change.emit(event);
        }
    };
    // METHOD TO SET DATA IN DROPDOWN
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var _this = this;
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewdata = of(responsedata);
        // SET USER SELECTION
        if (this.value != null) {
            var /** @type {?} */ valueKey_1 = this.valuefield;
            var /** @type {?} */ displayKey_1 = this.displayfield;
            var /** @type {?} */ val_1 = this.value;
            this.viewdata.forEach(function (item) {
                if (item[valueKey_1] === val_1) {
                    _this.isValid = true;
                    _this.displayValue = item[displayKey_1];
                }
            });
        }
        this.maskloader = false;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    AmexioTypeAheadComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return ((!this.allowblank && this.value) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    };
    AmexioTypeAheadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-typeahead',
                    template: "\n\n\n    <div class=\"inputgroup form-group\">\n\n      <label *ngIf=\"haslabel\" [style.font-style]=\"fontstyle\" [style.font-family]=\"fontfamily\" [style.font-size]=\"fontsize\">\n        {{fieldlabel}}\n      </label>\n\n      <input type=\"hidden\" [(ngModel)]=\"value\" [name]=\"name\" #model=\"ngModel\" required (ngModelChange)=\"onChange($event)\">\n  \n\n      <div class=\"input-container\">\n              <input type=\"text\" class=\"input-control\"\n                      [ngClass]=\"{'input-control-error': ((model.dirty || model.touched || (value && value.length>0)) && !model.valid),\n                      'input-disabled' : disabled}\"\n                      [required]=\"!allowblank\" \n                      [value]=\"displayValue\"\n                      [attr.placeholder]=\"placeholder\"\n                      [attr.disabled] = \"disabled ? true: null\"\n                      (focus)=\"focus($event)\"\n                      (input)=\"input($event)\"\n                      (keyup)=\"keyup($event)\"\n                      (blur)=\"blur($event)\"/>\n              <em *ngIf=\"(iconfeedback && (model.dirty || model.touched) && model.valid)\" class=\"fa fa-check\"></em>\n              <em *ngIf=\"(iconfeedback && (model.dirty || model.touched) && !model.valid)\" class=\"fa fa-times icon-error\"></em>\n      </div>\n\n      <input-help *ngIf=\"(enablepopover)\" \n                      [error-msg]=\"errormsg\" \n                      [min-msg]=\"minmsg\" \n                      [max-msg]=\"maxmsg\">\n      </input-help>\n  \n      <dropdown-list-item class=\"dropdown\" [ngStyle]=\"dropdownstyle\"  \n                          [data]=\"viewdata\" [display-field]=\"displayfield\" [value-field]=\"valuefield\" \n                          [highlight-row]=\"rowindex\" [display-value]=\"displayValue\" \n                          (itemclick)=\"onDropDownListItemClick($event)\">\n      </dropdown-list-item>\n    </div>\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: AmexioTypeAheadComponent,
                            multi: true,
                        }, {
                            provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AmexioTypeAheadComponent; }), multi: true,
                        }],
                },] },
    ];
    /** @nocollapse */
    AmexioTypeAheadComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioTypeAheadComponent.propDecorators = {
        fieldlabel: [{ type: core.Input, args: ['field-label',] }],
        haslabel: [{ type: core.Input, args: ['has-label',] }],
        data: [{ type: core.Input, args: ['data',] }],
        key: [{ type: core.Input, args: ['key',] }],
        allowblank: [{ type: core.Input, args: ['allow-blank',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        displayfield: [{ type: core.Input, args: ['display-field',] }],
        valuefield: [{ type: core.Input, args: ['value-field',] }],
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        placeholder: [{ type: core.Input, args: ['place-holder',] }],
        iconfeedback: [{ type: core.Input, args: ['icon-feedback',] }],
        fontstyle: [{ type: core.Input, args: ['font-style',] }],
        fontfamily: [{ type: core.Input, args: ['font-family',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        enablepopover: [{ type: core.Input, args: ['enable-popover',] }],
        triggerchar: [{ type: core.Input, args: ['trigger-char',] }],
        name: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        onBlur: [{ type: core.Output }],
        onInputOutput: [{ type: core.Output, args: ['input',] }],
        onFocusOutput: [{ type: core.Output, args: ['focus',] }],
        change: [{ type: core.Output }],
        onClick: [{ type: core.Output }],
        isComponentValid: [{ type: core.Output }],
        model: [{ type: core.ViewChild, args: [forms.NgModel,] }],
        dropdownlist: [{ type: core.ViewChildren, args: [DropDownListComponent,] }],
        bodyTemplate: [{ type: core.ContentChild, args: ['amexioBodyTmpl',] }]
    };
    return AmexioTypeAheadComponent;
}(ListBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioInputHelperComponent = /** @class */ (function () {
    function AmexioInputHelperComponent() {
        this.help = [];
    }
    Object.defineProperty(AmexioInputHelperComponent.prototype, "errormsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errormsg;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._errormsg = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioInputHelperComponent.prototype, "minmsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minmsg;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._minmsg = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmexioInputHelperComponent.prototype, "maxmsg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxmsg;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._maxmsg = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioInputHelperComponent.prototype.createHelpMsg = /**
     * @return {?}
     */
    function () {
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
    };
    AmexioInputHelperComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'input-help',
                    template: "\n      <div class=\"input-helper\">\n          {{errormsg}} <br/>\n          {{minmsg}} <br/>\n          {{maxmsg}} <br/>\n      </div>\n    ",
                    styles: ["\n      .input-helper{background-color:#d3d3d3;display:block;z-index:1;overflow:auto;position:absolute;width:100%;max-height:200px;opacity:1;-webkit-box-shadow:0 1px 3px 0 #ced4da;box-shadow:0 1px 3px 0 #ced4da}\n    "],
                },] },
    ];
    /** @nocollapse */
    AmexioInputHelperComponent.ctorParameters = function () { return []; };
    AmexioInputHelperComponent.propDecorators = {
        errormsg: [{ type: core.Input, args: ['error-msg',] }],
        minmsg: [{ type: core.Input, args: ['min-msg',] }],
        maxmsg: [{ type: core.Input, args: ['max-msg',] }]
    };
    return AmexioInputHelperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FilterPipe = /** @class */ (function () {
    function FilterPipe() {
    }
    /**
     * @param {?} items
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    FilterPipe.prototype.transform = /**
     * @param {?} items
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (items, field, value) {
        if (!items) {
            return [];
        }
        if (!field || !value) {
            return items;
        }
        return items.filter(function (singleItem) {
            return singleItem[field].toLowerCase().startsWith(value.toLowerCase());
        });
    };
    FilterPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'filterpipe',
                },] },
        { type: core.Injectable },
    ];
    return FilterPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FORM_COMPONENTS = [
    AmexioTextInputComponent,
    AmexioCheckBoxComponent,
    AmexioDropDownComponent,
    AmexioTypeAheadComponent,
    AmexioInputHelperComponent,
    AmexioRadioGroupComponent,
    AmexioEmailInputComponent,
    AmexioNumberInputComponent,
    AmexioPasswordComponent,
    AmexioTextAreaComponent,
    AmexioToggleComponent,
    AmexioRatingComponent,
    AmexioButtonComponent,
    AmexioButtonGroupComponent,
    AmexioButtonDropdownComponent,
    AmexioSpiltButtonDropdownComponent,
    AmexioButtonDropDownItemComponent,
    AmexioCheckBoxGroupComponent,
    CheckboxComponent,
    AmexioFormIconComponent,
    AmexioSliderComponent,
    AmexioTagsInputComponent,
    AmexioDateTimePickerComponent,
    AmexioButtonDropDownItemComponent,
    AmexioButtonDropdownComponent,
    AmexioSpiltButtonDropdownComponent,
    AmexioFileUploadComponent,
    AmexioLabelComponent,
    AmexioFloatingButtonComponent,
    AmexioFloatingGroupButtonComponent,
    DropDownListComponent,
    AmexioDropDownitemsComponent,
    AmexioDropDownMenuComponent,
    ToolbarComponent,
    ToolbaroneComponent,
    ToolBarActionComponent,
    SearchboxtoolComponent,
    AmexioSearchAdvanceComponent,
    RecaptchaComponent,
    AmexioSpinnerComponent,
    AmexioCreditcardComponent,
    AmexioChipComponent,
    AmexioChipsComponent,
    FilterPipe,
];
var AmexioFormsModule = /** @class */ (function () {
    function AmexioFormsModule() {
    }
    /**
     * @return {?}
     */
    AmexioFormsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioFormsModule,
            providers: [CommonDataService, IconLoaderService, LoadRecaptchaService],
        };
    };
    AmexioFormsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        AmexioLayoutModule,
                        HttpClientModule,
                    ],
                    exports: FORM_COMPONENTS,
                    declarations: FORM_COMPONENTS,
                    providers: [CommonDataService, IconLoaderService, DomHandler,
                    ],
                },] },
    ];
    return AmexioFormsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PANE_COMPONENTS = [
    AmexioHeaderComponent,
    AmexioFooterComponent,
    AmexioBodyComponent,
    AmexioFieldSetComponent,
    AmexioWindowPaneComponent,
    AmexioWindowHeaderComponent,
    AmexioStepsComponent,
    AmexioTabPillComponent,
    AmexioTabComponent,
    AmexioVerticalTabComponent,
    AmexioRightVerticalTabComponent,
    AmexioCarouselComponent,
    AmexioTemplateDirective,
    AmexioTemplateWrapperDirective,
    StepBlockComponent,
    AmexioPanelComponent,
    AmexioPanelHeaderComponent,
    AmexioIconPaneComponent,
    AmexiodialoguePaneComponent,
    AmexioFormComponent,
    AmexioFormActionComponent,
    AmexioFormHeaderComponent,
    AmexioFormBodyComponent,
    AmexioFormGroupDirective,
    AmexioTabActionComponent,
    AmexiotimelineComponent,
    AmexiotimelineeventComponent,
];
var AmexioPaneModule = /** @class */ (function () {
    function AmexioPaneModule() {
    }
    /**
     * @return {?}
     */
    AmexioPaneModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioPaneModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService],
        };
    };
    AmexioPaneModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        AmexioFormsModule,
                        HttpClientModule,
                    ],
                    entryComponents: [AmexioTabPillComponent],
                    exports: PANE_COMPONENTS,
                    declarations: PANE_COMPONENTS,
                    providers: [CommonDataService, DeviceQueryService, IconLoaderService],
                },] },
    ];
    return AmexioPaneModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DATA_COMPONENTS = [
    AmexioTreeViewComponent,
    AmexioListBoxComponent,
    AmexioDatagridComponent,
    AmexioDataGridHeaderComponent,
    DataGridFilterComponent,
    AmexioPaginatorComponent,
    AmexioGridColumnComponent,
    AmexioProgressMultiBarComponent,
    AmexioProgressBarComponent,
    HorizontalTreeViewNodeComponent,
    HorizontalTreeViewComponent,
    AmexioFilterTreeComponent,
    TreeDataTableComponent,
    AmexioDataIconComponent,
    AmexioItemSelectorComponent,
];
var AmexioDataModule = /** @class */ (function () {
    function AmexioDataModule() {
    }
    /**
     * @return {?}
     */
    AmexioDataModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioDataModule,
            providers: [CommonDataService, IconLoaderService],
        };
    };
    AmexioDataModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        AmexioPaneModule,
                        AmexioLayoutModule,
                        HttpClientModule,
                    ],
                    exports: DATA_COMPONENTS,
                    declarations: DATA_COMPONENTS,
                    providers: [CommonDataService, IconLoaderService],
                },] },
    ];
    return AmexioDataModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioVideoPlayerComponent = /** @class */ (function () {
    function AmexioVideoPlayerComponent() {
        this.currentVolume = 1;
    }
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.onVolumeChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.videoPlayer.nativeElement.volume = this.currentVolume = event.target.value;
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.updateMuteUI = /**
     * @return {?}
     */
    function () {
        if (this.videoPlayer.nativeElement.muted) {
            this.isMuted = true;
        }
        else {
            this.isMuted = false;
        }
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.onPlay = /**
     * @return {?}
     */
    function () {
        if (!this.isPlaying) {
            this.videoPlayer.nativeElement.play();
            this.isPlaying = true;
        }
        else {
            this.videoPlayer.nativeElement.pause();
            this.isPlaying = false;
        }
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.onTimeUpdate = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ percentage = Math.floor((100 / this.videoPlayer.nativeElement.duration) * this.videoPlayer.nativeElement.currentTime);
        this.progressBar.nativeElement.value = percentage;
        // Update the progress bar's text (for browsers that don't support the progress element)
        this.progressBar.nativeElement.innerHTML = percentage + '% played';
        if (percentage === 100) {
            this.isPlaying = false;
        }
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.replayVideo = /**
     * @return {?}
     */
    function () {
        this.resetPlayer();
        this.onPlay();
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.resetPlayer = /**
     * @return {?}
     */
    function () {
        this.videoPlayer.nativeElement.pause();
        this.progressBar.nativeElement.value = 0;
        this.videoPlayer.nativeElement.currentTime = 0;
        this.isPlaying = false;
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.onFullScreen = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ elem = this.videoPlayer.nativeElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        }
        else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        }
    };
    /**
     * @return {?}
     */
    AmexioVideoPlayerComponent.prototype.onMute = /**
     * @return {?}
     */
    function () {
        if (!this.isMuted) {
            this.videoPlayer.nativeElement.muted = true;
            this.isMuted = true;
            this.volumebar.nativeElement.value = 0;
        }
        else {
            this.videoPlayer.nativeElement.muted = false;
            this.isMuted = false;
            this.volumebar.nativeElement.value = this.currentVolume;
        }
    };
    AmexioVideoPlayerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-video-player',
                    template: "\n\n      <video [style.width.px]=\"width\" controls>\n          <source [attr.src]=\"path\">\n          Your browser does not support HTML5 video.\n      </video>\n  ",
                    styles: ["\n    video{border:1px solid #4682b4;width:420px;height:231px;background:#000}progress{color:#4682b4;font-size:12px;width:220px;height:16px;border:none;margin-right:10px;background:#434343;border-radius:9px;vertical-align:middle}progress::-moz-progress-bar{color:#4682b4;background:#434343}progress[value]::-webkit-progress-bar{background-color:#434343;border-radius:2px;-webkit-box-shadow:0 2px 5px rgba(0,0,0,.25) inset;box-shadow:inset 0 2px 5px rgba(0,0,0,.25)}progress[value]::-webkit-progress-value{background-color:#4682b4}@media screen and (max-width:600px){video{border:1px solid #4682b4;width:98%;height:231px;background:#000}}\n  "],
                },] },
    ];
    /** @nocollapse */
    AmexioVideoPlayerComponent.ctorParameters = function () { return []; };
    AmexioVideoPlayerComponent.propDecorators = {
        path: [{ type: core.Input }],
        extension: [{ type: core.Input }],
        width: [{ type: core.Input }],
        videoPlayer: [{ type: core.ViewChild, args: ['videoRef',] }],
        progressBar: [{ type: core.ViewChild, args: ['progressbar',] }],
        volumebar: [{ type: core.ViewChild, args: ['volumebar',] }]
    };
    return AmexioVideoPlayerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MEDIA_COMPONENTS = [
    AmexioVideoPlayerComponent,
    AmexioImageComponent,
];
var AmexioMediaModule = /** @class */ (function () {
    function AmexioMediaModule() {
    }
    /**
     * @return {?}
     */
    AmexioMediaModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioMediaModule,
            providers: [CommonDataService, DeviceQueryService],
        };
    };
    AmexioMediaModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        HttpClientModule,
                    ],
                    exports: MEDIA_COMPONENTS,
                    declarations: MEDIA_COMPONENTS,
                    providers: [CommonDataService, DeviceQueryService, IconLoaderService],
                },] },
    ];
    return AmexioMediaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by kedarkokil on 26/09/18.
 */
var AmexioBreadcrumbComponent = /** @class */ (function () {
    function AmexioBreadcrumbComponent(element, dataService) {
        this.element = element;
        this.dataService = dataService;
        /*
           Events
           name : onListItemClick
           datatype : any
           version : none
           default :
           description : On click event
           */
        this.onListItemClick = new core.EventEmitter();
        /*
           Events
           name : onClick
           datatype : any
           version : none
           default :
           description : On click event
           */
        this.onClick = new core.EventEmitter();
        this.buttonAngleRightCss = 'button_angle-right';
        this.displaykey = 'text';
        this.childarraykey = 'children';
    }
    /**
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.arrowKey = this.buttonAngleRightCss;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
    };
    // ICON ADDED WHEN THE ICON IS NOT GIVEN
    /**
     * @param {?} nodeArray
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.iconAddedMethod = /**
     * @param {?} nodeArray
     * @return {?}
     */
    function (nodeArray) {
        var _this = this;
        if (nodeArray && nodeArray.length > 0) {
            nodeArray.forEach(function (node) {
                if (node[_this.childarraykey]) {
                    node[_this.childarraykey].forEach(function (element) {
                        _this.childIconCheckMethod(element);
                    });
                }
            });
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.childIconCheckMethod = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (element.hasOwnProperty([this.childarraykey])) {
            element[this.childarraykey].forEach(function (childIcon) {
                if (childIcon.icon == null || childIcon.icon === '') {
                    childIcon.icon = 'fa fa-file-o';
                }
            });
            if (element.icon == null || element.icon === '') {
                element.icon = 'fa fa-folder-o';
            }
            this.iconAddedMethod(element);
        }
    };
    // THIS METHOD   IS USED FOR ADDING CHILDREN IN OPTIONS
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.getSelectedItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ arrayOnly = [event.data];
        this.childItem = arrayOnly;
        event.parentRef.show = true;
        event.parentRef.expand = false;
        this.arrowKey = this.buttonAngleRightCss;
        this.onListItemClick.emit(event.data);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.getEventEmitClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onListItemClick.emit(event);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.onArrowClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.expand = !item.expand;
        if (item.expand) {
            this.arrowKey = 'button_angle-down';
        }
        else {
            this.arrowKey = this.buttonAngleRightCss;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.onButtonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.show = false;
        event.expand = false;
        this.onClick.emit(event);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        // Check if key is added?
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.iconAddedMethod(this.data);
    };
    /**
     * @param {?} targetElement
     * @return {?}
     */
    AmexioBreadcrumbComponent.prototype.onElementOutClick = /**
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        var /** @type {?} */ parentFound = false;
        while (targetElement !== null && !parentFound) {
            if (targetElement === this.element.nativeElement) {
                parentFound = true;
            }
            targetElement = targetElement.parentElement;
        }
        if (!parentFound) {
            var /** @type {?} */ expandData_1;
            this.data.forEach(function (dataObject) {
                if (dataObject) {
                    expandData_1 = dataObject;
                }
                if (expandData_1 && expandData_1.expand != null) {
                    expandData_1.expand = false;
                }
            });
        }
    };
    AmexioBreadcrumbComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-breadcrumb', template: "\n    <ng-container *ngIf=\"data \">\n\n        <div *ngFor=\"let nodeObject of data\">\n\n            <div class=\"breadcrum-rightshift-css\">\n                <div class=\"breadcrumb-group\">\n                    <label (click)=\"onButtonClick(nodeObject)\" class=\"label-icon-css\">\n                        <ng-container *ngIf=\"nodeObject && nodeObject.icon\">\n                            <span [ngClass]=\"nodeObject.icon\"></span>\n                        </ng-container>&nbsp;\n                        <span>{{nodeObject[displaykey]}} &nbsp;&nbsp;</span>\n                    </label>\n                    <ng-container *ngIf=\"nodeObject[childarraykey]\">\n                        <amexio-form-icon (click)=\"onArrowClick(nodeObject)\" class=\"arrow-group-css\" [key]=\"arrowKey\"></amexio-form-icon>\n                    </ng-container>\n\n\n                    <div class=\"context-menu-list1\" *ngIf=\"nodeObject.expand\">\n                        <ng-container *ngFor=\"let node of nodeObject[childarraykey]\">\n                            <div class=\"context-menu-list-items1\" [ngStyle]=\"{'cursor': node.disabled ? 'not-allowed':'pointer'}\"\n                                (click)=\"getSelectedItem({data:node,parentRef:nodeObject})\">\n                                <div class=\"dropdown-icon-css\"> \n                                    <ng-container *ngIf=\"node.icon\">\n                                        <amexio-form-icon [ngClass]=\"node.icon\"></amexio-form-icon>\n                                    </ng-container>&nbsp;\n                                </div>\n                                <div class=\"dropdown-label-css\">\n                                    <span>{{node[displaykey]}}&nbsp;</span>\n                                </div>\n                            </div>\n                        </ng-container>\n                    </div>\n\n\n\n\n                </div>\n\n                <ng-container *ngIf=\"nodeObject.show\">\n                    <amexio-breadcrumb [data]=\"childItem\" [display-key]=\"displaykey\" [childarray-key]=\"childarraykey\"\n                        (onListItemClick)=\"getEventEmitClick($event)\" (onClick)=\"onButtonClick($event)\">\n                    </amexio-breadcrumb>\n                </ng-container>\n            </div>\n        </div>\n\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioBreadcrumbComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: CommonDataService }
    ]; };
    AmexioBreadcrumbComponent.propDecorators = {
        data: [{ type: core.Input }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        displaykey: [{ type: core.Input, args: ['display-key',] }],
        childarraykey: [{ type: core.Input, args: ['childarray-key',] }],
        onListItemClick: [{ type: core.Output }],
        onClick: [{ type: core.Output }],
        onElementOutClick: [{ type: core.HostListener, args: ['document:click', ['$event.target'],] }, { type: core.HostListener, args: ['document: touchstart', ['$event.target'],] }]
    };
    return AmexioBreadcrumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by sagar on 6/9/17.
 */
var DockbarComponent = /** @class */ (function () {
    function DockbarComponent() {
        this.elementId = 'dockbar-item-id' + Math.floor(Math.random() * 90000) + 10000;
    }
    // Close the  dockbar item
    /**
     * @return {?}
     */
    DockbarComponent.prototype.onBarIconClick = /**
     * @return {?}
     */
    function () {
        this.active = false;
    };
    /**
     * @return {?}
     */
    DockbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    DockbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dockbar-item', template: "\n    <div *ngIf=\"active\"  [style.width]=\"width\"\n    class=\"dockbar-active-content dockbar-height\"\n    [style.min-height]=\"height\"  [style.max-height]=\"height\">\n      <ng-container *ngIf=\"active && title\">\n        <div class=\"dockbar-title\">\n          {{title}}\n          <span class=\"dockbar-item-close-bar\" (click)=\"onBarIconClick()\">\n            <amexio-nav-icon key=\"dockbar_close\"></amexio-nav-icon>\n            <!--\n                        <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n            -->\n          </span>\n        </div>\n      </ng-container>\n      <ng-content>\n      </ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DockbarComponent.ctorParameters = function () { return []; };
    DockbarComponent.propDecorators = {
        active: [{ type: core.Input }],
        label: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        mda: [{ type: core.Input }],
        width: [{ type: core.Input }],
        title: [{ type: core.Input }],
        path: [{ type: core.Input }],
        height: [{ type: core.Input }]
    };
    return DockbarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Created by Ketan Gote on 8/21/17.
 */
var DockedBarToolComponent = /** @class */ (function () {
    function DockedBarToolComponent() {
    }
    // on docker bar click event
    /**
     * @param {?} event
     * @return {?}
     */
    DockedBarToolComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ tabs = this.dockbarArray;
        tabs.forEach(function (tab) {
            tab.active = false;
            if (tab.elementId === event.elementId) {
                tab.active = true;
            }
        });
    };
    /**
     * @return {?}
     */
    DockedBarToolComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.dockbarArray = this.dockbars.toArray();
    };
    /**
     * @return {?}
     */
    DockedBarToolComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    DockedBarToolComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dockbar', template: "\n    <div class=\"dockbar\" [style.min-height]=\"height\">\n      <ng-container *ngFor=\"let dockbar of dockbarArray\">\n        <button [ngClass]=\"{'active':dockbar.active}\" (click)=\"onClick(dockbar)\">\n\n          <!--Normal image-->\n          <ng-container *ngIf=\"dockbar.path\">\n            <img [src]=\"dockbar.path\">\n          </ng-container>\n\n          <!--this is for fontawesome-->\n          <ng-container *ngIf=\"(!(dockbar.icon && dockbar.mda) && dockbar.icon)\">\n            <amexio-image [icon-class]=\"dockbar.icon\" [c-class]=\"\"></amexio-image>\n            <!--<i [ngClass]=\"dockbar.icon\"></i>-->\n          </ng-container>\n\n          <!--if dockbar have label instead of icon -->\n          <ng-container *ngIf=\"dockbar.label && dockbar.active\">\n            <p><strong class=\"dockbar-label-highlight\">{{dockbar.label}}</strong></p>\n          </ng-container>\n\n          <ng-container *ngIf=\"dockbar.label && !dockbar.active\">\n            <p>{{dockbar.label}}</p>\n          </ng-container>\n\n        </button>\n      </ng-container>\n    </div>\n    <div class=\"dockbar-content\" [style.min-height]=\"height\">\n      <ng-content></ng-content>\n    </div>\n\n  ",
                },] },
    ];
    /** @nocollapse */
    DockedBarToolComponent.ctorParameters = function () { return []; };
    DockedBarToolComponent.propDecorators = {
        dockbars: [{ type: core.ContentChildren, args: [DockbarComponent,] }],
        height: [{ type: core.Input }]
    };
    return DockedBarToolComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 21/12/17.
 */
var AmexioNavIconPaneComponent = /** @class */ (function () {
    function AmexioNavIconPaneComponent(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        this.onClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioNavIconPaneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconClass = this.getIconClass();
    };
    /**
     * @return {?}
     */
    AmexioNavIconPaneComponent.prototype.getIconClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.iconLoaderService.iconMappings != null) {
            var /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find(function (obj) { return obj.component === _this.key; });
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmexioNavIconPaneComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    };
    AmexioNavIconPaneComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav-icon', template: "\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'fa'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"{{customclass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"{{iconClass}}\" aria-hidden=\"true\" (click)=\"onClick.emit($event)\"></i>\n      </ng-container>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"iconLoaderService.iconToUse == 'mat'\">\n\n      <ng-container *ngIf=\"customclass != null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{customclass}}</i>\n      </ng-container>\n\n      <ng-container *ngIf=\"customclass == null\">\n        <i class=\"material-icons\" (click)=\"onClick.emit($event)\">{{iconClass}}</i>\n      </ng-container>\n\n\n    </ng-container>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioNavIconPaneComponent.ctorParameters = function () { return [
        { type: IconLoaderService }
    ]; };
    AmexioNavIconPaneComponent.propDecorators = {
        key: [{ type: core.Input }],
        customclass: [{ type: core.Input }],
        onClick: [{ type: core.Output }]
    };
    return AmexioNavIconPaneComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/8/17.
 */
var AmexioMenuBarComponent = /** @class */ (function () {
    function AmexioMenuBarComponent(matchMediaService, dataService) {
        this.matchMediaService = matchMediaService;
        this.dataService = dataService;
        /*
        Events
        name : nodeClick
        datatype : any
        version : none
        default : none
        description : Fire when menubar bar click.
        */
        this.nodeClick = new core.EventEmitter();
        this.xposition = false;
        this.expand = false;
    }
    /**
     * @return {?}
     */
    AmexioMenuBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioMenuBarComponent.prototype.onClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.matchMediaService.IsPhone() || this.matchMediaService.IsTablet()) {
            for (var _i = 0, _a = 'length'; _i < _a.length; _i++) {
                var i = _a[_i];
                if (this.data[i] === node) {
                    this.data[i].expand = !this.data[i].expand;
                }
                else {
                    this.data[i].expand = false;
                }
            }
        }
        this.nodeClick.emit(node);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioMenuBarComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        // Check if key is added?
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            
        }
        this.data = httpResponse;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioMenuBarComponent.prototype.onMouseOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(this.matchMediaService.IsPhone() || this.matchMediaService.IsTablet())) {
            if ((this.matchMediaService.browserWindow().innerWidth - event.clientX) < 200) {
                this.xposition = true;
            }
            else {
                this.xposition = false;
            }
        }
        else {
            this.xposition = false;
        }
    };
    AmexioMenuBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-menu',
                    template: "\n    <div class=\"menu-container\">\n      <div class=\"menubar\">\n        <ul class=\"menuheader\">\n          <li class=\"menulink\">{{label}}</li>\n          <div>\n            <li *ngFor=\"let node of data\" class=\"menulink\">\n              <a (click)=\"onClick(node)\"  (mouseover)=\"onMouseOver($event)\">\n                <amexio-nav-icon *ngIf=\"node.icon\" [customclass]=\"node.icon\"></amexio-nav-icon>&nbsp;&nbsp;{{node.text}}</a>\n              <!--<i *ngIf=\"node.icon\" [ngClass]=\"node.icon\" aria-hidden=\"true\"></i>-->\n              <ng-container *ngIf=\"(node.children && node.children[0].children)\">\n\n                <div *ngIf=\"(node.children && node.children.length>0)\" class=\"menu-content\"\n                     [ngClass]=\"{'menu-content-display':node.expand,\n                     ' menu-content-left': (node.children && node.children.length>3),'menu-right':xposition}\">\n                  <ul class=\"menu-content-cols\">\n\n                    <li class=\"col-menu-nodes\"\n                        [ngClass]=\"{'col-menu-nodes-fixed': (node.children && node.children.length<4),\n                      'col-menu-nodes-percentage': (node.children && node.children.length>3)}\"\n                        *ngFor=\"let subnode of node.children\">\n                      <div class=\"content\">\n                        <div *ngIf=\"(subnode.text && subnode.text.length>0)\" class=\"menu-links-header\">\n                          <amexio-nav-icon *ngIf=\"subnode.icon\" [customclass]=\"subnode.icon\"></amexio-nav-icon>&nbsp;&nbsp;{{subnode.text}}\n                          <!--<i *ngIf=\"subnode.icon\" [ngClass]=\"subnode.icon\" aria-hidden=\"true\"></i>-->\n                        </div>\n                        <div *ngIf=\"subnode.image\" style=\"padding: 10px;\">\n                          <img [attr.src]=\"subnode.image\">\n                        </div>\n                        <ul class=\"menu-content-cols\">\n                          <li *ngFor=\"let subinnernode of subnode.children\" class=\"menulinks\">\n                            <div *ngIf=\"subinnernode.image\" style=\"padding: 10px;\">\n                              <img [attr.src]=\"subinnernode.image\">\n                            </div>\n                            <!--<i *ngIf=\"subinnernode.icon\" class=\"fa fa-ravelry\"\n                            aria-hidden=\"true\"></i>-->\n                            <amexio-nav-icon *ngIf=\"subinnernode.icon\" key=\"menubar_ravelry\">\n                            </amexio-nav-icon>\n                            &nbsp;&nbsp;{{subinnernode.text}}{{subinnernode.template}}\n                          </li>\n                        </ul>\n                      </div>\n                    </li>\n\n                  </ul>\n                </div>\n\n              </ng-container>\n\n\n              <ng-container *ngIf=\"(node.children && !node.children[0].children)\">\n                <div class=\"menu-content\" [ngClass]=\"{'menu-content-display':node.expand}\">\n                  <ul class=\"menu-content-cols\">\n                    <li class=\"col-menu-nodes col-menu-nodes-fixed\">\n                      <div class=\"content\">\n                        <ul class=\"menu-content-cols\">\n                          <li *ngFor=\"let subnode of node.children\" class=\"menulinks\">\n                            <div *ngIf=\"subnode.image\" style=\"padding: 10px;\">\n                              <img [attr.src]=\"subnode.image\">\n                            </div>\n                            <!--<i *ngIf=\"subnode.icon\" class=\"fa fa-ravelry\" aria-hidden=\"true\"></i>-->\n                            <amexio-nav-icon *ngIf=\"subnode.icon\"\n                                             key=\"menubar_ravelry\"></amexio-nav-icon>&nbsp;&nbsp;{{subnode.text}}\n                          </li>\n                        </ul>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </ng-container>\n\n\n            </li>\n          </div>\n\n        </ul>\n      </div>\n    </div>\n\n  ", providers: [CommonDataService],
                },] },
    ];
    /** @nocollapse */
    AmexioMenuBarComponent.ctorParameters = function () { return [
        { type: DeviceQueryService },
        { type: CommonDataService }
    ]; };
    AmexioMenuBarComponent.propDecorators = {
        data: [{ type: core.Input }],
        label: [{ type: core.Input }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        nodeClick: [{ type: core.Output }]
    };
    return AmexioMenuBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 1/4/18.
 */
var AmexioNavActionComponent = /** @class */ (function () {
    function AmexioNavActionComponent() {
        /*
        Events
        name : navLinkClick
        datatype : any
        version : none
        default : none
        description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
        
        */
        this.navLinkClick = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioNavActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavActionComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ node = {};
        this.navLinkClick.emit({ node: node, event: event });
    };
    AmexioNavActionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav-action',
                    template: "\n    <a *ngIf=\"(type=='link')\" class=\"top-nav-link\" (click)=\"onClick($event)\"><i *ngIf=\"icon\" [ngClass]=\"icon\"></i>{{title}}</a>\n\n    <button *ngIf=\"(type=='button')\" class=\"top-nav-button\" (click)=\"onClick($event)\">\n    <i *ngIf=\"icon\" [ngClass]=\"icon\"></i>{{title}}</button>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioNavActionComponent.ctorParameters = function () { return []; };
    AmexioNavActionComponent.propDecorators = {
        type: [{ type: core.Input }],
        title: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        navLinkClick: [{ type: core.Output }]
    };
    return AmexioNavActionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 1/4/18.
 */
var noop$9 = function () {
};
var AmexioNavItemComponent = /** @class */ (function () {
    function AmexioNavItemComponent(elementref) {
        this.elementref = elementref;
        /*
        Events
        name : onNavItemClick
        datatype : any
        version : none
        default : none
        description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
        
        */
        this.onNavItemClick = new core.EventEmitter();
        this.mobilemode = false;
        this.isAction = false;
        this.isTextField = false;
        this.isMenu = false;
        this.isMenuContainer = false;
        this.innerValue = '';
        this.onTouchedCallback = noop$9;
        this.onChangeCallback = noop$9;
    }
    /**
     * @return {?}
     */
    AmexioNavItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.type === 'link' || this.type === 'button') {
            this.isAction = true;
        }
        else if (this.type === 'textfield') {
            this.isTextField = true;
        }
        else if (this.type === 'menu') {
            this.isMenu = true;
        }
        else if (this.type === 'menucontainer') {
            this.isMenuContainer = true;
        }
    };
    /**
     * @return {?}
     */
    AmexioNavItemComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.right = this.elementref.nativeElement.getBoundingClientRect().right;
    };
    /**
     * @return {?}
     */
    AmexioNavItemComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavItemComponent.prototype.navItemClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onNavItemClick.emit(event);
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    AmexioNavItemComponent.prototype.setMobileMode = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this.mobilemode = flag;
    };
    /**
     * @param {?} navbarwidth
     * @return {?}
     */
    AmexioNavItemComponent.prototype.setNavbarWidth = /**
     * @param {?} navbarwidth
     * @return {?}
     */
    function (navbarwidth) {
        this.navbarwidth = navbarwidth;
        if ((this.navbarwidth - this.elementref.nativeElement.getBoundingClientRect().left) < 165) {
            this.enablerightclass = true;
        }
    };
    Object.defineProperty(AmexioNavItemComponent.prototype, "value", {
        //  MODEL BINDING FOR TEXT FIELD
        // The internal dataviews model
        // Placeholders for the callbacks which are later provided
        // by the Control Value Accessor
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioNavItemComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioNavItemComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioNavItemComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    AmexioNavItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav-item',
                    template: "\n\n    <div class=\"topnavmainbarinneritems\"  \n    [ngClass]=\"{'topnavmainbarinneritems-mobile':mobilemode,\n     'nav-dropdown-content-right':enablerightclass}\" >\n        <amexio-nav-action *ngIf=\"isAction\" [type]=\"type\" [title]=\"title\" [icon]=\"icon\" (navLinkClick)=\"navItemClick($event)\"></amexio-nav-action>\n        <amexio-nav-textfield *ngIf=\"isTextField\" [(ngModel)]=\"value\"  [title]=\"title\"></amexio-nav-textfield>\n        <amexio-nav-menu *ngIf=\"isMenu\" [title]=\"title\" [icon]=\"icon\" [data]=\"data\"  (navLinkClick)=\"navItemClick($event)\">\n        </amexio-nav-menu>\n        <amexio-nav-menu *ngIf=\"isMenuContainer\" [title]=\"title\" [icon]=\"icon\" [type]=\"type\" (navLinkClick)=\"navItemClick($event)\">\n            <ng-content></ng-content>\n        </amexio-nav-menu>\n    </div>\n  ",
                    providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioNavItemComponent; }), multi: true,
                        }],
                    encapsulation: core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    AmexioNavItemComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    AmexioNavItemComponent.propDecorators = {
        type: [{ type: core.Input }],
        title: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        data: [{ type: core.Input }],
        onNavItemClick: [{ type: core.Output }]
    };
    return AmexioNavItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/8/17.
 */
var AmexioNavBarComponent = /** @class */ (function () {
    function AmexioNavBarComponent(matchMediaService) {
        this.matchMediaService = matchMediaService;
        /*
        Properties
        name : enable-side-nav-position
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : Indicate if side-nav-bar is present
        */
        this.sidenavspace = false;
        this.onNavLogoClick = new core.EventEmitter();
        this.onNavTitleClick = new core.EventEmitter();
        this.toggle = true;
        this.mobilemode = false;
        this.sidenav = false;
    }
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.logo) {
            this.loadNavItems();
        }
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.onImageLoad = /**
     * @return {?}
     */
    function () {
        this.loadNavItems();
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.loadNavItems = /**
     * @return {?}
     */
    function () {
        this.handleNavItems();
        this.navitemwidth = (5 +
            (this.navbaritems2.nativeElement.offsetWidth) +
            (this.navbaritems2.nativeElement.offsetWidth) +
            (this.navbaritems3.nativeElement.offsetWidth));
        this.handleDeviceSetting();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavBarComponent.prototype.toggleDrawerPanel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.toggle = !this.toggle;
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.handleNavItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.navItemComponents = this.navitems.toArray();
        this.navItemComponents.forEach(function (node) { return node.onNavItemClick.subscribe(function (eventdata) { return _this.handleNavItemEvent(eventdata); }); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavBarComponent.prototype.handleNavItemEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.data && event.data.node && !event.data.node.header && this.mobilemode) {
            this.toggle = false;
        }
    };
    /**
     * @param {?} navbarwidth
     * @return {?}
     */
    AmexioNavBarComponent.prototype.notifyNavItems = /**
     * @param {?} navbarwidth
     * @return {?}
     */
    function (navbarwidth) {
        var _this = this;
        this.navItemComponents.forEach(function (node) {
            node.setMobileMode(_this.mobilemode);
            node.setNavbarWidth(navbarwidth);
        });
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.handleDeviceSetting = /**
     * @return {?}
     */
    function () {
        if (this.sidenavspace) {
            this.sideNavbar();
        }
        var /** @type {?} */ navbarwidth = this.navbar.nativeElement.offsetWidth;
        var /** @type {?} */ navbarheight = this.navbar.nativeElement.offsetHeight;
        if (!this.navfixeditem) {
            this.navfixeditem = this.navbarfixed.nativeElement.offsetWidth;
        }
        if (!this.navitemwidth) {
            var /** @type {?} */ navbaritems1Width = 0;
            var /** @type {?} */ navbaritems2Width = 0;
            var /** @type {?} */ navbaritems3Width = 0;
            if (this.navbaritems1) {
                navbaritems1Width = this.navbaritems1.nativeElement.offsetWidth;
            }
            if (this.navbaritems2) {
                navbaritems2Width = this.navbaritems2.nativeElement.offsetWidth;
            }
            if (this.navbaritems3) {
                navbaritems3Width = this.navbaritems3.nativeElement.offsetWidth;
            }
            this.navitemwidth = (this.navfixeditem + navbaritems1Width + navbaritems2Width + navbaritems3Width);
        }
        var /** @type {?} */ navbaravailablewidth = (navbarwidth - (this.navfixeditem + this.navitemwidth));
        if ((navbaravailablewidth < 100 || navbarheight > 100)) {
            this.mobilemode = true;
            this.toggle = false;
            this.notifyNavItems(navbarwidth);
        }
        else {
            this.mobilemode = false;
            this.toggle = true;
            this.notifyNavItems(navbarwidth);
        }
    };
    /**
     * @return {?}
     */
    AmexioNavBarComponent.prototype.sideNavbar = /**
     * @return {?}
     */
    function () {
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.sidenav = true;
        }
        else {
            this.sidenav = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavBarComponent.prototype.resize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.handleDeviceSetting();
    };
    AmexioNavBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav', template: "\n\n    <nav #navbar class=\"topnav\" [ngClass]=\"{'topnav-mobile':mobilemode}\" (window:resize)=\"resize($event)\">\n        <div #navbarfixed class=\"topnavbarunit1\" [ngClass]=\"{'topnavbarunit1-mobile':mobilemode}\" >\n            <div class=\"float-left\"  [ngStyle]=\"{'padding-left':sidenav ? '40px':'0px'}\">\n                <img alt=\"title\" style=\"cursor: pointer\" (click)=\"onNavLogoClick.emit($event)\"  (load)=\"onImageLoad()\" *ngIf=\"logo\" [attr.src]=\"logo\" class=\"navbar-logo\">\n                <amexio-label (onClick)=\"onNavTitleClick.emit($event)\" [enable-click]=\"true\"  size=\"medium-bold\">{{title}}</amexio-label>\n            </div>\n            <div *ngIf=\"mobilemode\" class=\"float-right mobilebar\" (click)=\"toggleDrawerPanel($event)\">\n                <em *ngIf=\"!toggle\"  class=\"fa fa-caret-down fa-2x\"></em>\n                <em *ngIf=\"toggle\"  class=\"fa fa-caret-up fa-2x\"></em>\n            </div>\n        </div>\n        <div #navbaritems *ngIf=\"toggle\" class=\"topnavbarunit2\"  [ngClass]=\"{'topnavbarunit2-mobile':mobilemode}\" >\n            <div class=\"topnavmainbar\"    [ngClass]=\"{'topnavmainbar-mobile':mobilemode}\" >\n                <div #navbaritems1 class=\"topnavmainbaritems\" [ngClass]=\"{'topnavmainbaritems-mobile':mobilemode}\" >\n                    <ng-content select=\"[position-left]\"></ng-content>\n                </div>\n                <div #navbaritems2 class=\"topnavmainbaritems\"  [ngClass]=\"{'topnavmainbaritems-mobile':mobilemode}\" >\n                    <ng-content select=\"[position-center]\"></ng-content>\n                </div>\n                <div #navbaritems3 class=\"topnavmainbaritems\"   [ngClass]=\"{'topnavmainbaritems-mobile':mobilemode}\" >\n                  <ng-content select=\"[position-right]\"></ng-content>\n                </div>\n\n              </div>\n        </div>\n\n      </nav>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioNavBarComponent.ctorParameters = function () { return [
        { type: DeviceQueryService }
    ]; };
    AmexioNavBarComponent.propDecorators = {
        title: [{ type: core.Input }],
        logo: [{ type: core.Input }],
        sidenavspace: [{ type: core.Input, args: ['enable-side-nav-position',] }],
        onNavLogoClick: [{ type: core.Output }],
        onNavTitleClick: [{ type: core.Output }],
        navitems: [{ type: core.ContentChildren, args: [AmexioNavItemComponent,] }],
        navbar: [{ type: core.ViewChild, args: ['navbar', { read: core.ElementRef },] }],
        navbarfixed: [{ type: core.ViewChild, args: ['navbarfixed', { read: core.ElementRef },] }],
        navbaritems: [{ type: core.ViewChild, args: ['navbaritems', { read: core.ElementRef },] }],
        navbaritems1: [{ type: core.ViewChild, args: ['navbaritems1', { read: core.ElementRef },] }],
        navbaritems2: [{ type: core.ViewChild, args: ['navbaritems2', { read: core.ElementRef },] }],
        navbaritems3: [{ type: core.ViewChild, args: ['navbaritems3', { read: core.ElementRef },] }]
    };
    return AmexioNavBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 1/4/18.
 */
var AmexioNavMenuComponent = /** @class */ (function () {
    function AmexioNavMenuComponent() {
        /*
        Events
        name : navLinkClick
        datatype : any
        version : none
        default : none
        description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
        
        */
        this.navLinkClick = new core.EventEmitter();
        this.mobilemode = false;
    }
    /**
     * @return {?}
     */
    AmexioNavMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    AmexioNavMenuComponent.prototype.setMobileMode = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this.mobilemode = flag;
    };
    /**
     * @param {?} _node
     * @param {?} _event
     * @return {?}
     */
    AmexioNavMenuComponent.prototype.onClick = /**
     * @param {?} _node
     * @param {?} _event
     * @return {?}
     */
    function (_node, _event) {
        var /** @type {?} */ n = {
            title: this.title,
            data: this.data,
            icon: this.icon,
            node: _node,
            mobilemode: this.mobilemode,
        };
        this.navLinkClick.emit(this.dataObject(n, _event));
    };
    /**
     * @param {?} n
     * @param {?} _event
     * @return {?}
     */
    AmexioNavMenuComponent.prototype.dataObject = /**
     * @param {?} n
     * @param {?} _event
     * @return {?}
     */
    function (n, _event) {
        return { data: n, event: _event };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNavMenuComponent.prototype.onHeaderClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ node = {
            header: true,
            title: this.title,
            icon: this.icon,
        };
        this.onClick(node, event);
    };
    AmexioNavMenuComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav-menu',
                    template: "\n  <div class=\"nav-dropdown\">\n    <a class=\"nav-dropbtn\"  (click)=\"onHeaderClick($event)\">\n      <i *ngIf=\"icon\" [ngClass]=\"icon\"></i>{{title}}<i class=\"dropdownicon fa fa-angle-down\"></i>\n    </a>\n    <div class=\"nav-dropdown-content\">\n      <a *ngFor=\"let node of data\" (click)=\"onClick(node, $event)\">\n      <i *ngIf=\"icon\" [ngClass]=\"node.icon\"></i>&nbsp;{{node.text}}</a>\n\n      <div *ngIf=\"type==='menucontainer'\" class=\"nav-menu-container\" >\n      <a *ngFor=\"let node of data\" (click)=\"onClick(node, $event)\">\n      <i *ngIf=\"icon\" [ngClass]=\"node.icon\"></i>&nbsp;{{node.text}}</a>\n      <ng-content ></ng-content>\n      </div>\n    </div>\n  </div>\n\n\n\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioNavMenuComponent.ctorParameters = function () { return []; };
    AmexioNavMenuComponent.propDecorators = {
        type: [{ type: core.Input }],
        title: [{ type: core.Input }],
        data: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        navLinkClick: [{ type: core.Output }]
    };
    return AmexioNavMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var noop$10 = function () {
};
var AmexioNavTextFieldComponent = /** @class */ (function () {
    function AmexioNavTextFieldComponent() {
        this.innerValue = '';
        this.onTouchedCallback = noop$10;
        this.onChangeCallback = noop$10;
    }
    /**
     * @return {?}
     */
    AmexioNavTextFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    Object.defineProperty(AmexioNavTextFieldComponent.prototype, "value", {
        // The internal dataviews model
        // Placeholders for the callbacks which are later provided
        // by the Control Value Accessor
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    AmexioNavTextFieldComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioNavTextFieldComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    AmexioNavTextFieldComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    AmexioNavTextFieldComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-nav-textfield',
                    template: "\n  <input type=\"text\" class=\"top-nav-input-control\" [(ngModel)]=\"value\"/>\n\n  ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AmexioNavTextFieldComponent; }), multi: true,
                        }],
                    encapsulation: core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    AmexioNavTextFieldComponent.ctorParameters = function () { return []; };
    return AmexioNavTextFieldComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var KEY_CODE_notify = {
    esc: 27,
};
KEY_CODE_notify[KEY_CODE_notify.esc] = "esc";
var AmexioNotificationComponent = /** @class */ (function () {
    function AmexioNotificationComponent(ref) {
        this.ref = ref;
        /*
        Properties
        name : closable
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : User can close the window.
        */
        this.closable = true;
        this.notificationVertialCss = 'notification-vertical-';
        this.notificationHorizontalCss = ' notification-horizontal-';
    }
    // Escape Key Functionality
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioNotificationComponent.prototype.keyEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.closeonescape === true) {
            this.messageData.length = 0;
        }
    };
    /**
     * @return {?}
     */
    AmexioNotificationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.autodismissmsg) {
            if (!this.autodismissmsginterval) {
                this.autodismissmsginterval = 1500;
            }
            if (this.messageData !== null) {
                setInterval(function () {
                    _this.messageData.shift();
                    _this.ref.markForCheck();
                }, this.autodismissmsginterval);
            }
        }
        if (this.verticalposition === null) {
            this.verticalposition = 'top';
        }
        else if (this.horizontalposition === null) {
            this.horizontalposition = 'right';
        }
        this.positionclass = this.notificationVertialCss + this.verticalposition + this.notificationHorizontalCss + this.horizontalposition;
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AmexioNotificationComponent.prototype.closeNotification = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        var /** @type {?} */ count = this.messageData.length;
        for (var /** @type {?} */ i = 0; i < count; i++) {
            if (this.messageData[i] === msg) {
                this.messageData.splice(msg, 1);
            }
        }
    };
    AmexioNotificationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-notification', template: "\n    <div class=\"notification-content\" [ngClass]=\"positionclass\">\n\n      <ng-container *ngIf=\"!notificationTemplate\">\n        <div class=\"notification\" *ngFor=\"let msg of messageData\" [style.color]=\"foregroundColor\" [style.background-color]=\"backgroundColor\">\n          <span class=\"float-right\" (click)=\"closeNotification(msg)\">\n            <ng-container *ngIf=\"closable\">\n              <amexio-nav-icon key=\"notify_close\"></amexio-nav-icon>\n            </ng-container>\n          </span>\n\n          <table>\n            <ng-container *ngIf=\"icon\">\n              <th>\n                <amexio-nav-icon style=\" padding-right: 18px;\" [ngClass]=\"icon\">\n                </amexio-nav-icon>\n              </th>\n            </ng-container>\n\n            <th style=\" text-align: left;\">\n\n              <span>{{msg}}</span>&nbsp;&nbsp;&nbsp;&nbsp;\n            </th>\n\n          </table>\n\n        </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"notificationTemplate\">\n        <div class=\"notification\" *ngFor=\"let msg of messageData\" [style.color]=\"foregroundColor\" [style.background-color]=\"backgroundColor\">\n\n          <span class=\"float-right\" (click)=\"closeNotification(msg)\">\n            <ng-container *ngIf=\"closable\">\n              <amexio-nav-icon key=\"notify_close\"></amexio-nav-icon>\n            </ng-container>\n          </span>\n\n          <table>\n            <ng-container *ngIf=\"icon\">\n              <th>\n                <amexio-nav-icon style=\" padding-right: 18px;\" [ngClass]=\"icon\">\n                </amexio-nav-icon>\n              </th>\n            </ng-container>\n            <th style=\" text-align: left;\">\n              <ng-template [ngTemplateOutlet]=\"notificationTemplate\" [ngTemplateOutletContext]=\"{data:msg}\">\n              </ng-template>\n            </th>\n          </table>\n        </div>\n      </ng-container>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioNotificationComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    AmexioNotificationComponent.propDecorators = {
        messageData: [{ type: core.Input, args: ['data',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        closable: [{ type: core.Input }],
        verticalposition: [{ type: core.Input, args: ['vertical-position',] }],
        horizontalposition: [{ type: core.Input, args: ['horizontal-position',] }],
        autodismissmsg: [{ type: core.Input, args: ['auto-dismiss-msg',] }],
        autodismissmsginterval: [{ type: core.Input, args: ['auto-dismiss-msg-interval',] }],
        closeonescape: [{ type: core.Input, args: ['close-on-escape',] }],
        backgroundColor: [{ type: core.Input, args: ['background-color',] }],
        foregroundColor: [{ type: core.Input, args: ['foreground-color',] }],
        notificationTemplate: [{ type: core.ContentChild, args: ['amexioNotificationTemp',] }],
        keyEvent: [{ type: core.HostListener, args: ['window:keyup.esc', ['$event'],] }]
    };
    return AmexioNotificationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var AmexioSideNavComponent = /** @class */ (function () {
    function AmexioSideNavComponent(dataService, matchMediaService, element) {
        this.dataService = dataService;
        this.matchMediaService = matchMediaService;
        this.element = element;
        /*
           Events
           name : nodeClick
           datatype : none
           version : none
           default : none
           description : Fire when sidenav bar menu click
           */
        this.nodeClick = new core.EventEmitter();
        /*
           Events
           name : onDrag
           datatype : none
           version : 4.2.9
           default : none
           description : Fire when you drag node
           */
        this.onDrag = new core.EventEmitter();
        this.position = 'left';
        this.smalldevice = false;
        this.sidenavexpandedinsmalldevice = false;
        this.width = '20%';
        var /** @type {?} */ that = this;
        this.displaykey = 'text';
        this.childarraykey = 'children';
        /*---------------------------------------------------
             TAP INTO LISTENERS FOR WHEN DEVICE WIDTH CHANGES
             ---------------------------------------------------*/
        this.matchMediaService.OnPhone(function (mediaQueryList) {
            that.handleDeviceSettings(false);
        });
        this.matchMediaService.OnTablet(function (mediaQueryList) {
            that.handleDeviceSettings(false);
        });
        this.matchMediaService.OnDesktop(function (mediaQueryList) {
            that.handleDeviceSettings(false);
        });
    }
    /**
     * @return {?}
     */
    AmexioSideNavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe(function (response) {
                _this.responseData = response;
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        if (this.position == null) {
            this.position = 'left';
        }
        if (!this.height) {
            this.height = '100%';
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioSideNavComponent.prototype.onClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClick.emit(node);
        this.activateNode(this.data, node);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioSideNavComponent.prototype.setData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        // Check if key is added?
        var /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            var /** @type {?} */ dr = this.datareader.split('.');
            for (var _i = 0, dr_1 = dr; _i < dr_1.length; _i++) {
                var ir = dr_1[_i];
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.activateNode(this.data, null);
        this.handleDeviceSettings(false);
    };
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    AmexioSideNavComponent.prototype.activateNode = /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    function (data, node) {
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var i = data_1[_i];
            if (node === i && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioSideNavComponent.prototype.toggleSideNav = /**
     * @return {?}
     */
    function () {
        this.handleDeviceSettings(!this.isSideNavExpand);
    };
    /**
     * @return {?}
     */
    AmexioSideNavComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.handleDeviceSettings(false);
    };
    /**
     * @param {?} expand
     * @return {?}
     */
    AmexioSideNavComponent.prototype.handleDeviceSettings = /**
     * @param {?} expand
     * @return {?}
     */
    function (expand) {
        if (this.position !== 'relative') {
            if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
                this.smalldevice = true;
                if (expand) {
                    this.width = '80%';
                    this.isSideNavExpand = true;
                    this.sidenavexpandedinsmalldevice = true;
                }
                else {
                    this.width = '0%';
                    this.isSideNavExpand = false;
                    this.sidenavexpandedinsmalldevice = false;
                }
            }
            else {
                this.width = '20%';
                this.smalldevice = false;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioSideNavComponent.prototype.getNodeDragEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onDrag.emit(event);
    };
    AmexioSideNavComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-side-nav', template: "\n    <div *ngIf=\"(position !='relative' && smalldevice)\"\n         [ngClass]=\"{'sidenav-mobile-bar-left':(position=='left' && position!='relative'),'sidenav-mobile-bar-right':(position=='right' && position!='relative')}\"\n         class=\"sidenav-mobile-bar\" (click)=\"toggleSideNav()\">\n      <amexio-nav-icon key=\"sidenav_bar\"></amexio-nav-icon>\n    </div>\n    <div [ngStyle]=\"{'width':width}\" style=\"height: 100%\" [ngClass]=\"{'left':(position=='left' && position!='relative'),'right':(position=='right' && position!='relative')}\">\n      <div class=\"sidenav\" [ngStyle]=\"{'height':height}\">\n        <ul>\n          <li>\n            <div *ngIf=\"sidenavtitle\" class=\"title\">\n              <ng-container *ngIf=\"titleimage\">\n                <p><img [attr.src]=\"titleimage\" alt=\" Title image\" style=\"width: 60px;height: 60px;padding-left: 80px;\"/></p>\n              </ng-container>\n              <ng-container *ngIf=\"sidenavtitle\">\n                <p>{{sidenavtitle}}</p>\n              </ng-container>\n              <span *ngIf=\"sidenavexpandedinsmalldevice\" style=\"padding-right: 10px; float: right\" (click)=\"close()\">\n                <amexio-nav-icon key=\"sidenav_close\"></amexio-nav-icon>\n              </span>\n            </div>\n          </li>\n\n          <amexio-sidenav-node  *ngFor=\"let node of data\" \n                                [enable-border]=\"(node && node[childarraykey] && (node[childarraykey].length>0))\" \n                                [active]=\"(node && node.active)\" \n                                [icon]=\"node.icon\"\n                                [badge]=\"node.badge\"\n                                [enable-drag]=\"enabledrag\"\n                                (nodeClick)=\"onClick($event)\"\n                                (onDrag)=\"getNodeDragEvent($event)\"\n                                [expand]=\"node?.expand\"\n                                [label]=\"node[displaykey]\"\n                                [node]=\"node\"\n                                [data]=\"node[childarraykey]\">\n          </amexio-sidenav-node>\n\n\n          <ng-content></ng-content>\n        </ul>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioSideNavComponent.ctorParameters = function () { return [
        { type: CommonDataService },
        { type: DeviceQueryService },
        { type: core.ElementRef }
    ]; };
    AmexioSideNavComponent.propDecorators = {
        data: [{ type: core.Input }],
        httpurl: [{ type: core.Input, args: ['http-url',] }],
        httpmethod: [{ type: core.Input, args: ['http-method',] }],
        datareader: [{ type: core.Input, args: ['data-reader',] }],
        position: [{ type: core.Input }],
        titleimage: [{ type: core.Input }],
        nodeClick: [{ type: core.Output }],
        onDrag: [{ type: core.Output }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        sidenavtitle: [{ type: core.Input, args: ['title',] }],
        enabledrag: [{ type: core.Input, args: ['enable-drag',] }],
        displaykey: [{ type: core.Input, args: ['display-key',] }],
        childarraykey: [{ type: core.Input, args: ['child-array-key',] }]
    };
    return AmexioSideNavComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioSideNavInnerNodeComponent = /** @class */ (function () {
    function AmexioSideNavInnerNodeComponent() {
        this.onClick = new core.EventEmitter();
        this.onDrag = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioSideNavInnerNodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioSideNavInnerNodeComponent.prototype.onNodeClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        node.expand = !node.expand;
        this.getOnClick(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioSideNavInnerNodeComponent.prototype.getOnClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onClick.emit(node);
        this.activateNode(this.data, node);
    };
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    AmexioSideNavInnerNodeComponent.prototype.activateNode = /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    function (data, node) {
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var i = data_1[_i];
            if (node === i && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioSideNavInnerNodeComponent.prototype.dragStartEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabledrag) {
            event.event.dataTransfer.setData('dragData', JSON.stringify(event.data));
            this.onDrag.emit(event);
        }
    };
    AmexioSideNavInnerNodeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-sidenav-innernode',
                    template: "\n    <ul>\n      <li *ngFor=\"let node of data\">\n\n        <div [attr.draggable]=\"enabledrag\" (dragstart)=\"dragStartEvent({event:$event,data:node})\" class=\"defaultnode\"\n          [ngClass]=\"{'activenode':node.active}\" (click)=\"onNodeClick(node)\">\n          <span *ngIf=\"node.icon\">\n            <amexio-nav-icon class=\"node-icon\" [customclass]=\"node.icon\"></amexio-nav-icon>\n          </span>\n          <span>{{node[displaykey]}}</span>\n          <ng-container *ngIf=\"node.badge\">\n            <span class=\"nav-badge\">{{node.badge}}</span>\n          </ng-container>\n          <ng-container *ngIf=\"node[childarraykey] && (node[childarraykey].length>0)\">\n            <span style=\"padding-right: 10px; float: right\" *ngIf=\"node.expand\">\n              <amexio-nav-icon key=\"itemselector_caretup\"></amexio-nav-icon>\n            </span>\n\n            <span style=\"padding-right: 10px;float: right;\" *ngIf=\"!node.expand\">\n              <amexio-nav-icon key=\"itemselector_caretdown\"></amexio-nav-icon>\n            </span>\n          </ng-container>\n        </div>\n        <div class=\"submenu-details\" [ngClass]=\"{'sidenav-submenu-expanded':node.expand}\">\n          <amexio-sidenav-innernode *ngIf=\"node[childarraykey] && (node[childarraykey].length>0)\" \n              [enable-drag]=\"enabledrag\" \n              (onDrag)=\"dragStartEvent($event)\"  \n            [display-key]=\"displaykey\"\n            [child-array-key]=\"childarraykey\" [data]=\"node[childarraykey]\" (onDrag)=\"dragStartEvent($event)\" (onClick)=\"getOnClick($event)\">\n          </amexio-sidenav-innernode>\n        </div>\n      </li>\n    </ul>\n  ",
                },] },
    ];
    AmexioSideNavInnerNodeComponent.propDecorators = {
        displaykey: [{ type: core.Input, args: ['display-key',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        childarraykey: [{ type: core.Input, args: ['child-array-key',] }],
        data: [{ type: core.Input, args: ['data',] }],
        onClick: [{ type: core.Output }],
        enabledrag: [{ type: core.Input, args: ['enable-drag',] }],
        onDrag: [{ type: core.Output }]
    };
    return AmexioSideNavInnerNodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
var SideNavNodeComponent = /** @class */ (function () {
    function SideNavNodeComponent() {
        /*
           Events
           name : nodeClick
           datatype : none
           version : none
           default : none
           description : Fire when sidenav bar menu click
           */
        this.nodeClick = new core.EventEmitter();
        /*
           Events
           name : onDrag
           datatype : none
           version : 4.2.9
           default : none
           description : Fire when you drag node
           */
        this.onDrag = new core.EventEmitter();
        this.expand = false;
        this.displaykey = 'text';
        this.childarraykey = 'children';
    }
    /**
     * @return {?}
     */
    SideNavNodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.node && !this.label) {
            this.expand = true;
            this.collapsable = false;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SideNavNodeComponent.prototype.onClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.expand = !this.expand;
        this.nodeClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SideNavNodeComponent.prototype.onNodeClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClick.emit(node);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SideNavNodeComponent.prototype.dragStartEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabledrag) {
            event.event.dataTransfer.setData('dragData', JSON.stringify(event.data));
            this.onDrag.emit(event);
        }
    };
    SideNavNodeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-sidenav-node', template: "\n    <li>\n      <div *ngIf=\"enableborder\" class=\"border\"></div>\n      <div *ngIf=\"label || badge || icon\" [attr.draggable]=\"enabledrag\" (dragstart)=\"dragStartEvent({event:$event,data:node})\" class=\"headernode\" [ngClass]=\"{'activenode':active}\"\n         (click)=\"onClick(nodedata)\">\n        <amexio-nav-icon  *ngIf=\"icon\" class=\"node-icon\" [customclass]=\"icon\"></amexio-nav-icon>\n        <span>{{label}} </span>\n\n          <span *ngIf=\"badge\" class=\"nav-badge\" >{{badge}}</span>\n\n        <ng-container *ngIf=\"(node  && (node.length>0)) || collapsable\" >\n          <span style=\"padding-right: 10px; float: right\" *ngIf=\"expand\" ><amexio-nav-icon key=\"sidenav-angle-up\"></amexio-nav-icon></span>\n          <span style=\"padding-right: 10px;float: right\" *ngIf=\"!expand\" ><amexio-nav-icon key=\"sidenav-angle-down\"></amexio-nav-icon></span>\n        </ng-container>\n   \n      </div>\n      <div *ngIf=\"node\"  class=\"sidenav-submenu-details sidenav-submenu-expanded\"  [ngClass]=\"{'sidenav-submenu-expanded':expand}\">\n        <amexio-sidenav-innernode *ngIf=\"node && (node.length>0)\" \n            (onClick)=\"onNodeClick($event)\"\n            [display-key]=\"displaykey\" \n            [child-array-key]=\"childarraykey\"  \n            [enable-drag]=\"enabledrag\" \n            (onDrag)=\"dragStartEvent($event)\"  \n            [data]=\"node\">\n        </amexio-sidenav-innernode>\n      </div>\n\n      <div class=\"sidenav-submenu-details\" style=\"padding-right: 20px;\"  [ngClass]=\"{'sidenav-submenu-expanded':expand}\" >\n          <ng-content></ng-content>\n      </div> \n    </li>\n  ",
                },] },
    ];
    /** @nocollapse */
    SideNavNodeComponent.ctorParameters = function () { return []; };
    SideNavNodeComponent.propDecorators = {
        nodedata: [{ type: core.Input, args: ['node',] }],
        badge: [{ type: core.Input, args: ['badge',] }],
        icon: [{ type: core.Input, args: ['icon',] }],
        label: [{ type: core.Input, args: ['label',] }],
        enableborder: [{ type: core.Input, args: ['enable-border',] }],
        active: [{ type: core.Input, args: ['active',] }],
        collapsable: [{ type: core.Input, args: ['collapsable',] }],
        node: [{ type: core.Input, args: ['data',] }],
        enabledrag: [{ type: core.Input, args: ['enable-drag',] }],
        nodeClick: [{ type: core.Output }],
        onDrag: [{ type: core.Output }],
        displaykey: [{ type: core.Input, args: ['display-key',] }],
        childarraykey: [{ type: core.Input, args: ['child-array-key',] }],
        expand: [{ type: core.Input }]
    };
    return SideNavNodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NAV_COMPONENTS = [
    AmexioSideNavComponent,
    SideNavNodeComponent,
    AmexioNavBarComponent,
    AmexioNavItemComponent,
    AmexioNotificationComponent,
    AmexioNavActionComponent,
    AmexioNavTextFieldComponent,
    AmexioNavMenuComponent,
    AmexioNavItemComponent,
    DockbarComponent,
    DockedBarToolComponent,
    AmexioMenuBarComponent,
    AmexioNavIconPaneComponent,
    AmexioBreadcrumbComponent,
    AmexioSideNavInnerNodeComponent,
];
var AmexioNavModule = /** @class */ (function () {
    function AmexioNavModule() {
    }
    /**
     * @return {?}
     */
    AmexioNavModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioNavModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService],
        };
    };
    AmexioNavModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        AmexioMediaModule,
                        AmexioLayoutModule,
                        AmexioFormsModule,
                        HttpClientModule,
                    ],
                    exports: NAV_COMPONENTS,
                    declarations: NAV_COMPONENTS,
                    providers: [CommonDataService, DeviceQueryService, IconLoaderService],
                },] },
    ];
    return AmexioNavModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var Icon = {
    fontawesome: 'fa',
    material: 'mat',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GridConstants = /** @class */ (function () {
    function GridConstants() {
    }
    GridConstants.Tablet = 'tab';
    GridConstants.Desktop = 'desktop';
    GridConstants.Mobile = 'mobile';
    return GridConstants;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioGridModel = /** @class */ (function () {
    function AmexioGridModel() {
        this.name = '';
        this.desktop = [];
        this.mobile = [];
        this.tab = [];
        this.layoutType = '';
    }
    return AmexioGridModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GridConfig = /** @class */ (function () {
    function GridConfig(layoutName, layoutType) {
        this.amexiogridmodel = new AmexioGridModel();
        this.amexiogridmodel.layoutType = layoutType;
        this.amexiogridmodel.name = layoutName;
        return this;
    }
    /**
     * @param {?} layout
     * @return {?}
     */
    GridConfig.prototype.addlayout = /**
     * @param {?} layout
     * @return {?}
     */
    function (layout) {
        this.count = layout.length;
        if (this.amexiogridmodel.layoutType === '') {
            this.amexiogridmodel.layoutType = GridConstants.Desktop;
        }
        this.amexiogridmodel[this.amexiogridmodel.layoutType].push(layout);
        return this;
    };
    /**
     * @return {?}
     */
    GridConfig.prototype.getLayout = /**
     * @return {?}
     */
    function () {
        return this.amexiogridmodel;
    };
    return GridConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AmexioWidgetModule = /** @class */ (function () {
    function AmexioWidgetModule() {
    }
    /**
     * @return {?}
     */
    AmexioWidgetModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioWidgetModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService],
        };
    };
    AmexioWidgetModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        AmexioFormsModule,
                        AmexioNavModule,
                        AmexioDataModule,
                        AmexioLayoutModule,
                        AmexioMediaModule,
                        AmexioPaneModule,
                        HttpClientModule,
                    ],
                    entryComponents: [AmexioTabPillComponent],
                    exports: [
                        AmexioFormsModule,
                        AmexioNavModule,
                        AmexioDataModule,
                        AmexioLayoutModule,
                        AmexioMediaModule,
                        AmexioPaneModule,
                    ],
                    declarations: [],
                    providers: [CommonDataService, DeviceQueryService, IconLoaderService],
                },] },
    ];
    return AmexioWidgetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var DashBoardTitleComponent = /** @class */ (function () {
    function DashBoardTitleComponent() {
    }
    /**
     * @return {?}
     */
    DashBoardTitleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    DashBoardTitleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dashboard-title', template: " ",
                },] },
    ];
    /** @nocollapse */
    DashBoardTitleComponent.ctorParameters = function () { return []; };
    DashBoardTitleComponent.propDecorators = {
        title: [{ type: core.Input }],
        position: [{ type: core.Input }],
        color: [{ type: core.Input }],
        fontname: [{ type: core.Input, args: ['font-name',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        bold: [{ type: core.Input }],
        italic: [{ type: core.Input }]
    };
    return DashBoardTitleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 7/25/17.
 */
var DataPointCenterComponent = /** @class */ (function () {
    function DataPointCenterComponent() {
    }
    /**
     * @return {?}
     */
    DataPointCenterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    DataPointCenterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-center', template: "\n\n    <div [ngClass]=\"cclass\" [attr.align]=\"contentalign\" [style.background-color]=\"backgroundcolor\"\n         [style.color]=\"fontcolor\" [style.width]=\"width\" [style.height]=\"height\">\n      <ng-content></ng-content>\n    </div>",
                },] },
    ];
    /** @nocollapse */
    DataPointCenterComponent.ctorParameters = function () { return []; };
    DataPointCenterComponent.propDecorators = {
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        cclass: [{ type: core.Input, args: ['c-class',] }]
    };
    return DataPointCenterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 8/16/17.
 */
var DataPointsComponent = /** @class */ (function () {
    function DataPointsComponent() {
        this.colspan = 1;
    }
    /**
     * @return {?}
     */
    DataPointsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.amexiocolor !== '') {
            this.dpClass = this.amexiocolor;
        }
        if (this.west) {
            this.colspan++;
        }
        if (this.east) {
            this.colspan++;
        }
    };
    DataPointsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-datapoints', template: "\n\n  <div class=\"datapoints\" [ngClass]=\"dpClass\">\n      <table width=\"100%\" [style.background-color]=\"backgroundcolor\" [style.color]=\"fontcolor\">\n        <tr *ngIf=\"north\">\n          <td [attr.colspan]=\"colspan\">\n            <ng-content select=\"amexio-north\"></ng-content>\n          </td>\n        </tr>\n        <tr>\n          <td *ngIf=\"west\">\n            <ng-content select=\"amexio-west\"></ng-content>\n          </td>\n          <td *ngIf=\"center\">\n            <ng-content select=\"amexio-center\"></ng-content>\n          </td>\n          <td *ngIf=\"east\">\n            <ng-content select=\"amexio-east\"></ng-content>\n          </td>\n        </tr>\n        <tr *ngIf=\"south\">\n          <td [attr.colspan]=\"colspan\">\n            <ng-content select=\"amexio-south\"></ng-content>\n          </td>\n        </tr>\n      </table>\n    </div>\n\n\n  ", styles: ["\n    .amexio-datapoints {\n\n    }\n  "],
                },] },
    ];
    /** @nocollapse */
    DataPointsComponent.ctorParameters = function () { return []; };
    DataPointsComponent.propDecorators = {
        north: [{ type: core.Input }],
        south: [{ type: core.Input }],
        west: [{ type: core.Input }],
        center: [{ type: core.Input }],
        east: [{ type: core.Input }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        amexiocolor: [{ type: core.Input, args: ['amexio-color',] }]
    };
    return DataPointsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 7/25/17.
 */
var DataPointEastComponent = /** @class */ (function () {
    function DataPointEastComponent() {
    }
    /**
     * @return {?}
     */
    DataPointEastComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.cclass == null) {
            this.cclass = 'datapoint-east';
        }
    };
    DataPointEastComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-east', template: "\n\n    <div [ngClass]=\"cclass\" class=\"datapoint-east\" [attr.align]=\"contentalign\" [style.background-color]=\"backgroundcolor\"\n         [style.color]=\"fontcolor\" [style.width]=\"width\" [style.height]=\"height\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DataPointEastComponent.ctorParameters = function () { return []; };
    DataPointEastComponent.propDecorators = {
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        cclass: [{ type: core.Input, args: ['c-class',] }]
    };
    return DataPointEastComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 7/25/17.
 */
var DataPointNorthComponent = /** @class */ (function () {
    function DataPointNorthComponent() {
    }
    /**
     * @return {?}
     */
    DataPointNorthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.cclass == null) {
            this.cclass = 'datapoints-north';
        }
    };
    DataPointNorthComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-north', template: "\n\n    <div [ngClass]=\"cclass\" [attr.align]=\"contentalign\" [style.background-color]=\"backgroundcolor\"\n         [style.color]=\"fontcolor\" [style.width]=\"width\" [style.height]=\"height\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DataPointNorthComponent.ctorParameters = function () { return []; };
    DataPointNorthComponent.propDecorators = {
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        cclass: [{ type: core.Input, args: ['c-class',] }]
    };
    return DataPointNorthComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 7/25/17.
 */
var DataPointSouthComponent = /** @class */ (function () {
    function DataPointSouthComponent() {
    }
    /**
     * @return {?}
     */
    DataPointSouthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.cclass == null) {
            this.cclass = 'datapoint-south';
        }
    };
    DataPointSouthComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-south', template: "\n\n    <div [ngClass]=\"cclass\" [attr.align]=\"contentalign\" [style.background-color]=\"backgroundcolor\"\n         [style.color]=\"fontcolor\" [style.width]=\"width\" [style.height]=\"height\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DataPointSouthComponent.ctorParameters = function () { return []; };
    DataPointSouthComponent.propDecorators = {
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        cclass: [{ type: core.Input, args: ['c-class',] }]
    };
    return DataPointSouthComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 7/25/17.
 */
var DataPointWestComponent = /** @class */ (function () {
    function DataPointWestComponent() {
    }
    /**
     * @return {?}
     */
    DataPointWestComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.cclass == null) {
            this.cclass = 'datapoint-west';
        }
    };
    DataPointWestComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-west', template: "\n\n    <div [ngClass]=\"cclass\" [attr.align]=\"contentalign\" [style.background-color]=\"backgroundcolor\"\n         [style.color]=\"fontcolor\" [style.width]=\"width\" [style.height]=\"height\">\n      <ng-content></ng-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DataPointWestComponent.ctorParameters = function () { return []; };
    DataPointWestComponent.propDecorators = {
        contentalign: [{ type: core.Input, args: ['content-align',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        fontcolor: [{ type: core.Input, args: ['font-color',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        cclass: [{ type: core.Input, args: ['c-class',] }]
    };
    return DataPointWestComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashboardLoaderService = /** @class */ (function () {
    function DashboardLoaderService() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new core.EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    DashboardLoaderService.prototype.loadCharts = /**
     * @param {?} chartName
     * @return {?}
     */
    function (chartName) {
        var _this = this;
        return new rxjs_1(function (observer) {
            _this.loadScript().subscribe(function (val) { return console.log(); }, function (error) { return console.error(error); }, function () {
                _this.loadRequiredChart(observer, chartName);
            });
        });
    };
    /**
     * @return {?}
     */
    DashboardLoaderService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new rxjs_1(function (observer) {
            if (!_this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    // check if chart package has been loaded using chartPackagename ?
                    _this.loadBaseChart(observer);
                }
                else {
                    _this.isScriptLoading = true;
                    var /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.isScriptLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        _this.loadBaseChart(observer);
                    };
                    script.onerror = function () {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        _this.loadBaseChart(observer);
                    }
                });
            }
        });
    };
    /**
     * Load Base Chart
     * @param observer
     */
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    DashboardLoaderService.prototype.loadBaseChart = /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    function (observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            observer.complete();
        });
    };
    /**
     * Load the required charts
     * @param chartName
     */
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    DashboardLoaderService.prototype.loadRequiredChart = /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    function (observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(function () {
                observer.complete();
            });
        }
    };
    DashboardLoaderService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    DashboardLoaderService.ctorParameters = function () { return []; };
    return DashboardLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var GaugeChartComponent = /** @class */ (function () {
    function GaugeChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(GaugeChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : Local data for gauge chart
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.gaugeData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                width: this.width,
                height: this.height,
                redFrom: this.redcolorfrom,
                redTo: this.redcolorto,
                yellowFrom: this.yellowcolorfrom,
                yellowTo: this.yellowcolorto,
                scalevalue: this.scalevalue,
            };
            if (this.gaugeData) {
                this.chart = new google.visualization.Gauge(this.gaugedashboard.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.gaugeData, this.options);
            }
        }
    };
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
    };
    /**
     * @return {?}
     */
    GaugeChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Gauge').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GaugeChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    GaugeChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-dashboard-gauge', template: "\n    <div *ngIf=\"showChart\" #gaugedashboard\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    GaugeChartComponent.ctorParameters = function () { return [
        { type: DashboardLoaderService }
    ]; };
    GaugeChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        redcolorfrom: [{ type: core.Input, args: ['red-color-from',] }],
        redcolorto: [{ type: core.Input, args: ['red-color-to',] }],
        yellowcolorfrom: [{ type: core.Input, args: ['yellow-color-from',] }],
        yellowcolorto: [{ type: core.Input, args: ['yellow-color-to',] }],
        scalevalue: [{ type: core.Input, args: ['scale-value',] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [DashBoardTitleComponent,] }],
        gaugedashboard: [{ type: core.ViewChild, args: ['gaugedashboard',] }]
    };
    return GaugeChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DASHBOARD = [
    DashBoardTitleComponent,
    DataPointCenterComponent,
    DataPointsComponent,
    DataPointEastComponent,
    DataPointNorthComponent,
    DataPointSouthComponent,
    DataPointWestComponent,
    GaugeChartComponent,
];
var AmexioDashBoardModule = /** @class */ (function () {
    function AmexioDashBoardModule() {
    }
    /**
     * @return {?}
     */
    AmexioDashBoardModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioDashBoardModule,
            providers: [CommonDataService, DashboardLoaderService],
        };
    };
    AmexioDashBoardModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        HttpClientModule,
                    ],
                    exports: DASHBOARD,
                    declarations: DASHBOARD,
                    providers: [CommonDataService, DashboardLoaderService],
                },] },
    ];
    return AmexioDashBoardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartAreaComponent = /** @class */ (function () {
    function ChartAreaComponent() {
    }
    /**
     * @return {?}
     */
    ChartAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ChartAreaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-area-properties', template: "",
                },] },
    ];
    /** @nocollapse */
    ChartAreaComponent.ctorParameters = function () { return []; };
    ChartAreaComponent.propDecorators = {
        chartbackgroundcolor: [{ type: core.Input, args: ['chart-background-color',] }],
        leftposition: [{ type: core.Input, args: ['left-position',] }],
        topposition: [{ type: core.Input, args: ['top-position',] }],
        chartwidth: [{ type: core.Input, args: ['chart-width',] }],
        chartheight: [{ type: core.Input, args: ['chart-height',] }]
    };
    return ChartAreaComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartLegendComponent = /** @class */ (function () {
    function ChartLegendComponent() {
        /*
        Properties
        name : bold
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Set true for Legend text in bold
        */
        this.bold = false;
    }
    /**
     * @return {?}
     */
    ChartLegendComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ChartLegendComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-legend', template: " ",
                },] },
    ];
    /** @nocollapse */
    ChartLegendComponent.ctorParameters = function () { return []; };
    ChartLegendComponent.propDecorators = {
        position: [{ type: core.Input }],
        alignment: [{ type: core.Input }],
        color: [{ type: core.Input }],
        fontname: [{ type: core.Input, args: ['font-name',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        bold: [{ type: core.Input }],
        maxlines: [{ type: core.Input, args: ['max-lines',] }]
    };
    return ChartLegendComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartTitleComponent = /** @class */ (function () {
    function ChartTitleComponent() {
    }
    /**
     * @return {?}
     */
    ChartTitleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ChartTitleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-title', template: " ",
                },] },
    ];
    /** @nocollapse */
    ChartTitleComponent.ctorParameters = function () { return []; };
    ChartTitleComponent.propDecorators = {
        title: [{ type: core.Input }],
        position: [{ type: core.Input }],
        color: [{ type: core.Input }],
        fontname: [{ type: core.Input, args: ['font-name',] }],
        fontsize: [{ type: core.Input, args: ['font-size',] }],
        bold: [{ type: core.Input }],
        italic: [{ type: core.Input }]
    };
    return ChartTitleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ChartLoaderService = /** @class */ (function () {
    function ChartLoaderService() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new core.EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    ChartLoaderService.prototype.loadCharts = /**
     * @param {?} chartName
     * @return {?}
     */
    function (chartName) {
        var _this = this;
        return new rxjs_1(function (observer) {
            _this.loadScript().subscribe(function (val) { return console.log(); }, function (error) { return console.error(error); }, function () {
                _this.loadRequiredChart(observer, chartName);
            });
        });
    };
    /**
     * @return {?}
     */
    ChartLoaderService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new rxjs_1(function (observer) {
            if (!_this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    // check if chart package has been loaded using chartPackagename ?
                    _this.loadBaseChart(observer);
                }
                else {
                    _this.isScriptLoading = true;
                    var /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.isScriptLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        _this.loadBaseChart(observer);
                    };
                    script.onerror = function () {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        _this.loadBaseChart(observer);
                    }
                });
            }
        });
    };
    /**
     * Load Base Chart
     * @param observer
     */
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    ChartLoaderService.prototype.loadBaseChart = /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    function (observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            observer.complete();
        });
    };
    /**
     * Load the required charts
     * @param chartName
     */
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    ChartLoaderService.prototype.loadRequiredChart = /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    function (observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(function () {
                observer.complete();
            });
        }
    };
    ChartLoaderService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ChartLoaderService.ctorParameters = function () { return []; };
    return ChartLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var AreaChartComponent = /** @class */ (function () {
    function AreaChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(AreaChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default :
      description : Local data for AreaChart
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.areaData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.createTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartArea() : null,
            };
            if (this.areaData) {
                this.chart = new google.visualization.AreaChart(this.areachart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.areaData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.createTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.createChartLegend = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.createChartArea = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    AreaChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('AreaChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AreaChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    AreaChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-area', template: "\n    <div *ngIf=\"showChart\" #areachart\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    AreaChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    AreaChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        areachart: [{ type: core.ViewChild, args: ['areachart',] }]
    };
    return AreaChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var BarChartComponent = /** @class */ (function () {
    function BarChartComponent(loader) {
        this.loader = loader;
        // showing stack chart
        /*
        Properties
        name : stacked
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : If set to true, stacks the elements for all series at each domain value.default value is false
        */
        this.stacked = false;
        this.width = '100%';
    }
    Object.defineProperty(BarChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default :
      description : Local data for AreaChart
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.showChart = true;
                this._data = data;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BarChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            // bind the data
            this.barData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                isStacked: this.stacked,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartBar() : null,
                hAxis: {
                    title: this.xaxistitle, minvalue: 0,
                },
                vAxis: {
                    title: this.yaxistitle,
                },
            };
            if (this.barData) {
                this.chart = new google.visualization.BarChart(this.barchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.barData, this.options);
            }
        }
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.chartTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.createChartLegend = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.createChartBar = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('BarChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BarChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    BarChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-bar', template: "\n    <div *ngIf=\"showChart\" #barchart\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    BarChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    BarChartComponent.propDecorators = {
        data: [{ type: core.Input, args: ['data',] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        stacked: [{ type: core.Input }],
        xaxistitle: [{ type: core.Input, args: ['x-axis-title',] }],
        yaxistitle: [{ type: core.Input, args: ['y-axis-title',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        barchart: [{ type: core.ViewChild, args: ['barchart',] }]
    };
    return BarChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var HorizontalAxisComponent = /** @class */ (function () {
    function HorizontalAxisComponent() {
    }
    /**
     * @return {?}
     */
    HorizontalAxisComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    HorizontalAxisComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-horizontal-axis', template: " ",
                },] },
    ];
    /** @nocollapse */
    HorizontalAxisComponent.ctorParameters = function () { return []; };
    HorizontalAxisComponent.propDecorators = {
        title: [{ type: core.Input }],
        titlecolor: [{ type: core.Input, args: ['title-color',] }]
    };
    return HorizontalAxisComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var VerticalAxisComponent = /** @class */ (function () {
    function VerticalAxisComponent() {
    }
    /**
     * @return {?}
     */
    VerticalAxisComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    VerticalAxisComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-vertical-axis', template: " ",
                },] },
    ];
    /** @nocollapse */
    VerticalAxisComponent.ctorParameters = function () { return []; };
    VerticalAxisComponent.propDecorators = {
        title: [{ type: core.Input }],
        titlecolor: [{ type: core.Input, args: ['title-color',] }]
    };
    return VerticalAxisComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var BubbleChartComponent = /** @class */ (function () {
    function BubbleChartComponent(loader) {
        this.loader = loader;
        /*
        Properties
        name : axis-color
        datatype : any
        version : 4.0 onwards
        default : none
        description : An object that specifies a mapping between color column values and
        colors or a gradient scale.example:['#FF0000', '#00FF00'] or ['yellow', 'red']
        */
        this.axiscolor = [];
        this.width = '100%';
    }
    Object.defineProperty(BubbleChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default : none
      description : Local data for AreaChart
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.bubbleData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.createTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartBackground() : null,
                vAxis: this.verticalComponent ? this.createChartVertical() : null,
                hAxis: this.horizontalComponent ? this.createchartHorizontal() : null,
                bubble: { textStyle: { fontsize: 11 } },
                axiscolor: { colors: this.axiscolor },
            };
            if (this.bubbleData) {
                this.chart = new google.visualization.BubbleChart(this.bubblechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.bubbleData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.createTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.createChartLegend = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.createChartBackground = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.createChartVertical = /**
     * @return {?}
     */
    function () {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.createchartHorizontal = /**
     * @return {?}
     */
    function () {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    BubbleChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('BubbleChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BubbleChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    BubbleChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-bubble',
                    template: "\n      <div *ngIf=\"showChart\" #bubblechart\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                    styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    BubbleChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    BubbleChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        axiscolor: [{ type: core.Input, args: ['axis-color',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        horizontalComp: [{ type: core.ContentChildren, args: [HorizontalAxisComponent,] }],
        verticalComp: [{ type: core.ContentChildren, args: [VerticalAxisComponent,] }],
        bubblechart: [{ type: core.ViewChild, args: ['bubblechart',] }]
    };
    return BubbleChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var CandlestickChartComponent = /** @class */ (function () {
    function CandlestickChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(CandlestickChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default : none
      description : Local data for AreaChart
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.candlestickData = google.visualization.arrayToDataTable(this._data, true);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTileTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: 'none',
                chartArea: this.chartAreaComponent ? this.chartLegendStyle() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
            };
            if (this.candlestickData) {
                this.chart = new google.visualization.CandlestickChart(this.candlestick.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.candlestickData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.chartTileTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.chartVerticalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.chartHorizontalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CandlestickChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CandlestickChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    CandlestickChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-candlestick', template: "\n    <div *ngIf=\"showChart\" #candlestick\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    CandlestickChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    CandlestickChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        horizontalComp: [{ type: core.ContentChildren, args: [HorizontalAxisComponent,] }],
        verticalComp: [{ type: core.ContentChildren, args: [VerticalAxisComponent,] }],
        candlestick: [{ type: core.ViewChild, args: ['candlestick',] }]
    };
    return CandlestickChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var CandlestickWaterfallChartComponent = /** @class */ (function () {
    function CandlestickWaterfallChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(CandlestickWaterfallChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default : none
      description : Local data for AreaChart
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.candlestickData = google.visualization.arrayToDataTable(this._data, true);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: 'none',
                chartArea: this.chartAreaComponent ? this.chartLegendStyle() : null,
                vAxis: this.verticalComponent ? this.chartVerticalComponent() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalComponent() : null,
                bar: { groupWidth: this.barwidth ? this.barwidth : null },
                // Remove space between bars.
                candlestick: this.chartColorStyle(),
            };
            if (this.candlestickData) {
                this.chart = new google.visualization.CandlestickChart(this.candlestickwaterfall.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.candlestickData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.chartTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.chartVerticalComponent = /**
     * @return {?}
     */
    function () {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.chartHorizontalComponent = /**
     * @return {?}
     */
    function () {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.chartColorStyle = /**
     * @return {?}
     */
    function () {
        return {
            fallingColor: this.fallingcolor ? { strokeWidth: 0, fill: this.fallingcolor ? this.fallingcolor : null } : null,
            // red
            risingColor: this.risingcolor ? { strokeWidth: 0, fill: this.risingcolor ? this.risingcolor : null } : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    CandlestickWaterfallChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-candlestick-waterfall', template: "\n    <div *ngIf=\"showChart\" #candlestickwaterfall\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    CandlestickWaterfallChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    CandlestickWaterfallChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        barwidth: [{ type: core.Input, args: ['bar-width',] }],
        fallingcolor: [{ type: core.Input, args: ['falling-color',] }],
        risingcolor: [{ type: core.Input, args: ['rising-color',] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        horizontalComp: [{ type: core.ContentChildren, args: [HorizontalAxisComponent,] }],
        verticalComp: [{ type: core.ContentChildren, args: [VerticalAxisComponent,] }],
        candlestickwaterfall: [{ type: core.ViewChild, args: ['candlestickwaterfall',] }]
    };
    return CandlestickWaterfallChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ColumnChartComponent = /** @class */ (function () {
    function ColumnChartComponent(loader) {
        this.loader = loader;
        // showing stack chart
        /*
        Properties
        name : stacked
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : If set to true, stacks the elements for all series at each domain value.default value is false
        */
        this.stacked = false;
        this.width = '100%';
    }
    Object.defineProperty(ColumnChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
       Properties
       name : data
       datatype : any
       version : 4.0 onwards
       default : none
       description : For the use of local data
       */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.columnData = this.createTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                isStacked: this.stacked,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackGroundColor() : null,
            };
            if (this.columnData) {
                this.chart = new google.visualization.ColumnChart(this.columnchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.columnData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.chartTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.chartBackGroundColor = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ColumnChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    // This method create data table structure of array and return in required chart data
    /**
     * @param {?} array
     * @return {?}
     */
    ColumnChartComponent.prototype.createTable = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        // create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach(function (datatypeObject) {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ColumnChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColumnChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    ColumnChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-column', template: "\n    <div  *ngIf=\"showChart\" #columnchart\n         [style.width]=\"width\"\n         [style.height]=\"height\"\n         (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    ColumnChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    ColumnChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        stacked: [{ type: core.Input }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        columnchart: [{ type: core.ViewChild, args: ['columnchart',] }]
    };
    return ColumnChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ComboChartComponent = /** @class */ (function () {
    function ComboChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(ComboChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.comboData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackground() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
                seriesType: 'bars',
                series: { 4: { type: 'line' } },
            };
            if (this.comboData) {
                this.chart = new google.visualization.ComboChart(this.combochart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.comboData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComboChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.chartTitleStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.chartBackground = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.chartVerticalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.chartHorizontalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ComboChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    ComboChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-combo', template: "\n    <div *ngIf=\"showChart\" #combochart\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    ComboChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    ComboChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        horizontalComp: [{ type: core.ContentChildren, args: [HorizontalAxisComponent,] }],
        verticalComp: [{ type: core.ContentChildren, args: [VerticalAxisComponent,] }],
        combochart: [{ type: core.ViewChild, args: ['combochart',] }]
    };
    return ComboChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var DonutChartComponent = /** @class */ (function () {
    function DonutChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(DonutChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.donutData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chariTitleTextStyle() : null,
                pieHole: 0.4,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundColor() : null,
            };
            if (this.donutData) {
                this.chart = new google.visualization.PieChart(this.donutchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.donutData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.chariTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.chartBackgroundColor = /**
     * @return {?}
     */
    function () {
        return { backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DonutChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    DonutChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-donut', template: "\n    <div *ngIf=\"showChart\" #donutchart\n         [style.width]=\"width\"\n         [style.height]=\"height\"\n         (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    DonutChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    DonutChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        donutchart: [{ type: core.ViewChild, args: ['donutchart',] }]
    };
    return DonutChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2017-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var GanttChartComponent = /** @class */ (function () {
    function GanttChartComponent(loader) {
        this.loader = loader;
        /*
        Properties
        name : critical-path-enabled
        datatype : boolean
        version : 4.3 onwards
        default : false
        description : If you set the criticalPathEnabled option to true, it show critical path line
        */
        this.criticalPathEnabled = false;
        this.width = '100%';
    }
    Object.defineProperty(GanttChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.3 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GanttChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.data && this.showChart) {
            this.hasLoaded = true;
            this.options = { gantt: { criticalPathEnabled: this.criticalPathEnabled,
                    criticalPathStyle: { stroke: '#e64a19',
                        strokeWidth: 5 } },
                innerGridTrack: { fill: this.innerGridTrackColor ? this.innerGridTrackColor : '' },
                innerGridDarkTrack: { fill: this.innerGridDarkTrack ? this.innerGridDarkTrack : '' },
            };
            if (google && google.visualization) {
                this.chart = new google.visualization.Gantt(this.ganttchart.nativeElement);
                this.chart.draw(this.createTable(this._data), this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
            else {
                this.hasLoaded = false;
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GanttChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @param {?} array
     * @return {?}
     */
    GanttChartComponent.prototype.createTable = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        var /** @type {?} */ copyOfArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = copyOfArray[0];
        copyOfArray.shift();
        labelObject.forEach(function (datatypeObject) {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        var /** @type {?} */ newArray = [];
        copyOfArray.forEach(function (rowObject) {
            newArray.push(rowObject);
        });
        data.addRows(newArray);
        return data;
    };
    /**
     * @return {?}
     */
    GanttChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Gantt').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    GanttChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-gantt', template: "\n    <div *ngIf='showChart' #gantt\n         [style.width]='width'\n    >\n      <div *ngIf='!hasLoaded' class='lmask'>\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    GanttChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    GanttChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        criticalPathEnabled: [{ type: core.Input, args: ['critical-path-enabled',] }],
        innerGridTrackColor: [{ type: core.Input, args: ['inner-grid-track-color',] }],
        innerGridDarkTrack: [{ type: core.Input, args: ['inner-grid-dark-track-color',] }],
        ganttchart: [{ type: core.ViewChild, args: ['gantt',] }]
    };
    return GanttChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var HistogramChartComponent = /** @class */ (function () {
    function HistogramChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(HistogramChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.histogramData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.charttitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackground() : null,
            };
            if (this.histogramData) {
                this.chart = new google.visualization.Histogram(this.histogramchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.histogramData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    HistogramChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.charttitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.chartegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.chartBackground = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Histogram').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    HistogramChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-histogram',
                    template: "\n      <div *ngIf=\"showChart\" #histogramchart\n           [style.width]=\"width\"\n           [style.height]=\"height\"\n      >\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                    styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    HistogramChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    HistogramChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        histogramchart: [{ type: core.ViewChild, args: ['histogramchart',] }]
    };
    return HistogramChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var LineChartComponent = /** @class */ (function () {
    function LineChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(LineChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LineChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.lineData = this.createTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundStyle() : null,
            };
            if (this.lineData) {
                this.chart = new google.visualization.LineChart(this.linechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.lineData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.chartTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.chartBackgroundStyle = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LineChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    LineChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    // This method create data table structure of array and return in required chart data
    /**
     * @param {?} array
     * @return {?}
     */
    LineChartComponent.prototype.createTable = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        // create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach(function (datatypeObject) {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('LineChart').subscribe(function (value) { return console.log(); }, function (error) { return console.error(error); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LineChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    LineChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-line', template: "\n    <div *ngIf=\"showChart\" #linechart\n         [style.width]=\"width\"\n         [style.height]=\"height\"\n         (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    LineChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    LineChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        linechart: [{ type: core.ViewChild, args: ['linechart',] }]
    };
    return LineChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PieChartComponent = /** @class */ (function () {
    function PieChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(PieChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
      Properties
      name : data
      datatype : any
      version : 4.0 onwards
      default : none
      description : sets the pie hole size
      */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PieChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.pieData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.charttitleTextStyle() : null,
                is3D: this.is3d,
                pieHole: this.piehole,
                startangle: this.startangle,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLengendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundStyle() : null,
            };
            if (this.pieData) {
                this.chart = new google.visualization.PieChart(this.piechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.pieData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.charttitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.chartLengendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.chartBackgroundStyle = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PieChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    PieChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe(function (value) { return console.log(); }, function (error) { return console.error(error); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PieChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    PieChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-pie', template: "\n\n        <div *ngIf=\"showChart\" #piechart\n             [style.width]=\"width\"\n             [style.height]=\"height\"\n             (window:resize)=\"onResize($event)\">\n          <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n          </div>\n        </div>\n  ",
                    styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    PieChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    PieChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        is3d: [{ type: core.Input }],
        piehole: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        startangle: [{ type: core.Input, args: ['start-angle',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        piechart: [{ type: core.ViewChild, args: ['piechart',] }]
    };
    return PieChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ScatterChartComponent = /** @class */ (function () {
    function ScatterChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(ScatterChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.scatterData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundColor() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
            };
            if (this.scatterData) {
                this.chart = new google.visualization.ScatterChart(this.scatterchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.scatterData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.chartTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.chartLegendStyle = /**
     * @return {?}
     */
    function () {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.chartBackgroundColor = /**
     * @return {?}
     */
    function () {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.chartVerticalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.chartHorizontalStyle = /**
     * @return {?}
     */
    function () {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ScatterChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ScatterChart').subscribe(function (value) { return console.log(); }, function (error) { return console.error(error); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ScatterChartComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    ScatterChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-scatter', template: "\n    <div *ngIf=\"showChart\" #scatterchart\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    ScatterChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    ScatterChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        horizontalComp: [{ type: core.ContentChildren, args: [HorizontalAxisComponent,] }],
        verticalComp: [{ type: core.ContentChildren, args: [VerticalAxisComponent,] }],
        scatterchart: [{ type: core.ViewChild, args: ['scatterchart',] }]
    };
    return ScatterChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var TimeLineChartComponent = /** @class */ (function () {
    function TimeLineChartComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(TimeLineChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : For the use of local data
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.data && this.showChart) {
            this.chart = new google.visualization.Timeline(this.timelinechart.nativeElement);
            this.hasLoaded = true;
            this.chart.draw(this.createTable(this._data));
            google.visualization.events.addListener(this.chart, 'click', this.onClick);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TimeLineChartComponent.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    // after content init for inner directive is run
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    // This method create data table structure of array and return in required chart data
    /**
     * @param {?} array
     * @return {?}
     */
    TimeLineChartComponent.prototype.createTable = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        // create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach(function (datatypeObject) {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Timeline').subscribe(function (value) { return console.log(); }, function (error) { return console.error(error); }, function () {
            _this.drawChart();
        });
    };
    TimeLineChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-chart-timeline', template: "\n    <div *ngIf=\"showChart\" #timelinechart\n         [style.width]=\"width\"\n    >\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    TimeLineChartComponent.ctorParameters = function () { return [
        { type: ChartLoaderService }
    ]; };
    TimeLineChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        chartLegendComp: [{ type: core.ContentChildren, args: [ChartLegendComponent,] }],
        chartTitleComp: [{ type: core.ContentChildren, args: [ChartTitleComponent,] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [ChartAreaComponent,] }],
        timelinechart: [{ type: core.ViewChild, args: ['timelinechart',] }]
    };
    return TimeLineChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CHART_COMPONENTS = [
    AreaChartComponent, BarChartComponent, ChartAreaComponent,
    ChartLegendComponent, ChartTitleComponent, ColumnChartComponent,
    DonutChartComponent, GanttChartComponent, HistogramChartComponent, LineChartComponent,
    PieChartComponent, TimeLineChartComponent, ComboChartComponent,
    VerticalAxisComponent,
    HorizontalAxisComponent,
    BubbleChartComponent,
    ScatterChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent,
];
var AmexioChartsModule = /** @class */ (function () {
    function AmexioChartsModule() {
    }
    /**
     * @return {?}
     */
    AmexioChartsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioChartsModule,
            providers: [CommonDataService, ChartLoaderService],
        };
    };
    AmexioChartsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        HttpClientModule,
                    ],
                    exports: CHART_COMPONENTS,
                    declarations: CHART_COMPONENTS,
                    providers: [CommonDataService, ChartLoaderService],
                },] },
    ];
    return AmexioChartsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MapLoaderService = /** @class */ (function () {
    function MapLoaderService() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new core.EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    MapLoaderService.prototype.loadCharts = /**
     * @param {?} chartName
     * @return {?}
     */
    function (chartName) {
        var _this = this;
        return new rxjs_1(function (observer) {
            _this.loadScript().subscribe(function (val) { return console.log(); }, function (error) { return console.error(error); }, function () {
                _this.loadRequiredChart(observer, chartName);
            });
        });
    };
    /**
     * @return {?}
     */
    MapLoaderService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new rxjs_1(function (observer) {
            if (!_this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    // check if chart package has been loaded using chartPackagename ?
                    _this.loadBaseChart(observer);
                }
                else {
                    _this.isScriptLoading = true;
                    var /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.isScriptLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        _this.loadBaseChart(observer);
                    };
                    script.onerror = function () {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        _this.loadBaseChart(observer);
                    }
                });
            }
        });
    };
    /**
     *  Load Base Chart
     * @param observer
     */
    /**
     *  Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    MapLoaderService.prototype.loadBaseChart = /**
     *  Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    function (observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            observer.complete();
        });
    };
    /**
     *  Load the required charts
     * @param chartName
     */
    /**
     *  Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    MapLoaderService.prototype.loadRequiredChart = /**
     *  Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    function (observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(function () {
                observer.complete();
            });
        }
    };
    MapLoaderService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    MapLoaderService.ctorParameters = function () { return []; };
    return MapLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MapPropertiesComponent = /** @class */ (function () {
    function MapPropertiesComponent() {
    }
    /**
     * @return {?}
     */
    MapPropertiesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    MapPropertiesComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-map-properties', template: "",
                },] },
    ];
    /** @nocollapse */
    MapPropertiesComponent.ctorParameters = function () { return []; };
    MapPropertiesComponent.propDecorators = {
        chartbackgroundcolor: [{ type: core.Input, args: ['chart-background-color',] }],
        leftposition: [{ type: core.Input, args: ['left-position',] }],
        topposition: [{ type: core.Input, args: ['top-position',] }],
        chartwidth: [{ type: core.Input, args: ['chart-width',] }],
        chartheight: [{ type: core.Input, args: ['chart-height',] }]
    };
    return MapPropertiesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GeoChartComponent = /** @class */ (function () {
    function GeoChartComponent(loader) {
        this.loader = loader;
        /*
          not in use
        */
        this.countryname = false;
        this.width = '100%';
    }
    Object.defineProperty(GeoChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.geomapData = google.visualization.arrayToDataTable(this._data);
            this.showChartExist();
            if (this.geomapData) {
                this.chart = new google.visualization.GeoChart(this.geochart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.geomapData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.showChartExist = /**
     * @return {?}
     */
    function () {
        this.options = {
            displayMode: this.countryname ? 'text' : null,
            region: this.regioncode ? this.regioncode : null,
            backgroundcolor: this.backgroundcolor ? this.backgroundcolor : null,
            unusedregioncolor: this.unusedregioncolor ? this.unusedregioncolor : null,
            chartArea: this.chartAreaComponent ? {
                backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
                left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
                top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
                height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
                width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
            } : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GeoChartComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('GeoChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    GeoChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-map-geo-chart', template: "\n    <div *ngIf=\"showChart\" #geochart\n         [style.width]=\"width\"\n         [style.height]=\"height\"\n    >\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n"],
                },] },
    ];
    /** @nocollapse */
    GeoChartComponent.ctorParameters = function () { return [
        { type: MapLoaderService }
    ]; };
    GeoChartComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        countryname: [{ type: core.Input, args: ['country-name',] }],
        regioncode: [{ type: core.Input, args: ['region-code',] }],
        backgroundcolor: [{ type: core.Input, args: ['background-color',] }],
        unusedregioncolor: [{ type: core.Input, args: ['unused-region-color',] }],
        chartAreaComp: [{ type: core.ContentChildren, args: [MapPropertiesComponent,] }],
        geochart: [{ type: core.ViewChild, args: ['geochart',] }]
    };
    return GeoChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MapTitleComponent = /** @class */ (function () {
    function MapTitleComponent() {
    }
    /**
     * @return {?}
     */
    MapTitleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    MapTitleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-map-title', template: " ",
                },] },
    ];
    /** @nocollapse */
    MapTitleComponent.ctorParameters = function () { return []; };
    MapTitleComponent.propDecorators = {
        title: [{ type: core.Input }],
        position: [{ type: core.Input }],
        color: [{ type: core.Input }],
        fontname: [{ type: core.Input, args: ['font-name',] }],
        bold: [{ type: core.Input }],
        italic: [{ type: core.Input }]
    };
    return MapTitleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by sagar on 18/8/17.
 */
var TreeMapComponent = /** @class */ (function () {
    function TreeMapComponent(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    Object.defineProperty(TreeMapComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /*
        Properties
        name : data
        datatype : any
        version : 4.0 onwards
        default : none
        description : Local data for TreeMap.
        */
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._data = data;
                this.showChart = true;
            }
            else {
                this.showChart = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        if (this.showChart) {
            this.treemapData = google.visualization.arrayToDataTable(this._data);
            this.initializeOptions();
            if (this.treemapData) {
                this.chart = new google.visualization.TreeMap(this.treemapmap.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.treemapData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.initializeOptions = /**
     * @return {?}
     */
    function () {
        this.options = {
            title: this.mapTitleComponent ? this.mapTitleComponent.title : null,
            titleTextStyle: this.mapTitleComponent ? this.mapTitleTextStyle() : null,
            mincolor: this.mincolor ? this.mincolor : null, midcolor: this.midcolor ? this.midcolor : null,
            maxcolor: this.maxcolor ? this.maxcolor : null, headerHeight: 15, fontcolor: 'black',
            showscale: this.showscale ? this.showscale : false,
            maxpostdepth: this.maxpostdepth ? this.maxpostdepth : 1,
        };
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.mapTitleTextStyle = /**
     * @return {?}
     */
    function () {
        return {
            color: this.mapTitleComponent.color ? this.mapTitleComponent.color : null,
            fontName: this.mapTitleComponent.fontname ? this.mapTitleComponent.fontname : null,
            bold: this.mapTitleComponent.bold ? this.mapTitleComponent.bold : null,
            italic: this.mapTitleComponent.italic ? this.mapTitleComponent.italic : null,
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TreeMapComponent.prototype.click = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.mapTitleArray = this.maptleComp.toArray();
        if (this.mapTitleArray.length === 1) {
            this.mapTitleComponent = this.mapTitleArray.pop();
        }
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('TreeMap').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeMapComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.drawChart();
    };
    TreeMapComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-map-treemap', template: "\n    <div *ngIf=\"showChart\" #treemapmap\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\"\n    >\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ", styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n\n  .lmask.fixed {\n    position: fixed;\n  }\n\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "],
                },] },
    ];
    /** @nocollapse */
    TreeMapComponent.ctorParameters = function () { return [
        { type: MapLoaderService }
    ]; };
    TreeMapComponent.propDecorators = {
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        data: [{ type: core.Input, args: ['data',] }],
        mincolor: [{ type: core.Input, args: ['min-color',] }],
        midcolor: [{ type: core.Input, args: ['mid-color',] }],
        maxcolor: [{ type: core.Input, args: ['max-color',] }],
        showscale: [{ type: core.Input, args: ['show-scale',] }],
        maxpostdepth: [{ type: core.Input, args: ['max-post-depth',] }],
        maptleComp: [{ type: core.ContentChildren, args: [MapTitleComponent,] }],
        treemapmap: [{ type: core.ViewChild, args: ['treemapmap',] }]
    };
    return TreeMapComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MAP_COMPONENTS = [
    MapPropertiesComponent,
    GeoChartComponent,
    TreeMapComponent,
    MapTitleComponent,
];
var AmexioMapModule = /** @class */ (function () {
    function AmexioMapModule() {
    }
    /**
     * @return {?}
     */
    AmexioMapModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioMapModule,
            providers: [CommonDataService, MapLoaderService],
        };
    };
    AmexioMapModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        HttpClientModule,
                    ],
                    exports: MAP_COMPONENTS,
                    declarations: MAP_COMPONENTS,
                    providers: [CommonDataService, MapLoaderService],
                },] },
    ];
    return AmexioMapModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 18/1/18.
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Pratik Kelwalkar
 *
 */
var MultiMediaCarouselComponent = /** @class */ (function () {
    function MultiMediaCarouselComponent() {
        /*
        Properties
        name : has-details
        datatype :  boolean
        version : 4.0 onwards
        default : none
        description : Provide a embedded view for more information on the media
        
        */
        this.hasDetail = true;
        /*
        Events
        name : onVideoLoad
        datatype : none
        version : none
        default : none
        description :
        */
        this.onVideoLoad = new core.EventEmitter();
        this.right = false;
        this.left = false;
        this.elementId = 'multi-media-ee-carousel-' + Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.carouselStyle == null) {
            this.carouselStyle = 'horizontal';
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['data'] != null) {
            this.data = changes['data'].currentValue;
        }
    };
    /**
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.leftClick = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ts = document.getElementById(this.elementId);
        ts.scrollLeft -= 350;
        if (ts.scrollLeft === 0) {
            document.getElementById(this.elementId + 'leftarrow').style.visibility = 'hidden';
        }
        document.getElementById(this.elementId + 'rightarrow').style.visibility = 'visible';
    };
    /**
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.rightClick = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ts = document.getElementById(this.elementId);
        ts.scrollLeft += 350;
        if ((ts.scrollWidth - ts.offsetWidth - ts.scrollLeft) <= 0) {
            document.getElementById(this.elementId + 'rightarrow').style.visibility = 'hidden';
        }
        document.getElementById(this.elementId + 'leftarrow').style.visibility = 'visible';
    };
    /**
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.closeDetailPage = /**
     * @return {?}
     */
    function () {
        this.data.forEach(function (item) {
            item.selected = null;
        });
        this.displayDetail = false;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.openDetailsSection = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.videoUrl = item.video;
        this.currentDetailsImagePath = item.details_img;
        this.currentDetailsTitle = item.title;
        this.currentDetailsDesc = item.desc;
        this.currentContent = item.content;
        this.seasonNo = item.seasonNo;
        this.matchPercentage = item.matchPercentage;
        this.ageLimit = item.ageLimit;
        this.releaseYear = item.releaseYear;
        this.data.forEach(function (item1) {
            item1.selected = null;
        });
        item.selected = 'selected';
        this.displayDetail = true;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.loadVideo = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.onVideoLoad.emit(item.video);
    };
    /**
     * @param {?} video
     * @return {?}
     */
    MultiMediaCarouselComponent.prototype.playVideo = /**
     * @param {?} video
     * @return {?}
     */
    function (video) {
        this.onVideoLoad.emit(video);
    };
    MultiMediaCarouselComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-media-ee-carousel',
                    template: "\n    <div class=\"section-header\" style=\"z-index: 1;\">{{title}}</div>\n    <div class=\"contain row\">\n\n      <div class=\"left-arrow\" [attr.id]=\"elementId+'leftarrow'\" style=\"cursor: pointer\"> <div [ngClass]=\"{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}\" (click)=\"leftClick();\"><em class=\"fa fa-chevron-left fa-2x\" aria-hidden=\"true\"></em></div> </div>\n\n      <div class=\"row1\" [attr.id]=\"elementId\">\n        <div class=\"row__inner\">\n          <ng-container *ngIf=\"data\">\n            <div class=\"tile\" *ngFor=\"let item of data;let i = index\">\n              <div class=\"tile__media\" (click)=\"loadVideo(item)\">\n                <img alt=\"title\" class=\"tile__img\" [attr.src]=\"item.img\" />\n              </div>\n              <div class=\"{{item.selected}}\">\n                <em [ngStyle]=\"{'visibility':item.selected ? 'visible':'hidden'}\" class=\"fa fa-caret-down\" aria-hidden=\"false\"></em>\n              </div>\n              <div [ngClass]=\"{'tile__details' : carouselStyle=='horizontal','tile__details_v' : carouselStyle=='vertical'}\">\n                <div class=\"textonly\">\n\n                  <div class=\"playpanel\">\n                    <div style=\"cursor: pointer\" (click)=\"loadVideo(item)\" class=\"playbutton\"><em class=\"fa fa-play\" aria-hidden=\"true\"></em></div>\n                  </div>\n\n                  <span class=\"carousel-title\" *ngIf=\"item.title\">{{item.title}}</span><br>\n                  <span class=\"match\">{{item.matchPercentage}} Match</span> {{item.releaseYear}} <span class=\"age mini\">{{item.ageLimit}}</span> {{item.seasonNo}}<br>\n                  <div class=\"subtitle\">{{item.desc}}</div>\n\n                </div>\n                <div class=\"actionpanel\"   *ngIf=\"item.content\">\n                  <div style=\"cursor: pointer;\" (click)=\"openDetailsSection(item)\"><em class=\"fa fa-chevron-down fa-2x\" aria-hidden=\"true\"></em></div>\n                </div>\n\n\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n\n      <ng-container *ngIf=\"carouselStyle=='horizontal'\">\n        <div class=\"right-arrow\" [attr.id]=\"elementId+'rightarrow'\" style=\"cursor: pointer\"> <div [ngClass]=\"{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}\" (click)=\"rightClick();\"><em class=\"fa fa-chevron-right fa-2x\" aria-hidden=\"true\"></em></div></div>\n      </ng-container>\n\n      <ng-container *ngIf=\"carouselStyle=='vertical'\">\n        <div class=\"right-arrow-tall\" [attr.id]=\"elementId+'rightarrow'\" style=\"cursor: pointer\"> <div [ngClass]=\"{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}\" (click)=\"rightClick();\"><em class=\"fa fa-chevron-right fa-2x\" aria-hidden=\"true\"></em></div></div>\n      </ng-container>\n\n    </div>\n\n    <div [attr.id]=\"elementId+'carousel-detail-content'\" class=\"collapse\" *ngIf=\"hasDetail && displayDetail\">\n      <amexio-ee-content [bg-image-url]=\"currentDetailsImagePath\"\n                         [title]=\"currentDetailsTitle\" [description]=\"currentDetailsDesc\"\n                         [contents]=\"currentContent\" [link]=\"videoUrl\"\n                         (onWatchClick)=\"playVideo(videoUrl)\" (onCloseClick)=\"closeDetailPage()\"\n                         [rate]=\"rate\" [watch]=\"true\" [my-list]=\"true\"\n                         [close]=\"true\" [season-no]=\"seasonNo\" [release-year]=\"releaseYear\" [age-limit]=\"ageLimit\" [match-percentage]=\"matchPercentage\"\n      ></amexio-ee-content>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    MultiMediaCarouselComponent.ctorParameters = function () { return []; };
    MultiMediaCarouselComponent.propDecorators = {
        data: [{ type: core.Input }],
        carouselStyle: [{ type: core.Input, args: ['carousel-type',] }],
        hasDetail: [{ type: core.Input, args: ['has-details',] }],
        title: [{ type: core.Input }],
        onVideoLoad: [{ type: core.Output }]
    };
    return MultiMediaCarouselComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ContentComponent = /** @class */ (function () {
    function ContentComponent() {
        /*
        Properties
        name : watch
        datatype :  any
        version : 4.0 onwards
        default : false
        description : Enable watch button.*/
        this.enableWatch = false;
        /*
        Properties
        name : my-list
        datatype : none
        version : 4.0 onwards
        default : false
        description : Enable MyList button.
        */
        this.enableMyList = false;
        /*
        Events
        name :  onWatchClick
        datatype :  none
        version : none
        default : none
        description : Get watch button click.
        */
        this.onWatchClick = new core.EventEmitter();
        /*
        Properties
        name : onAddListClick
        datatype :  none
        version : none
        default : none
        description : Get add list button click.
        
        */
        this.onAddListClick = new core.EventEmitter();
        /*
        Properties
        name : onLikeClick
        datatype :  none
        version : none
        default : none
        description : Get like click.
        
        */
        this.onLikeClick = new core.EventEmitter();
        /*
        Properties
        name : onUnlikeLikeClick
        datatype :  none
        version : none
        default : none
        description : Get unlike click.
        
        */
        this.onUnlikeLikeClick = new core.EventEmitter();
        /*
        Properties
        name : onCloseClick
        datatype :  any
        version :none
        default : none
        description : Get close content click.
        
        */
        this.onCloseClick = new core.EventEmitter();
        this.closeEnable = false;
        this.smallScreen = false;
    }
    /**
     * @return {?}
     */
    ContentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (window.innerWidth < 768) {
            this.smallScreen = true;
            this.size = 'small';
        }
        else {
            this.smallScreen = false;
            this.size = 'default';
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["videoLink"] && !changes["videoLink"].isFirstChange()) {
            this.videoLink = changes["videoLink"].currentValue;
        }
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.playVideo = /**
     * @return {?}
     */
    function () {
        this.onWatchClick.emit(this.videoLink);
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.addToList = /**
     * @return {?}
     */
    function () {
        this.overviewData = {
            'title': this.title, 'description': this.description, 'Video Link': this.videoLink, 'rate': this.rate,
        };
        this.onAddListClick.emit(this.overviewData);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ContentComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target.innerWidth < 995) {
            this.size = 'small';
            this.smallScreen = true;
        }
        else {
            this.size = 'default';
            this.smallScreen = false;
        }
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.getClassName = /**
     * @return {?}
     */
    function () {
        if (this.smallScreen) {
            return 'button-small';
        }
        else {
            return 'button';
        }
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.unlikeClick = /**
     * @return {?}
     */
    function () {
        this.overviewData = {
            title: this.title, rate: this.rate,
        };
        this.onUnlikeLikeClick.emit(this.overviewData);
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.likeClick = /**
     * @return {?}
     */
    function () {
        this.overviewData = {
            title: this.title, rate: this.rate,
        };
        this.onLikeClick.emit(this.overviewData);
    };
    /**
     * @return {?}
     */
    ContentComponent.prototype.closeDetailPage = /**
     * @return {?}
     */
    function () {
        this.onCloseClick.emit(this.title);
    };
    ContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-ee-content', template: "\n    <div class=\"main-content\" [ngStyle]=\"{'background-image':'url('+bgImgUrl+')'}\" (window:resize)=\"onResize($event)\">\n       <span *ngIf=\"closeEnable\" class=\"close-button\">\n        <i class=\"fa fa-times fa-lg\" (click)=\"closeDetailPage()\" aria-hidden=\"true\"></i>\n      </span>\n      <div class=\"content-area\" >\n        <span class=\"content-title\">{{title}}</span><br>\n        <span><span class=\"match\" *ngIf=\"matchPercentage\">{{matchPercentage}} Match</span> {{releaseYear}} <span\n          class=\"age\" *ngIf=\"ageLimit\">{{ageLimit}}</span> {{seasonNo}}</span><br>\n        <p style=\"word-wrap: break-word;\">{{description}}<br>\n\n        <ng-container *ngIf=\"contents\">\n              <span>\n                <li *ngFor=\"let data of contents\"><strong\n                  style=\"color: #999;\">{{data.key}}: </strong> <strong>  {{data.value}}</strong></li><br>\n          </span>\n        </ng-container>\n        <ul class=\"inline-list\">\n          <li *ngIf=\"enableWatch\">\n            <span class=\"content-button\" (click)=\"playVideo()\">\n            <i class=\"fa fa-play\"></i> &nbsp;&nbsp; Play</span>\n            <!-- <amexio-ee-btn [cClass]=\"'buttoncustom'\"\n            [label]=\"'Play'\" [type]=\"'danger'\" [icon]=\"'fa fa-play'\"\n            [tooltipMessage]=\"'play'\" [size]=\"size\" (onClick)=\"playVideo()\">\n            </amexio-ee-btn> -->\n          </li>\n          <li *ngIf=\"enableMyList\">\n            <span class=\"content-button\" (click)=\"addToList()\">\n            <i class=\"fa fa-plus\"></i>&nbsp;&nbsp; MY LIST</span>\n            <!-- <amexio-ee-btn [cClass]=\"'secondarybutton'\" [label]=\"'MY LIST'\"\n            [icon]=\"'fa fa-plus'\" [type]=\"'secondary'\" [tooltipMessage]=\"'My List'\"\n            [size]=\"size\" (onClick)=\"addToList()\"></amexio-ee-btn> -->\n          </li>\n          <li>\n            <a style=\"color: white!important;\" [ngClass]=\"getClassName()\" (click)=\"likeClick()\"><i class=\"fa fa-thumbs-o-up fa-lg\"\n                                                                   aria-hidden=\"true\"></i>\n            </a>\n          </li>\n          <li><a style=\"color: white!important;\" [ngClass]=\"getClassName()\" (click)=\"unlikeClick()\"><i class=\"fa fa-thumbs-o-down fa-lg \"\n                                                                       aria-hidden=\"true\"></i></a></li>\n\n        </ul>\n        <ng-container *ngIf=\"rate && max\">\n          <amexio-rating-input [(ngModel)]=\"rate\"\n                               [max]=\"max\" name=\"rate\"\n                               [read-only]=\"isReadonly\">\n          </amexio-rating-input>\n        </ng-container>\n      </div>\n    </div>",
                },] },
    ];
    /** @nocollapse */
    ContentComponent.ctorParameters = function () { return []; };
    ContentComponent.propDecorators = {
        bgImgUrl: [{ type: core.Input, args: ['bg-image-url',] }],
        title: [{ type: core.Input }],
        description: [{ type: core.Input }],
        contents: [{ type: core.Input }],
        videoLink: [{ type: core.Input, args: ['link',] }],
        rate: [{ type: core.Input }],
        max: [{ type: core.Input }],
        isReadonly: [{ type: core.Input }],
        enableWatch: [{ type: core.Input, args: ['watch',] }],
        enableMyList: [{ type: core.Input, args: ['my-list',] }],
        ageLimit: [{ type: core.Input, args: ['age-limit',] }],
        releaseYear: [{ type: core.Input, args: ['release-year',] }],
        seasonNo: [{ type: core.Input, args: ['season-no',] }],
        matchPercentage: [{ type: core.Input, args: ['match-percentage',] }],
        closeEnable: [{ type: core.Input, args: ['close',] }],
        onWatchClick: [{ type: core.Output }],
        onAddListClick: [{ type: core.Output }],
        onLikeClick: [{ type: core.Output }],
        onUnlikeLikeClick: [{ type: core.Output }],
        onCloseClick: [{ type: core.Output }]
    };
    return ContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 18/1/18.
 */
var AmexioYoutubePlayerComponent = /** @class */ (function () {
    function AmexioYoutubePlayerComponent(sanitizer) {
        this.sanitizer = sanitizer;
        /*
        Events
        name :onCloseVideoPlayer
        datatype : none
        version : none
        default : none
        description : it is fired on video player close event
        
        */
        this.onCloseVideoPlayer = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioYoutubePlayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.height == null) {
            this.height = 450;
        }
        if (this.width == null) {
            this.width = 98;
            this.closePadding = 97;
        }
        else {
            this.closePadding = this.width - 1;
        }
        if (this.url != null) {
            this.sanitizedUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.url);
        }
    };
    /**
     * @return {?}
     */
    AmexioYoutubePlayerComponent.prototype.routeBackToApp = /**
     * @return {?}
     */
    function () {
        this.onCloseVideoPlayer.emit(this.url);
    };
    AmexioYoutubePlayerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'amexio-ee-youtube-player', template: "\n    <div>\n      <span class=\"close-button\" [ngStyle]=\"{'padding-left':closePadding+'%'}\">\n        <i class=\"fa fa-times fa-lg\" (click)=\"routeBackToApp()\" aria-hidden=\"true\"></i>\n      </span>\n      <div class=\"text-center\">\n        <iframe [height]=\"height+'px'\" [width]=\"width+'%'\"\n                [src]=\"sanitizedUrl\" frameborder=\"0\"\n                allowfullscreen>\n        </iframe>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    AmexioYoutubePlayerComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    AmexioYoutubePlayerComponent.propDecorators = {
        url: [{ type: core.Input }],
        height: [{ type: core.Input }],
        width: [{ type: core.Input }],
        onCloseVideoPlayer: [{ type: core.Output }]
    };
    return AmexioYoutubePlayerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ENTERPRISE_COMPONENTS = [
    MultiMediaCarouselComponent,
    ContentComponent,
    AmexioYoutubePlayerComponent,
];
var AmexioEnterpriseModule = /** @class */ (function () {
    function AmexioEnterpriseModule() {
    }
    /**
     * @return {?}
     */
    AmexioEnterpriseModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmexioEnterpriseModule,
            providers: [CommonDataService, DeviceQueryService],
        };
    };
    AmexioEnterpriseModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        AmexioFormsModule,
                        HttpClientModule,
                    ],
                    exports: ENTERPRISE_COMPONENTS,
                    declarations: ENTERPRISE_COMPONENTS,
                    providers: [CommonDataService, DeviceQueryService],
                },] },
    ];
    return AmexioEnterpriseModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

exports.AmexioWidgetModule = AmexioWidgetModule;
exports.CommonDataService = CommonDataService;
exports.DeviceQueryService = DeviceQueryService;
exports.IconLoaderService = IconLoaderService;
exports.Icon = Icon;
exports.AmexioCreditCardModel = AmexioCreditCardModel;
exports.GridConfig = GridConfig;
exports.GridConstants = GridConstants;
exports.AmexioFormsModule = AmexioFormsModule;
exports.LoadRecaptchaService = LoadRecaptchaService;
exports.COMPONENT_CLASS_MAP = COMPONENT_CLASS_MAP;
exports.AmexioButtonComponent = AmexioButtonComponent;
exports.AmexioButtonGroupComponent = AmexioButtonGroupComponent;
exports.AmexioNavModule = AmexioNavModule;
exports.AmexioSideNavComponent = AmexioSideNavComponent;
exports.SideNavNodeComponent = SideNavNodeComponent;
exports.AmexioNavBarComponent = AmexioNavBarComponent;
exports.KEY_CODE_notify = KEY_CODE_notify;
exports.AmexioNotificationComponent = AmexioNotificationComponent;
exports.AmexioLayoutModule = AmexioLayoutModule;
exports.AmexioAccordionHeaderComponent = AmexioAccordionHeaderComponent;
exports.AmexioAccordionTabComponent = AmexioAccordionTabComponent;
exports.AmexioAccordionComponent = AmexioAccordionComponent;
exports.AccordionService = AccordionService;
exports.AmexioBorderLayoutItemComponent = AmexioBorderLayoutItemComponent;
exports.AmexioBorderLayoutComponent = AmexioBorderLayoutComponent;
exports.AmexioBoxComponent = AmexioBoxComponent;
exports.AmexioCardComponent = AmexioCardComponent;
exports.AmexioColumnComponent = AmexioColumnComponent;
exports.AmexioGridComponent = AmexioGridComponent;
exports.AmexioGridItemComponent = AmexioGridItemComponent;
exports.AmexioRowComponent = AmexioRowComponent;
exports.AmexioGridLayoutService = AmexioGridLayoutService;
exports.AmexioDataModule = AmexioDataModule;
exports.AmexioListBoxComponent = AmexioListBoxComponent;
exports.AmexioTreeViewComponent = AmexioTreeViewComponent;
exports.AmexioPaginatorComponent = AmexioPaginatorComponent;
exports.TreeDataTableComponent = TreeDataTableComponent;
exports.AmexioDashBoardModule = AmexioDashBoardModule;
exports.DashboardLoaderService = DashboardLoaderService;
exports.DashBoardTitleComponent = DashBoardTitleComponent;
exports.DataPointCenterComponent = DataPointCenterComponent;
exports.DataPointsComponent = DataPointsComponent;
exports.DataPointEastComponent = DataPointEastComponent;
exports.DataPointNorthComponent = DataPointNorthComponent;
exports.DataPointSouthComponent = DataPointSouthComponent;
exports.DataPointWestComponent = DataPointWestComponent;
exports.GaugeChartComponent = GaugeChartComponent;
exports.AmexioChartsModule = AmexioChartsModule;
exports.AreaChartComponent = AreaChartComponent;
exports.BarChartComponent = BarChartComponent;
exports.BubbleChartComponent = BubbleChartComponent;
exports.CandlestickChartComponent = CandlestickChartComponent;
exports.CandlestickWaterfallChartComponent = CandlestickWaterfallChartComponent;
exports.ChartAreaComponent = ChartAreaComponent;
exports.ChartLegendComponent = ChartLegendComponent;
exports.ChartTitleComponent = ChartTitleComponent;
exports.ColumnChartComponent = ColumnChartComponent;
exports.ComboChartComponent = ComboChartComponent;
exports.DonutChartComponent = DonutChartComponent;
exports.GanttChartComponent = GanttChartComponent;
exports.HistogramChartComponent = HistogramChartComponent;
exports.HorizontalAxisComponent = HorizontalAxisComponent;
exports.LineChartComponent = LineChartComponent;
exports.PieChartComponent = PieChartComponent;
exports.ScatterChartComponent = ScatterChartComponent;
exports.TimeLineChartComponent = TimeLineChartComponent;
exports.VerticalAxisComponent = VerticalAxisComponent;
exports.ChartLoaderService = ChartLoaderService;
exports.AmexioMapModule = AmexioMapModule;
exports.MapPropertiesComponent = MapPropertiesComponent;
exports.GeoChartComponent = GeoChartComponent;
exports.TreeMapComponent = TreeMapComponent;
exports.MapTitleComponent = MapTitleComponent;
exports.MapLoaderService = MapLoaderService;
exports.AmexioPaneModule = AmexioPaneModule;
exports.AmexioFooterComponent = AmexioFooterComponent;
exports.AmexioBodyComponent = AmexioBodyComponent;
exports.AmexioCarouselComponent = AmexioCarouselComponent;
exports.AmexioTemplateDirective = AmexioTemplateDirective;
exports.AmexioTemplateWrapperDirective = AmexioTemplateWrapperDirective;
exports.AmexiodialoguePaneComponent = AmexiodialoguePaneComponent;
exports.AmexioFieldSetComponent = AmexioFieldSetComponent;
exports.AmexioFormActionComponent = AmexioFormActionComponent;
exports.AmexioFormBodyComponent = AmexioFormBodyComponent;
exports.AmexioFormComponent = AmexioFormComponent;
exports.AmexioFormHeaderComponent = AmexioFormHeaderComponent;
exports.AmexioHeaderComponent = AmexioHeaderComponent;
exports.AmexioPanelHeaderComponent = AmexioPanelHeaderComponent;
exports.AmexioStepsComponent = AmexioStepsComponent;
exports.StepBlockComponent = StepBlockComponent;
exports.AmexioRightVerticalTabComponent = AmexioRightVerticalTabComponent;
exports.AmexioTabActionComponent = AmexioTabActionComponent;
exports.TOP_COMPONENT_CLASS_MAP = TOP_COMPONENT_CLASS_MAP;
exports.BOTTOM_COMPONENT_CLASS_MAP = BOTTOM_COMPONENT_CLASS_MAP;
exports.AmexioTabComponent = AmexioTabComponent;
exports.AmexioTabPillComponent = AmexioTabPillComponent;
exports.AmexioVerticalTabComponent = AmexioVerticalTabComponent;
exports.AmexiotimelineComponent = AmexiotimelineComponent;
exports.AmexiotimelineeventComponent = AmexiotimelineeventComponent;
exports.KEY_CODE_window = KEY_CODE_window;
exports.AmexioWindowPaneComponent = AmexioWindowPaneComponent;
exports.AmexioWindowHeaderComponent = AmexioWindowHeaderComponent;
exports.AmexioEnterpriseModule = AmexioEnterpriseModule;
exports.MultiMediaCarouselComponent = MultiMediaCarouselComponent;
exports.ContentComponent = ContentComponent;
exports.AmexioYoutubePlayerComponent = AmexioYoutubePlayerComponent;
exports.AmexioMediaModule = AmexioMediaModule;
exports.AmexioVideoPlayerComponent = AmexioVideoPlayerComponent;
exports.ɵk = BaseInput;
exports.ɵi = BaseFormValidator;
exports.ɵn = DropDownListComponent;
exports.ɵj = EventBaseComponent;
exports.ɵo = AmexioInputHelperComponent;
exports.ɵm = ListBaseComponent;
exports.ɵbg = ListBaseDatepickerComponent;
exports.ɵe = ValueAccessorBase;
exports.ɵcn = AmexioGridColumnComponent;
exports.ɵcm = AmexioDatagridComponent;
exports.ɵcp = DataGridFilterComponent;
exports.ɵco = AmexioDataGridHeaderComponent;
exports.ɵcv = AmexioDataIconComponent;
exports.ɵcw = AmexioItemSelectorComponent;
exports.ɵcq = AmexioProgressMultiBarComponent;
exports.ɵcr = AmexioProgressBarComponent;
exports.ɵcu = AmexioFilterTreeComponent;
exports.ɵcs = HorizontalTreeViewNodeComponent;
exports.ɵct = HorizontalTreeViewComponent;
exports.ɵbr = AmexioSearchAdvanceComponent;
exports.ɵbq = SearchboxtoolComponent;
exports.ɵw = AmexioButtonDropdownComponent;
exports.ɵx = AmexioButtonDropDownItemComponent;
exports.ɵy = AmexioSpiltButtonDropdownComponent;
exports.ɵba = CheckboxComponent;
exports.ɵz = AmexioCheckBoxGroupComponent;
exports.ɵf = AmexioCheckBoxComponent;
exports.ɵbv = AmexioChipComponent;
exports.ɵbw = AmexioChipsComponent;
exports.ɵbu = AmexioCreditcardComponent;
exports.ɵbf = AmexioDateTimePickerComponent;
exports.ɵbm = AmexioDropDownMenuComponent;
exports.ɵbl = AmexioDropDownitemsComponent;
exports.ɵh = AmexioDropDownComponent;
exports.ɵq = AmexioEmailInputComponent;
exports.ɵbh = AmexioFileUploadComponent;
exports.ɵbj = AmexioFloatingButtonComponent;
exports.ɵbk = AmexioFloatingGroupButtonComponent;
exports.ɵg = AmexioFormValidator;
exports.ɵbb = AmexioFormIconComponent;
exports.ɵbi = AmexioLabelComponent;
exports.ɵr = AmexioNumberInputComponent;
exports.ɵs = AmexioPasswordComponent;
exports.ɵp = AmexioRadioGroupComponent;
exports.ɵv = AmexioRatingComponent;
exports.ɵbs = RecaptchaComponent;
exports.ɵbc = AmexioSliderComponent;
exports.ɵbd = DomHandler;
exports.ɵbt = AmexioSpinnerComponent;
exports.ɵbe = AmexioTagsInputComponent;
exports.ɵt = AmexioTextAreaComponent;
exports.ɵd = AmexioTextInputComponent;
exports.ɵu = AmexioToggleComponent;
exports.ɵbn = ToolbarComponent;
exports.ɵbp = ToolBarActionComponent;
exports.ɵbo = ToolbaroneComponent;
exports.ɵl = AmexioTypeAheadComponent;
exports.ɵb = AmexioLayoutComponent;
exports.ɵc = AmexioLayoutItemComponent;
exports.ɵa = AmexioIconLayoutComponent;
exports.ɵby = AmexioImageComponent;
exports.ɵch = AmexioBreadcrumbComponent;
exports.ɵcd = DockbarComponent;
exports.ɵce = DockedBarToolComponent;
exports.ɵcg = AmexioNavIconPaneComponent;
exports.ɵcf = AmexioMenuBarComponent;
exports.ɵca = AmexioNavActionComponent;
exports.ɵbz = AmexioNavItemComponent;
exports.ɵcc = AmexioNavMenuComponent;
exports.ɵcb = AmexioNavTextFieldComponent;
exports.ɵci = AmexioSideNavInnerNodeComponent;
exports.ɵcl = AmexioFormGroupDirective;
exports.ɵck = AmexioIconPaneComponent;
exports.ɵcj = AmexioPanelComponent;
exports.ɵbx = FilterPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=amexio-ng-extensions.umd.js.map
